/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 48764:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(24782)
const ieee754 = __webpack_require__(78898)
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

const K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ 81409:
/***/ ((module) => {

"use strict";

var singleComment = 1;
var multiComment = 2;

function stripWithoutWhitespace() {
	return '';
}

function stripWithWhitespace(str, start, end) {
	return str.slice(start, end).replace(/\S/g, ' ');
}

module.exports = function (str, opts) {
	opts = opts || {};

	var currentChar;
	var nextChar;
	var insideString = false;
	var insideComment = false;
	var offset = 0;
	var ret = '';
	var strip = opts.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;

	for (var i = 0; i < str.length; i++) {
		currentChar = str[i];
		nextChar = str[i + 1];

		if (!insideComment && currentChar === '"') {
			var escaped = str[i - 1] === '\\' && str[i - 2] !== '\\';
			if (!escaped) {
				insideString = !insideString;
			}
		}

		if (insideString) {
			continue;
		}

		if (!insideComment && currentChar + nextChar === '//') {
			ret += str.slice(offset, i);
			offset = i;
			insideComment = singleComment;
			i++;
		} else if (insideComment === singleComment && currentChar + nextChar === '\r\n') {
			i++;
			insideComment = false;
			ret += strip(str, offset, i);
			offset = i;
			continue;
		} else if (insideComment === singleComment && currentChar === '\n') {
			insideComment = false;
			ret += strip(str, offset, i);
			offset = i;
		} else if (!insideComment && currentChar + nextChar === '/*') {
			ret += str.slice(offset, i);
			offset = i;
			insideComment = multiComment;
			i++;
			continue;
		} else if (insideComment === multiComment && currentChar + nextChar === '*/') {
			i++;
			insideComment = false;
			ret += strip(str, offset, i + 1);
			offset = i + 1;
			continue;
		}
	}

	return ret + (insideComment ? strip(str.substr(offset)) : str.substr(offset));
};


/***/ }),

/***/ 35416:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "HttpCancellationError": () => (/* reexport */ HttpCancellationError),
  "HttpClient": () => (/* reexport */ HttpClient),
  "HttpClientAuthenticationError": () => (/* reexport */ HttpClientAuthenticationError),
  "HttpClientError": () => (/* reexport */ HttpClientError),
  "HttpClientResponseError": () => (/* reexport */ HttpClientResponseError),
  "HttpError": () => (/* reexport */ HttpError)
});

// EXTERNAL MODULE: ../node_modules/node-fetch/browser.js
var browser = __webpack_require__(40759);
var browser_default = /*#__PURE__*/__webpack_require__.n(browser);
// EXTERNAL MODULE: ../node_modules/abort-controller/browser.js
var abort_controller_browser = __webpack_require__(30473);
;// CONCATENATED MODULE: ../http-client/lib/src/fetch.js


const __mock_value = {
    fetch: undefined,
    Request: undefined,
    AbortController: undefined,
};
const { fetch: browserFetch, Request: BrowserRequest, AbortController: BrowserAbortController, } = typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : __mock_value;
var fetch = browserFetch !== null && browserFetch !== void 0 ? browserFetch : (browser_default());
var Request = BrowserRequest !== null && BrowserRequest !== void 0 ? BrowserRequest : browser.Request;
var AbortController = BrowserAbortController !== null && BrowserAbortController !== void 0 ? BrowserAbortController : abort_controller_browser.AbortController;
//# sourceMappingURL=fetch.js.map
;// CONCATENATED MODULE: ../http-client/lib/src/toAbortSignal.js

function toAbortSignal(cancellationToken) {
    const controller = new AbortController();
    if (cancellationToken.isCancellationRequested) {
        controller.abort();
    }
    const disposable = cancellationToken.onCancellationRequested(() => {
        disposable.dispose();
        controller.abort();
    });
    return controller.signal;
}
//# sourceMappingURL=toAbortSignal.js.map
// EXTERNAL MODULE: ../node_modules/vscode-jsonrpc/lib/main.js
var main = __webpack_require__(83730);
;// CONCATENATED MODULE: ../http-client/lib/src/createTimeoutTokenSource.js

function createTimeoutTokenSource(timeout) {
    const tokenSource = new main.CancellationTokenSource();
    const timeoutHandle = setTimeout(() => {
        tokenSource.cancel();
    }, timeout);
    return {
        cancel: tokenSource.cancel.bind(tokenSource),
        dispose() {
            clearTimeout(timeoutHandle);
            tokenSource.dispose();
        },
        token: tokenSource.token,
    };
}
//# sourceMappingURL=createTimeoutTokenSource.js.map
;// CONCATENATED MODULE: ../http-client/lib/src/Errors.js
/**
 * Base error for the HttpClient.
 */
class HttpError extends Error {
    constructor() {
        super(...arguments);
        this.errorType = 'HttpError';
    }
}
class HttpClientError extends HttpError {
    constructor(reason) {
        super(reason);
        this.errorType = 'HttpClientError';
        if (reason instanceof HttpClientError) {
            return reason;
        }
        let message;
        if (reason instanceof Error) {
            message = reason.message;
        }
        else if (typeof reason === 'string') {
            message = reason;
        }
        else {
            message = '';
        }
        this.message = message;
        this.name = 'HttpClientError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, HttpClientError);
        }
    }
}
class HttpClientAuthenticationError extends HttpError {
    constructor(response) {
        super(`Request failed with status code ${response.status}.`);
        this.response = response;
        this.errorType = 'HttpClientAuthenticationError';
        this.name = 'HttpClientAuthenticationError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, HttpClientAuthenticationError);
        }
    }
}
class HttpClientResponseError extends HttpError {
    constructor(response) {
        super(`Request failed with status code ${response.status}.`);
        this.response = response;
        this.errorType = 'HttpClientResponseError';
        this.name = 'HttpClientResponseError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, HttpClientResponseError);
        }
    }
}
class HttpCancellationError extends HttpError {
    constructor(reason = undefined) {
        super(reason);
        this.errorType = 'HttpCancellationError';
        this.name = 'CancellationError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, HttpCancellationError);
        }
    }
}
//# sourceMappingURL=Errors.js.map
;// CONCATENATED MODULE: ../http-client/lib/src/FetchRequest.js




// TODO: Implement disposal of requests
class FetchRequest {
    constructor(logger, configuration, request, init, cancellationToken) {
        var _a;
        this.logger = logger;
        this.configuration = configuration;
        this.request = request;
        this.init = init;
        this.cancellationToken = cancellationToken;
        this.retry = 0;
        this.input = this.request instanceof URL ? this.request.toString() : this.request;
        // We extract the method for logging purposes.
        let method = 'GET';
        if (typeof this.input !== 'string') {
            method = this.input.method;
        }
        if ((_a = this.init) === null || _a === void 0 ? void 0 : _a.method) {
            method = this.init.method;
        }
        this.method = method;
        // We also extract the url
        this.url = typeof this.input === 'string' ? this.input : this.input.url;
    }
    then(onfulfilled, onrejected) {
        return this.fetch().then(onfulfilled, onrejected);
    }
    async text() {
        const response = await this.fetchWithCancellationCheck();
        return await response.text();
    }
    async json() {
        const response = await this.fetchWithCancellationCheck();
        return await response.json();
    }
    async arrayBuffer() {
        const response = await this.fetchWithCancellationCheck();
        return await response.arrayBuffer();
    }
    async blob() {
        const response = await this.fetchWithCancellationCheck();
        return await response.blob();
    }
    async formData() {
        const response = await this.fetchWithCancellationCheck();
        return await response.formData();
    }
    async value() {
        return (await this.json());
    }
    async fetch() {
        var _a;
        this.logger.verbose(`${this.method} - fetch start`);
        if ((_a = this.cancellationToken) === null || _a === void 0 ? void 0 : _a.isCancellationRequested) {
            throw new HttpCancellationError();
        }
        const transformedRequest = await this.prepareRequest();
        this.ongoingPromise = this.retryRequest(transformedRequest);
        return await this.ongoingPromise;
    }
    async fetchWithCancellationCheck() {
        var _a;
        const response = await this.fetch();
        if ((_a = this.cancellationToken) === null || _a === void 0 ? void 0 : _a.isCancellationRequested) {
            throw new HttpCancellationError();
        }
        return response;
    }
    async makeRequest(request) {
        let response;
        try {
            response = await fetch(request);
            this.logger.verbose(`${this.method} - fetch response. (url=${this.url};status=${response.status})`);
        }
        catch (err) {
            if (err.name === 'AbortError') {
                this.logger.verbose(`${this.method} - fetch cancelled. (url=${this.url};cancelled=true)`);
                throw new HttpCancellationError(err.message);
            }
            this.logger.verbose(`${this.method} - fetch failed. (url=${this.url};reason=${err.message};failed=true)`);
            throw new HttpClientError(err);
        }
        if (this.configuration.throwOnErrorStatus && (response.status === 401 || response.status === 403)) {
            throw new HttpClientAuthenticationError(response);
        }
        if (this.configuration.throwOnErrorStatus && !response.ok) {
            throw new HttpClientResponseError(response);
        }
        return response;
    }
    async retryRequest(originalRequest) {
        try {
            return await this.makeRequest(originalRequest);
        }
        catch (err) {
            if (!this.shouldRetry(err)) {
                throw err;
            }
            const transformedRequest = await this.prepareRetryRequest(originalRequest, err.response);
            await this.delayRetry(err);
            this.retry++;
            return await this.retryRequest(transformedRequest);
        }
    }
    shouldRetry(error) {
        if (this.retry >= this.configuration.retryCount) {
            return false;
        }
        if (error instanceof HttpClientResponseError &&
            error.response &&
            this.configuration.retryStatusCodes.includes(error.response.status)) {
            return true;
        }
        return false;
    }
    delayRetry(error) {
        // We'll use the retry count based delay as minimum
        let delay = this.retry * 1000;
        if (error instanceof HttpClientResponseError) {
            const response = error.response;
            // Retry-After header specifies how long to wait after a 503, 429, or 301.
            // The value can either be a number of seconds or a Date.
            //
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
            //
            const retryAfter = response.headers.get('Retry-After');
            if (retryAfter !== null) {
                let after = Number(retryAfter);
                if (!isNaN(after)) {
                    after *= 1000;
                }
                else {
                    after = Math.max(Date.parse(retryAfter) - Date.now(), 0);
                }
                if (!isNaN(after)) {
                    delay = Math.max(delay, after);
                }
            }
        }
        return new Promise((resolve) => {
            // tslint:disable-next-line: no-string-based-set-timeout
            setTimeout(resolve, delay);
        });
    }
    async prepareRequest() {
        var _a;
        let request = new Request(this.input, Object.assign({ credentials: 'same-origin' }, this.init));
        if (this.configuration.beforeRequest) {
            request = await this.configuration.beforeRequest(request);
        }
        // We create new timeout cancellation token per retry
        const cancellationToken = (_a = this.cancellationToken) !== null && _a !== void 0 ? _a : createTimeoutTokenSource(this.configuration.timeout).token;
        return new Request(request, { signal: toAbortSignal(cancellationToken) });
    }
    async prepareRetryRequest(originalRequest, requestError) {
        var _a;
        let transformedRequest = originalRequest;
        if (this.configuration.beforeRetry) {
            const beforeRetryHookResult = await this.configuration.beforeRetry(originalRequest, requestError, this.retry);
            if (Array.isArray(beforeRetryHookResult)) {
                this.retry = beforeRetryHookResult[1];
                transformedRequest = beforeRetryHookResult[0];
            }
            else {
                transformedRequest = beforeRetryHookResult;
            }
        }
        // We create new timeout cancellation token per retry
        const cancellationToken = (_a = this.cancellationToken) !== null && _a !== void 0 ? _a : createTimeoutTokenSource(this.configuration.timeout).token;
        return new Request(transformedRequest, { signal: toAbortSignal(cancellationToken) });
    }
}
//# sourceMappingURL=FetchRequest.js.map
;// CONCATENATED MODULE: ../http-client/lib/src/http-client.js

const globals = {
    requestNumber: 1,
};
const defaultConfiguration = {
    timeout: 30 * 1000,
    throwOnErrorStatus: true,
    beforeRequest: undefined,
    beforeRetry: undefined,
    retryCount: 2,
    retryStatusCodes: [429, 500, 503],
};
class HttpClient {
    constructor(logger, configuration = {}) {
        this.logger = logger;
        this.configuration = Object.assign(Object.assign({}, defaultConfiguration), configuration);
    }
    fetch(input, init, cancellationToken) {
        return new FetchRequest(this.logger.withName(`FetchRequest:${globals.requestNumber++}`), this.configuration, input, init, cancellationToken);
    }
    method(method, input, init, cancellationToken) {
        return this.fetch(input, Object.assign(Object.assign({}, init), { method }), cancellationToken);
    }
    get(input, init, cancellationToken) {
        return this.method('GET', input, init, cancellationToken);
    }
    post(input, init, cancellationToken) {
        return this.method('POST', input, init, cancellationToken);
    }
    put(input, init, cancellationToken) {
        return this.method('PUT', input, init, cancellationToken);
    }
    patch(input, init, cancellationToken) {
        return this.method('PATCH', input, init, cancellationToken);
    }
    head(input, init, cancellationToken) {
        return this.method('HEAD', input, init, cancellationToken);
    }
    delete(input, init, cancellationToken) {
        return this.method('DELETE', input, init, cancellationToken);
    }
}
//# sourceMappingURL=http-client.js.map
;// CONCATENATED MODULE: ../http-client/lib/src/index.js



//# sourceMappingURL=index.js.map

/***/ }),

/***/ 57317:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlobPatternTraceFilter = void 0;
const minimatch = __webpack_require__(5592);
const interfaces_1 = __webpack_require__(51295);
class GlobPatternTraceFilter {
    constructor(globToVerbosity) {
        this.globToVerbosity = globToVerbosity;
        this.traceSourceVerbosityCache = new Map();
    }
    getTraceVerbosity(source) {
        let traceVerbosity = this.traceSourceVerbosityCache.get(source);
        // If we don't have a cached verbosity for this source, find the verbosity and cache it
        if (typeof traceVerbosity === 'undefined') {
            traceVerbosity = 0;
            if (this.globToVerbosity) {
                for (let traceGlob in this.globToVerbosity) {
                    if (minimatch(source, traceGlob)) {
                        traceVerbosity = interfaces_1.LogLevel[this.globToVerbosity[traceGlob]];
                    }
                }
            }
            this.traceSourceVerbosityCache.set(source, traceVerbosity);
        }
        return traceVerbosity;
    }
    shouldTrace(source, logLevel, id) {
        return this.getTraceVerbosity(source) <= logLevel;
    }
}
exports.GlobPatternTraceFilter = GlobPatternTraceFilter;
if (typeof Error.prepareStackTrace === 'function') {
    // Save the stack frames as a property on all errors before preparing the stack trace string.
    const originalPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = function prepareVslsStack(e, s) {
        e.vslsStack = s;
        return originalPrepareStackTrace(e, s);
    };
}
//# sourceMappingURL=GlobalPatternTraceFilter.js.map

/***/ }),

/***/ 43404:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Logger = exports.LoggerBase = void 0;
const LogLevel_1 = __webpack_require__(66991);
/**
 * Base implementation of the ILogger interface.
 */
class LoggerBase {
    constructor(name) {
        this.name = name;
    }
    error(message, ...args) {
        this.log(LogLevel_1.LogLevel.Error, message, ...args);
        return this;
    }
    warning(message, ...args) {
        this.log(LogLevel_1.LogLevel.Warning, message, ...args);
        return this;
    }
    info(message, ...args) {
        this.log(LogLevel_1.LogLevel.Info, message, ...args);
        return this;
    }
    verbose(message, ...args) {
        this.log(LogLevel_1.LogLevel.Debug, message, ...args);
        return this;
    }
    createChild(name) {
        return this.withName(this.name + ':' + name);
    }
}
exports.LoggerBase = LoggerBase;
/**
 * A logger implementation that use a callback to log the values.
 */
class Logger extends LoggerBase {
    constructor(name, logCallback) {
        super(name);
        this.logCallback = logCallback;
    }
    log(logLevel, message, ...args) {
        this.logCallback(logLevel, message, ...args);
        return this;
    }
    withName(name) {
        return new Logger(name, this.logCallback);
    }
}
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map

/***/ }),

/***/ 82857:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoggerSettings = void 0;
const LogValueType_1 = __webpack_require__(83841);
class LoggerSettings {
}
exports.LoggerSettings = LoggerSettings;
/**
 * If disable obfuscation is enabled/disabled.
 */
LoggerSettings.disableObfuscation = false;
LoggerSettings.obfuscateProperties = {
    email: LogValueType_1.LogValueType.Email,
    name: LogValueType_1.LogValueType.Text,
    token: LogValueType_1.LogValueType.Text,
    sessionToken: LogValueType_1.LogValueType.Text,
};
//# sourceMappingURL=LoggerSettings.js.map

/***/ }),

/***/ 99540:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Privacy = void 0;
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
const js_sha256_1 = __webpack_require__(5029);
class Privacy {
    static setKey(privacyKeyBase64) {
        Privacy.privacyKey = privacyKeyBase64;
    }
    static getShortHash(value, length = 8, unkeyed = false) {
        return this.getHash(value, unkeyed).substr(0, length);
    }
    static getHash(value, unkeyed = false) {
        if (!value) {
            return '<null>';
        }
        let hasher;
        if (unkeyed) {
            hasher = js_sha256_1.sha256.create();
        }
        else {
            if (!Privacy.privacyKey) {
                return '<redacted>';
            }
            hasher = js_sha256_1.sha256.hmac.create(Privacy.privacyKey);
        }
        return hasher.update(value).hex();
    }
    /** Get sha256 hash of UTF8 encoded value. Undefined or null value is treated as empty string. */
    static getSha256Hash(value, maxLength) {
        const result = js_sha256_1.sha256
            .create()
            .update(new TextEncoder().encode(value || ''))
            .toString();
        return typeof maxLength === 'number' && maxLength > 0 && result.length > maxLength
            ? result.substr(0, maxLength)
            : result;
    }
}
exports.Privacy = Privacy;
//# sourceMappingURL=Privacy.js.map

/***/ }),

/***/ 65179:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TraceFilters = void 0;
class TraceFilters {
    constructor(filters = []) {
        this.filters = filters;
    }
    shouldTrace(source, logLevel, id) {
        return this.filters.every((t) => t.shouldTrace(source, logLevel, id));
    }
}
exports.TraceFilters = TraceFilters;
//# sourceMappingURL=TraceFilters.js.map

/***/ }),

/***/ 90554:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TraceFormat = void 0;
const dateformat = __webpack_require__(57397);
const path = __webpack_require__(67425);
const Privacy_1 = __webpack_require__(99540);
const LoggerSettings_1 = __webpack_require__(82857);
const LogLevel_1 = __webpack_require__(66991);
const LogValueType_1 = __webpack_require__(83841);
const utils_1 = __webpack_require__(33713);
const renderObjectToString = (object) => {
    if (typeof object === undefined) {
        return '<undefined>';
    }
    if (typeof object === null) {
        return '<null>';
    }
    if (typeof object === 'string') {
        return `"${object}"`;
    }
    if (typeof object === 'number') {
        return `#${object}`;
    }
    if (typeof object === 'boolean') {
        return `${object}`;
    }
    if (object instanceof Symbol) {
        return object.toString();
    }
    if (object instanceof Error) {
        return (0, utils_1.errorToString)(object);
    }
    try {
        return TraceFormat.stringify(object);
    }
    catch (_a) {
        try {
            return object.toString();
        }
        catch (e) {
            return '<unknown type>';
        }
    }
};
class TraceFormat {
    static formatDate(time, mask) {
        return dateformat(time, mask || 'yyyy-mm-dd HH:MM:ss.l ', /*utc*/ true);
    }
    static formatEvent(time, source, logLevel, id, message, ...args) {
        let eventTypeChar;
        switch (logLevel) {
            case LogLevel_1.LogLevel.Critical:
                eventTypeChar = 'C';
                break;
            case LogLevel_1.LogLevel.Error:
                eventTypeChar = 'E';
                break;
            case LogLevel_1.LogLevel.Warning:
                eventTypeChar = 'W';
                break;
            case LogLevel_1.LogLevel.Info:
                eventTypeChar = 'I';
                break;
            case LogLevel_1.LogLevel.Debug:
                eventTypeChar = 'V';
                break;
            default:
                eventTypeChar = '?';
                break;
        }
        const dateString = time === null ? '' : TraceFormat.formatDate(time);
        if (message.length > TraceFormat.maxMessageLength) {
            message = message.substr(0, TraceFormat.maxMessageLength) + '...';
        }
        let line;
        if (id !== 0) {
            line = `[${dateString}${source} ${eventTypeChar}] (${id}) ${message}`;
        }
        else {
            line = `[${dateString}${source} ${eventTypeChar}] ${message}`;
        }
        const renderedObjects = args.map(renderObjectToString).map((str, i) => {
            return `> object #${i}: ${str}`;
        });
        line += renderedObjects.join('\n');
        return line;
    }
    static parseEventId(formattedMessage) {
        let m = formattedMessage.match(/\] \(([0-9]+)\)/);
        return m ? parseInt(m[1], 10) : 0;
    }
    static formatPath(value) {
        if (!value) {
            return '<null>';
        }
        else if (LoggerSettings_1.LoggerSettings.disableObfuscation) {
            return value;
        }
        // Obfuscate the directory and file names, but preserve the extension
        // and whether it's an absolute or relative path.
        const directoryHash = Privacy_1.Privacy.getShortHash(path.dirname(value));
        const extension = path.extname(value);
        const fileHash = Privacy_1.Privacy.getShortHash(path.basename(value, extension));
        const slashIndex = value.replace('\\', '/').indexOf('/');
        if (slashIndex === 2 && value[1] === ':') {
            // Windows style absolute path
            return `<?:${value[2]}${directoryHash}${value[2]}${fileHash}${extension}>`;
        }
        else if (slashIndex === 0) {
            // Unix style absolute path
            return `<${value[0]}${directoryHash}${value[0]}${fileHash}${extension}>`;
        }
        else if (slashIndex > 0) {
            // Relative path
            return `<${directoryHash}${value[slashIndex]}${fileHash}${extension}>`;
        }
        else {
            // Simple file name
            return `<${fileHash}${extension}>`;
        }
    }
    static formatEmail(value) {
        if (!value) {
            return '<null>';
        }
        else if (LoggerSettings_1.LoggerSettings.disableObfuscation) {
            return value;
        }
        const emailHash = Privacy_1.Privacy.getShortHash(value);
        return `<${emailHash.substr(0, 4)}@${emailHash.substr(4)}>`;
    }
    static formatText(value) {
        if (!value) {
            return '<null>';
        }
        else if (LoggerSettings_1.LoggerSettings.disableObfuscation) {
            return value;
        }
        const valueHash = Privacy_1.Privacy.getShortHash(value);
        return `<${value.length}:${valueHash}>`;
    }
    static stringify(value) {
        if (LoggerSettings_1.LoggerSettings.disableObfuscation) {
            return JSON.stringify(value, null, 2);
        }
        return JSON.stringify(value, (key, value) => {
            if (value instanceof Error) {
                return (0, utils_1.errorToString)(value);
            }
            const logValueType = LoggerSettings_1.LoggerSettings.obfuscateProperties[key];
            if (logValueType) {
                switch (logValueType) {
                    case LogValueType_1.LogValueType.Text:
                        return TraceFormat.formatText(value);
                    case LogValueType_1.LogValueType.Email:
                        return TraceFormat.formatEmail(value);
                    case LogValueType_1.LogValueType.Path:
                        return TraceFormat.formatPath(value);
                }
            }
            return value;
        }, 2);
    }
}
exports.TraceFormat = TraceFormat;
TraceFormat.maxMessageLength = 5120;
//# sourceMappingURL=TraceFormat.js.map

/***/ }),

/***/ 49093:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TraceListener = void 0;
const TraceFormat_1 = __webpack_require__(90554);
/**
 * Base class for a listener for events from a TraceSource.
 */
class TraceListener {
    constructor() {
        this.filter = null;
    }
    traceEvent(source, logLevel, id, message, ...args) {
        if (!this.filter || this.filter.shouldTrace(source, logLevel, id)) {
            this.writeEvent(source, logLevel, id, message, ...args);
        }
    }
    writeLine(source, line, includeTimestamp) {
        if (includeTimestamp) {
            line = `[${TraceFormat_1.TraceFormat.formatDate(new Date())} ${source}] ${line}`;
        }
        this.writeTo(line);
    }
}
exports.TraceListener = TraceListener;
//# sourceMappingURL=TraceListener.js.map

/***/ }),

/***/ 47879:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TraceSource = void 0;
const events_1 = __webpack_require__(50343);
const interfaces_1 = __webpack_require__(51295);
/**
 * Source for tracing events that associates a name with every event.
 */
class TraceSource extends events_1.EventEmitter {
    constructor(name) {
        super();
        this.name = name;
    }
    /**
     * Creates a new TraceSource with listeners copied from the existing TraceSource.
     */
    withName(name) {
        const newTraceSource = new TraceSource(name);
        this.eventNames().forEach((eventName) => {
            this.listeners(eventName).forEach((listener) => {
                newTraceSource.on(eventName, listener);
            });
        });
        return newTraceSource;
    }
    /**
     * Same as `withName` but the child trace inherits the parent name
     * as the prefix of the it's name, e.g. `parent-name:name`.
     * Useful to define additional context when same component frequently
     * used in many places.
     * Another user-case is to define a package-wide main trace and use
     * the method to create loggers that are child of the main one.
     */
    createChild(name) {
        return this.withName(`${this.name}:${name}`);
    }
    addTraceListener(listener) {
        this.on(TraceSource.eventEventName, listener.traceEvent.bind(listener));
        this.on(TraceSource.lineEventName, listener.writeLine.bind(listener));
        if (listener.flushEvents) {
            this.on(TraceSource.flushEventName, listener.flushEvents.bind(listener));
        }
    }
    flushEvents() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this.listeners(TraceSource.flushEventName).map((f) => Promise.resolve(f())));
        });
    }
    writeLine(line) {
        this.emit(TraceSource.lineEventName, this.name, line);
    }
    log(logLevel, message, ...args) {
        this.traceEvent(logLevel, 0, message, ...args);
        return this;
    }
    traceEvent(logLevel, id, message, ...args) {
        this.emit(TraceSource.eventEventName, this.name, logLevel, id, message, ...args);
    }
    errorEvent(id, message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Error, id, message, ...args);
    }
    warningEvent(id, message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Warning, id, message, ...args);
    }
    infoEvent(id, message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Info, id, message, ...args);
    }
    error(message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Error, 0, message, ...args);
        return this;
    }
    warning(message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Warning, 0, message, ...args);
        return this;
    }
    info(message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Info, 0, message, ...args);
        return this;
    }
    verbose(message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Debug, 0, message, ...args);
        return this;
    }
}
exports.TraceSource = TraceSource;
TraceSource.lineEventName = 'line';
TraceSource.eventEventName = 'event';
TraceSource.flushEventName = 'flush';
//# sourceMappingURL=TraceSource.js.map

/***/ }),

/***/ 99459:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VerbosityTraceFilter = void 0;
class VerbosityTraceFilter {
    constructor(verbosity) {
        this.verbosity = verbosity;
    }
    shouldTrace(source, logLevel, id) {
        return this.verbosity === undefined || this.verbosity <= logLevel;
    }
}
exports.VerbosityTraceFilter = VerbosityTraceFilter;
//# sourceMappingURL=VerbosityTraceFilter.js.map

/***/ }),

/***/ 98287:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Privacy = exports.LoggerBase = exports.Logger = exports.TraceFilters = exports.TraceSource = exports.TraceFormat = exports.TraceListener = exports.VerbosityTraceFilter = exports.GlobPatternTraceFilter = exports.LoggerSettings = void 0;
/**
 * Interfaces.
 */
__exportStar(__webpack_require__(51295), exports);
/**
 * Listeners.
 */
__exportStar(__webpack_require__(77717), exports);
/**
 * Loggers.
 */
__exportStar(__webpack_require__(33925), exports);
/**
 * Utils.
 */
__exportStar(__webpack_require__(33713), exports);
/**
 * Mocks.
 */
__exportStar(__webpack_require__(20955), exports);
/**
 * Misc.
 */
var LoggerSettings_1 = __webpack_require__(82857);
Object.defineProperty(exports, "LoggerSettings", ({ enumerable: true, get: function () { return LoggerSettings_1.LoggerSettings; } }));
var GlobalPatternTraceFilter_1 = __webpack_require__(57317);
Object.defineProperty(exports, "GlobPatternTraceFilter", ({ enumerable: true, get: function () { return GlobalPatternTraceFilter_1.GlobPatternTraceFilter; } }));
var VerbosityTraceFilter_1 = __webpack_require__(99459);
Object.defineProperty(exports, "VerbosityTraceFilter", ({ enumerable: true, get: function () { return VerbosityTraceFilter_1.VerbosityTraceFilter; } }));
var TraceListener_1 = __webpack_require__(49093);
Object.defineProperty(exports, "TraceListener", ({ enumerable: true, get: function () { return TraceListener_1.TraceListener; } }));
var TraceFormat_1 = __webpack_require__(90554);
Object.defineProperty(exports, "TraceFormat", ({ enumerable: true, get: function () { return TraceFormat_1.TraceFormat; } }));
var TraceSource_1 = __webpack_require__(47879);
Object.defineProperty(exports, "TraceSource", ({ enumerable: true, get: function () { return TraceSource_1.TraceSource; } }));
var TraceFilters_1 = __webpack_require__(65179);
Object.defineProperty(exports, "TraceFilters", ({ enumerable: true, get: function () { return TraceFilters_1.TraceFilters; } }));
var Logger_1 = __webpack_require__(43404);
Object.defineProperty(exports, "Logger", ({ enumerable: true, get: function () { return Logger_1.Logger; } }));
Object.defineProperty(exports, "LoggerBase", ({ enumerable: true, get: function () { return Logger_1.LoggerBase; } }));
var Privacy_1 = __webpack_require__(99540);
Object.defineProperty(exports, "Privacy", ({ enumerable: true, get: function () { return Privacy_1.Privacy; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 66991:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogLevel = void 0;
/**
 * The severity level of a log message.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Trace"] = 1] = "Trace";
    LogLevel[LogLevel["Debug"] = 2] = "Debug";
    LogLevel[LogLevel["Info"] = 3] = "Info";
    LogLevel[LogLevel["Warning"] = 4] = "Warning";
    LogLevel[LogLevel["Error"] = 5] = "Error";
    LogLevel[LogLevel["Critical"] = 6] = "Critical";
    LogLevel[LogLevel["Off"] = 7] = "Off";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
//# sourceMappingURL=LogLevel.js.map

/***/ }),

/***/ 83841:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogValueType = void 0;
/**
 * The log value types we support.
 */
var LogValueType;
(function (LogValueType) {
    LogValueType[LogValueType["None"] = 0] = "None";
    LogValueType[LogValueType["Text"] = 1] = "Text";
    LogValueType[LogValueType["Path"] = 2] = "Path";
    LogValueType[LogValueType["Email"] = 3] = "Email";
})(LogValueType = exports.LogValueType || (exports.LogValueType = {}));
//# sourceMappingURL=LogValueType.js.map

/***/ }),

/***/ 51295:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogValueType = exports.LogLevel = void 0;
var LogLevel_1 = __webpack_require__(66991);
Object.defineProperty(exports, "LogLevel", ({ enumerable: true, get: function () { return LogLevel_1.LogLevel; } }));
var LogValueType_1 = __webpack_require__(83841);
Object.defineProperty(exports, "LogValueType", ({ enumerable: true, get: function () { return LogValueType_1.LogValueType; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 68760:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BrowserConsoleTraceListener = void 0;
const LogLevel_1 = __webpack_require__(66991);
const loggers_1 = __webpack_require__(33925);
const ConsoleTraceListener_1 = __webpack_require__(51495);
/**
 * A trace listener using the `console`.
 */
class BrowserConsoleTraceListener extends ConsoleTraceListener_1.ConsoleTraceListener {
    constructor(consoleReference = new loggers_1.DebugConsoleLogger()) {
        super(consoleReference);
    }
    writeEvent(source, logLevel, id, message, ...args) {
        switch (logLevel) {
            case LogLevel_1.LogLevel.Critical:
            case LogLevel_1.LogLevel.Error: {
                return this.consoleReference.error(source, message, ...args);
            }
            case LogLevel_1.LogLevel.Warning: {
                return this.consoleReference.warn(source, message, ...args);
            }
            case LogLevel_1.LogLevel.Debug: {
                return this.consoleReference.debug
                    ? this.consoleReference.debug(source, message, ...args)
                    : this.consoleReference.info(source, message, ...args);
            }
            default: {
                return this.consoleReference.info(source, message, ...args);
            }
        }
    }
}
exports.BrowserConsoleTraceListener = BrowserConsoleTraceListener;
//# sourceMappingURL=BrowserConsoleTraceLogger.js.map

/***/ }),

/***/ 51495:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConsoleTraceListener = void 0;
const LogLevel_1 = __webpack_require__(66991);
const TraceFormat_1 = __webpack_require__(90554);
const TraceListener_1 = __webpack_require__(49093);
/**
 * A trace listener using the `console`.
 */
class ConsoleTraceListener extends TraceListener_1.TraceListener {
    constructor(consoleReference = console) {
        super();
        this.consoleReference = consoleReference;
    }
    writeTo(line) {
        this.consoleReference.log(line);
    }
    writeEvent(source, logLevel, id, message, ...args) {
        const line = TraceFormat_1.TraceFormat.formatEvent(null, source, logLevel, id, message, ...args);
        switch (logLevel) {
            case LogLevel_1.LogLevel.Critical:
            case LogLevel_1.LogLevel.Error: {
                return this.consoleReference.error(line);
            }
            case LogLevel_1.LogLevel.Warning: {
                return this.consoleReference.warn(line);
            }
            case LogLevel_1.LogLevel.Debug: {
                return this.consoleReference.debug
                    ? this.consoleReference.debug(line)
                    : this.consoleReference.log(line);
            }
            default: {
                return this.consoleReference.log(line);
            }
        }
    }
}
exports.ConsoleTraceListener = ConsoleTraceListener;
//# sourceMappingURL=ConsoleTraceListener.js.map

/***/ }),

/***/ 98407:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MemoryTraceListener = void 0;
const TraceFormat_1 = __webpack_require__(90554);
const TraceListener_1 = __webpack_require__(49093);
/**
 * A memory trace listener.
 */
class MemoryTraceListener extends TraceListener_1.TraceListener {
    constructor(maxLogSize) {
        super();
        this.allLogs = [];
        this.logsByLevel = new Map();
        this.maxLogSize = maxLogSize || 128;
    }
    getLogs(logLevel) {
        if (logLevel) {
            const logs = this.logsByLevel.get(logLevel);
            return logs ? logs.map((i) => i) : [];
        }
        return this.allLogs.map((i) => i);
    }
    writeTo(line) {
        this.addLine(line);
    }
    addLine(line, logLevel) {
        this.allLogs.push(line);
        if (this.allLogs.length > this.maxLogSize) {
            this.allLogs.splice(0, 1);
        }
        if (logLevel) {
            const logEntries = this.logsByLevel.get(logLevel);
            if (!logEntries) {
                this.logsByLevel.set(logLevel, [line]);
            }
            else {
                logEntries.push(line);
                if (logEntries.length > this.maxLogSize) {
                    logEntries.splice(0, 1);
                }
            }
        }
    }
    writeEvent(source, logLevel, id, message, ...args) {
        const line = TraceFormat_1.TraceFormat.formatEvent(new Date(), source, logLevel, id, message, ...args);
        this.addLine(line, logLevel);
    }
}
exports.MemoryTraceListener = MemoryTraceListener;
//# sourceMappingURL=MemoryTraceListener.js.map

/***/ }),

/***/ 55447:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OutputTraceListener = void 0;
const TraceFormat_1 = __webpack_require__(90554);
const TraceListener_1 = __webpack_require__(49093);
class OutputTraceListener extends TraceListener_1.TraceListener {
    constructor(outputChannelName, includeTimestamp) {
        super();
        this.includeTimestamp = includeTimestamp;
        this.channel = null;
        this.channelName = outputChannelName;
    }
    writeTo(line) {
        if (this.channel != null) {
            this.channel.appendLine(line);
        }
    }
    writeEvent(source, logLevel, id, message, ...args) {
        const line = TraceFormat_1.TraceFormat.formatEvent(this.includeTimestamp ? new Date() : null, source, logLevel, id, message, ...args);
        this.writeTo(line);
    }
    addOutputChannel(focus) {
        if (this.channel != null) {
            return;
        }
        // Defer import of 'vscode' package.
        const vscodeModule = __webpack_require__(89496);
        this.channel = vscodeModule.window.createOutputChannel(this.channelName);
        if (focus) {
            // Keep OutputChannel in focus
            this.channel.show(true);
        }
    }
    removeOutputChannel() {
        if (this.channel == null) {
            return;
        }
        this.channel.clear();
        this.channel.dispose();
        this.channel = null;
    }
}
exports.OutputTraceListener = OutputTraceListener;
//# sourceMappingURL=OutputTraceListener.js.map

/***/ }),

/***/ 77717:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MemoryTraceListener = exports.OutputTraceListener = exports.ConsoleTraceListener = exports.BrowserConsoleTraceListener = void 0;
var BrowserConsoleTraceLogger_1 = __webpack_require__(68760);
Object.defineProperty(exports, "BrowserConsoleTraceListener", ({ enumerable: true, get: function () { return BrowserConsoleTraceLogger_1.BrowserConsoleTraceListener; } }));
var ConsoleTraceListener_1 = __webpack_require__(51495);
Object.defineProperty(exports, "ConsoleTraceListener", ({ enumerable: true, get: function () { return ConsoleTraceListener_1.ConsoleTraceListener; } }));
var OutputTraceListener_1 = __webpack_require__(55447);
Object.defineProperty(exports, "OutputTraceListener", ({ enumerable: true, get: function () { return OutputTraceListener_1.OutputTraceListener; } }));
var MemoryTraceListener_1 = __webpack_require__(98407);
Object.defineProperty(exports, "MemoryTraceListener", ({ enumerable: true, get: function () { return MemoryTraceListener_1.MemoryTraceListener; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 62218:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugConsoleLogger = void 0;
const debug_1 = __webpack_require__(35228);
/**
 * Console logger on top of debug package.
 */
class DebugConsoleLogger {
    constructor(console = globalThis.console) {
        this.console = console;
        this.tracesCache = {};
        /**
         * Method to create an `debug` trace isntance with the specified trace level.
         * Caches the create traces for reuse to reduce GC churn.
         */
        this.createTrace = (source, type, consoleFunction) => {
            const traceKey = `${source}:${type}`;
            const cachedTrace = this.tracesCache[traceKey];
            if (cachedTrace) {
                return cachedTrace;
            }
            const trace = (0, debug_1.default)(traceKey);
            trace.log = consoleFunction;
            this.tracesCache[traceKey] = trace;
            return trace;
        };
        this.log = (source, message, ...args) => {
            return this.info(source, message, ...args);
        };
        this.info = (source, message, ...args) => {
            this.createTrace(source, 'info', this.console.info)(message, ...args);
        };
        this.debug = (source, message, ...args) => {
            const method = this.console.debug ? this.console.debug : this.console.log;
            this.createTrace(source, 'trace', method)(message, ...args);
        };
        this.warn = (source, message, ...args) => {
            this.createTrace(source, 'warn', this.console.warn)(source, message, ...args);
        };
        this.error = (source, message, ...args) => {
            this.createTrace(source, 'error', this.console.error)(source, message, ...args);
        };
    }
}
exports.DebugConsoleLogger = DebugConsoleLogger;
DebugConsoleLogger.enable = (path) => {
    debug_1.default.enable(path);
};
//# sourceMappingURL=DebugConsoleLogger.js.map

/***/ }),

/***/ 33925:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugConsoleLogger = void 0;
var DebugConsoleLogger_1 = __webpack_require__(62218);
Object.defineProperty(exports, "DebugConsoleLogger", ({ enumerable: true, get: function () { return DebugConsoleLogger_1.DebugConsoleLogger; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 39637:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConsoleLoggerMock = void 0;
const DEFAULT_OPTIONS = {
    info: () => { },
    log: () => { },
    debug: () => { },
    warn: () => { },
    error: () => { },
};
class ConsoleLoggerMock {
    constructor(options = {}) {
        this.log = (...args) => {
            throw new Error('The `log` method is not implemented');
        };
        this.info = (...args) => {
            throw new Error('The `info` method is not implemented');
        };
        this.debug = (...args) => {
            throw new Error('The `debug` method is not implemented');
        };
        this.warn = (...args) => {
            throw new Error('The `warn` method is not implemented');
        };
        this.error = (...args) => {
            throw new Error('The `error` method is not implemented');
        };
        this.optionsWithDefaults = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
        this.log = this.optionsWithDefaults.log;
        this.info = this.optionsWithDefaults.info;
        this.warn = this.optionsWithDefaults.warn;
        this.debug = this.optionsWithDefaults.debug;
        this.error = this.optionsWithDefaults.error;
    }
}
exports.ConsoleLoggerMock = ConsoleLoggerMock;
//# sourceMappingURL=TraceLoggerMock.js.map

/***/ }),

/***/ 20955:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConsoleLoggerMock = void 0;
var TraceLoggerMock_1 = __webpack_require__(39637);
Object.defineProperty(exports, "ConsoleLoggerMock", ({ enumerable: true, get: function () { return TraceLoggerMock_1.ConsoleLoggerMock; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 50909:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.errorToString = void 0;
const source_map_support_1 = __webpack_require__(11890);
/**
 * Converts an error object to a string, including stack trace with source map transformations.
 */
function errorToString(e) {
    if (!e) {
        return null;
    }
    let s = e.message || 'Unknown error';
    const code = e.code;
    if (code) {
        s += ' code:' + code;
    }
    // Try to use source map information to map the stack frames back to original sources.
    let stack = null;
    if (e.vslsStack) {
        try {
            stack = e.vslsStack.map((frame) => '  at ' + (0, source_map_support_1.wrapCallSite)(frame)).join('\n');
        }
        catch (e) { }
    }
    if (!stack) {
        stack = e.stack || null;
    }
    if (stack) {
        s += '\n' + stack;
    }
    return s;
}
exports.errorToString = errorToString;
//# sourceMappingURL=errorToString.js.map

/***/ }),

/***/ 33713:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.errorToString = void 0;
var errorToString_1 = __webpack_require__(50909);
Object.defineProperty(exports, "errorToString", ({ enumerable: true, get: function () { return errorToString_1.errorToString; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 58383:
/***/ ((module) => {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    if(a===b) {
      return [ai, bi];
    }
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),

/***/ 43553:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var balanced = __webpack_require__(58383);

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m) return [str];

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  if (/\$$/.test(m.pre)) {    
    for (var k = 0; k < post.length; k++) {
      var expansion = pre+ '{' + m.body + '}' + post[k];
      expansions.push(expansion);
    }
  } else {
    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = m.body.indexOf(',') >= 0;
    if (!isSequence && !isOptions) {
      // {a},b}
      if (m.post.match(/,.*\}/)) {
        str = m.pre + '{' + m.body + escClose + m.post;
        return expand(str);
      }
      return [str];
    }

    var n;
    if (isSequence) {
      n = m.body.split(/\.\./);
    } else {
      n = parseCommaParts(m.body);
      if (n.length === 1) {
        // x{{a,b}}y ==> x{a}y x{b}y
        n = expand(n[0], false).map(embrace);
        if (n.length === 1) {
          return post.map(function(p) {
            return m.pre + n[0] + p;
          });
        }
      }
    }

    // at this point, n is the parts, and we know it's not a comma set
    // with a single entry.
    var N;

    if (isSequence) {
      var x = numeric(n[0]);
      var y = numeric(n[1]);
      var width = Math.max(n[0].length, n[1].length)
      var incr = n.length == 3
        ? Math.abs(numeric(n[2]))
        : 1;
      var test = lte;
      var reverse = y < x;
      if (reverse) {
        incr *= -1;
        test = gte;
      }
      var pad = n.some(isPadded);

      N = [];

      for (var i = x; test(i, y); i += incr) {
        var c;
        if (isAlphaSequence) {
          c = String.fromCharCode(i);
          if (c === '\\')
            c = '';
        } else {
          c = String(i);
          if (pad) {
            var need = width - c.length;
            if (need > 0) {
              var z = new Array(need + 1).join('0');
              if (i < 0)
                c = '-' + z + c.slice(1);
              else
                c = z + c;
            }
          }
        }
        N.push(c);
      }
    } else {
      N = [];

      for (var j = 0; j < n.length; j++) {
        N.push.apply(N, expand(n[j], false));
      }
    }

    for (var j = 0; j < N.length; j++) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion)
          expansions.push(expansion);
      }
    }
  }

  return expansions;
}



/***/ }),

/***/ 35228:
/***/ ((module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(27061);
/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __webpack_require__(40158)(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};


/***/ }),

/***/ 40158:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __webpack_require__(39774);
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),

/***/ 14405:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(27061);
const isWindows = typeof process === 'object' &&
  process &&
  process.platform === 'win32'
module.exports = isWindows ? { sep: '\\' } : { sep: '/' }


/***/ }),

/***/ 5592:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const minimatch = module.exports = (p, pattern, options = {}) => {
  assertValidPattern(pattern)

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  return new Minimatch(pattern, options).match(p)
}

module.exports = minimatch

const path = __webpack_require__(14405)
minimatch.sep = path.sep

const GLOBSTAR = Symbol('globstar **')
minimatch.GLOBSTAR = GLOBSTAR
const expand = __webpack_require__(43553)

const plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
const qmark = '[^/]'

// * => any number of characters
const star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
const twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
const twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// "abc" -> { a:true, b:true, c:true }
const charSet = s => s.split('').reduce((set, c) => {
  set[c] = true
  return set
}, {})

// characters that need to be escaped in RegExp.
const reSpecials = charSet('().*{}+?[]^$\\!')

// characters that indicate we have to add the pattern start
const addPatternStartSet = charSet('[.(')

// normalizes slashes.
const slashSplit = /\/+/

minimatch.filter = (pattern, options = {}) =>
  (p, i, list) => minimatch(p, pattern, options)

const ext = (a, b = {}) => {
  const t = {}
  Object.keys(a).forEach(k => t[k] = a[k])
  Object.keys(b).forEach(k => t[k] = b[k])
  return t
}

minimatch.defaults = def => {
  if (!def || typeof def !== 'object' || !Object.keys(def).length) {
    return minimatch
  }

  const orig = minimatch

  const m = (p, pattern, options) => orig(p, pattern, ext(def, options))
  m.Minimatch = class Minimatch extends orig.Minimatch {
    constructor (pattern, options) {
      super(pattern, ext(def, options))
    }
  }
  m.Minimatch.defaults = options => orig.defaults(ext(def, options)).Minimatch
  m.filter = (pattern, options) => orig.filter(pattern, ext(def, options))
  m.defaults = options => orig.defaults(ext(def, options))
  m.makeRe = (pattern, options) => orig.makeRe(pattern, ext(def, options))
  m.braceExpand = (pattern, options) => orig.braceExpand(pattern, ext(def, options))
  m.match = (list, pattern, options) => orig.match(list, pattern, ext(def, options))

  return m
}





// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = (pattern, options) => braceExpand(pattern, options)

const braceExpand = (pattern, options = {}) => {
  assertValidPattern(pattern)

  // Thanks to Yeting Li <https://github.com/yetingli> for
  // improving this regexp to avoid a ReDOS vulnerability.
  if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

const MAX_PATTERN_LENGTH = 1024 * 64
const assertValidPattern = pattern => {
  if (typeof pattern !== 'string') {
    throw new TypeError('invalid pattern')
  }

  if (pattern.length > MAX_PATTERN_LENGTH) {
    throw new TypeError('pattern is too long')
  }
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
const SUBPARSE = Symbol('subparse')

minimatch.makeRe = (pattern, options) =>
  new Minimatch(pattern, options || {}).makeRe()

minimatch.match = (list, pattern, options = {}) => {
  const mm = new Minimatch(pattern, options)
  list = list.filter(f => mm.match(f))
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

// replace stuff like \* with *
const globUnescape = s => s.replace(/\\(.)/g, '$1')
const regExpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')

class Minimatch {
  constructor (pattern, options) {
    assertValidPattern(pattern)

    if (!options) options = {}

    this.options = options
    this.set = []
    this.pattern = pattern
    this.regexp = null
    this.negate = false
    this.comment = false
    this.empty = false
    this.partial = !!options.partial

    // make the set of regexps etc.
    this.make()
  }

  debug () {}

  make () {
    const pattern = this.pattern
    const options = this.options

    // empty patterns and comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === '#') {
      this.comment = true
      return
    }
    if (!pattern) {
      this.empty = true
      return
    }

    // step 1: figure out negation, etc.
    this.parseNegate()

    // step 2: expand braces
    let set = this.globSet = this.braceExpand()

    if (options.debug) this.debug = (...args) => console.error(...args)

    this.debug(this.pattern, set)

    // step 3: now we have a set, so turn each one into a series of path-portion
    // matching patterns.
    // These will be regexps, except in the case of "**", which is
    // set to the GLOBSTAR object for globstar behavior,
    // and will not contain any / characters
    set = this.globParts = set.map(s => s.split(slashSplit))

    this.debug(this.pattern, set)

    // glob --> regexps
    set = set.map((s, si, set) => s.map(this.parse, this))

    this.debug(this.pattern, set)

    // filter out everything that didn't compile properly.
    set = set.filter(s => s.indexOf(false) === -1)

    this.debug(this.pattern, set)

    this.set = set
  }

  parseNegate () {
    if (this.options.nonegate) return

    const pattern = this.pattern
    let negate = false
    let negateOffset = 0

    for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {
      negate = !negate
      negateOffset++
    }

    if (negateOffset) this.pattern = pattern.substr(negateOffset)
    this.negate = negate
  }

  // set partial to true to test if, for example,
  // "/a/b" matches the start of "/*/b/*/d"
  // Partial means, if you run out of file before you run
  // out of pattern, then that's fine, as long as all
  // the parts match.
  matchOne (file, pattern, partial) {
    var options = this.options

    this.debug('matchOne',
      { 'this': this, file: file, pattern: pattern })

    this.debug('matchOne', file.length, pattern.length)

    for (var fi = 0,
        pi = 0,
        fl = file.length,
        pl = pattern.length
        ; (fi < fl) && (pi < pl)
        ; fi++, pi++) {
      this.debug('matchOne loop')
      var p = pattern[pi]
      var f = file[fi]

      this.debug(pattern, p, f)

      // should be impossible.
      // some invalid regexp stuff in the set.
      /* istanbul ignore if */
      if (p === false) return false

      if (p === GLOBSTAR) {
        this.debug('GLOBSTAR', [pattern, p, f])

        // "**"
        // a/**/b/**/c would match the following:
        // a/b/x/y/z/c
        // a/x/y/z/b/c
        // a/b/x/b/x/c
        // a/b/c
        // To do this, take the rest of the pattern after
        // the **, and see if it would match the file remainder.
        // If so, return success.
        // If not, the ** "swallows" a segment, and try again.
        // This is recursively awful.
        //
        // a/**/b/**/c matching a/b/x/y/z/c
        // - a matches a
        // - doublestar
        //   - matchOne(b/x/y/z/c, b/**/c)
        //     - b matches b
        //     - doublestar
        //       - matchOne(x/y/z/c, c) -> no
        //       - matchOne(y/z/c, c) -> no
        //       - matchOne(z/c, c) -> no
        //       - matchOne(c, c) yes, hit
        var fr = fi
        var pr = pi + 1
        if (pr === pl) {
          this.debug('** at the end')
          // a ** at the end will just swallow the rest.
          // We have found a match.
          // however, it will not swallow /.x, unless
          // options.dot is set.
          // . and .. are *never* matched by **, for explosively
          // exponential reasons.
          for (; fi < fl; fi++) {
            if (file[fi] === '.' || file[fi] === '..' ||
              (!options.dot && file[fi].charAt(0) === '.')) return false
          }
          return true
        }

        // ok, let's see if we can swallow whatever we can.
        while (fr < fl) {
          var swallowee = file[fr]

          this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

          // XXX remove this slice.  Just pass the start index.
          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
            this.debug('globstar found match!', fr, fl, swallowee)
            // found a match.
            return true
          } else {
            // can't swallow "." or ".." ever.
            // can only swallow ".foo" when explicitly asked.
            if (swallowee === '.' || swallowee === '..' ||
              (!options.dot && swallowee.charAt(0) === '.')) {
              this.debug('dot detected!', file, fr, pattern, pr)
              break
            }

            // ** swallows a segment, and continue.
            this.debug('globstar swallow a segment, and continue')
            fr++
          }
        }

        // no match was found.
        // However, in partial mode, we can't say this is necessarily over.
        // If there's more *pattern* left, then
        /* istanbul ignore if */
        if (partial) {
          // ran out of file
          this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
          if (fr === fl) return true
        }
        return false
      }

      // something other than **
      // non-magic patterns just have to match exactly
      // patterns with magic have been turned into regexps.
      var hit
      if (typeof p === 'string') {
        hit = f === p
        this.debug('string match', p, f, hit)
      } else {
        hit = f.match(p)
        this.debug('pattern match', p, f, hit)
      }

      if (!hit) return false
    }

    // Note: ending in / means that we'll get a final ""
    // at the end of the pattern.  This can only match a
    // corresponding "" at the end of the file.
    // If the file ends in /, then it can only match a
    // a pattern that ends in /, unless the pattern just
    // doesn't have any more for it. But, a/b/ should *not*
    // match "a/b/*", even though "" matches against the
    // [^/]*? pattern, except in partial mode, where it might
    // simply not be reached yet.
    // However, a/b/ should still satisfy a/*

    // now either we fell off the end of the pattern, or we're done.
    if (fi === fl && pi === pl) {
      // ran out of pattern and filename at the same time.
      // an exact hit!
      return true
    } else if (fi === fl) {
      // ran out of file, but still had pattern left.
      // this is ok if we're doing the match as part of
      // a glob fs traversal.
      return partial
    } else /* istanbul ignore else */ if (pi === pl) {
      // ran out of pattern, still have file left.
      // this is only acceptable if we're on the very last
      // empty segment of a file with a trailing slash.
      // a/* should match a/b/
      return (fi === fl - 1) && (file[fi] === '')
    }

    // should be unreachable.
    /* istanbul ignore next */
    throw new Error('wtf?')
  }

  braceExpand () {
    return braceExpand(this.pattern, this.options)
  }

  parse (pattern, isSub) {
    assertValidPattern(pattern)

    const options = this.options

    // shortcuts
    if (pattern === '**') {
      if (!options.noglobstar)
        return GLOBSTAR
      else
        pattern = '*'
    }
    if (pattern === '') return ''

    let re = ''
    let hasMagic = !!options.nocase
    let escaping = false
    // ? => one single character
    const patternListStack = []
    const negativeLists = []
    let stateChar
    let inClass = false
    let reClassStart = -1
    let classStart = -1
    let cs
    let pl
    let sp
    // . and .. never match anything that doesn't start with .,
    // even when options.dot is set.
    const patternStart = pattern.charAt(0) === '.' ? '' // anything
    // not (start or / followed by . or .. followed by / or end)
    : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
    : '(?!\\.)'

    const clearStateChar = () => {
      if (stateChar) {
        // we had some state-tracking character
        // that wasn't consumed by this pass.
        switch (stateChar) {
          case '*':
            re += star
            hasMagic = true
          break
          case '?':
            re += qmark
            hasMagic = true
          break
          default:
            re += '\\' + stateChar
          break
        }
        this.debug('clearStateChar %j %j', stateChar, re)
        stateChar = false
      }
    }

    for (let i = 0, c; (i < pattern.length) && (c = pattern.charAt(i)); i++) {
      this.debug('%s\t%s %s %j', pattern, i, re, c)

      // skip over any that are escaped.
      if (escaping) {
        /* istanbul ignore next - completely not allowed, even escaped. */
        if (c === '/') {
          return false
        }

        if (reSpecials[c]) {
          re += '\\'
        }
        re += c
        escaping = false
        continue
      }

      switch (c) {
        /* istanbul ignore next */
        case '/': {
          // Should already be path-split by now.
          return false
        }

        case '\\':
          clearStateChar()
          escaping = true
        continue

        // the various stateChar values
        // for the "extglob" stuff.
        case '?':
        case '*':
        case '+':
        case '@':
        case '!':
          this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

          // all of those are literals inside a class, except that
          // the glob [!a] means [^a] in regexp
          if (inClass) {
            this.debug('  in class')
            if (c === '!' && i === classStart + 1) c = '^'
            re += c
            continue
          }

          // if we already have a stateChar, then it means
          // that there was something like ** or +? in there.
          // Handle the stateChar, then proceed with this one.
          this.debug('call clearStateChar %j', stateChar)
          clearStateChar()
          stateChar = c
          // if extglob is disabled, then +(asdf|foo) isn't a thing.
          // just clear the statechar *now*, rather than even diving into
          // the patternList stuff.
          if (options.noext) clearStateChar()
        continue

        case '(':
          if (inClass) {
            re += '('
            continue
          }

          if (!stateChar) {
            re += '\\('
            continue
          }

          patternListStack.push({
            type: stateChar,
            start: i - 1,
            reStart: re.length,
            open: plTypes[stateChar].open,
            close: plTypes[stateChar].close
          })
          // negation is (?:(?!js)[^/]*)
          re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
          this.debug('plType %j %j', stateChar, re)
          stateChar = false
        continue

        case ')':
          if (inClass || !patternListStack.length) {
            re += '\\)'
            continue
          }

          clearStateChar()
          hasMagic = true
          pl = patternListStack.pop()
          // negation is (?:(?!js)[^/]*)
          // The others are (?:<pattern>)<type>
          re += pl.close
          if (pl.type === '!') {
            negativeLists.push(pl)
          }
          pl.reEnd = re.length
        continue

        case '|':
          if (inClass || !patternListStack.length) {
            re += '\\|'
            continue
          }

          clearStateChar()
          re += '|'
        continue

        // these are mostly the same in regexp and glob
        case '[':
          // swallow any state-tracking char before the [
          clearStateChar()

          if (inClass) {
            re += '\\' + c
            continue
          }

          inClass = true
          classStart = i
          reClassStart = re.length
          re += c
        continue

        case ']':
          //  a right bracket shall lose its special
          //  meaning and represent itself in
          //  a bracket expression if it occurs
          //  first in the list.  -- POSIX.2 2.8.3.2
          if (i === classStart + 1 || !inClass) {
            re += '\\' + c
            continue
          }

          // handle the case where we left a class open.
          // "[z-a]" is valid, equivalent to "\[z-a\]"
          // split where the last [ was, make sure we don't have
          // an invalid re. if so, re-walk the contents of the
          // would-be class to re-translate any characters that
          // were passed through as-is
          // TODO: It would probably be faster to determine this
          // without a try/catch and a new RegExp, but it's tricky
          // to do safely.  For now, this is safe and works.
          cs = pattern.substring(classStart + 1, i)
          try {
            RegExp('[' + cs + ']')
          } catch (er) {
            // not a valid class!
            sp = this.parse(cs, SUBPARSE)
            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
            hasMagic = hasMagic || sp[1]
            inClass = false
            continue
          }

          // finish up the class.
          hasMagic = true
          inClass = false
          re += c
        continue

        default:
          // swallow any state char that wasn't consumed
          clearStateChar()

          if (reSpecials[c] && !(c === '^' && inClass)) {
            re += '\\'
          }

          re += c
          break

      } // switch
    } // for

    // handle the case where we left a class open.
    // "[abc" is valid, equivalent to "\[abc"
    if (inClass) {
      // split where the last [ was, and escape it
      // this is a huge pita.  We now have to re-walk
      // the contents of the would-be class to re-translate
      // any characters that were passed through as-is
      cs = pattern.substr(classStart + 1)
      sp = this.parse(cs, SUBPARSE)
      re = re.substr(0, reClassStart) + '\\[' + sp[0]
      hasMagic = hasMagic || sp[1]
    }

    // handle the case where we had a +( thing at the *end*
    // of the pattern.
    // each pattern list stack adds 3 chars, and we need to go through
    // and escape any | chars that were passed through as-is for the regexp.
    // Go through and escape them, taking care not to double-escape any
    // | chars that were already escaped.
    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
      let tail
      tail = re.slice(pl.reStart + pl.open.length)
      this.debug('setting tail', re, pl)
      // maybe some even number of \, then maybe 1 \, followed by a |
      tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, (_, $1, $2) => {
        /* istanbul ignore else - should already be done */
        if (!$2) {
          // the | isn't already escaped, so escape it.
          $2 = '\\'
        }

        // need to escape all those slashes *again*, without escaping the
        // one that we need for escaping the | character.  As it works out,
        // escaping an even number of slashes can be done by simply repeating
        // it exactly after itself.  That's why this trick works.
        //
        // I am sorry that you have to see this.
        return $1 + $1 + $2 + '|'
      })

      this.debug('tail=%j\n   %s', tail, tail, pl, re)
      const t = pl.type === '*' ? star
        : pl.type === '?' ? qmark
        : '\\' + pl.type

      hasMagic = true
      re = re.slice(0, pl.reStart) + t + '\\(' + tail
    }

    // handle trailing things that only matter at the very end.
    clearStateChar()
    if (escaping) {
      // trailing \\
      re += '\\\\'
    }

    // only need to apply the nodot start if the re starts with
    // something that could conceivably capture a dot
    const addPatternStart = addPatternStartSet[re.charAt(0)]

    // Hack to work around lack of negative lookbehind in JS
    // A pattern like: *.!(x).!(y|z) needs to ensure that a name
    // like 'a.xyz.yz' doesn't match.  So, the first negative
    // lookahead, has to look ALL the way ahead, to the end of
    // the pattern.
    for (let n = negativeLists.length - 1; n > -1; n--) {
      const nl = negativeLists[n]

      const nlBefore = re.slice(0, nl.reStart)
      const nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
      let nlAfter = re.slice(nl.reEnd)
      const nlLast = re.slice(nl.reEnd - 8, nl.reEnd) + nlAfter

      // Handle nested stuff like *(*.js|!(*.json)), where open parens
      // mean that we should *not* include the ) in the bit that is considered
      // "after" the negated section.
      const openParensBefore = nlBefore.split('(').length - 1
      let cleanAfter = nlAfter
      for (let i = 0; i < openParensBefore; i++) {
        cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
      }
      nlAfter = cleanAfter

      const dollar = nlAfter === '' && isSub !== SUBPARSE ? '$' : ''
      re = nlBefore + nlFirst + nlAfter + dollar + nlLast
    }

    // if the re is not "" at this point, then we need to make sure
    // it doesn't match against an empty path part.
    // Otherwise a/* will match a/, which it should not.
    if (re !== '' && hasMagic) {
      re = '(?=.)' + re
    }

    if (addPatternStart) {
      re = patternStart + re
    }

    // parsing just a piece of a larger pattern.
    if (isSub === SUBPARSE) {
      return [re, hasMagic]
    }

    // skip the regexp for non-magical patterns
    // unescape anything in it, though, so that it'll be
    // an exact match against a file etc.
    if (!hasMagic) {
      return globUnescape(pattern)
    }

    const flags = options.nocase ? 'i' : ''
    try {
      return Object.assign(new RegExp('^' + re + '$', flags), {
        _glob: pattern,
        _src: re,
      })
    } catch (er) /* istanbul ignore next - should be impossible */ {
      // If it was an invalid regular expression, then it can't match
      // anything.  This trick looks for a character after the end of
      // the string, which is of course impossible, except in multi-line
      // mode, but it's not a /m regex.
      return new RegExp('$.')
    }
  }

  makeRe () {
    if (this.regexp || this.regexp === false) return this.regexp

    // at this point, this.set is a 2d array of partial
    // pattern strings, or "**".
    //
    // It's better to use .match().  This function shouldn't
    // be used, really, but it's pretty convenient sometimes,
    // when you just want to work with a regex.
    const set = this.set

    if (!set.length) {
      this.regexp = false
      return this.regexp
    }
    const options = this.options

    const twoStar = options.noglobstar ? star
      : options.dot ? twoStarDot
      : twoStarNoDot
    const flags = options.nocase ? 'i' : ''

    // coalesce globstars and regexpify non-globstar patterns
    // if it's the only item, then we just do one twoStar
    // if it's the first, and there are more, prepend (\/|twoStar\/)? to next
    // if it's the last, append (\/twoStar|) to previous
    // if it's in the middle, append (\/|\/twoStar\/) to previous
    // then filter out GLOBSTAR symbols
    let re = set.map(pattern => {
      pattern = pattern.map(p =>
        typeof p === 'string' ? regExpEscape(p)
        : p === GLOBSTAR ? GLOBSTAR
        : p._src
      ).reduce((set, p) => {
        if (!(set[set.length - 1] === GLOBSTAR && p === GLOBSTAR)) {
          set.push(p)
        }
        return set
      }, [])
      pattern.forEach((p, i) => {
        if (p !== GLOBSTAR || pattern[i-1] === GLOBSTAR) {
          return
        }
        if (i === 0) {
          if (pattern.length > 1) {
            pattern[i+1] = '(?:\\\/|' + twoStar + '\\\/)?' + pattern[i+1]
          } else {
            pattern[i] = twoStar
          }
        } else if (i === pattern.length - 1) {
          pattern[i-1] += '(?:\\\/|' + twoStar + ')?'
        } else {
          pattern[i-1] += '(?:\\\/|\\\/' + twoStar + '\\\/)' + pattern[i+1]
          pattern[i+1] = GLOBSTAR
        }
      })
      return pattern.filter(p => p !== GLOBSTAR).join('/')
    }).join('|')

    // must match entire pattern
    // ending in a * or ** will make it less strict.
    re = '^(?:' + re + ')$'

    // can match anything, as long as it's not this.
    if (this.negate) re = '^(?!' + re + ').*$'

    try {
      this.regexp = new RegExp(re, flags)
    } catch (ex) /* istanbul ignore next - should be impossible */ {
      this.regexp = false
    }
    return this.regexp
  }

  match (f, partial = this.partial) {
    this.debug('match', f, this.pattern)
    // short-circuit in the case of busted things.
    // comments, etc.
    if (this.comment) return false
    if (this.empty) return f === ''

    if (f === '/' && partial) return true

    const options = this.options

    // windows: need to use /, not \
    if (path.sep !== '/') {
      f = f.split(path.sep).join('/')
    }

    // treat the test path as a set of pathparts.
    f = f.split(slashSplit)
    this.debug(this.pattern, 'split', f)

    // just ONE of the pattern sets in this.set needs to match
    // in order for it to be valid.  If negating, then just one
    // match means that we have failed.
    // Either way, return on the first hit.

    const set = this.set
    this.debug(this.pattern, 'set', set)

    // Find the basename of the path by looking for the last non-empty segment
    let filename
    for (let i = f.length - 1; i >= 0; i--) {
      filename = f[i]
      if (filename) break
    }

    for (let i = 0; i < set.length; i++) {
      const pattern = set[i]
      let file = f
      if (options.matchBase && pattern.length === 1) {
        file = [filename]
      }
      const hit = this.matchOne(file, pattern, partial)
      if (hit) {
        if (options.flipNegate) return true
        return !this.negate
      }
    }

    // didn't get any hits.  this is success if it's a negative
    // pattern, failure otherwise.
    if (options.flipNegate) return false
    return this.negate
  }

  static defaults (def) {
    return minimatch.defaults(def).Minimatch
  }
}

minimatch.Minimatch = Minimatch


/***/ }),

/***/ 39774:
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),

/***/ 11504:
/***/ ((module) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 65526:
/***/ ((module) => {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 7914:
/***/ ((module) => {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 11873:
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 57135:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(86248);


/***/ }),

/***/ 35370:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "RequestError": () => (/* binding */ RequestError)
});

;// CONCATENATED MODULE: ../node_modules/deprecation/dist-web/index.js
class Deprecation extends Error {
  constructor(message) {
    super(message); // Maintains proper stack trace (only available on V8)

    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }

    this.name = 'Deprecation';
  }

}



// EXTERNAL MODULE: ../node_modules/once/once.js
var once = __webpack_require__(4132);
var once_default = /*#__PURE__*/__webpack_require__.n(once);
;// CONCATENATED MODULE: ../node_modules/@octokit/request-error/dist-web/index.js



const logOnceCode = once_default()((deprecation) => console.warn(deprecation));
const logOnceHeaders = once_default()((deprecation) => console.warn(deprecation));
/**
 * Error with extra properties to help with debugging
 */
class RequestError extends Error {
    constructor(message, statusCode, options) {
        super(message);
        // Maintains proper stack trace (only available on V8)
        /* istanbul ignore next */
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        let headers;
        if ("headers" in options && typeof options.headers !== "undefined") {
            headers = options.headers;
        }
        if ("response" in options) {
            this.response = options.response;
            headers = options.response.headers;
        }
        // redact request credentials without mutating original request options
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) {
            requestCopy.headers = Object.assign({}, options.request.headers, {
                authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]"),
            });
        }
        requestCopy.url = requestCopy.url
            // client_id & client_secret can be passed as URL query parameters to increase rate limit
            // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications
            .replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]")
            // OAuth tokens can be passed as URL query parameters, although it is not recommended
            // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header
            .replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
        // deprecations
        Object.defineProperty(this, "code", {
            get() {
                logOnceCode(new Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
                return statusCode;
            },
        });
        Object.defineProperty(this, "headers", {
            get() {
                logOnceHeaders(new Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
                return headers || {};
            },
        });
    }
}


//# sourceMappingURL=index.js.map


/***/ }),

/***/ 44318:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Octokit": () => (/* binding */ dist_web_Octokit)
});

;// CONCATENATED MODULE: ../node_modules/universal-user-agent/dist-web/index.js
/* provided dependency */ var process = __webpack_require__(27061);
function getUserAgent() {
    if (typeof navigator === "object" && "userAgent" in navigator) {
        return navigator.userAgent;
    }
    if (typeof process === "object" && "version" in process) {
        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
    }
    return "<environment undetectable>";
}


//# sourceMappingURL=index.js.map

// EXTERNAL MODULE: ../node_modules/before-after-hook/index.js
var before_after_hook = __webpack_require__(3031);
;// CONCATENATED MODULE: ../node_modules/@octokit/endpoint/node_modules/is-plain-object/dist/is-plain-object.mjs
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

function isObject(o) {
  return Object.prototype.toString.call(o) === '[object Object]';
}

function isPlainObject(o) {
  var ctor,prot;

  if (isObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (ctor === undefined) return true;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
}



;// CONCATENATED MODULE: ../node_modules/@octokit/endpoint/dist-web/index.js



function lowercaseKeys(object) {
    if (!object) {
        return {};
    }
    return Object.keys(object).reduce((newObj, key) => {
        newObj[key.toLowerCase()] = object[key];
        return newObj;
    }, {});
}

function mergeDeep(defaults, options) {
    const result = Object.assign({}, defaults);
    Object.keys(options).forEach((key) => {
        if (isPlainObject(options[key])) {
            if (!(key in defaults))
                Object.assign(result, { [key]: options[key] });
            else
                result[key] = mergeDeep(defaults[key], options[key]);
        }
        else {
            Object.assign(result, { [key]: options[key] });
        }
    });
    return result;
}

function removeUndefinedProperties(obj) {
    for (const key in obj) {
        if (obj[key] === undefined) {
            delete obj[key];
        }
    }
    return obj;
}

function merge(defaults, route, options) {
    if (typeof route === "string") {
        let [method, url] = route.split(" ");
        options = Object.assign(url ? { method, url } : { url: method }, options);
    }
    else {
        options = Object.assign({}, route);
    }
    // lowercase header names before merging with defaults to avoid duplicates
    options.headers = lowercaseKeys(options.headers);
    // remove properties with undefined values before merging
    removeUndefinedProperties(options);
    removeUndefinedProperties(options.headers);
    const mergedOptions = mergeDeep(defaults || {}, options);
    // mediaType.previews arrays are merged, instead of overwritten
    if (defaults && defaults.mediaType.previews.length) {
        mergedOptions.mediaType.previews = defaults.mediaType.previews
            .filter((preview) => !mergedOptions.mediaType.previews.includes(preview))
            .concat(mergedOptions.mediaType.previews);
    }
    mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
    return mergedOptions;
}

function addQueryParameters(url, parameters) {
    const separator = /\?/.test(url) ? "&" : "?";
    const names = Object.keys(parameters);
    if (names.length === 0) {
        return url;
    }
    return (url +
        separator +
        names
            .map((name) => {
            if (name === "q") {
                return ("q=" + parameters.q.split("+").map(encodeURIComponent).join("+"));
            }
            return `${name}=${encodeURIComponent(parameters[name])}`;
        })
            .join("&"));
}

const urlVariableRegex = /\{[^}]+\}/g;
function removeNonChars(variableName) {
    return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
}
function extractUrlVariableNames(url) {
    const matches = url.match(urlVariableRegex);
    if (!matches) {
        return [];
    }
    return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
}

function omit(object, keysToOmit) {
    return Object.keys(object)
        .filter((option) => !keysToOmit.includes(option))
        .reduce((obj, key) => {
        obj[key] = object[key];
        return obj;
    }, {});
}

// Based on https://github.com/bramstein/url-template, licensed under BSD
// TODO: create separate package.
//
// Copyright (c) 2012-2014, Bram Stein
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
// EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/* istanbul ignore file */
function encodeReserved(str) {
    return str
        .split(/(%[0-9A-Fa-f]{2})/g)
        .map(function (part) {
        if (!/%[0-9A-Fa-f]/.test(part)) {
            part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
        }
        return part;
    })
        .join("");
}
function encodeUnreserved(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
function encodeValue(operator, value, key) {
    value =
        operator === "+" || operator === "#"
            ? encodeReserved(value)
            : encodeUnreserved(value);
    if (key) {
        return encodeUnreserved(key) + "=" + value;
    }
    else {
        return value;
    }
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
function isKeyOperator(operator) {
    return operator === ";" || operator === "&" || operator === "?";
}
function getValues(context, operator, key, modifier) {
    var value = context[key], result = [];
    if (isDefined(value) && value !== "") {
        if (typeof value === "string" ||
            typeof value === "number" ||
            typeof value === "boolean") {
            value = value.toString();
            if (modifier && modifier !== "*") {
                value = value.substring(0, parseInt(modifier, 10));
            }
            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
        }
        else {
            if (modifier === "*") {
                if (Array.isArray(value)) {
                    value.filter(isDefined).forEach(function (value) {
                        result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
                    });
                }
                else {
                    Object.keys(value).forEach(function (k) {
                        if (isDefined(value[k])) {
                            result.push(encodeValue(operator, value[k], k));
                        }
                    });
                }
            }
            else {
                const tmp = [];
                if (Array.isArray(value)) {
                    value.filter(isDefined).forEach(function (value) {
                        tmp.push(encodeValue(operator, value));
                    });
                }
                else {
                    Object.keys(value).forEach(function (k) {
                        if (isDefined(value[k])) {
                            tmp.push(encodeUnreserved(k));
                            tmp.push(encodeValue(operator, value[k].toString()));
                        }
                    });
                }
                if (isKeyOperator(operator)) {
                    result.push(encodeUnreserved(key) + "=" + tmp.join(","));
                }
                else if (tmp.length !== 0) {
                    result.push(tmp.join(","));
                }
            }
        }
    }
    else {
        if (operator === ";") {
            if (isDefined(value)) {
                result.push(encodeUnreserved(key));
            }
        }
        else if (value === "" && (operator === "&" || operator === "?")) {
            result.push(encodeUnreserved(key) + "=");
        }
        else if (value === "") {
            result.push("");
        }
    }
    return result;
}
function parseUrl(template) {
    return {
        expand: expand.bind(null, template),
    };
}
function expand(template, context) {
    var operators = ["+", "#", ".", "/", ";", "?", "&"];
    return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (_, expression, literal) {
        if (expression) {
            let operator = "";
            const values = [];
            if (operators.indexOf(expression.charAt(0)) !== -1) {
                operator = expression.charAt(0);
                expression = expression.substr(1);
            }
            expression.split(/,/g).forEach(function (variable) {
                var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
                values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
            });
            if (operator && operator !== "+") {
                var separator = ",";
                if (operator === "?") {
                    separator = "&";
                }
                else if (operator !== "#") {
                    separator = operator;
                }
                return (values.length !== 0 ? operator : "") + values.join(separator);
            }
            else {
                return values.join(",");
            }
        }
        else {
            return encodeReserved(literal);
        }
    });
}

function parse(options) {
    // https://fetch.spec.whatwg.org/#methods
    let method = options.method.toUpperCase();
    // replace :varname with {varname} to make it RFC 6570 compatible
    let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
    let headers = Object.assign({}, options.headers);
    let body;
    let parameters = omit(options, [
        "method",
        "baseUrl",
        "url",
        "headers",
        "request",
        "mediaType",
    ]);
    // extract variable names from URL to calculate remaining variables later
    const urlVariableNames = extractUrlVariableNames(url);
    url = parseUrl(url).expand(parameters);
    if (!/^http/.test(url)) {
        url = options.baseUrl + url;
    }
    const omittedParameters = Object.keys(options)
        .filter((option) => urlVariableNames.includes(option))
        .concat("baseUrl");
    const remainingParameters = omit(parameters, omittedParameters);
    const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
    if (!isBinaryRequest) {
        if (options.mediaType.format) {
            // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw
            headers.accept = headers.accept
                .split(/,/)
                .map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`))
                .join(",");
        }
        if (options.mediaType.previews.length) {
            const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
            headers.accept = previewsFromAcceptHeader
                .concat(options.mediaType.previews)
                .map((preview) => {
                const format = options.mediaType.format
                    ? `.${options.mediaType.format}`
                    : "+json";
                return `application/vnd.github.${preview}-preview${format}`;
            })
                .join(",");
        }
    }
    // for GET/HEAD requests, set URL query parameters from remaining parameters
    // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters
    if (["GET", "HEAD"].includes(method)) {
        url = addQueryParameters(url, remainingParameters);
    }
    else {
        if ("data" in remainingParameters) {
            body = remainingParameters.data;
        }
        else {
            if (Object.keys(remainingParameters).length) {
                body = remainingParameters;
            }
            else {
                headers["content-length"] = 0;
            }
        }
    }
    // default content-type for JSON if body is set
    if (!headers["content-type"] && typeof body !== "undefined") {
        headers["content-type"] = "application/json; charset=utf-8";
    }
    // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.
    // fetch does not allow to set `content-length` header, but we can set body to an empty string
    if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
        body = "";
    }
    // Only return body/request keys if present
    return Object.assign({ method, url, headers }, typeof body !== "undefined" ? { body } : null, options.request ? { request: options.request } : null);
}

function endpointWithDefaults(defaults, route, options) {
    return parse(merge(defaults, route, options));
}

function withDefaults(oldDefaults, newDefaults) {
    const DEFAULTS = merge(oldDefaults, newDefaults);
    const endpoint = endpointWithDefaults.bind(null, DEFAULTS);
    return Object.assign(endpoint, {
        DEFAULTS,
        defaults: withDefaults.bind(null, DEFAULTS),
        merge: merge.bind(null, DEFAULTS),
        parse,
    });
}

const VERSION = "6.0.12";

const userAgent = `octokit-endpoint.js/${VERSION} ${getUserAgent()}`;
// DEFAULTS has all properties set that EndpointOptions has, except url.
// So we use RequestParameters and add method as additional required property.
const DEFAULTS = {
    method: "GET",
    baseUrl: "https://api.github.com",
    headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": userAgent,
    },
    mediaType: {
        format: "",
        previews: [],
    },
};

const endpoint = withDefaults(null, DEFAULTS);


//# sourceMappingURL=index.js.map

;// CONCATENATED MODULE: ../node_modules/@octokit/request/node_modules/is-plain-object/dist/is-plain-object.mjs
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

function is_plain_object_isObject(o) {
  return Object.prototype.toString.call(o) === '[object Object]';
}

function is_plain_object_isPlainObject(o) {
  var ctor,prot;

  if (is_plain_object_isObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (ctor === undefined) return true;

  // If has modified prototype
  prot = ctor.prototype;
  if (is_plain_object_isObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
}



// EXTERNAL MODULE: ../node_modules/node-fetch/browser.js
var browser = __webpack_require__(40759);
var browser_default = /*#__PURE__*/__webpack_require__.n(browser);
// EXTERNAL MODULE: ../node_modules/@octokit/request-error/dist-web/index.js + 1 modules
var dist_web = __webpack_require__(35370);
;// CONCATENATED MODULE: ../node_modules/@octokit/request/dist-web/index.js






const dist_web_VERSION = "5.6.3";

function getBufferResponse(response) {
    return response.arrayBuffer();
}

function fetchWrapper(requestOptions) {
    const log = requestOptions.request && requestOptions.request.log
        ? requestOptions.request.log
        : console;
    if (is_plain_object_isPlainObject(requestOptions.body) ||
        Array.isArray(requestOptions.body)) {
        requestOptions.body = JSON.stringify(requestOptions.body);
    }
    let headers = {};
    let status;
    let url;
    const fetch = (requestOptions.request && requestOptions.request.fetch) || (browser_default());
    return fetch(requestOptions.url, Object.assign({
        method: requestOptions.method,
        body: requestOptions.body,
        headers: requestOptions.headers,
        redirect: requestOptions.redirect,
    }, 
    // `requestOptions.request.agent` type is incompatible
    // see https://github.com/octokit/types.ts/pull/264
    requestOptions.request))
        .then(async (response) => {
        url = response.url;
        status = response.status;
        for (const keyAndValue of response.headers) {
            headers[keyAndValue[0]] = keyAndValue[1];
        }
        if ("deprecation" in headers) {
            const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
            const deprecationLink = matches && matches.pop();
            log.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
        }
        if (status === 204 || status === 205) {
            return;
        }
        // GitHub API returns 200 for HEAD requests
        if (requestOptions.method === "HEAD") {
            if (status < 400) {
                return;
            }
            throw new dist_web.RequestError(response.statusText, status, {
                response: {
                    url,
                    status,
                    headers,
                    data: undefined,
                },
                request: requestOptions,
            });
        }
        if (status === 304) {
            throw new dist_web.RequestError("Not modified", status, {
                response: {
                    url,
                    status,
                    headers,
                    data: await getResponseData(response),
                },
                request: requestOptions,
            });
        }
        if (status >= 400) {
            const data = await getResponseData(response);
            const error = new dist_web.RequestError(toErrorMessage(data), status, {
                response: {
                    url,
                    status,
                    headers,
                    data,
                },
                request: requestOptions,
            });
            throw error;
        }
        return getResponseData(response);
    })
        .then((data) => {
        return {
            status,
            url,
            headers,
            data,
        };
    })
        .catch((error) => {
        if (error instanceof dist_web.RequestError)
            throw error;
        throw new dist_web.RequestError(error.message, 500, {
            request: requestOptions,
        });
    });
}
async function getResponseData(response) {
    const contentType = response.headers.get("content-type");
    if (/application\/json/.test(contentType)) {
        return response.json();
    }
    if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
        return response.text();
    }
    return getBufferResponse(response);
}
function toErrorMessage(data) {
    if (typeof data === "string")
        return data;
    // istanbul ignore else - just in case
    if ("message" in data) {
        if (Array.isArray(data.errors)) {
            return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
        }
        return data.message;
    }
    // istanbul ignore next - just in case
    return `Unknown error: ${JSON.stringify(data)}`;
}

function dist_web_withDefaults(oldEndpoint, newDefaults) {
    const endpoint = oldEndpoint.defaults(newDefaults);
    const newApi = function (route, parameters) {
        const endpointOptions = endpoint.merge(route, parameters);
        if (!endpointOptions.request || !endpointOptions.request.hook) {
            return fetchWrapper(endpoint.parse(endpointOptions));
        }
        const request = (route, parameters) => {
            return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));
        };
        Object.assign(request, {
            endpoint,
            defaults: dist_web_withDefaults.bind(null, endpoint),
        });
        return endpointOptions.request.hook(request, endpointOptions);
    };
    return Object.assign(newApi, {
        endpoint,
        defaults: dist_web_withDefaults.bind(null, endpoint),
    });
}

const request = dist_web_withDefaults(endpoint, {
    headers: {
        "user-agent": `octokit-request.js/${dist_web_VERSION} ${getUserAgent()}`,
    },
});


//# sourceMappingURL=index.js.map

;// CONCATENATED MODULE: ../node_modules/@octokit/graphql/dist-web/index.js



const graphql_dist_web_VERSION = "4.8.0";

function _buildMessageForResponseErrors(data) {
    return (`Request failed due to following response errors:\n` +
        data.errors.map((e) => ` - ${e.message}`).join("\n"));
}
class GraphqlResponseError extends Error {
    constructor(request, headers, response) {
        super(_buildMessageForResponseErrors(response));
        this.request = request;
        this.headers = headers;
        this.response = response;
        this.name = "GraphqlResponseError";
        // Expose the errors and response data in their shorthand properties.
        this.errors = response.errors;
        this.data = response.data;
        // Maintains proper stack trace (only available on V8)
        /* istanbul ignore next */
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
    }
}

const NON_VARIABLE_OPTIONS = [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "query",
    "mediaType",
];
const FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
const GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
function graphql(request, query, options) {
    if (options) {
        if (typeof query === "string" && "query" in options) {
            return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
        }
        for (const key in options) {
            if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
                continue;
            return Promise.reject(new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`));
        }
    }
    const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
    const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
        if (NON_VARIABLE_OPTIONS.includes(key)) {
            result[key] = parsedOptions[key];
            return result;
        }
        if (!result.variables) {
            result.variables = {};
        }
        result.variables[key] = parsedOptions[key];
        return result;
    }, {});
    // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix
    // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451
    const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl;
    if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
    }
    return request(requestOptions).then((response) => {
        if (response.data.errors) {
            const headers = {};
            for (const key of Object.keys(response.headers)) {
                headers[key] = response.headers[key];
            }
            throw new GraphqlResponseError(requestOptions, headers, response.data);
        }
        return response.data.data;
    });
}

function graphql_dist_web_withDefaults(request$1, newDefaults) {
    const newRequest = request$1.defaults(newDefaults);
    const newApi = (query, options) => {
        return graphql(newRequest, query, options);
    };
    return Object.assign(newApi, {
        defaults: graphql_dist_web_withDefaults.bind(null, newRequest),
        endpoint: request.endpoint,
    });
}

const graphql$1 = graphql_dist_web_withDefaults(request, {
    headers: {
        "user-agent": `octokit-graphql.js/${graphql_dist_web_VERSION} ${getUserAgent()}`,
    },
    method: "POST",
    url: "/graphql",
});
function withCustomRequest(customRequest) {
    return graphql_dist_web_withDefaults(customRequest, {
        method: "POST",
        url: "/graphql",
    });
}


//# sourceMappingURL=index.js.map

;// CONCATENATED MODULE: ../node_modules/@octokit/auth-token/dist-web/index.js
const REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
const REGEX_IS_INSTALLATION = /^ghs_/;
const REGEX_IS_USER_TO_SERVER = /^ghu_/;
async function auth(token) {
    const isApp = token.split(/\./).length === 3;
    const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) ||
        REGEX_IS_INSTALLATION.test(token);
    const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
    const tokenType = isApp
        ? "app"
        : isInstallation
            ? "installation"
            : isUserToServer
                ? "user-to-server"
                : "oauth";
    return {
        type: "token",
        token: token,
        tokenType,
    };
}

/**
 * Prefix token for usage in the Authorization header
 *
 * @param token OAuth token or JSON Web Token
 */
function withAuthorizationPrefix(token) {
    if (token.split(/\./).length === 3) {
        return `bearer ${token}`;
    }
    return `token ${token}`;
}

async function hook(token, request, route, parameters) {
    const endpoint = request.endpoint.merge(route, parameters);
    endpoint.headers.authorization = withAuthorizationPrefix(token);
    return request(endpoint);
}

const createTokenAuth = function createTokenAuth(token) {
    if (!token) {
        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
    }
    if (typeof token !== "string") {
        throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
    }
    token = token.replace(/^(token|bearer) +/i, "");
    return Object.assign(auth.bind(null, token), {
        hook: hook.bind(null, token),
    });
};


//# sourceMappingURL=index.js.map

;// CONCATENATED MODULE: ../node_modules/@octokit/core/dist-web/index.js






const core_dist_web_VERSION = "3.5.1";

class Octokit {
    constructor(options = {}) {
        const hook = new before_after_hook.Collection();
        const requestDefaults = {
            baseUrl: request.endpoint.DEFAULTS.baseUrl,
            headers: {},
            request: Object.assign({}, options.request, {
                // @ts-ignore internal usage only, no need to type
                hook: hook.bind(null, "request"),
            }),
            mediaType: {
                previews: [],
                format: "",
            },
        };
        // prepend default user agent with `options.userAgent` if set
        requestDefaults.headers["user-agent"] = [
            options.userAgent,
            `octokit-core.js/${core_dist_web_VERSION} ${getUserAgent()}`,
        ]
            .filter(Boolean)
            .join(" ");
        if (options.baseUrl) {
            requestDefaults.baseUrl = options.baseUrl;
        }
        if (options.previews) {
            requestDefaults.mediaType.previews = options.previews;
        }
        if (options.timeZone) {
            requestDefaults.headers["time-zone"] = options.timeZone;
        }
        this.request = request.defaults(requestDefaults);
        this.graphql = withCustomRequest(this.request).defaults(requestDefaults);
        this.log = Object.assign({
            debug: () => { },
            info: () => { },
            warn: console.warn.bind(console),
            error: console.error.bind(console),
        }, options.log);
        this.hook = hook;
        // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance
        //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.
        // (2) If only `options.auth` is set, use the default token authentication strategy.
        // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.
        // TODO: type `options.auth` based on `options.authStrategy`.
        if (!options.authStrategy) {
            if (!options.auth) {
                // (1)
                this.auth = async () => ({
                    type: "unauthenticated",
                });
            }
            else {
                // (2)
                const auth = createTokenAuth(options.auth);
                // @ts-ignore  ¯\_(ツ)_/¯
                hook.wrap("request", auth.hook);
                this.auth = auth;
            }
        }
        else {
            const { authStrategy, ...otherOptions } = options;
            const auth = authStrategy(Object.assign({
                request: this.request,
                log: this.log,
                // we pass the current octokit instance as well as its constructor options
                // to allow for authentication strategies that return a new octokit instance
                // that shares the same internal state as the current one. The original
                // requirement for this was the "event-octokit" authentication strategy
                // of https://github.com/probot/octokit-auth-probot.
                octokit: this,
                octokitOptions: otherOptions,
            }, options.auth));
            // @ts-ignore  ¯\_(ツ)_/¯
            hook.wrap("request", auth.hook);
            this.auth = auth;
        }
        // apply plugins
        // https://stackoverflow.com/a/16345172
        const classConstructor = this.constructor;
        classConstructor.plugins.forEach((plugin) => {
            Object.assign(this, plugin(this, options));
        });
    }
    static defaults(defaults) {
        const OctokitWithDefaults = class extends this {
            constructor(...args) {
                const options = args[0] || {};
                if (typeof defaults === "function") {
                    super(defaults(options));
                    return;
                }
                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent
                    ? {
                        userAgent: `${options.userAgent} ${defaults.userAgent}`,
                    }
                    : null));
            }
        };
        return OctokitWithDefaults;
    }
    /**
     * Attach a plugin (or many) to your Octokit instance.
     *
     * @example
     * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
     */
    static plugin(...newPlugins) {
        var _a;
        const currentPlugins = this.plugins;
        const NewOctokit = (_a = class extends this {
            },
            _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))),
            _a);
        return NewOctokit;
    }
}
Octokit.VERSION = core_dist_web_VERSION;
Octokit.plugins = [];


//# sourceMappingURL=index.js.map

;// CONCATENATED MODULE: ../node_modules/@octokit/plugin-request-log/dist-web/index.js
const plugin_request_log_dist_web_VERSION = "1.0.4";

/**
 * @param octokit Octokit instance
 * @param options Options passed to Octokit constructor
 */
function requestLog(octokit) {
    octokit.hook.wrap("request", (request, options) => {
        octokit.log.debug("request", options);
        const start = Date.now();
        const requestOptions = octokit.request.endpoint.parse(options);
        const path = requestOptions.url.replace(options.baseUrl, "");
        return request(options)
            .then((response) => {
            octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);
            return response;
        })
            .catch((error) => {
            octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`);
            throw error;
        });
    });
}
requestLog.VERSION = plugin_request_log_dist_web_VERSION;


//# sourceMappingURL=index.js.map

;// CONCATENATED MODULE: ../node_modules/@octokit/plugin-paginate-rest/dist-web/index.js
const plugin_paginate_rest_dist_web_VERSION = "2.17.0";

/**
 * Some “list” response that can be paginated have a different response structure
 *
 * They have a `total_count` key in the response (search also has `incomplete_results`,
 * /installation/repositories also has `repository_selection`), as well as a key with
 * the list of the items which name varies from endpoint to endpoint.
 *
 * Octokit normalizes these responses so that paginated results are always returned following
 * the same structure. One challenge is that if the list response has only one page, no Link
 * header is provided, so this header alone is not sufficient to check wether a response is
 * paginated or not.
 *
 * We check if a "total_count" key is present in the response data, but also make sure that
 * a "url" property is not, as the "Get the combined status for a specific ref" endpoint would
 * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref
 */
function normalizePaginatedListResponse(response) {
    // endpoints can respond with 204 if repository is empty
    if (!response.data) {
        return {
            ...response,
            data: [],
        };
    }
    const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
    if (!responseNeedsNormalization)
        return response;
    // keep the additional properties intact as there is currently no other way
    // to retrieve the same information.
    const incompleteResults = response.data.incomplete_results;
    const repositorySelection = response.data.repository_selection;
    const totalCount = response.data.total_count;
    delete response.data.incomplete_results;
    delete response.data.repository_selection;
    delete response.data.total_count;
    const namespaceKey = Object.keys(response.data)[0];
    const data = response.data[namespaceKey];
    response.data = data;
    if (typeof incompleteResults !== "undefined") {
        response.data.incomplete_results = incompleteResults;
    }
    if (typeof repositorySelection !== "undefined") {
        response.data.repository_selection = repositorySelection;
    }
    response.data.total_count = totalCount;
    return response;
}

function iterator(octokit, route, parameters) {
    const options = typeof route === "function"
        ? route.endpoint(parameters)
        : octokit.request.endpoint(route, parameters);
    const requestMethod = typeof route === "function" ? route : octokit.request;
    const method = options.method;
    const headers = options.headers;
    let url = options.url;
    return {
        [Symbol.asyncIterator]: () => ({
            async next() {
                if (!url)
                    return { done: true };
                try {
                    const response = await requestMethod({ method, url, headers });
                    const normalizedResponse = normalizePaginatedListResponse(response);
                    // `response.headers.link` format:
                    // '<https://api.github.com/users/aseemk/followers?page=2>; rel="next", <https://api.github.com/users/aseemk/followers?page=2>; rel="last"'
                    // sets `url` to undefined if "next" URL is not present or `link` header is not set
                    url = ((normalizedResponse.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
                    return { value: normalizedResponse };
                }
                catch (error) {
                    if (error.status !== 409)
                        throw error;
                    url = "";
                    return {
                        value: {
                            status: 200,
                            headers: {},
                            data: [],
                        },
                    };
                }
            },
        }),
    };
}

function paginate(octokit, route, parameters, mapFn) {
    if (typeof parameters === "function") {
        mapFn = parameters;
        parameters = undefined;
    }
    return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
}
function gather(octokit, results, iterator, mapFn) {
    return iterator.next().then((result) => {
        if (result.done) {
            return results;
        }
        let earlyExit = false;
        function done() {
            earlyExit = true;
        }
        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
        if (earlyExit) {
            return results;
        }
        return gather(octokit, results, iterator, mapFn);
    });
}

const composePaginateRest = Object.assign(paginate, {
    iterator,
});

const paginatingEndpoints = (/* unused pure expression or super */ null && ([
    "GET /app/hook/deliveries",
    "GET /app/installations",
    "GET /applications/grants",
    "GET /authorizations",
    "GET /enterprises/{enterprise}/actions/permissions/organizations",
    "GET /enterprises/{enterprise}/actions/runner-groups",
    "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
    "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
    "GET /enterprises/{enterprise}/actions/runners",
    "GET /enterprises/{enterprise}/actions/runners/downloads",
    "GET /events",
    "GET /gists",
    "GET /gists/public",
    "GET /gists/starred",
    "GET /gists/{gist_id}/comments",
    "GET /gists/{gist_id}/commits",
    "GET /gists/{gist_id}/forks",
    "GET /installation/repositories",
    "GET /issues",
    "GET /marketplace_listing/plans",
    "GET /marketplace_listing/plans/{plan_id}/accounts",
    "GET /marketplace_listing/stubbed/plans",
    "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
    "GET /networks/{owner}/{repo}/events",
    "GET /notifications",
    "GET /organizations",
    "GET /orgs/{org}/actions/permissions/repositories",
    "GET /orgs/{org}/actions/runner-groups",
    "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
    "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
    "GET /orgs/{org}/actions/runners",
    "GET /orgs/{org}/actions/runners/downloads",
    "GET /orgs/{org}/actions/secrets",
    "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
    "GET /orgs/{org}/blocks",
    "GET /orgs/{org}/credential-authorizations",
    "GET /orgs/{org}/events",
    "GET /orgs/{org}/failed_invitations",
    "GET /orgs/{org}/hooks",
    "GET /orgs/{org}/hooks/{hook_id}/deliveries",
    "GET /orgs/{org}/installations",
    "GET /orgs/{org}/invitations",
    "GET /orgs/{org}/invitations/{invitation_id}/teams",
    "GET /orgs/{org}/issues",
    "GET /orgs/{org}/members",
    "GET /orgs/{org}/migrations",
    "GET /orgs/{org}/migrations/{migration_id}/repositories",
    "GET /orgs/{org}/outside_collaborators",
    "GET /orgs/{org}/packages",
    "GET /orgs/{org}/projects",
    "GET /orgs/{org}/public_members",
    "GET /orgs/{org}/repos",
    "GET /orgs/{org}/secret-scanning/alerts",
    "GET /orgs/{org}/team-sync/groups",
    "GET /orgs/{org}/teams",
    "GET /orgs/{org}/teams/{team_slug}/discussions",
    "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
    "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
    "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
    "GET /orgs/{org}/teams/{team_slug}/invitations",
    "GET /orgs/{org}/teams/{team_slug}/members",
    "GET /orgs/{org}/teams/{team_slug}/projects",
    "GET /orgs/{org}/teams/{team_slug}/repos",
    "GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
    "GET /orgs/{org}/teams/{team_slug}/teams",
    "GET /projects/columns/{column_id}/cards",
    "GET /projects/{project_id}/collaborators",
    "GET /projects/{project_id}/columns",
    "GET /repos/{owner}/{repo}/actions/artifacts",
    "GET /repos/{owner}/{repo}/actions/runners",
    "GET /repos/{owner}/{repo}/actions/runners/downloads",
    "GET /repos/{owner}/{repo}/actions/runs",
    "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
    "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
    "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
    "GET /repos/{owner}/{repo}/actions/secrets",
    "GET /repos/{owner}/{repo}/actions/workflows",
    "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
    "GET /repos/{owner}/{repo}/assignees",
    "GET /repos/{owner}/{repo}/autolinks",
    "GET /repos/{owner}/{repo}/branches",
    "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
    "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
    "GET /repos/{owner}/{repo}/code-scanning/alerts",
    "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
    "GET /repos/{owner}/{repo}/code-scanning/analyses",
    "GET /repos/{owner}/{repo}/collaborators",
    "GET /repos/{owner}/{repo}/comments",
    "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
    "GET /repos/{owner}/{repo}/commits",
    "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
    "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
    "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
    "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
    "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
    "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
    "GET /repos/{owner}/{repo}/contributors",
    "GET /repos/{owner}/{repo}/deployments",
    "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
    "GET /repos/{owner}/{repo}/events",
    "GET /repos/{owner}/{repo}/forks",
    "GET /repos/{owner}/{repo}/git/matching-refs/{ref}",
    "GET /repos/{owner}/{repo}/hooks",
    "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
    "GET /repos/{owner}/{repo}/invitations",
    "GET /repos/{owner}/{repo}/issues",
    "GET /repos/{owner}/{repo}/issues/comments",
    "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
    "GET /repos/{owner}/{repo}/issues/events",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
    "GET /repos/{owner}/{repo}/keys",
    "GET /repos/{owner}/{repo}/labels",
    "GET /repos/{owner}/{repo}/milestones",
    "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
    "GET /repos/{owner}/{repo}/notifications",
    "GET /repos/{owner}/{repo}/pages/builds",
    "GET /repos/{owner}/{repo}/projects",
    "GET /repos/{owner}/{repo}/pulls",
    "GET /repos/{owner}/{repo}/pulls/comments",
    "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
    "GET /repos/{owner}/{repo}/releases",
    "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
    "GET /repos/{owner}/{repo}/secret-scanning/alerts",
    "GET /repos/{owner}/{repo}/stargazers",
    "GET /repos/{owner}/{repo}/subscribers",
    "GET /repos/{owner}/{repo}/tags",
    "GET /repos/{owner}/{repo}/teams",
    "GET /repositories",
    "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
    "GET /scim/v2/enterprises/{enterprise}/Groups",
    "GET /scim/v2/enterprises/{enterprise}/Users",
    "GET /scim/v2/organizations/{org}/Users",
    "GET /search/code",
    "GET /search/commits",
    "GET /search/issues",
    "GET /search/labels",
    "GET /search/repositories",
    "GET /search/topics",
    "GET /search/users",
    "GET /teams/{team_id}/discussions",
    "GET /teams/{team_id}/discussions/{discussion_number}/comments",
    "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
    "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
    "GET /teams/{team_id}/invitations",
    "GET /teams/{team_id}/members",
    "GET /teams/{team_id}/projects",
    "GET /teams/{team_id}/repos",
    "GET /teams/{team_id}/team-sync/group-mappings",
    "GET /teams/{team_id}/teams",
    "GET /user/blocks",
    "GET /user/emails",
    "GET /user/followers",
    "GET /user/following",
    "GET /user/gpg_keys",
    "GET /user/installations",
    "GET /user/installations/{installation_id}/repositories",
    "GET /user/issues",
    "GET /user/keys",
    "GET /user/marketplace_purchases",
    "GET /user/marketplace_purchases/stubbed",
    "GET /user/memberships/orgs",
    "GET /user/migrations",
    "GET /user/migrations/{migration_id}/repositories",
    "GET /user/orgs",
    "GET /user/packages",
    "GET /user/public_emails",
    "GET /user/repos",
    "GET /user/repository_invitations",
    "GET /user/starred",
    "GET /user/subscriptions",
    "GET /user/teams",
    "GET /users",
    "GET /users/{username}/events",
    "GET /users/{username}/events/orgs/{org}",
    "GET /users/{username}/events/public",
    "GET /users/{username}/followers",
    "GET /users/{username}/following",
    "GET /users/{username}/gists",
    "GET /users/{username}/gpg_keys",
    "GET /users/{username}/keys",
    "GET /users/{username}/orgs",
    "GET /users/{username}/packages",
    "GET /users/{username}/projects",
    "GET /users/{username}/received_events",
    "GET /users/{username}/received_events/public",
    "GET /users/{username}/repos",
    "GET /users/{username}/starred",
    "GET /users/{username}/subscriptions",
]));

function isPaginatingEndpoint(arg) {
    if (typeof arg === "string") {
        return paginatingEndpoints.includes(arg);
    }
    else {
        return false;
    }
}

/**
 * @param octokit Octokit instance
 * @param options Options passed to Octokit constructor
 */
function paginateRest(octokit) {
    return {
        paginate: Object.assign(paginate.bind(null, octokit), {
            iterator: iterator.bind(null, octokit),
        }),
    };
}
paginateRest.VERSION = plugin_paginate_rest_dist_web_VERSION;


//# sourceMappingURL=index.js.map

;// CONCATENATED MODULE: ../node_modules/@octokit/plugin-rest-endpoint-methods/dist-web/index.js
const Endpoints = {
    actions: {
        addSelectedRepoToOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        ],
        approveWorkflowRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve",
        ],
        cancelWorkflowRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
        ],
        createOrUpdateEnvironmentSecret: [
            "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
        ],
        createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
        createOrUpdateRepoSecret: [
            "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}",
        ],
        createRegistrationTokenForOrg: [
            "POST /orgs/{org}/actions/runners/registration-token",
        ],
        createRegistrationTokenForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/registration-token",
        ],
        createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
        createRemoveTokenForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/remove-token",
        ],
        createWorkflowDispatch: [
            "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
        ],
        deleteArtifact: [
            "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
        ],
        deleteEnvironmentSecret: [
            "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
        deleteRepoSecret: [
            "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}",
        ],
        deleteSelfHostedRunnerFromOrg: [
            "DELETE /orgs/{org}/actions/runners/{runner_id}",
        ],
        deleteSelfHostedRunnerFromRepo: [
            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}",
        ],
        deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
        deleteWorkflowRunLogs: [
            "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        ],
        disableSelectedRepositoryGithubActionsOrganization: [
            "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}",
        ],
        disableWorkflow: [
            "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable",
        ],
        downloadArtifact: [
            "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
        ],
        downloadJobLogsForWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
        ],
        downloadWorkflowRunAttemptLogs: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs",
        ],
        downloadWorkflowRunLogs: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        ],
        enableSelectedRepositoryGithubActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}",
        ],
        enableWorkflow: [
            "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable",
        ],
        getAllowedActionsOrganization: [
            "GET /orgs/{org}/actions/permissions/selected-actions",
        ],
        getAllowedActionsRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions/selected-actions",
        ],
        getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
        getEnvironmentPublicKey: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key",
        ],
        getEnvironmentSecret: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
        ],
        getGithubActionsPermissionsOrganization: [
            "GET /orgs/{org}/actions/permissions",
        ],
        getGithubActionsPermissionsRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions",
        ],
        getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
        getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
        getPendingDeploymentsForRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
        ],
        getRepoPermissions: [
            "GET /repos/{owner}/{repo}/actions/permissions",
            {},
            { renamed: ["actions", "getGithubActionsPermissionsRepository"] },
        ],
        getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
        getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        getReviewsForRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals",
        ],
        getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
        getSelfHostedRunnerForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners/{runner_id}",
        ],
        getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
        getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
        getWorkflowRunAttempt: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}",
        ],
        getWorkflowRunUsage: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing",
        ],
        getWorkflowUsage: [
            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
        ],
        listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
        listEnvironmentSecrets: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
        ],
        listJobsForWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
        ],
        listJobsForWorkflowRunAttempt: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
        ],
        listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
        listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
        listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
        listRunnerApplicationsForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners/downloads",
        ],
        listSelectedReposForOrgSecret: [
            "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
        ],
        listSelectedRepositoriesEnabledGithubActionsOrganization: [
            "GET /orgs/{org}/actions/permissions/repositories",
        ],
        listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
        listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
        listWorkflowRunArtifacts: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
        ],
        listWorkflowRuns: [
            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
        ],
        listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
        removeSelectedRepoFromOrgSecret: [
            "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        ],
        reviewPendingDeploymentsForRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
        ],
        setAllowedActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/selected-actions",
        ],
        setAllowedActionsRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions",
        ],
        setGithubActionsPermissionsOrganization: [
            "PUT /orgs/{org}/actions/permissions",
        ],
        setGithubActionsPermissionsRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions",
        ],
        setSelectedReposForOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories",
        ],
        setSelectedRepositoriesEnabledGithubActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/repositories",
        ],
    },
    activity: {
        checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
        deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
        deleteThreadSubscription: [
            "DELETE /notifications/threads/{thread_id}/subscription",
        ],
        getFeeds: ["GET /feeds"],
        getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
        getThread: ["GET /notifications/threads/{thread_id}"],
        getThreadSubscriptionForAuthenticatedUser: [
            "GET /notifications/threads/{thread_id}/subscription",
        ],
        listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
        listNotificationsForAuthenticatedUser: ["GET /notifications"],
        listOrgEventsForAuthenticatedUser: [
            "GET /users/{username}/events/orgs/{org}",
        ],
        listPublicEvents: ["GET /events"],
        listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
        listPublicEventsForUser: ["GET /users/{username}/events/public"],
        listPublicOrgEvents: ["GET /orgs/{org}/events"],
        listReceivedEventsForUser: ["GET /users/{username}/received_events"],
        listReceivedPublicEventsForUser: [
            "GET /users/{username}/received_events/public",
        ],
        listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
        listRepoNotificationsForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/notifications",
        ],
        listReposStarredByAuthenticatedUser: ["GET /user/starred"],
        listReposStarredByUser: ["GET /users/{username}/starred"],
        listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
        listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
        listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
        listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
        markNotificationsAsRead: ["PUT /notifications"],
        markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
        markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
        setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
        setThreadSubscription: [
            "PUT /notifications/threads/{thread_id}/subscription",
        ],
        starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
        unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"],
    },
    apps: {
        addRepoToInstallation: [
            "PUT /user/installations/{installation_id}/repositories/{repository_id}",
            {},
            { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] },
        ],
        addRepoToInstallationForAuthenticatedUser: [
            "PUT /user/installations/{installation_id}/repositories/{repository_id}",
        ],
        checkToken: ["POST /applications/{client_id}/token"],
        createContentAttachment: [
            "POST /content_references/{content_reference_id}/attachments",
            { mediaType: { previews: ["corsair"] } },
        ],
        createContentAttachmentForRepo: [
            "POST /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments",
            { mediaType: { previews: ["corsair"] } },
        ],
        createFromManifest: ["POST /app-manifests/{code}/conversions"],
        createInstallationAccessToken: [
            "POST /app/installations/{installation_id}/access_tokens",
        ],
        deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
        deleteInstallation: ["DELETE /app/installations/{installation_id}"],
        deleteToken: ["DELETE /applications/{client_id}/token"],
        getAuthenticated: ["GET /app"],
        getBySlug: ["GET /apps/{app_slug}"],
        getInstallation: ["GET /app/installations/{installation_id}"],
        getOrgInstallation: ["GET /orgs/{org}/installation"],
        getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
        getSubscriptionPlanForAccount: [
            "GET /marketplace_listing/accounts/{account_id}",
        ],
        getSubscriptionPlanForAccountStubbed: [
            "GET /marketplace_listing/stubbed/accounts/{account_id}",
        ],
        getUserInstallation: ["GET /users/{username}/installation"],
        getWebhookConfigForApp: ["GET /app/hook/config"],
        getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
        listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
        listAccountsForPlanStubbed: [
            "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
        ],
        listInstallationReposForAuthenticatedUser: [
            "GET /user/installations/{installation_id}/repositories",
        ],
        listInstallations: ["GET /app/installations"],
        listInstallationsForAuthenticatedUser: ["GET /user/installations"],
        listPlans: ["GET /marketplace_listing/plans"],
        listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
        listReposAccessibleToInstallation: ["GET /installation/repositories"],
        listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
        listSubscriptionsForAuthenticatedUserStubbed: [
            "GET /user/marketplace_purchases/stubbed",
        ],
        listWebhookDeliveries: ["GET /app/hook/deliveries"],
        redeliverWebhookDelivery: [
            "POST /app/hook/deliveries/{delivery_id}/attempts",
        ],
        removeRepoFromInstallation: [
            "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
            {},
            { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] },
        ],
        removeRepoFromInstallationForAuthenticatedUser: [
            "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
        ],
        resetToken: ["PATCH /applications/{client_id}/token"],
        revokeInstallationAccessToken: ["DELETE /installation/token"],
        scopeToken: ["POST /applications/{client_id}/token/scoped"],
        suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
        unsuspendInstallation: [
            "DELETE /app/installations/{installation_id}/suspended",
        ],
        updateWebhookConfigForApp: ["PATCH /app/hook/config"],
    },
    billing: {
        getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
        getGithubActionsBillingUser: [
            "GET /users/{username}/settings/billing/actions",
        ],
        getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
        getGithubPackagesBillingUser: [
            "GET /users/{username}/settings/billing/packages",
        ],
        getSharedStorageBillingOrg: [
            "GET /orgs/{org}/settings/billing/shared-storage",
        ],
        getSharedStorageBillingUser: [
            "GET /users/{username}/settings/billing/shared-storage",
        ],
    },
    checks: {
        create: ["POST /repos/{owner}/{repo}/check-runs"],
        createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
        get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
        getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
        listAnnotations: [
            "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
        ],
        listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
        listForSuite: [
            "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
        ],
        listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
        rerequestRun: [
            "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest",
        ],
        rerequestSuite: [
            "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",
        ],
        setSuitesPreferences: [
            "PATCH /repos/{owner}/{repo}/check-suites/preferences",
        ],
        update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"],
    },
    codeScanning: {
        deleteAnalysis: [
            "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}",
        ],
        getAlert: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
            {},
            { renamedParameters: { alert_id: "alert_number" } },
        ],
        getAnalysis: [
            "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
        ],
        getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
        listAlertInstances: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
        ],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
        listAlertsInstances: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
            {},
            { renamed: ["codeScanning", "listAlertInstances"] },
        ],
        listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
        updateAlert: [
            "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        ],
        uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"],
    },
    codesOfConduct: {
        getAllCodesOfConduct: ["GET /codes_of_conduct"],
        getConductCode: ["GET /codes_of_conduct/{key}"],
    },
    emojis: { get: ["GET /emojis"] },
    enterpriseAdmin: {
        disableSelectedOrganizationGithubActionsEnterprise: [
            "DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}",
        ],
        enableSelectedOrganizationGithubActionsEnterprise: [
            "PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}",
        ],
        getAllowedActionsEnterprise: [
            "GET /enterprises/{enterprise}/actions/permissions/selected-actions",
        ],
        getGithubActionsPermissionsEnterprise: [
            "GET /enterprises/{enterprise}/actions/permissions",
        ],
        listSelectedOrganizationsEnabledGithubActionsEnterprise: [
            "GET /enterprises/{enterprise}/actions/permissions/organizations",
        ],
        setAllowedActionsEnterprise: [
            "PUT /enterprises/{enterprise}/actions/permissions/selected-actions",
        ],
        setGithubActionsPermissionsEnterprise: [
            "PUT /enterprises/{enterprise}/actions/permissions",
        ],
        setSelectedOrganizationsEnabledGithubActionsEnterprise: [
            "PUT /enterprises/{enterprise}/actions/permissions/organizations",
        ],
    },
    gists: {
        checkIsStarred: ["GET /gists/{gist_id}/star"],
        create: ["POST /gists"],
        createComment: ["POST /gists/{gist_id}/comments"],
        delete: ["DELETE /gists/{gist_id}"],
        deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
        fork: ["POST /gists/{gist_id}/forks"],
        get: ["GET /gists/{gist_id}"],
        getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
        getRevision: ["GET /gists/{gist_id}/{sha}"],
        list: ["GET /gists"],
        listComments: ["GET /gists/{gist_id}/comments"],
        listCommits: ["GET /gists/{gist_id}/commits"],
        listForUser: ["GET /users/{username}/gists"],
        listForks: ["GET /gists/{gist_id}/forks"],
        listPublic: ["GET /gists/public"],
        listStarred: ["GET /gists/starred"],
        star: ["PUT /gists/{gist_id}/star"],
        unstar: ["DELETE /gists/{gist_id}/star"],
        update: ["PATCH /gists/{gist_id}"],
        updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"],
    },
    git: {
        createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
        createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
        createRef: ["POST /repos/{owner}/{repo}/git/refs"],
        createTag: ["POST /repos/{owner}/{repo}/git/tags"],
        createTree: ["POST /repos/{owner}/{repo}/git/trees"],
        deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
        getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
        getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
        getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
        getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
        getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
        listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
        updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"],
    },
    gitignore: {
        getAllTemplates: ["GET /gitignore/templates"],
        getTemplate: ["GET /gitignore/templates/{name}"],
    },
    interactions: {
        getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
        getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
        getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
        getRestrictionsForYourPublicRepos: [
            "GET /user/interaction-limits",
            {},
            { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] },
        ],
        removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
        removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
        removeRestrictionsForRepo: [
            "DELETE /repos/{owner}/{repo}/interaction-limits",
        ],
        removeRestrictionsForYourPublicRepos: [
            "DELETE /user/interaction-limits",
            {},
            { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] },
        ],
        setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
        setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
        setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
        setRestrictionsForYourPublicRepos: [
            "PUT /user/interaction-limits",
            {},
            { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] },
        ],
    },
    issues: {
        addAssignees: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees",
        ],
        addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
        create: ["POST /repos/{owner}/{repo}/issues"],
        createComment: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/comments",
        ],
        createLabel: ["POST /repos/{owner}/{repo}/labels"],
        createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
        deleteComment: [
            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}",
        ],
        deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
        deleteMilestone: [
            "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}",
        ],
        get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
        getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
        getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
        getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
        list: ["GET /issues"],
        listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
        listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
        listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
        listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
        listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
        listEventsForTimeline: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
        ],
        listForAuthenticatedUser: ["GET /user/issues"],
        listForOrg: ["GET /orgs/{org}/issues"],
        listForRepo: ["GET /repos/{owner}/{repo}/issues"],
        listLabelsForMilestone: [
            "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
        ],
        listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
        listLabelsOnIssue: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
        ],
        listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
        lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        removeAllLabels: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels",
        ],
        removeAssignees: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees",
        ],
        removeLabel: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
        ],
        setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
        updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
        updateMilestone: [
            "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}",
        ],
    },
    licenses: {
        get: ["GET /licenses/{license}"],
        getAllCommonlyUsed: ["GET /licenses"],
        getForRepo: ["GET /repos/{owner}/{repo}/license"],
    },
    markdown: {
        render: ["POST /markdown"],
        renderRaw: [
            "POST /markdown/raw",
            { headers: { "content-type": "text/plain; charset=utf-8" } },
        ],
    },
    meta: {
        get: ["GET /meta"],
        getOctocat: ["GET /octocat"],
        getZen: ["GET /zen"],
        root: ["GET /"],
    },
    migrations: {
        cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
        deleteArchiveForAuthenticatedUser: [
            "DELETE /user/migrations/{migration_id}/archive",
        ],
        deleteArchiveForOrg: [
            "DELETE /orgs/{org}/migrations/{migration_id}/archive",
        ],
        downloadArchiveForOrg: [
            "GET /orgs/{org}/migrations/{migration_id}/archive",
        ],
        getArchiveForAuthenticatedUser: [
            "GET /user/migrations/{migration_id}/archive",
        ],
        getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
        getImportStatus: ["GET /repos/{owner}/{repo}/import"],
        getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
        getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
        getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
        listForAuthenticatedUser: ["GET /user/migrations"],
        listForOrg: ["GET /orgs/{org}/migrations"],
        listReposForAuthenticatedUser: [
            "GET /user/migrations/{migration_id}/repositories",
        ],
        listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
        listReposForUser: [
            "GET /user/migrations/{migration_id}/repositories",
            {},
            { renamed: ["migrations", "listReposForAuthenticatedUser"] },
        ],
        mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
        setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
        startForAuthenticatedUser: ["POST /user/migrations"],
        startForOrg: ["POST /orgs/{org}/migrations"],
        startImport: ["PUT /repos/{owner}/{repo}/import"],
        unlockRepoForAuthenticatedUser: [
            "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock",
        ],
        unlockRepoForOrg: [
            "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",
        ],
        updateImport: ["PATCH /repos/{owner}/{repo}/import"],
    },
    orgs: {
        blockUser: ["PUT /orgs/{org}/blocks/{username}"],
        cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
        checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
        checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
        checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
        convertMemberToOutsideCollaborator: [
            "PUT /orgs/{org}/outside_collaborators/{username}",
        ],
        createInvitation: ["POST /orgs/{org}/invitations"],
        createWebhook: ["POST /orgs/{org}/hooks"],
        deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
        get: ["GET /orgs/{org}"],
        getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
        getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
        getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
        getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
        getWebhookDelivery: [
            "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}",
        ],
        list: ["GET /organizations"],
        listAppInstallations: ["GET /orgs/{org}/installations"],
        listBlockedUsers: ["GET /orgs/{org}/blocks"],
        listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
        listForAuthenticatedUser: ["GET /user/orgs"],
        listForUser: ["GET /users/{username}/orgs"],
        listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
        listMembers: ["GET /orgs/{org}/members"],
        listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
        listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
        listPendingInvitations: ["GET /orgs/{org}/invitations"],
        listPublicMembers: ["GET /orgs/{org}/public_members"],
        listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
        listWebhooks: ["GET /orgs/{org}/hooks"],
        pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: [
            "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
        ],
        removeMember: ["DELETE /orgs/{org}/members/{username}"],
        removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
        removeOutsideCollaborator: [
            "DELETE /orgs/{org}/outside_collaborators/{username}",
        ],
        removePublicMembershipForAuthenticatedUser: [
            "DELETE /orgs/{org}/public_members/{username}",
        ],
        setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
        setPublicMembershipForAuthenticatedUser: [
            "PUT /orgs/{org}/public_members/{username}",
        ],
        unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
        update: ["PATCH /orgs/{org}"],
        updateMembershipForAuthenticatedUser: [
            "PATCH /user/memberships/orgs/{org}",
        ],
        updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
        updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"],
    },
    packages: {
        deletePackageForAuthenticatedUser: [
            "DELETE /user/packages/{package_type}/{package_name}",
        ],
        deletePackageForOrg: [
            "DELETE /orgs/{org}/packages/{package_type}/{package_name}",
        ],
        deletePackageForUser: [
            "DELETE /users/{username}/packages/{package_type}/{package_name}",
        ],
        deletePackageVersionForAuthenticatedUser: [
            "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}",
        ],
        deletePackageVersionForOrg: [
            "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        ],
        deletePackageVersionForUser: [
            "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        ],
        getAllPackageVersionsForAPackageOwnedByAnOrg: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
            {},
            { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] },
        ],
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions",
            {},
            {
                renamed: [
                    "packages",
                    "getAllPackageVersionsForPackageOwnedByAuthenticatedUser",
                ],
            },
        ],
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions",
        ],
        getAllPackageVersionsForPackageOwnedByOrg: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
        ],
        getAllPackageVersionsForPackageOwnedByUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}/versions",
        ],
        getPackageForAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}",
        ],
        getPackageForOrganization: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}",
        ],
        getPackageForUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}",
        ],
        getPackageVersionForAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}",
        ],
        getPackageVersionForOrganization: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        ],
        getPackageVersionForUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        ],
        listPackagesForAuthenticatedUser: ["GET /user/packages"],
        listPackagesForOrganization: ["GET /orgs/{org}/packages"],
        listPackagesForUser: ["GET /users/{username}/packages"],
        restorePackageForAuthenticatedUser: [
            "POST /user/packages/{package_type}/{package_name}/restore{?token}",
        ],
        restorePackageForOrg: [
            "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}",
        ],
        restorePackageForUser: [
            "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}",
        ],
        restorePackageVersionForAuthenticatedUser: [
            "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        ],
        restorePackageVersionForOrg: [
            "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        ],
        restorePackageVersionForUser: [
            "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        ],
    },
    projects: {
        addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
        createCard: ["POST /projects/columns/{column_id}/cards"],
        createColumn: ["POST /projects/{project_id}/columns"],
        createForAuthenticatedUser: ["POST /user/projects"],
        createForOrg: ["POST /orgs/{org}/projects"],
        createForRepo: ["POST /repos/{owner}/{repo}/projects"],
        delete: ["DELETE /projects/{project_id}"],
        deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
        deleteColumn: ["DELETE /projects/columns/{column_id}"],
        get: ["GET /projects/{project_id}"],
        getCard: ["GET /projects/columns/cards/{card_id}"],
        getColumn: ["GET /projects/columns/{column_id}"],
        getPermissionForUser: [
            "GET /projects/{project_id}/collaborators/{username}/permission",
        ],
        listCards: ["GET /projects/columns/{column_id}/cards"],
        listCollaborators: ["GET /projects/{project_id}/collaborators"],
        listColumns: ["GET /projects/{project_id}/columns"],
        listForOrg: ["GET /orgs/{org}/projects"],
        listForRepo: ["GET /repos/{owner}/{repo}/projects"],
        listForUser: ["GET /users/{username}/projects"],
        moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
        moveColumn: ["POST /projects/columns/{column_id}/moves"],
        removeCollaborator: [
            "DELETE /projects/{project_id}/collaborators/{username}",
        ],
        update: ["PATCH /projects/{project_id}"],
        updateCard: ["PATCH /projects/columns/cards/{card_id}"],
        updateColumn: ["PATCH /projects/columns/{column_id}"],
    },
    pulls: {
        checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        create: ["POST /repos/{owner}/{repo}/pulls"],
        createReplyForReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
        ],
        createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        createReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments",
        ],
        deletePendingReview: [
            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        ],
        deleteReviewComment: [
            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}",
        ],
        dismissReview: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
        ],
        get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
        getReview: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        ],
        getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
        list: ["GET /repos/{owner}/{repo}/pulls"],
        listCommentsForReview: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
        ],
        listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
        listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
        listRequestedReviewers: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        ],
        listReviewComments: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
        ],
        listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
        listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        removeRequestedReviewers: [
            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        ],
        requestReviewers: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        ],
        submitReview: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
        ],
        update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
        updateBranch: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
        ],
        updateReview: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        ],
        updateReviewComment: [
            "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}",
        ],
    },
    rateLimit: { get: ["GET /rate_limit"] },
    reactions: {
        createForCommitComment: [
            "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",
        ],
        createForIssue: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",
        ],
        createForIssueComment: [
            "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        ],
        createForPullRequestReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        ],
        createForRelease: [
            "POST /repos/{owner}/{repo}/releases/{release_id}/reactions",
        ],
        createForTeamDiscussionCommentInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        ],
        createForTeamDiscussionInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        ],
        deleteForCommitComment: [
            "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
        ],
        deleteForIssue: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
        ],
        deleteForIssueComment: [
            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
        ],
        deleteForPullRequestComment: [
            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
        ],
        deleteForTeamDiscussion: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
        ],
        deleteForTeamDiscussionComment: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
        ],
        listForCommitComment: [
            "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
        ],
        listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
        listForIssueComment: [
            "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        ],
        listForPullRequestReviewComment: [
            "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        ],
        listForTeamDiscussionCommentInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        ],
        listForTeamDiscussionInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        ],
    },
    repos: {
        acceptInvitation: [
            "PATCH /user/repository_invitations/{invitation_id}",
            {},
            { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] },
        ],
        acceptInvitationForAuthenticatedUser: [
            "PATCH /user/repository_invitations/{invitation_id}",
        ],
        addAppAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            { mapToData: "apps" },
        ],
        addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
        addStatusCheckContexts: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            { mapToData: "contexts" },
        ],
        addTeamAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            { mapToData: "teams" },
        ],
        addUserAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            { mapToData: "users" },
        ],
        checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
        checkVulnerabilityAlerts: [
            "GET /repos/{owner}/{repo}/vulnerability-alerts",
        ],
        compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
        compareCommitsWithBasehead: [
            "GET /repos/{owner}/{repo}/compare/{basehead}",
        ],
        createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
        createCommitComment: [
            "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments",
        ],
        createCommitSignatureProtection: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        ],
        createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
        createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
        createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
        createDeploymentStatus: [
            "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        ],
        createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
        createForAuthenticatedUser: ["POST /user/repos"],
        createFork: ["POST /repos/{owner}/{repo}/forks"],
        createInOrg: ["POST /orgs/{org}/repos"],
        createOrUpdateEnvironment: [
            "PUT /repos/{owner}/{repo}/environments/{environment_name}",
        ],
        createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
        createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
        createRelease: ["POST /repos/{owner}/{repo}/releases"],
        createUsingTemplate: [
            "POST /repos/{template_owner}/{template_repo}/generate",
        ],
        createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
        declineInvitation: [
            "DELETE /user/repository_invitations/{invitation_id}",
            {},
            { renamed: ["repos", "declineInvitationForAuthenticatedUser"] },
        ],
        declineInvitationForAuthenticatedUser: [
            "DELETE /user/repository_invitations/{invitation_id}",
        ],
        delete: ["DELETE /repos/{owner}/{repo}"],
        deleteAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        ],
        deleteAdminBranchProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        ],
        deleteAnEnvironment: [
            "DELETE /repos/{owner}/{repo}/environments/{environment_name}",
        ],
        deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        deleteBranchProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection",
        ],
        deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
        deleteCommitSignatureProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        ],
        deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
        deleteDeployment: [
            "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}",
        ],
        deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
        deleteInvitation: [
            "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}",
        ],
        deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
        deletePullRequestReviewProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        ],
        deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
        deleteReleaseAsset: [
            "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}",
        ],
        deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
        disableAutomatedSecurityFixes: [
            "DELETE /repos/{owner}/{repo}/automated-security-fixes",
        ],
        disableLfsForRepo: ["DELETE /repos/{owner}/{repo}/lfs"],
        disableVulnerabilityAlerts: [
            "DELETE /repos/{owner}/{repo}/vulnerability-alerts",
        ],
        downloadArchive: [
            "GET /repos/{owner}/{repo}/zipball/{ref}",
            {},
            { renamed: ["repos", "downloadZipballArchive"] },
        ],
        downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
        downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
        enableAutomatedSecurityFixes: [
            "PUT /repos/{owner}/{repo}/automated-security-fixes",
        ],
        enableLfsForRepo: ["PUT /repos/{owner}/{repo}/lfs"],
        enableVulnerabilityAlerts: [
            "PUT /repos/{owner}/{repo}/vulnerability-alerts",
        ],
        generateReleaseNotes: [
            "POST /repos/{owner}/{repo}/releases/generate-notes",
        ],
        get: ["GET /repos/{owner}/{repo}"],
        getAccessRestrictions: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        ],
        getAdminBranchProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        ],
        getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
        getAllStatusCheckContexts: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        ],
        getAllTopics: [
            "GET /repos/{owner}/{repo}/topics",
            { mediaType: { previews: ["mercy"] } },
        ],
        getAppsWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        ],
        getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
        getBranchProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection",
        ],
        getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
        getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
        getCollaboratorPermissionLevel: [
            "GET /repos/{owner}/{repo}/collaborators/{username}/permission",
        ],
        getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
        getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
        getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
        getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
        getCommitSignatureProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        ],
        getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
        getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
        getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
        getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
        getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
        getDeploymentStatus: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
        ],
        getEnvironment: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}",
        ],
        getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
        getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
        getPages: ["GET /repos/{owner}/{repo}/pages"],
        getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
        getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
        getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
        getPullRequestReviewProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        ],
        getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
        getReadme: ["GET /repos/{owner}/{repo}/readme"],
        getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
        getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
        getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
        getStatusChecksProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        ],
        getTeamsWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        ],
        getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
        getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
        getUsersWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        ],
        getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
        getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
        getWebhookConfigForRepo: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}/config",
        ],
        getWebhookDelivery: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}",
        ],
        listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
        listBranches: ["GET /repos/{owner}/{repo}/branches"],
        listBranchesForHeadCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
        ],
        listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
        listCommentsForCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
        ],
        listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
        listCommitStatusesForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
        ],
        listCommits: ["GET /repos/{owner}/{repo}/commits"],
        listContributors: ["GET /repos/{owner}/{repo}/contributors"],
        listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
        listDeploymentStatuses: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        ],
        listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
        listForAuthenticatedUser: ["GET /user/repos"],
        listForOrg: ["GET /orgs/{org}/repos"],
        listForUser: ["GET /users/{username}/repos"],
        listForks: ["GET /repos/{owner}/{repo}/forks"],
        listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
        listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
        listLanguages: ["GET /repos/{owner}/{repo}/languages"],
        listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
        listPublic: ["GET /repositories"],
        listPullRequestsAssociatedWithCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
        ],
        listReleaseAssets: [
            "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
        ],
        listReleases: ["GET /repos/{owner}/{repo}/releases"],
        listTags: ["GET /repos/{owner}/{repo}/tags"],
        listTeams: ["GET /repos/{owner}/{repo}/teams"],
        listWebhookDeliveries: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
        ],
        listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
        merge: ["POST /repos/{owner}/{repo}/merges"],
        mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
        pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: [
            "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
        ],
        removeAppAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            { mapToData: "apps" },
        ],
        removeCollaborator: [
            "DELETE /repos/{owner}/{repo}/collaborators/{username}",
        ],
        removeStatusCheckContexts: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            { mapToData: "contexts" },
        ],
        removeStatusCheckProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        ],
        removeTeamAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            { mapToData: "teams" },
        ],
        removeUserAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            { mapToData: "users" },
        ],
        renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
        replaceAllTopics: [
            "PUT /repos/{owner}/{repo}/topics",
            { mediaType: { previews: ["mercy"] } },
        ],
        requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
        setAdminBranchProtection: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        ],
        setAppAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            { mapToData: "apps" },
        ],
        setStatusCheckContexts: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            { mapToData: "contexts" },
        ],
        setTeamAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            { mapToData: "teams" },
        ],
        setUserAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            { mapToData: "users" },
        ],
        testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
        transfer: ["POST /repos/{owner}/{repo}/transfer"],
        update: ["PATCH /repos/{owner}/{repo}"],
        updateBranchProtection: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection",
        ],
        updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
        updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
        updateInvitation: [
            "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}",
        ],
        updatePullRequestReviewProtection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        ],
        updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
        updateReleaseAsset: [
            "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}",
        ],
        updateStatusCheckPotection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
            {},
            { renamed: ["repos", "updateStatusCheckProtection"] },
        ],
        updateStatusCheckProtection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        ],
        updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
        updateWebhookConfigForRepo: [
            "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config",
        ],
        uploadReleaseAsset: [
            "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
            { baseUrl: "https://uploads.github.com" },
        ],
    },
    search: {
        code: ["GET /search/code"],
        commits: ["GET /search/commits"],
        issuesAndPullRequests: ["GET /search/issues"],
        labels: ["GET /search/labels"],
        repos: ["GET /search/repositories"],
        topics: ["GET /search/topics", { mediaType: { previews: ["mercy"] } }],
        users: ["GET /search/users"],
    },
    secretScanning: {
        getAlert: [
            "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        ],
        listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
        updateAlert: [
            "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        ],
    },
    teams: {
        addOrUpdateMembershipForUserInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}",
        ],
        addOrUpdateProjectPermissionsInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",
        ],
        addOrUpdateRepoPermissionsInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        ],
        checkPermissionsForProjectInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",
        ],
        checkPermissionsForRepoInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        ],
        create: ["POST /orgs/{org}/teams"],
        createDiscussionCommentInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        ],
        createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
        deleteDiscussionCommentInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        ],
        deleteDiscussionInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        ],
        deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
        getByName: ["GET /orgs/{org}/teams/{team_slug}"],
        getDiscussionCommentInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        ],
        getDiscussionInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        ],
        getMembershipForUserInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/memberships/{username}",
        ],
        list: ["GET /orgs/{org}/teams"],
        listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
        listDiscussionCommentsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        ],
        listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
        listForAuthenticatedUser: ["GET /user/teams"],
        listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
        listPendingInvitationsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/invitations",
        ],
        listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
        listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
        removeMembershipForUserInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}",
        ],
        removeProjectInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}",
        ],
        removeRepoInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        ],
        updateDiscussionCommentInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        ],
        updateDiscussionInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        ],
        updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"],
    },
    users: {
        addEmailForAuthenticated: [
            "POST /user/emails",
            {},
            { renamed: ["users", "addEmailForAuthenticatedUser"] },
        ],
        addEmailForAuthenticatedUser: ["POST /user/emails"],
        block: ["PUT /user/blocks/{username}"],
        checkBlocked: ["GET /user/blocks/{username}"],
        checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
        checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
        createGpgKeyForAuthenticated: [
            "POST /user/gpg_keys",
            {},
            { renamed: ["users", "createGpgKeyForAuthenticatedUser"] },
        ],
        createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
        createPublicSshKeyForAuthenticated: [
            "POST /user/keys",
            {},
            { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] },
        ],
        createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
        deleteEmailForAuthenticated: [
            "DELETE /user/emails",
            {},
            { renamed: ["users", "deleteEmailForAuthenticatedUser"] },
        ],
        deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
        deleteGpgKeyForAuthenticated: [
            "DELETE /user/gpg_keys/{gpg_key_id}",
            {},
            { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] },
        ],
        deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
        deletePublicSshKeyForAuthenticated: [
            "DELETE /user/keys/{key_id}",
            {},
            { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] },
        ],
        deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
        follow: ["PUT /user/following/{username}"],
        getAuthenticated: ["GET /user"],
        getByUsername: ["GET /users/{username}"],
        getContextForUser: ["GET /users/{username}/hovercard"],
        getGpgKeyForAuthenticated: [
            "GET /user/gpg_keys/{gpg_key_id}",
            {},
            { renamed: ["users", "getGpgKeyForAuthenticatedUser"] },
        ],
        getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
        getPublicSshKeyForAuthenticated: [
            "GET /user/keys/{key_id}",
            {},
            { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] },
        ],
        getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
        list: ["GET /users"],
        listBlockedByAuthenticated: [
            "GET /user/blocks",
            {},
            { renamed: ["users", "listBlockedByAuthenticatedUser"] },
        ],
        listBlockedByAuthenticatedUser: ["GET /user/blocks"],
        listEmailsForAuthenticated: [
            "GET /user/emails",
            {},
            { renamed: ["users", "listEmailsForAuthenticatedUser"] },
        ],
        listEmailsForAuthenticatedUser: ["GET /user/emails"],
        listFollowedByAuthenticated: [
            "GET /user/following",
            {},
            { renamed: ["users", "listFollowedByAuthenticatedUser"] },
        ],
        listFollowedByAuthenticatedUser: ["GET /user/following"],
        listFollowersForAuthenticatedUser: ["GET /user/followers"],
        listFollowersForUser: ["GET /users/{username}/followers"],
        listFollowingForUser: ["GET /users/{username}/following"],
        listGpgKeysForAuthenticated: [
            "GET /user/gpg_keys",
            {},
            { renamed: ["users", "listGpgKeysForAuthenticatedUser"] },
        ],
        listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
        listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
        listPublicEmailsForAuthenticated: [
            "GET /user/public_emails",
            {},
            { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] },
        ],
        listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
        listPublicKeysForUser: ["GET /users/{username}/keys"],
        listPublicSshKeysForAuthenticated: [
            "GET /user/keys",
            {},
            { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] },
        ],
        listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
        setPrimaryEmailVisibilityForAuthenticated: [
            "PATCH /user/email/visibility",
            {},
            { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] },
        ],
        setPrimaryEmailVisibilityForAuthenticatedUser: [
            "PATCH /user/email/visibility",
        ],
        unblock: ["DELETE /user/blocks/{username}"],
        unfollow: ["DELETE /user/following/{username}"],
        updateAuthenticated: ["PATCH /user"],
    },
};

const plugin_rest_endpoint_methods_dist_web_VERSION = "5.13.0";

function endpointsToMethods(octokit, endpointsMap) {
    const newMethods = {};
    for (const [scope, endpoints] of Object.entries(endpointsMap)) {
        for (const [methodName, endpoint] of Object.entries(endpoints)) {
            const [route, defaults, decorations] = endpoint;
            const [method, url] = route.split(/ /);
            const endpointDefaults = Object.assign({ method, url }, defaults);
            if (!newMethods[scope]) {
                newMethods[scope] = {};
            }
            const scopeMethods = newMethods[scope];
            if (decorations) {
                scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
                continue;
            }
            scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
        }
    }
    return newMethods;
}
function decorate(octokit, scope, methodName, defaults, decorations) {
    const requestWithDefaults = octokit.request.defaults(defaults);
    /* istanbul ignore next */
    function withDecorations(...args) {
        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
        let options = requestWithDefaults.endpoint.merge(...args);
        // There are currently no other decorations than `.mapToData`
        if (decorations.mapToData) {
            options = Object.assign({}, options, {
                data: options[decorations.mapToData],
                [decorations.mapToData]: undefined,
            });
            return requestWithDefaults(options);
        }
        if (decorations.renamed) {
            const [newScope, newMethodName] = decorations.renamed;
            octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
        }
        if (decorations.deprecated) {
            octokit.log.warn(decorations.deprecated);
        }
        if (decorations.renamedParameters) {
            // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
            const options = requestWithDefaults.endpoint.merge(...args);
            for (const [name, alias] of Object.entries(decorations.renamedParameters)) {
                if (name in options) {
                    octokit.log.warn(`"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
                    if (!(alias in options)) {
                        options[alias] = options[name];
                    }
                    delete options[name];
                }
            }
            return requestWithDefaults(options);
        }
        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
        return requestWithDefaults(...args);
    }
    return Object.assign(withDecorations, requestWithDefaults);
}

function restEndpointMethods(octokit) {
    const api = endpointsToMethods(octokit, Endpoints);
    return {
        rest: api,
    };
}
restEndpointMethods.VERSION = plugin_rest_endpoint_methods_dist_web_VERSION;
function legacyRestEndpointMethods(octokit) {
    const api = endpointsToMethods(octokit, Endpoints);
    return {
        ...api,
        rest: api,
    };
}
legacyRestEndpointMethods.VERSION = plugin_rest_endpoint_methods_dist_web_VERSION;


//# sourceMappingURL=index.js.map

;// CONCATENATED MODULE: ../node_modules/@octokit/rest/dist-web/index.js





const rest_dist_web_VERSION = "18.12.0";

const dist_web_Octokit = Octokit.plugin(requestLog, legacyRestEndpointMethods, paginateRest).defaults({
    userAgent: `octokit-rest.js/${rest_dist_web_VERSION}`,
});


//# sourceMappingURL=index.js.map


/***/ }),

/***/ 30775:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "DiagConsoleLogger": () => (/* reexport */ DiagConsoleLogger),
  "DiagLogLevel": () => (/* reexport */ DiagLogLevel),
  "INVALID_SPANID": () => (/* reexport */ INVALID_SPANID),
  "INVALID_SPAN_CONTEXT": () => (/* reexport */ INVALID_SPAN_CONTEXT),
  "INVALID_TRACEID": () => (/* reexport */ INVALID_TRACEID),
  "ProxyTracer": () => (/* reexport */ ProxyTracer),
  "ProxyTracerProvider": () => (/* reexport */ ProxyTracerProvider),
  "ROOT_CONTEXT": () => (/* reexport */ ROOT_CONTEXT),
  "SamplingDecision": () => (/* reexport */ SamplingDecision),
  "SpanKind": () => (/* reexport */ SpanKind),
  "SpanStatusCode": () => (/* reexport */ SpanStatusCode),
  "TraceFlags": () => (/* reexport */ TraceFlags),
  "baggageEntryMetadataFromString": () => (/* reexport */ baggageEntryMetadataFromString),
  "context": () => (/* binding */ esm_context),
  "createContextKey": () => (/* reexport */ createContextKey),
  "createTraceState": () => (/* reexport */ createTraceState),
  "default": () => (/* binding */ esm),
  "defaultTextMapGetter": () => (/* reexport */ defaultTextMapGetter),
  "defaultTextMapSetter": () => (/* reexport */ defaultTextMapSetter),
  "diag": () => (/* binding */ esm_diag),
  "isSpanContextValid": () => (/* reexport */ isSpanContextValid),
  "isValidSpanId": () => (/* reexport */ isValidSpanId),
  "isValidTraceId": () => (/* reexport */ isValidTraceId),
  "propagation": () => (/* binding */ propagation),
  "trace": () => (/* binding */ trace)
});

;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Updates to this file should also be replicated to @opentelemetry/api-metrics and
// @opentelemetry/core too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */
/** only globals that common to node and browsers are allowed */
// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var _globalThis = typeof globalThis === 'object' ? globalThis :
    typeof self === 'object' ? self :
        typeof window === 'object' ? window :
            typeof __webpack_require__.g === 'object' ? __webpack_require__.g :
                {};
//# sourceMappingURL=globalThis.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/platform/browser/index.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/version.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var VERSION = '1.1.0';
//# sourceMappingURL=version.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/internal/semver.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var re = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
/**
 * Create a function to test an API version to see if it is compatible with the provided ownVersion.
 *
 * The returned function has the following semantics:
 * - Exact match is always compatible
 * - Major versions must match exactly
 *    - 1.x package cannot use global 2.x package
 *    - 2.x package cannot use global 1.x package
 * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
 *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
 *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
 * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
 * - Patch and build tag differences are not considered at this time
 *
 * @param ownVersion version which should be checked against
 */
function _makeCompatibilityCheck(ownVersion) {
    var acceptedVersions = new Set([ownVersion]);
    var rejectedVersions = new Set();
    var myVersionMatch = ownVersion.match(re);
    if (!myVersionMatch) {
        // we cannot guarantee compatibility so we always return noop
        return function () { return false; };
    }
    var ownVersionParsed = {
        major: +myVersionMatch[1],
        minor: +myVersionMatch[2],
        patch: +myVersionMatch[3],
        prerelease: myVersionMatch[4],
    };
    // if ownVersion has a prerelease tag, versions must match exactly
    if (ownVersionParsed.prerelease != null) {
        return function isExactmatch(globalVersion) {
            return globalVersion === ownVersion;
        };
    }
    function _reject(v) {
        rejectedVersions.add(v);
        return false;
    }
    function _accept(v) {
        acceptedVersions.add(v);
        return true;
    }
    return function isCompatible(globalVersion) {
        if (acceptedVersions.has(globalVersion)) {
            return true;
        }
        if (rejectedVersions.has(globalVersion)) {
            return false;
        }
        var globalVersionMatch = globalVersion.match(re);
        if (!globalVersionMatch) {
            // cannot parse other version
            // we cannot guarantee compatibility so we always noop
            return _reject(globalVersion);
        }
        var globalVersionParsed = {
            major: +globalVersionMatch[1],
            minor: +globalVersionMatch[2],
            patch: +globalVersionMatch[3],
            prerelease: globalVersionMatch[4],
        };
        // if globalVersion has a prerelease tag, versions must match exactly
        if (globalVersionParsed.prerelease != null) {
            return _reject(globalVersion);
        }
        // major versions must match
        if (ownVersionParsed.major !== globalVersionParsed.major) {
            return _reject(globalVersion);
        }
        if (ownVersionParsed.major === 0) {
            if (ownVersionParsed.minor === globalVersionParsed.minor &&
                ownVersionParsed.patch <= globalVersionParsed.patch) {
                return _accept(globalVersion);
            }
            return _reject(globalVersion);
        }
        if (ownVersionParsed.minor <= globalVersionParsed.minor) {
            return _accept(globalVersion);
        }
        return _reject(globalVersion);
    };
}
/**
 * Test an API version to see if it is compatible with this API.
 *
 * - Exact match is always compatible
 * - Major versions must match exactly
 *    - 1.x package cannot use global 2.x package
 *    - 2.x package cannot use global 1.x package
 * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
 *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
 *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
 * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
 * - Patch and build tag differences are not considered at this time
 *
 * @param version version of the API requesting an instance of the global API
 */
var isCompatible = _makeCompatibilityCheck(VERSION);
//# sourceMappingURL=semver.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/internal/global-utils.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var major = VERSION.split('.')[0];
var GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("opentelemetry.js.api." + major);
var _global = _globalThis;
function registerGlobal(type, instance, diag, allowOverride) {
    var _a;
    if (allowOverride === void 0) { allowOverride = false; }
    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {
        version: VERSION,
    });
    if (!allowOverride && api[type]) {
        // already registered an API of this type
        var err = new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type);
        diag.error(err.stack || err.message);
        return false;
    }
    if (api.version !== VERSION) {
        // All registered APIs must be of the same version exactly
        var err = new Error('@opentelemetry/api: All API registration versions must match');
        diag.error(err.stack || err.message);
        return false;
    }
    api[type] = instance;
    diag.debug("@opentelemetry/api: Registered a global for " + type + " v" + VERSION + ".");
    return true;
}
function getGlobal(type) {
    var _a, _b;
    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;
    if (!globalVersion || !isCompatible(globalVersion)) {
        return;
    }
    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];
}
function unregisterGlobal(type, diag) {
    diag.debug("@opentelemetry/api: Unregistering a global for " + type + " v" + VERSION + ".");
    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];
    if (api) {
        delete api[type];
    }
}
//# sourceMappingURL=global-utils.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Component Logger which is meant to be used as part of any component which
 * will add automatically additional namespace in front of the log message.
 * It will then forward all message to global diag logger
 * @example
 * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });
 * cLogger.debug('test');
 * // @opentelemetry/instrumentation-http test
 */
var DiagComponentLogger = /** @class */ (function () {
    function DiagComponentLogger(props) {
        this._namespace = props.namespace || 'DiagComponentLogger';
    }
    DiagComponentLogger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return logProxy('debug', this._namespace, args);
    };
    DiagComponentLogger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return logProxy('error', this._namespace, args);
    };
    DiagComponentLogger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return logProxy('info', this._namespace, args);
    };
    DiagComponentLogger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return logProxy('warn', this._namespace, args);
    };
    DiagComponentLogger.prototype.verbose = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return logProxy('verbose', this._namespace, args);
    };
    return DiagComponentLogger;
}());

function logProxy(funcName, namespace, args) {
    var logger = getGlobal('diag');
    // shortcut if logger not set
    if (!logger) {
        return;
    }
    args.unshift(namespace);
    return logger[funcName].apply(logger, args);
}
//# sourceMappingURL=ComponentLogger.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/diag/types.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Defines the available internal logging levels for the diagnostic logger, the numeric values
 * of the levels are defined to match the original values from the initial LogLevel to avoid
 * compatibility/migration issues for any implementation that assume the numeric ordering.
 */
var DiagLogLevel;
(function (DiagLogLevel) {
    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */
    DiagLogLevel[DiagLogLevel["NONE"] = 0] = "NONE";
    /** Identifies an error scenario */
    DiagLogLevel[DiagLogLevel["ERROR"] = 30] = "ERROR";
    /** Identifies a warning scenario */
    DiagLogLevel[DiagLogLevel["WARN"] = 50] = "WARN";
    /** General informational log message */
    DiagLogLevel[DiagLogLevel["INFO"] = 60] = "INFO";
    /** General debug log message */
    DiagLogLevel[DiagLogLevel["DEBUG"] = 70] = "DEBUG";
    /**
     * Detailed trace level logging should only be used for development, should only be set
     * in a development environment.
     */
    DiagLogLevel[DiagLogLevel["VERBOSE"] = 80] = "VERBOSE";
    /** Used to set the logging level to include all logging */
    DiagLogLevel[DiagLogLevel["ALL"] = 9999] = "ALL";
})(DiagLogLevel || (DiagLogLevel = {}));
//# sourceMappingURL=types.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function createLogLevelDiagLogger(maxLevel, logger) {
    if (maxLevel < DiagLogLevel.NONE) {
        maxLevel = DiagLogLevel.NONE;
    }
    else if (maxLevel > DiagLogLevel.ALL) {
        maxLevel = DiagLogLevel.ALL;
    }
    // In case the logger is null or undefined
    logger = logger || {};
    function _filterFunc(funcName, theLevel) {
        var theFunc = logger[funcName];
        if (typeof theFunc === 'function' && maxLevel >= theLevel) {
            return theFunc.bind(logger);
        }
        return function () { };
    }
    return {
        error: _filterFunc('error', DiagLogLevel.ERROR),
        warn: _filterFunc('warn', DiagLogLevel.WARN),
        info: _filterFunc('info', DiagLogLevel.INFO),
        debug: _filterFunc('debug', DiagLogLevel.DEBUG),
        verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),
    };
}
//# sourceMappingURL=logLevelLogger.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/api/diag.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var API_NAME = 'diag';
/**
 * Singleton object which represents the entry point to the OpenTelemetry internal
 * diagnostic API
 */
var DiagAPI = /** @class */ (function () {
    /**
     * Private internal constructor
     * @private
     */
    function DiagAPI() {
        function _logProxy(funcName) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var logger = getGlobal('diag');
                // shortcut if logger not set
                if (!logger)
                    return;
                return logger[funcName].apply(logger, args);
            };
        }
        // Using self local variable for minification purposes as 'this' cannot be minified
        var self = this;
        // DiagAPI specific functions
        self.setLogger = function (logger, logLevel) {
            var _a, _b;
            if (logLevel === void 0) { logLevel = DiagLogLevel.INFO; }
            if (logger === self) {
                // There isn't much we can do here.
                // Logging to the console might break the user application.
                // Try to log to self. If a logger was previously registered it will receive the log.
                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');
                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);
                return false;
            }
            var oldLogger = getGlobal('diag');
            var newLogger = createLogLevelDiagLogger(logLevel, logger);
            // There already is an logger registered. We'll let it know before overwriting it.
            if (oldLogger) {
                var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<failed to generate stacktrace>';
                oldLogger.warn("Current logger will be overwritten from " + stack);
                newLogger.warn("Current logger will overwrite one already registered from " + stack);
            }
            return registerGlobal('diag', newLogger, self, true);
        };
        self.disable = function () {
            unregisterGlobal(API_NAME, self);
        };
        self.createComponentLogger = function (options) {
            return new DiagComponentLogger(options);
        };
        self.verbose = _logProxy('verbose');
        self.debug = _logProxy('debug');
        self.info = _logProxy('info');
        self.warn = _logProxy('warn');
        self.error = _logProxy('error');
    }
    /** Get the singleton instance of the DiagAPI API */
    DiagAPI.instance = function () {
        if (!this._instance) {
            this._instance = new DiagAPI();
        }
        return this._instance;
    };
    return DiagAPI;
}());

//# sourceMappingURL=diag.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var BaggageImpl = /** @class */ (function () {
    function BaggageImpl(entries) {
        this._entries = entries ? new Map(entries) : new Map();
    }
    BaggageImpl.prototype.getEntry = function (key) {
        var entry = this._entries.get(key);
        if (!entry) {
            return undefined;
        }
        return Object.assign({}, entry);
    };
    BaggageImpl.prototype.getAllEntries = function () {
        return Array.from(this._entries.entries()).map(function (_a) {
            var k = _a[0], v = _a[1];
            return [k, v];
        });
    };
    BaggageImpl.prototype.setEntry = function (key, entry) {
        var newBaggage = new BaggageImpl(this._entries);
        newBaggage._entries.set(key, entry);
        return newBaggage;
    };
    BaggageImpl.prototype.removeEntry = function (key) {
        var newBaggage = new BaggageImpl(this._entries);
        newBaggage._entries.delete(key);
        return newBaggage;
    };
    BaggageImpl.prototype.removeEntries = function () {
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            keys[_i] = arguments[_i];
        }
        var newBaggage = new BaggageImpl(this._entries);
        for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
            var key = keys_1[_a];
            newBaggage._entries.delete(key);
        }
        return newBaggage;
    };
    BaggageImpl.prototype.clear = function () {
        return new BaggageImpl();
    };
    return BaggageImpl;
}());

//# sourceMappingURL=baggage-impl.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Symbol used to make BaggageEntryMetadata an opaque type
 */
var baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');
//# sourceMappingURL=symbol.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/baggage/utils.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var diag = DiagAPI.instance();
/**
 * Create a new Baggage with optional entries
 *
 * @param entries An array of baggage entries the new baggage should contain
 */
function createBaggage(entries) {
    if (entries === void 0) { entries = {}; }
    return new BaggageImpl(new Map(Object.entries(entries)));
}
/**
 * Create a serializable BaggageEntryMetadata object from a string.
 *
 * @param str string metadata. Format is currently not defined by the spec and has no special meaning.
 *
 */
function baggageEntryMetadataFromString(str) {
    if (typeof str !== 'string') {
        diag.error("Cannot create baggage metadata from unknown type: " + typeof str);
        str = '';
    }
    return {
        __TYPE__: baggageEntryMetadataSymbol,
        toString: function () {
            return str;
        },
    };
}
//# sourceMappingURL=utils.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var consoleMap = [
    { n: 'error', c: 'error' },
    { n: 'warn', c: 'warn' },
    { n: 'info', c: 'info' },
    { n: 'debug', c: 'debug' },
    { n: 'verbose', c: 'trace' },
];
/**
 * A simple Immutable Console based diagnostic logger which will output any messages to the Console.
 * If you want to limit the amount of logging to a specific level or lower use the
 * {@link createLogLevelDiagLogger}
 */
var DiagConsoleLogger = /** @class */ (function () {
    function DiagConsoleLogger() {
        function _consoleFunc(funcName) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (console) {
                    // Some environments only expose the console when the F12 developer console is open
                    // eslint-disable-next-line no-console
                    var theFunc = console[funcName];
                    if (typeof theFunc !== 'function') {
                        // Not all environments support all functions
                        // eslint-disable-next-line no-console
                        theFunc = console.log;
                    }
                    // One last final check
                    if (typeof theFunc === 'function') {
                        return theFunc.apply(console, args);
                    }
                }
            };
        }
        for (var i = 0; i < consoleMap.length; i++) {
            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);
        }
    }
    return DiagConsoleLogger;
}());

//# sourceMappingURL=consoleLogger.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/diag/index.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var defaultTextMapGetter = {
    get: function (carrier, key) {
        if (carrier == null) {
            return undefined;
        }
        return carrier[key];
    },
    keys: function (carrier) {
        if (carrier == null) {
            return [];
        }
        return Object.keys(carrier);
    },
};
var defaultTextMapSetter = {
    set: function (carrier, key, value) {
        if (carrier == null) {
            return;
        }
        carrier[key] = value;
    },
};
//# sourceMappingURL=TextMapPropagator.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/context/context.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Get a key to uniquely identify a context value */
function createContextKey(description) {
    // The specification states that for the same input, multiple calls should
    // return different keys. Due to the nature of the JS dependency management
    // system, this creates problems where multiple versions of some package
    // could hold different keys for the same property.
    //
    // Therefore, we use Symbol.for which returns the same key for the same input.
    return Symbol.for(description);
}
var BaseContext = /** @class */ (function () {
    /**
     * Construct a new context which inherits values from an optional parent context.
     *
     * @param parentContext a context from which to inherit values
     */
    function BaseContext(parentContext) {
        // for minification
        var self = this;
        self._currentContext = parentContext ? new Map(parentContext) : new Map();
        self.getValue = function (key) { return self._currentContext.get(key); };
        self.setValue = function (key, value) {
            var context = new BaseContext(self._currentContext);
            context._currentContext.set(key, value);
            return context;
        };
        self.deleteValue = function (key) {
            var context = new BaseContext(self._currentContext);
            context._currentContext.delete(key);
            return context;
        };
    }
    return BaseContext;
}());
/** The root context is used as the default parent context when there is no active context */
var ROOT_CONTEXT = new BaseContext();
//# sourceMappingURL=context.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};

var NoopContextManager = /** @class */ (function () {
    function NoopContextManager() {
    }
    NoopContextManager.prototype.active = function () {
        return ROOT_CONTEXT;
    };
    NoopContextManager.prototype.with = function (_context, fn, thisArg) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        return fn.call.apply(fn, __spreadArray([thisArg], args));
    };
    NoopContextManager.prototype.bind = function (_context, target) {
        return target;
    };
    NoopContextManager.prototype.enable = function () {
        return this;
    };
    NoopContextManager.prototype.disable = function () {
        return this;
    };
    return NoopContextManager;
}());

//# sourceMappingURL=NoopContextManager.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/api/context.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var context_spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};



var context_API_NAME = 'context';
var NOOP_CONTEXT_MANAGER = new NoopContextManager();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Context API
 */
var ContextAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function ContextAPI() {
    }
    /** Get the singleton instance of the Context API */
    ContextAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new ContextAPI();
        }
        return this._instance;
    };
    /**
     * Set the current context manager.
     *
     * @returns true if the context manager was successfully registered, else false
     */
    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {
        return registerGlobal(context_API_NAME, contextManager, DiagAPI.instance());
    };
    /**
     * Get the currently active context
     */
    ContextAPI.prototype.active = function () {
        return this._getContextManager().active();
    };
    /**
     * Execute a function with an active context
     *
     * @param context context to be active during function execution
     * @param fn function to execute in a context
     * @param thisArg optional receiver to be used for calling fn
     * @param args optional arguments forwarded to fn
     */
    ContextAPI.prototype.with = function (context, fn, thisArg) {
        var _a;
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        return (_a = this._getContextManager()).with.apply(_a, context_spreadArray([context, fn, thisArg], args));
    };
    /**
     * Bind a context to a target function or event emitter
     *
     * @param context context to bind to the event emitter or function. Defaults to the currently active context
     * @param target function or event emitter to bind
     */
    ContextAPI.prototype.bind = function (context, target) {
        return this._getContextManager().bind(context, target);
    };
    ContextAPI.prototype._getContextManager = function () {
        return getGlobal(context_API_NAME) || NOOP_CONTEXT_MANAGER;
    };
    /** Disable and remove the global context manager */
    ContextAPI.prototype.disable = function () {
        this._getContextManager().disable();
        unregisterGlobal(context_API_NAME, DiagAPI.instance());
    };
    return ContextAPI;
}());

//# sourceMappingURL=context.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TraceFlags;
(function (TraceFlags) {
    /** Represents no flag set. */
    TraceFlags[TraceFlags["NONE"] = 0] = "NONE";
    /** Bit to represent whether trace is sampled in trace flags. */
    TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
})(TraceFlags || (TraceFlags = {}));
//# sourceMappingURL=trace_flags.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var INVALID_SPANID = '0000000000000000';
var INVALID_TRACEID = '00000000000000000000000000000000';
var INVALID_SPAN_CONTEXT = {
    traceId: INVALID_TRACEID,
    spanId: INVALID_SPANID,
    traceFlags: TraceFlags.NONE,
};
//# sourceMappingURL=invalid-span-constants.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The NonRecordingSpan is the default {@link Span} that is used when no Span
 * implementation is available. All operations are no-op including context
 * propagation.
 */
var NonRecordingSpan = /** @class */ (function () {
    function NonRecordingSpan(_spanContext) {
        if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }
        this._spanContext = _spanContext;
    }
    // Returns a SpanContext.
    NonRecordingSpan.prototype.spanContext = function () {
        return this._spanContext;
    };
    // By default does nothing
    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.setAttributes = function (_attributes) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.setStatus = function (_status) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.updateName = function (_name) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.end = function (_endTime) { };
    // isRecording always returns false for NonRecordingSpan.
    NonRecordingSpan.prototype.isRecording = function () {
        return false;
    };
    // By default does nothing
    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };
    return NonRecordingSpan;
}());

//# sourceMappingURL=NonRecordingSpan.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/context-utils.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * span key
 */
var SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');
/**
 * Return the span if one exists
 *
 * @param context context to get span from
 */
function getSpan(context) {
    return context.getValue(SPAN_KEY) || undefined;
}
/**
 * Set the span on a context
 *
 * @param context context to use as parent
 * @param span span to set active
 */
function setSpan(context, span) {
    return context.setValue(SPAN_KEY, span);
}
/**
 * Remove current span stored in the context
 *
 * @param context context to delete span from
 */
function deleteSpan(context) {
    return context.deleteValue(SPAN_KEY);
}
/**
 * Wrap span context in a NoopSpan and set as span in a new
 * context
 *
 * @param context context to set active span on
 * @param spanContext span context to be wrapped
 */
function setSpanContext(context, spanContext) {
    return setSpan(context, new NonRecordingSpan(spanContext));
}
/**
 * Get the span context of the span if it exists.
 *
 * @param context context to get values from
 */
function getSpanContext(context) {
    var _a;
    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();
}
//# sourceMappingURL=context-utils.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
var VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
function isValidTraceId(traceId) {
    return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;
}
function isValidSpanId(spanId) {
    return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;
}
/**
 * Returns true if this {@link SpanContext} is valid.
 * @return true if this {@link SpanContext} is valid.
 */
function isSpanContextValid(spanContext) {
    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));
}
/**
 * Wrap the given {@link SpanContext} in a new non-recording {@link Span}
 *
 * @param spanContext span context to be wrapped
 * @returns a new non-recording {@link Span} with the provided context
 */
function wrapSpanContext(spanContext) {
    return new NonRecordingSpan(spanContext);
}
//# sourceMappingURL=spancontext-utils.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var context = ContextAPI.getInstance();
/**
 * No-op implementations of {@link Tracer}.
 */
var NoopTracer = /** @class */ (function () {
    function NoopTracer() {
    }
    // startSpan starts a noop span.
    NoopTracer.prototype.startSpan = function (name, options, context) {
        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);
        if (root) {
            return new NonRecordingSpan();
        }
        var parentFromContext = context && getSpanContext(context);
        if (isSpanContext(parentFromContext) &&
            isSpanContextValid(parentFromContext)) {
            return new NonRecordingSpan(parentFromContext);
        }
        else {
            return new NonRecordingSpan();
        }
    };
    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {
        var opts;
        var ctx;
        var fn;
        if (arguments.length < 2) {
            return;
        }
        else if (arguments.length === 2) {
            fn = arg2;
        }
        else if (arguments.length === 3) {
            opts = arg2;
            fn = arg3;
        }
        else {
            opts = arg2;
            ctx = arg3;
            fn = arg4;
        }
        var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();
        var span = this.startSpan(name, opts, parentContext);
        var contextWithSpanSet = setSpan(parentContext, span);
        return context.with(contextWithSpanSet, fn, undefined, span);
    };
    return NoopTracer;
}());

function isSpanContext(spanContext) {
    return (typeof spanContext === 'object' &&
        typeof spanContext['spanId'] === 'string' &&
        typeof spanContext['traceId'] === 'string' &&
        typeof spanContext['traceFlags'] === 'number');
}
//# sourceMappingURL=NoopTracer.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var NOOP_TRACER = new NoopTracer();
/**
 * Proxy tracer provided by the proxy tracer provider
 */
var ProxyTracer = /** @class */ (function () {
    function ProxyTracer(_provider, name, version, options) {
        this._provider = _provider;
        this.name = name;
        this.version = version;
        this.options = options;
    }
    ProxyTracer.prototype.startSpan = function (name, options, context) {
        return this._getTracer().startSpan(name, options, context);
    };
    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {
        var tracer = this._getTracer();
        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);
    };
    /**
     * Try to get a tracer from the proxy tracer provider.
     * If the proxy tracer provider has no delegate, return a noop tracer.
     */
    ProxyTracer.prototype._getTracer = function () {
        if (this._delegate) {
            return this._delegate;
        }
        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);
        if (!tracer) {
            return NOOP_TRACER;
        }
        this._delegate = tracer;
        return this._delegate;
    };
    return ProxyTracer;
}());

//# sourceMappingURL=ProxyTracer.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An implementation of the {@link TracerProvider} which returns an impotent
 * Tracer for all calls to `getTracer`.
 *
 * All operations are no-op.
 */
var NoopTracerProvider = /** @class */ (function () {
    function NoopTracerProvider() {
    }
    NoopTracerProvider.prototype.getTracer = function (_name, _version, _options) {
        return new NoopTracer();
    };
    return NoopTracerProvider;
}());

//# sourceMappingURL=NoopTracerProvider.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var NOOP_TRACER_PROVIDER = new NoopTracerProvider();
/**
 * Tracer provider which provides {@link ProxyTracer}s.
 *
 * Before a delegate is set, tracers provided are NoOp.
 *   When a delegate is set, traces are provided from the delegate.
 *   When a delegate is set after tracers have already been provided,
 *   all tracers already provided will use the provided delegate implementation.
 */
var ProxyTracerProvider = /** @class */ (function () {
    function ProxyTracerProvider() {
    }
    /**
     * Get a {@link ProxyTracer}
     */
    ProxyTracerProvider.prototype.getTracer = function (name, version, options) {
        var _a;
        return ((_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version, options));
    };
    ProxyTracerProvider.prototype.getDelegate = function () {
        var _a;
        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;
    };
    /**
     * Set the delegate tracer provider
     */
    ProxyTracerProvider.prototype.setDelegate = function (delegate) {
        this._delegate = delegate;
    };
    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {
        var _a;
        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);
    };
    return ProxyTracerProvider;
}());

//# sourceMappingURL=ProxyTracerProvider.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A sampling decision that determines how a {@link Span} will be recorded
 * and collected.
 */
var SamplingDecision;
(function (SamplingDecision) {
    /**
     * `Span.isRecording() === false`, span will not be recorded and all events
     * and attributes will be dropped.
     */
    SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
    /**
     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
     * MUST NOT be set.
     */
    SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
    /**
     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
     * MUST be set.
     */
    SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})(SamplingDecision || (SamplingDecision = {}));
//# sourceMappingURL=SamplingResult.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/span_kind.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SpanKind;
(function (SpanKind) {
    /** Default value. Indicates that the span is used internally. */
    SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
    /**
     * Indicates that the span covers server-side handling of an RPC or other
     * remote request.
     */
    SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
    /**
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     */
    SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
    /**
     * Indicates that the span describes producer sending a message to a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */
    SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
    /**
     * Indicates that the span describes consumer receiving a message from a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */
    SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind || (SpanKind = {}));
//# sourceMappingURL=span_kind.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/status.js
/**
 * An enumeration of status codes.
 */
var SpanStatusCode;
(function (SpanStatusCode) {
    /**
     * The default status.
     */
    SpanStatusCode[SpanStatusCode["UNSET"] = 0] = "UNSET";
    /**
     * The operation has been validated by an Application developer or
     * Operator to have completed successfully.
     */
    SpanStatusCode[SpanStatusCode["OK"] = 1] = "OK";
    /**
     * The operation contains an error.
     */
    SpanStatusCode[SpanStatusCode["ERROR"] = 2] = "ERROR";
})(SpanStatusCode || (SpanStatusCode = {}));
//# sourceMappingURL=status.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';
var VALID_KEY = "[a-z]" + VALID_KEY_CHAR_RANGE + "{0,255}";
var VALID_VENDOR_KEY = "[a-z0-9]" + VALID_KEY_CHAR_RANGE + "{0,240}@[a-z]" + VALID_KEY_CHAR_RANGE + "{0,13}";
var VALID_KEY_REGEX = new RegExp("^(?:" + VALID_KEY + "|" + VALID_VENDOR_KEY + ")$");
var VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;
var INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;
/**
 * Key is opaque string up to 256 characters printable. It MUST begin with a
 * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,
 * underscores _, dashes -, asterisks *, and forward slashes /.
 * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the
 * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.
 * see https://www.w3.org/TR/trace-context/#key
 */
function validateKey(key) {
    return VALID_KEY_REGEX.test(key);
}
/**
 * Value is opaque string up to 256 characters printable ASCII RFC0020
 * characters (i.e., the range 0x20 to 0x7E) except comma , and =.
 */
function validateValue(value) {
    return (VALID_VALUE_BASE_REGEX.test(value) &&
        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));
}
//# sourceMappingURL=tracestate-validators.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MAX_TRACE_STATE_ITEMS = 32;
var MAX_TRACE_STATE_LEN = 512;
var LIST_MEMBERS_SEPARATOR = ',';
var LIST_MEMBER_KEY_VALUE_SPLITTER = '=';
/**
 * TraceState must be a class and not a simple object type because of the spec
 * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).
 *
 * Here is the list of allowed mutations:
 * - New key-value pair should be added into the beginning of the list
 * - The value of any key can be updated. Modified keys MUST be moved to the
 * beginning of the list.
 */
var TraceStateImpl = /** @class */ (function () {
    function TraceStateImpl(rawTraceState) {
        this._internalState = new Map();
        if (rawTraceState)
            this._parse(rawTraceState);
    }
    TraceStateImpl.prototype.set = function (key, value) {
        // TODO: Benchmark the different approaches(map vs list) and
        // use the faster one.
        var traceState = this._clone();
        if (traceState._internalState.has(key)) {
            traceState._internalState.delete(key);
        }
        traceState._internalState.set(key, value);
        return traceState;
    };
    TraceStateImpl.prototype.unset = function (key) {
        var traceState = this._clone();
        traceState._internalState.delete(key);
        return traceState;
    };
    TraceStateImpl.prototype.get = function (key) {
        return this._internalState.get(key);
    };
    TraceStateImpl.prototype.serialize = function () {
        var _this = this;
        return this._keys()
            .reduce(function (agg, key) {
            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));
            return agg;
        }, [])
            .join(LIST_MEMBERS_SEPARATOR);
    };
    TraceStateImpl.prototype._parse = function (rawTraceState) {
        if (rawTraceState.length > MAX_TRACE_STATE_LEN)
            return;
        this._internalState = rawTraceState
            .split(LIST_MEMBERS_SEPARATOR)
            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning
            .reduce(function (agg, part) {
            var listMember = part.trim(); // Optional Whitespace (OWS) handling
            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);
            if (i !== -1) {
                var key = listMember.slice(0, i);
                var value = listMember.slice(i + 1, part.length);
                if (validateKey(key) && validateValue(value)) {
                    agg.set(key, value);
                }
                else {
                    // TODO: Consider to add warning log
                }
            }
            return agg;
        }, new Map());
        // Because of the reverse() requirement, trunc must be done after map is created
        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {
            this._internalState = new Map(Array.from(this._internalState.entries())
                .reverse() // Use reverse same as original tracestate parse chain
                .slice(0, MAX_TRACE_STATE_ITEMS));
        }
    };
    TraceStateImpl.prototype._keys = function () {
        return Array.from(this._internalState.keys()).reverse();
    };
    TraceStateImpl.prototype._clone = function () {
        var traceState = new TraceStateImpl();
        traceState._internalState = new Map(this._internalState);
        return traceState;
    };
    return TraceStateImpl;
}());

//# sourceMappingURL=tracestate-impl.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function createTraceState(rawTraceState) {
    return new TraceStateImpl(rawTraceState);
}
//# sourceMappingURL=utils.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/api/trace.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var trace_API_NAME = 'trace';
/**
 * Singleton object which represents the entry point to the OpenTelemetry Tracing API
 */
var TraceAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function TraceAPI() {
        this._proxyTracerProvider = new ProxyTracerProvider();
        this.wrapSpanContext = wrapSpanContext;
        this.isSpanContextValid = isSpanContextValid;
        this.deleteSpan = deleteSpan;
        this.getSpan = getSpan;
        this.getSpanContext = getSpanContext;
        this.setSpan = setSpan;
        this.setSpanContext = setSpanContext;
    }
    /** Get the singleton instance of the Trace API */
    TraceAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new TraceAPI();
        }
        return this._instance;
    };
    /**
     * Set the current global tracer.
     *
     * @returns true if the tracer provider was successfully registered, else false
     */
    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {
        var success = registerGlobal(trace_API_NAME, this._proxyTracerProvider, DiagAPI.instance());
        if (success) {
            this._proxyTracerProvider.setDelegate(provider);
        }
        return success;
    };
    /**
     * Returns the global tracer provider.
     */
    TraceAPI.prototype.getTracerProvider = function () {
        return getGlobal(trace_API_NAME) || this._proxyTracerProvider;
    };
    /**
     * Returns a tracer from the global tracer provider.
     */
    TraceAPI.prototype.getTracer = function (name, version) {
        return this.getTracerProvider().getTracer(name, version);
    };
    /** Remove the global tracer provider */
    TraceAPI.prototype.disable = function () {
        unregisterGlobal(trace_API_NAME, DiagAPI.instance());
        this._proxyTracerProvider = new ProxyTracerProvider();
    };
    return TraceAPI;
}());

//# sourceMappingURL=trace.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * No-op implementations of {@link TextMapPropagator}.
 */
var NoopTextMapPropagator = /** @class */ (function () {
    function NoopTextMapPropagator() {
    }
    /** Noop inject function does nothing */
    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };
    /** Noop extract function does nothing and returns the input context */
    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {
        return context;
    };
    NoopTextMapPropagator.prototype.fields = function () {
        return [];
    };
    return NoopTextMapPropagator;
}());

//# sourceMappingURL=NoopTextMapPropagator.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Baggage key
 */
var BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');
/**
 * Retrieve the current baggage from the given context
 *
 * @param {Context} Context that manage all context values
 * @returns {Baggage} Extracted baggage from the context
 */
function getBaggage(context) {
    return context.getValue(BAGGAGE_KEY) || undefined;
}
/**
 * Store a baggage in the given context
 *
 * @param {Context} Context that manage all context values
 * @param {Baggage} baggage that will be set in the actual context
 */
function setBaggage(context, baggage) {
    return context.setValue(BAGGAGE_KEY, baggage);
}
/**
 * Delete the baggage stored in the given context
 *
 * @param {Context} Context that manage all context values
 */
function deleteBaggage(context) {
    return context.deleteValue(BAGGAGE_KEY);
}
//# sourceMappingURL=context-helpers.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/api/propagation.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var propagation_API_NAME = 'propagation';
var NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Propagation API
 */
var PropagationAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function PropagationAPI() {
        this.createBaggage = createBaggage;
        this.getBaggage = getBaggage;
        this.setBaggage = setBaggage;
        this.deleteBaggage = deleteBaggage;
    }
    /** Get the singleton instance of the Propagator API */
    PropagationAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new PropagationAPI();
        }
        return this._instance;
    };
    /**
     * Set the current propagator.
     *
     * @returns true if the propagator was successfully registered, else false
     */
    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {
        return registerGlobal(propagation_API_NAME, propagator, DiagAPI.instance());
    };
    /**
     * Inject context into a carrier to be propagated inter-process
     *
     * @param context Context carrying tracing data to inject
     * @param carrier carrier to inject context into
     * @param setter Function used to set values on the carrier
     */
    PropagationAPI.prototype.inject = function (context, carrier, setter) {
        if (setter === void 0) { setter = defaultTextMapSetter; }
        return this._getGlobalPropagator().inject(context, carrier, setter);
    };
    /**
     * Extract context from a carrier
     *
     * @param context Context which the newly created context will inherit from
     * @param carrier Carrier to extract context from
     * @param getter Function used to extract keys from a carrier
     */
    PropagationAPI.prototype.extract = function (context, carrier, getter) {
        if (getter === void 0) { getter = defaultTextMapGetter; }
        return this._getGlobalPropagator().extract(context, carrier, getter);
    };
    /**
     * Return a list of all fields which may be used by the propagator.
     */
    PropagationAPI.prototype.fields = function () {
        return this._getGlobalPropagator().fields();
    };
    /** Remove the global propagator */
    PropagationAPI.prototype.disable = function () {
        unregisterGlobal(propagation_API_NAME, DiagAPI.instance());
    };
    PropagationAPI.prototype._getGlobalPropagator = function () {
        return getGlobal(propagation_API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;
    };
    return PropagationAPI;
}());

//# sourceMappingURL=propagation.js.map
;// CONCATENATED MODULE: ../node_modules/@opentelemetry/api/build/esm/index.js
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





























/** Entrypoint for context API */
var esm_context = ContextAPI.getInstance();

/** Entrypoint for trace API */
var trace = TraceAPI.getInstance();

/** Entrypoint for propagation API */
var propagation = PropagationAPI.getInstance();

/**
 * Entrypoint for Diag API.
 * Defines Diagnostic handler used for internal diagnostic logging operations.
 * The default provides a Noop DiagLogger implementation which may be changed via the
 * diag.setLogger(logger: DiagLogger) function.
 */
var esm_diag = DiagAPI.instance();
/* harmony default export */ const esm = ({
    trace: trace,
    context: esm_context,
    propagation: propagation,
    diag: esm_diag,
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 53359:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultTunnelRelayStreamFactory = void 0;
const sshHelpers_1 = __webpack_require__(8277);
/**
 * Default factory for creating streams to a tunnel relay.
 */
class DefaultTunnelRelayStreamFactory {
    async createRelayStream(relayUri, connectionType, accessToken, clientConfig) {
        if ((0, sshHelpers_1.isNode)()) {
            const stream = await sshHelpers_1.SshHelpers.openConnection(relayUri, [connectionType], Object.assign({}, (accessToken && { Authorization: `tunnel ${accessToken}` })), clientConfig);
            return stream;
        }
        else {
            const protocols = [connectionType];
            // Web sockets don't support auth. Authenticate TunnelRelay by sending accessToken as a subprotocol.
            if (accessToken) {
                protocols.push(accessToken);
            }
            const stream = await sshHelpers_1.SshHelpers.openConnection(relayUri, protocols);
            return stream;
        }
    }
}
exports.DefaultTunnelRelayStreamFactory = DefaultTunnelRelayStreamFactory;
//# sourceMappingURL=defaultTunnelRelayStreamFactory.js.map

/***/ }),

/***/ 29605:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(49246), exports);
__exportStar(__webpack_require__(71625), exports);
__exportStar(__webpack_require__(3538), exports);
__exportStar(__webpack_require__(26932), exports);
__exportStar(__webpack_require__(26698), exports);
__exportStar(__webpack_require__(57820), exports);
__exportStar(__webpack_require__(40030), exports);
__exportStar(__webpack_require__(83589), exports);
__exportStar(__webpack_require__(70360), exports);
__exportStar(__webpack_require__(8277), exports);
__exportStar(__webpack_require__(49246), exports);
__exportStar(__webpack_require__(59725), exports);
__exportStar(__webpack_require__(71625), exports);
__exportStar(__webpack_require__(65666), exports);
__exportStar(__webpack_require__(57771), exports);
__exportStar(__webpack_require__(53359), exports);
__exportStar(__webpack_require__(79747), exports);
__exportStar(__webpack_require__(75726), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3538:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiveShareRelayTokenProvider = void 0;
const tunnels_contracts_1 = __webpack_require__(37775);
/**
 * Provides Azure Relay access tokens by querying them via a tunnel management client.
 */
class LiveShareRelayTokenProvider {
    constructor(managementClient, tunnel, hostId, tokenScope, initialToken = undefined) {
        if (!managementClient || !tunnel || !hostId || !tokenScope) {
            throw new Error('Cannot initialize LiveShareTokenProvider with undefined values');
        }
        this.managementClient = managementClient;
        this.tunnel = tunnel;
        this.hostId = hostId;
        this.tokenScope = tokenScope;
        this.initialToken = initialToken;
    }
    async onGetTokenAsync(audience, validFor) {
        var _a;
        let sasToken = null;
        if (this.initialToken) {
            sasToken = this.initialToken;
            this.initialToken = undefined;
        }
        else {
            // TODO: Refresh the tunnel access token first if necessary.
            let tunnelAccessToken = this.tunnel.accessTokens[this.tokenScope];
            let options = {
                accessToken: tunnelAccessToken,
                tokenScopes: [this.tokenScope],
            };
            let refreshedTunnel = await this.managementClient.getTunnel(this.tunnel, options);
            if (refreshedTunnel) {
                let endpoints = (_a = refreshedTunnel.endpoints) === null || _a === void 0 ? void 0 : _a.filter((end) => (end.hostId = this.hostId)).map((e) => e);
                let endpoint = endpoints && endpoints.length > 0 ? endpoints[0] : undefined;
                if (endpoint) {
                    sasToken =
                        this.tokenScope === tunnels_contracts_1.TunnelAccessScopes.Host
                            ? endpoint.relayHostSasToken
                            : endpoint.relayClientSasToken;
                }
                if (!sasToken) {
                    throw new Error('Relay token was not returned by service.');
                }
            }
        }
        //let sasTokenProvider = CreateSharedAccessSignatureTokenProvider(sasToken);
        return undefined; //await sasTokenProvider.GetTokenAsync(audience, validFor);
    }
}
exports.LiveShareRelayTokenProvider = LiveShareRelayTokenProvider;
//# sourceMappingURL=liveShareRelayTokenProvider.js.map

/***/ }),

/***/ 26932:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiveShareRelayTunnelClient = void 0;
const sshHelpers_1 = __webpack_require__(8277);
const tunnelClientBase_1 = __webpack_require__(59725);
const tunnels_contracts_1 = __webpack_require__(37775);
/**
 * Tunnel client implementation that connects via a Live Share session's Azure Relay.
 */
class LiveShareRelayTunnelClient extends tunnelClientBase_1.TunnelClientBase {
    constructor() {
        super();
        this.connectionModes = [tunnels_contracts_1.TunnelConnectionMode.LiveShareRelay];
        this.trace = (level, eventId, msg, err) => { };
    }
    async connectClient(tunnel, endpoints) {
        let liveShareEndpoints = endpoints.map((endpoint) => endpoint);
        let liveShareEndpoint;
        if (liveShareEndpoints && liveShareEndpoints.length === 1) {
            liveShareEndpoint = liveShareEndpoints[0];
        }
        else {
            throw new Error('The host is not currently accepting Live Share relay connections.');
        }
        let relayUri = liveShareEndpoint.relayUri;
        if (!relayUri) {
            throw new Error('The Live Share relay endpoint URI is missing.');
        }
        const url = sshHelpers_1.SshHelpers.getRelayUri(relayUri, liveShareEndpoint.relayClientSasToken, 'connect');
        try {
            const stream = await sshHelpers_1.SshHelpers.openConnection(url);
            await this.startSshSession(stream);
        }
        catch (ex) {
            console.log(ex);
        }
    }
}
exports.LiveShareRelayTunnelClient = LiveShareRelayTunnelClient;
//# sourceMappingURL=liveShareRelayTunnelClient.js.map

/***/ }),

/***/ 26698:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiModeTunnelClient = void 0;
/**
 * Tunnel client implementation that selects one of multiple available connection modes.
 */
class MultiModeTunnelClient {
    constructor() {
        this.clients = [];
        this.connectionModes = this.clients
            ? [...new Set(...this.clients.map((c) => c.connectionModes))]
            : [];
    }
    /**
     * A value indicating whether local connections for forwarded ports are accepted.
     * Local connections are not accepted if the host process is not NodeJS (e.g. browser).
     */
    get acceptLocalConnectionsForForwardedPorts() {
        return !!this.clients.find((c) => c.acceptLocalConnectionsForForwardedPorts);
    }
    set acceptLocalConnectionsForForwardedPorts(value) {
        this.clients.forEach((c) => (c.acceptLocalConnectionsForForwardedPorts = value));
    }
    connect(tunnel, hostId) {
        if (!tunnel) {
            throw new Error('Tunnel cannot be null');
        }
        return new Promise((resolve) => { });
    }
    connectToForwardedPort(fowardedPort, cancellation) {
        throw new Error('Method not implemented.');
    }
    waitForForwardedPort(forwardedPort, cancellation) {
        throw new Error('Method not implemented.');
    }
    dispose() {
        this.clients.forEach((client) => {
            client.dispose();
        });
    }
}
exports.MultiModeTunnelClient = MultiModeTunnelClient;
//# sourceMappingURL=multiModeTunnelClient.js.map

/***/ }),

/***/ 57820:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiModeTunnelHost = void 0;
const uuid_1 = __webpack_require__(30396);
/**
 * Aggregation of multiple tunnel hosts.
 */
class MultiModeTunnelHost {
    constructor() {
        this.hosts = [];
    }
    async start(tunnel) {
        let startTasks = [];
        this.hosts.forEach((host) => {
            startTasks.push(host.start(tunnel));
        });
        await Promise.all(startTasks);
    }
    async addPort(portToAdd) {
        let addTasks = [];
        this.hosts.forEach((host) => {
            addTasks.push(host.addPort(portToAdd));
        });
        await Promise.all(addTasks);
        return portToAdd;
    }
    async removePort(portNumberToRemove) {
        let result = true;
        let removeTasks = [];
        this.hosts.forEach((host) => {
            removeTasks.push(host.removePort(portNumberToRemove));
        });
        let results = await Promise.all(removeTasks);
        results.forEach((res) => {
            result = result && res;
        });
        return result;
    }
    async updatePort(updatedPort) {
        let updateTasks = [];
        this.hosts.forEach((host) => {
            updateTasks.push(host.updatePort(updatedPort));
        });
        await Promise.all(updateTasks);
        return updatedPort;
    }
    dispose() {
        this.hosts.forEach((host) => {
            host.dispose();
        });
    }
}
exports.MultiModeTunnelHost = MultiModeTunnelHost;
MultiModeTunnelHost.hostId = (0, uuid_1.v4)();
//# sourceMappingURL=multiModeTunnelHost.js.map

/***/ }),

/***/ 30396:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var v1 = __webpack_require__(56258);
var v4 = __webpack_require__(82478);

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;


/***/ }),

/***/ 31403:
/***/ ((module) => {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]]
  ]).join('');
}

module.exports = bytesToUuid;


/***/ }),

/***/ 75459:
/***/ ((module) => {

// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}


/***/ }),

/***/ 56258:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var rng = __webpack_require__(75459);
var bytesToUuid = __webpack_require__(31403);

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/uuidjs/uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),

/***/ 82478:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var rng = __webpack_require__(75459);
var bytesToUuid = __webpack_require__(31403);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),

/***/ 40030:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RetryTcpListenerFactory = void 0;
const net = __webpack_require__(12646);
/**
 * Implementation of a TCP listener factory that retries forwarding with nearby ports and falls back to a random port.
 * We make the assumption that the remote port that is being connected to and localPort numbers are the same.
 */
class RetryTcpListenerFactory {
    async createTcpListener(localIPAddress, localPort, canChangePort, cancellation) {
        if (!localIPAddress)
            throw new TypeError('Local IP address is required.');
        const maxOffet = 10;
        let listener = net.createServer();
        for (let offset = 0;; offset++) {
            // After reaching the max offset, pass 0 to pick a random available port.
            let localPortNumber = offset === maxOffet ? 0 : localPort + offset;
            try {
                return await new Promise((resolve, reject) => {
                    listener.listen({
                        host: localIPAddress,
                        port: localPortNumber,
                        ipv6Only: net.isIPv6(localIPAddress),
                    });
                    listener.on('listening', () => {
                        resolve(listener);
                    });
                    listener.on('error', (err) => {
                        reject(err);
                    });
                });
            }
            catch (err) {
                console.log('Listening on port ' + localPortNumber + ' failed: ' + err);
                console.log('Incrementing port and trying again');
                continue;
            }
        }
    }
}
exports.RetryTcpListenerFactory = RetryTcpListenerFactory;
//# sourceMappingURL=retryTcpListenerFactory.js.map

/***/ }),

/***/ 83589:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SessionPortKey = void 0;
/**
 * Class for comparing equality in sessionId port pairs
 */
class SessionPortKey {
    constructor(sessionId, port) {
        this.sessionId = sessionId;
        this.port = port;
    }
    equals(other) {
        return this.port === other.port && this.sessionId === other.sessionId;
    }
    toString() {
        return this.port + '_' + this.sessionId.toString('base64');
    }
}
exports.SessionPortKey = SessionPortKey;
//# sourceMappingURL=sessionPortKey.js.map

/***/ }),

/***/ 70360:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshChannelForwarder = void 0;
const vs_ssh_1 = __webpack_require__(92126);
const await_semaphore_1 = __webpack_require__(72045);
class SshChannelForwarder {
    constructor(channel, tcpClient) {
        this.receiveQueue = new vs_ssh_1.Queue();
        this.receiveSemaphore = new await_semaphore_1.Semaphore(0);
        this.channel = channel;
        this.client = tcpClient;
        this.stream = tcpClient.getStream();
        this.init();
    }
    async init() {
        await this.forwardFromStreamToChannel(new Buffer(4096));
        await this.forwardFromChannelToStream();
    }
    onChannelDataReceived(sender, data) {
        // Enqueue a copy of the buffer because the current one may be re-used by the caller.
        let copy = new Buffer(data.length);
        data.copy(copy);
        this.receiveQueue.enqueue(copy);
        try {
            this.receiveSemaphore.acquire();
        }
        catch (ex) {
            // The semaphore was disposed.
        }
        this.channel.adjustWindow(data.length);
    }
    onChannelClosed(sender, e) {
        this.channelClosedEvent = e;
        try {
            this.receiveSemaphore.acquire();
        }
        catch (ex) {
            // The semaphore was disposed.
        }
    }
    async forwardFromChannelToStream() {
        try {
            let forwarding;
            do {
                forwarding = await this.forwardFromChannelToStreamAsync();
            } while (forwarding);
        }
        catch (ex) {
            console.log(`Unexpected error reading channel stream: ${ex}`);
        }
    }
    async forwardFromChannelToStreamAsync() {
        var _a, _b;
        try {
            await this.receiveSemaphore.acquire();
        }
        catch (ex) {
            // The semaphore was disposed.
            this.closeStream(true);
            return false;
        }
        let data = this.receiveQueue.dequeue();
        if (data) {
            try {
                await this.stream.write(data);
                return true;
            }
            catch (ex) {
                // The semaphore was disposed.
                this.closeStream(true);
                return false;
            }
        }
        else {
            if (this.channelClosedEvent != null) {
                let errorMessage = (_a = this.channelClosedEvent.errorMessage) !== null && _a !== void 0 ? _a : (_b = this.channelClosedEvent.error) === null || _b === void 0 ? void 0 : _b.message;
                let message = !errorMessage
                    ? `Forwarder channel ${this.channel.channelId} closed.`
                    : `Forwarder channel ${this.channel.channelId} closed with error: ${errorMessage}`;
                console.log(message);
                this.closeStream(!!errorMessage);
            }
            // Reached end of stream.
            return false;
        }
    }
    closeStream(abort) {
        try {
            if (abort) {
                let socket = this.client.Client;
                socket.close(); // Abort
            }
            else {
                this.stream.close();
            }
        }
        catch (ex) {
            console.log(`PortForwardingService unexpected error closing connection: ${ex}`);
            return;
        }
        console.log(`Channel forwarder ${abort ? 'aborted' : 'closed'} connection.`);
    }
    async forwardFromStreamToChannel(buffer) {
        try {
            let forwarding;
            do {
                forwarding = await this.forwardFromStreamToChannelAsync(buffer);
            } while (forwarding);
        }
        catch (ex) {
            console.log(`Unexpected error reading channel stream: ${ex}`);
        }
    }
    async forwardFromStreamToChannelAsync(buffer) {
        let count;
        let exception = null;
        try {
            const buf = await this.stream.read(buffer.byteLength);
            count = buf === null || buf === void 0 ? void 0 : buf.byteLength;
        }
        catch (ex) {
            exception = ex;
            count = 0;
        }
        if (count && count > 0) {
            await this.channel.send(buffer.slice(0, count));
            return true;
        }
        else if (!exception) {
            const message = 'Channel forwarder reached end of stream.';
            console.log(message);
            await this.channel.send(new Buffer(''));
            await this.channel.close();
        }
        else {
            const message = `Channel forwarder stream read error: ${exception}`;
            console.log(message);
            await this.channel.close('SIGABRT', exception.toString());
        }
        return false;
    }
}
exports.SshChannelForwarder = SshChannelForwarder;
//# sourceMappingURL=sshChannelForwarder.js.map

/***/ }),

/***/ 8277:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
/* provided dependency */ var process = __webpack_require__(27061);

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RelayConnectionError = exports.RelayErrorType = exports.isNode = exports.SshHelpers = void 0;
const ssh = __webpack_require__(92126);
const websocket_1 = __webpack_require__(50411);
/**
 * Ssh connection helper
 */
class SshHelpers {
    /**
     * Get the Azure relay url from the relayUrl and relaySas key.
     * @param relayUrl
     * @param relaySas
     * @param action
     * @returns
     */
    static getRelayUri(relayUrl, relaySas, action) {
        if (!relayUrl) {
            throw new Error('Does not have a relay endpoint.');
        }
        // Reference:
        // https://github.com/Azure/azure-relay-node/blob/7b57225365df3010163bf4b9e640868a02737eb6/hyco-ws/index.js#L107-L137
        const relayUri = relayUrl.replace('sb:', 'wss:').replace('.net/', '.net:443/$hc/') +
            `?sb-hc-action=${action}&sb-hc-token=` +
            encodeURIComponent(relaySas || '');
        return relayUri;
    }
    /**
     * Open a connection to the relay uri depending on the running environment.
     * @param relayUri
     * @param protocols
     * @param headers
     * @param clientConfig
     * @returns
     */
    static openConnection(relayUri, protocols, headers, clientConfig) {
        if ((0, exports.isNode)()) {
            return SshHelpers.nodeSshStreamFactory(relayUri, protocols, headers, clientConfig);
        }
        return SshHelpers.webSshStreamFactory(new WebSocket(relayUri, protocols));
    }
    /**
     *
     * @returns Create a Ssh client session.
     */
    static createSshClientSession() {
        return SshHelpers.createSshSession((config) => new ssh.SshClientSession(config));
    }
    /**
     * Create a Ssh server session.
     * @param reconnectableSessions
     * @returns
     */
    static createSshServerSession(reconnectableSessions) {
        return SshHelpers.createSshSession((config) => new ssh.SshServerSession(config, reconnectableSessions));
    }
    /**
     * Create a websocketStream from a connection.
     * @param connection
     * @returns
     */
    static createWebSocketStreamAdapter(connection) {
        return new ssh.WebSocketStream(new WebsocketStreamAdapter(connection));
    }
    /**
     * Set up a web Ssh stream factory.
     * @param socket
     * @returns
     */
    static webSshStreamFactory(socket) {
        socket.binaryType = 'arraybuffer';
        return new Promise((resolve, reject) => {
            socket.onopen = () => {
                resolve(new ssh.WebSocketStream(socket));
            };
            socket.onerror = (e) => {
                reject(new Error(`Failed to connect to relay url`));
            };
        });
    }
    static createSshSession(factoryCallback) {
        const config = new ssh.SshSessionConfiguration();
        config.keyExchangeAlgorithms.splice(0);
        config.keyExchangeAlgorithms.push(ssh.SshAlgorithms.keyExchange.ecdhNistp384Sha384);
        config.keyExchangeAlgorithms.push(ssh.SshAlgorithms.keyExchange.ecdhNistp256Sha256);
        config.keyExchangeAlgorithms.push(ssh.SshAlgorithms.keyExchange.dhGroup14Sha256);
        config.protocolExtensions.push(ssh.SshProtocolExtensionNames.sessionReconnect);
        config.protocolExtensions.push(ssh.SshProtocolExtensionNames.sessionLatency);
        // TODO: remove this once we know the ssh server has the > 3.3.10 update
        const posGcm = config.encryptionAlgorithms.indexOf(ssh.SshAlgorithms.encryption.aes256Gcm);
        if (posGcm !== -1) {
            config.encryptionAlgorithms.splice(posGcm, 1);
        }
        return factoryCallback(config);
    }
    static nodeSshStreamFactory(relayUri, protocols, headers, clientConfig) {
        const client = new websocket_1.client(clientConfig);
        return new Promise((resolve, reject) => {
            client.on('connect', (connection) => {
                resolve(new ssh.WebSocketStream(new WebsocketStreamAdapter(connection)));
            });
            client.on('connectFailed', (e) => {
                if (e.message && e.message.startsWith('Error: ')) {
                    e.message = e.message.substr(7);
                }
                let errorType = RelayErrorType.ServerError;
                // Unfortunately the status code can only be obtained from the error message.
                // Also status 404 may be used for at least two distinct error conditions.
                // So we have to match on the error message text. This could break when
                // the relay server behavior changes or when updating the client websocket library.
                // But then in the worst case the original error message will be reported.
                // TODO: Return ProblemDetails from TunnelRelay service. The 404 error messages
                // below match Azure Relay but not TunnelRelay.
                if (/status: 401/.test(e.message)) {
                    e.message = 'error.relayClientUnauthorized';
                    errorType = RelayErrorType.Unauthorized;
                }
                else if (/status: 403/.test(e.message)) {
                    e.message = 'error.relayClientForbidden';
                    errorType = RelayErrorType.Unauthorized;
                }
                else if (/status: 404 Endpoint does not exist/.test(e.message)) {
                    e.message = 'error.relayEndpointNotFound';
                    errorType = RelayErrorType.EndpointNotFound;
                }
                else if (/status: 404 There are no listeners connected/.test(e.message)) {
                    e.message = 'error.relayListenerOffline';
                    errorType = RelayErrorType.ListenerOffline;
                }
                else if (/status: 500/.test(e.message)) {
                    e.message = 'error.relayServerError';
                    errorType = RelayErrorType.ServerError;
                }
                else {
                    // Other errors are most likely connectivity issues.
                    // The original error message may have additional helpful details.
                    e.message = 'error.relayConnectionError' + ' ' + e.message;
                }
                reject(new RelayConnectionError(e.message, { errorType }));
            });
            client.connect(relayUri, protocols, undefined, headers);
        });
    }
}
exports.SshHelpers = SshHelpers;
/**
 * Partially adapts a Node websocket connection object to the browser websocket API,
 * enough so that it can be used as an SSH stream.
 */
class WebsocketStreamAdapter {
    constructor(connection) {
        this.connection = connection;
    }
    set onmessage(messageHandler) {
        if (messageHandler) {
            this.connection.on('message', (message) => {
                // This assumes all messages are binary.
                messageHandler({ data: message.binaryData });
            });
        }
        else {
            // Removing event handlers is not implemented.
        }
    }
    set onclose(closeHandler) {
        if (closeHandler) {
            this.connection.on('close', (code, reason) => {
                closeHandler({ code, reason, wasClean: !(code || reason) });
            });
        }
        else {
            // Removing event handlers is not implemented.
        }
    }
    send(data) {
        if (Buffer.isBuffer(data)) {
            this.connection.sendBytes(data);
        }
        else {
            this.connection.sendBytes(Buffer.from(data));
        }
    }
    close(code, reason) {
        if (code || reason) {
            this.connection.drop(code, reason);
        }
        else {
            this.connection.close();
        }
    }
}
/**
 * Helper function to check the running environment.
 */
const isNode = () => typeof process !== 'undefined' &&
    typeof process.release !== 'undefined' &&
    process.release.name === 'node';
exports.isNode = isNode;
/**
 * Type of relay connection error types.
 */
var RelayErrorType;
(function (RelayErrorType) {
    RelayErrorType[RelayErrorType["ConnectionError"] = 1] = "ConnectionError";
    RelayErrorType[RelayErrorType["Unauthorized"] = 2] = "Unauthorized";
    RelayErrorType[RelayErrorType["EndpointNotFound"] = 3] = "EndpointNotFound";
    RelayErrorType[RelayErrorType["ListenerOffline"] = 4] = "ListenerOffline";
    RelayErrorType[RelayErrorType["ServerError"] = 5] = "ServerError";
})(RelayErrorType = exports.RelayErrorType || (exports.RelayErrorType = {}));
/**
 * Error used when a connection to an Azure relay failed.
 */
class RelayConnectionError extends Error {
    constructor(message, errorContext) {
        super(message);
        this.errorContext = errorContext;
    }
}
exports.RelayConnectionError = RelayConnectionError;
//# sourceMappingURL=sshHelpers.js.map

/***/ }),

/***/ 49246:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=tunnelClient.js.map

/***/ }),

/***/ 59725:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TunnelClientBase = void 0;
const vs_ssh_1 = __webpack_require__(92126);
const vs_ssh_tcp_1 = __webpack_require__(59133);
const retryTcpListenerFactory_1 = __webpack_require__(40030);
const sshHelpers_1 = __webpack_require__(8277);
const utils_1 = __webpack_require__(53862);
const vscode_jsonrpc_1 = __webpack_require__(83730);
/**
 * Base class for clients that connect to a single host
 */
class TunnelClientBase {
    constructor() {
        this.sshSessionClosedEmitter = new vscode_jsonrpc_1.Emitter();
        this.acceptLocalConnectionsForForwardedPortsValue = (0, sshHelpers_1.isNode)();
        this.connectionModes = [];
        this.sshSessionClosed = this.sshSessionClosedEmitter.event;
        /**
         * Trace to write output to console
         * @param level
         * @param eventId
         * @param msg
         * @param err
         */
        this.trace = (level, eventId, msg, err) => { };
    }
    get isSshSessionActive() {
        var _a;
        return !!((_a = this.sshSession) === null || _a === void 0 ? void 0 : _a.isConnected);
    }
    /**
     * Get a value indicating if remote port is forwarded and has any channels open on the client,
     * whether used by local tcp listener if {AcceptLocalConnectionsForForwardedPorts} is true, or
     * streamed via <see cref="ConnectToForwardedPortAsync(int, CancellationToken)"/>.
     */
    hasForwardedChannels(port) {
        var _a;
        if (!this.isSshSessionActive) {
            return false;
        }
        const pfs = (_a = this.sshSession) === null || _a === void 0 ? void 0 : _a.activateService(vs_ssh_tcp_1.PortForwardingService);
        const remoteForwardedPorts = pfs === null || pfs === void 0 ? void 0 : pfs.remoteForwardedPorts;
        const forwardedPort = remoteForwardedPorts === null || remoteForwardedPorts === void 0 ? void 0 : remoteForwardedPorts.find((p) => p.remotePort === port);
        return !!forwardedPort && remoteForwardedPorts.getChannels(forwardedPort).length > 0;
    }
    /**
     * A value indicating whether local connections for forwarded ports are accepted.
     * Local connections are not accepted if the host is not NodeJS (e.g. browser).
     */
    get acceptLocalConnectionsForForwardedPorts() {
        return this.acceptLocalConnectionsForForwardedPortsValue;
    }
    set acceptLocalConnectionsForForwardedPorts(value) {
        if (value === this.acceptLocalConnectionsForForwardedPortsValue) {
            return;
        }
        if (value && !(0, sshHelpers_1.isNode)()) {
            throw new Error('Cannot accept local connections for forwarded ports on this platform.');
        }
        this.acceptLocalConnectionsForForwardedPortsValue = value;
        this.activatePfsIfNeeded();
    }
    get forwardedPorts() {
        var _a;
        let pfs = (_a = this.sshSession) === null || _a === void 0 ? void 0 : _a.activateService(vs_ssh_tcp_1.PortForwardingService);
        return pfs === null || pfs === void 0 ? void 0 : pfs.remoteForwardedPorts;
    }
    async connect(tunnel, hostId) {
        if (!tunnel) {
            throw new Error('Tunnel cannot be null');
        }
        if (!tunnel.endpoints) {
            throw new Error('Tunnel endpoints cannot be null');
        }
        if (this.sshSession) {
            throw new Error('Already connected. Use separate instances to connect to multiple tunnels.');
        }
        if (tunnel.endpoints.length === 0) {
            throw new Error('No hosts are currently accepting connections for the tunnel.');
        }
        let endpointGroups = utils_1.List.groupBy(tunnel.endpoints, (endpoint) => endpoint.hostId);
        let endpointGroup;
        if (hostId) {
            endpointGroup = endpointGroups.get(hostId);
            if (!endpointGroup) {
                throw new Error('The specified host is not currently accepting connections to the tunnel.');
            }
        }
        else if (endpointGroups.size > 1) {
            throw new Error('There are multiple hosts for the tunnel. Specify a host ID to connect to.');
        }
        else {
            endpointGroup = endpointGroups.entries().next().value[1];
        }
        await this.connectClient(tunnel, endpointGroup);
    }
    onRequest(e) {
        if (e.request.requestType === vs_ssh_tcp_1.PortForwardingService.portForwardRequestType ||
            e.request.requestType === vs_ssh_tcp_1.PortForwardingService.cancelPortForwardRequestType) {
            e.isAuthorized = true;
        }
    }
    async startSshSession(stream) {
        let clientConfig = new vs_ssh_1.SshSessionConfiguration();
        // Enable port-forwarding via the SSH protocol.
        clientConfig.addService(vs_ssh_tcp_1.PortForwardingService);
        this.sshSession = new vs_ssh_1.SshClientSession(clientConfig);
        this.sshSession.trace = this.trace;
        this.sshSession.onClosed((e) => this.onSshSessionClosed(e));
        this.sshSession.onAuthenticating((e) => this.onSshServerAuthenticating(e));
        this.activatePfsIfNeeded();
        this.sshSession.onRequest((e) => this.onRequest(e));
        await this.sshSession.connect(stream);
        // For now, the client is allowed to skip SSH authentication;
        // they must have a valid tunnel access token already to get this far.
        let clientCredentials = {
            username: 'tunnel',
            password: undefined,
        };
        await this.sshSession.authenticate(clientCredentials);
    }
    activatePfsIfNeeded() {
        if (!this.sshSession) {
            return;
        }
        const pfs = this.sshSession.activateService(vs_ssh_tcp_1.PortForwardingService);
        // Do not start forwarding local connections for browser client connections or if this is not allowed.
        if (this.acceptLocalConnectionsForForwardedPortsValue && (0, sshHelpers_1.isNode)()) {
            pfs.tcpListenerFactory = new retryTcpListenerFactory_1.RetryTcpListenerFactory();
        }
        else {
            pfs.acceptLocalConnectionsForForwardedPorts = false;
        }
    }
    async connectToForwardedPort(fowardedPort, cancellation) {
        const pfs = this.getSshSessionPfs();
        if (!pfs) {
            throw new Error('Failed to connect to remote port. Ensure that the client has connected by calling connectClient.');
        }
        return pfs.connectToForwardedPort(fowardedPort, cancellation);
    }
    async waitForForwardedPort(forwardedPort, cancellation) {
        const pfs = this.getSshSessionPfs();
        if (!pfs) {
            throw new Error('Port forwarding has not been started. Ensure that the client has connected by calling connectClient.');
        }
        return pfs.waitForForwardedPort(forwardedPort, cancellation);
    }
    getSshSessionPfs() {
        var _a, _b;
        return (_b = (_a = this.sshSession) === null || _a === void 0 ? void 0 : _a.getService(vs_ssh_tcp_1.PortForwardingService)) !== null && _b !== void 0 ? _b : undefined;
    }
    onSshServerAuthenticating(e) {
        // TODO: Validate host public keys match those published to the service?
        // For now, the assumption is only a host with access to the tunnel can get a token
        // that enables listening for tunnel connections.
        e.authenticationPromise = Promise.resolve({});
    }
    onSshSessionClosed(e) {
        this.sshSessionClosedEmitter.fire(this);
    }
    async dispose() {
        if (this.sshSession) {
            await this.sshSession.close(vs_ssh_1.SshDisconnectReason.byApplication);
        }
    }
}
exports.TunnelClientBase = TunnelClientBase;
//# sourceMappingURL=tunnelClientBase.js.map

/***/ }),

/***/ 71625:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=tunnelHost.js.map

/***/ }),

/***/ 65666:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TunnelHostBase = void 0;
const vs_ssh_1 = __webpack_require__(92126);
const vs_ssh_tcp_1 = __webpack_require__(59133);
const sessionPortKey_1 = __webpack_require__(83589);
/**
 * Base class for Hosts that host one tunnel
 */
class TunnelHostBase {
    constructor(managementClient) {
        /**
         * Sessions created between this host and clients
         */
        this.sshSessions = [];
        /**
         * Port Forwarders between host and clients
         */
        this.remoteForwarders = {};
        /**
         * Trace used for writing output
         * @param level
         * @param eventId
         * @param msg
         * @param err
         */
        this.trace = (level, eventId, msg, err) => { };
        this.loopbackIp = '127.0.0.1';
        this.managementClient = managementClient;
        const publicKey = vs_ssh_1.SshAlgorithms.publicKey.ecdsaSha2Nistp384;
        if (publicKey) {
            this.hostPrivateKeyPromise = publicKey.generateKeyPair();
        }
    }
    async start(tunnel) {
        if (this.tunnel) {
            throw new Error('Already hosting a tunnel. Use separate instances to host multiple tunnels.');
        }
        if (this.hostPrivateKeyPromise) {
            const hostPrivateKey = await this.hostPrivateKeyPromise;
            this.hostPrivateKey = hostPrivateKey;
            const buffer = await hostPrivateKey.getPublicKeyBytes(hostPrivateKey.keyAlgorithmName);
            if (buffer) {
                let hostPublicKeys = [buffer.toString('base64')];
                await this.startServer(tunnel, hostPublicKeys);
            }
            else {
                throw new Error('Host private key public key bytes is not initialized');
            }
        }
    }
    async addPort(portToAdd) {
        if (!this.tunnel) {
            throw new Error('Tunnel must be running');
        }
        let port = await this.managementClient.createTunnelPort(this.tunnel, portToAdd, undefined);
        const promises = this.sshSessions.map(async (sshSession) => {
            if (!sshSession.principal) {
                // The session is not yet authenticated; all ports will be forwarded after
                // the session is authenticated.
                return;
            }
            let pfs = sshSession.getService(vs_ssh_tcp_1.PortForwardingService);
            if (!pfs) {
                throw new Error('PFS must be active to add ports');
            }
            await this.forwardPort(pfs, port);
        });
        await Promise.all(promises);
        return port;
    }
    async removePort(portNumberToRemove) {
        if (!this.tunnel || !this.tunnel.ports) {
            throw new Error('Tunnel must be running and have ports to delete');
        }
        let portDeleted = await this.managementClient.deleteTunnelPort(this.tunnel, portNumberToRemove, undefined);
        this.sshSessions.forEach((sshSession) => {
            const sessionId = sshSession.sessionId;
            if (sessionId) {
                Object.keys(this.remoteForwarders).forEach((key) => {
                    let entry = this.remoteForwarders[key];
                    if (entry.localPort === portNumberToRemove) {
                        // && key.sessionId.equals(sessionId))
                        let remoteForwarder = this.remoteForwarders[key];
                        delete this.remoteForwarders[key];
                        if (remoteForwarder) {
                            remoteForwarder.dispose();
                        }
                    }
                });
            }
        });
        return portDeleted;
    }
    async updatePort(updatedPort) {
        if (!this.tunnel || !this.tunnel.ports) {
            throw new Error('Tunnel must be running and have ports to update');
        }
        let port = await this.managementClient.updateTunnelPort(this.tunnel, updatedPort, undefined);
        return port;
    }
    async forwardPort(pfs, port) {
        let sessionId = pfs.session.sessionId;
        if (!sessionId) {
            throw new Error('No session id');
        }
        // When forwarding from a Remote port we assume that the RemotePortNumber
        // and requested LocalPortNumber are the same.
        let forwarder = await pfs.forwardFromRemotePort(this.loopbackIp, Number(port.portNumber), this.loopbackIp, Number(port.portNumber));
        if (!forwarder) {
            // The forwarding request was rejected by the client.
            return false;
        }
        const key = new sessionPortKey_1.SessionPortKey(sessionId, Number(forwarder.remotePort));
        this.remoteForwarders[key.toString()] = forwarder;
        return true;
    }
}
exports.TunnelHostBase = TunnelHostBase;
//# sourceMappingURL=tunnelHostBase.js.map

/***/ }),

/***/ 57771:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=tunnelRelayStreamFactory.js.map

/***/ }),

/***/ 79747:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TunnelRelayTunnelClient = void 0;
const tunnels_contracts_1 = __webpack_require__(37775);
const vs_ssh_1 = __webpack_require__(92126);
const _1 = __webpack_require__(29605);
const tunnelClientBase_1 = __webpack_require__(59725);
/**
 * Tunnel client implementation that connects via a tunnel relay.
 */
class TunnelRelayTunnelClient extends tunnelClientBase_1.TunnelClientBase {
    constructor() {
        super();
        this.connectionModes = [];
        /**
         * Gets or sets a factory for creating relay streams.
         */
        this.streamFactory = new _1.DefaultTunnelRelayStreamFactory();
    }
    async connectClient(tunnel, endpoints) {
        let tunnelEndpoints = endpoints.map((endpoint) => endpoint);
        let tunnelEndpoint;
        if (tunnelEndpoints && tunnelEndpoints.length === 1) {
            tunnelEndpoint = tunnelEndpoints[0];
        }
        else {
            throw new Error('The host is not currently accepting Tunnel relay connections.');
        }
        let clientRelayUri = tunnelEndpoint.clientRelayUri;
        if (!clientRelayUri) {
            throw new Error('The tunnel client relay endpoint URI is missing.');
        }
        let accessToken = tunnel.accessTokens
            ? tunnel.accessTokens[tunnels_contracts_1.TunnelAccessScopes.Connect]
            : undefined;
        await this.connectClientToRelayServer(clientRelayUri, accessToken);
    }
    async connectClientToRelayServer(clientRelayUri, accessToken) {
        this.trace(vs_ssh_1.TraceLevel.Info, 0, `Connecting to client tunnel relay ${clientRelayUri}`);
        this.trace(vs_ssh_1.TraceLevel.Verbose, 0, `Sec-WebSocket-Protocol: ${TunnelRelayTunnelClient.webSocketSubProtocol}`);
        if (accessToken) {
            this.trace(vs_ssh_1.TraceLevel.Verbose, 0, `Authorization: tunnel ${accessToken}`);
        }
        try {
            let stream = await this.streamFactory.createRelayStream(clientRelayUri, TunnelRelayTunnelClient.webSocketSubProtocol, accessToken);
            try {
                await this.startSshSession(stream);
            }
            catch (_a) {
                stream.dispose();
                throw new Error();
            }
        }
        catch (ex) {
            throw new Error('Failed to connect to tunnel relay. ' + ex);
        }
    }
}
exports.TunnelRelayTunnelClient = TunnelRelayTunnelClient;
/**
 * Web socket sub-protocol to connect to the tunnel relay endpoint.
 */
TunnelRelayTunnelClient.webSocketSubProtocol = 'tunnel-relay-client';
//# sourceMappingURL=tunnelRelayTunnelClient.js.map

/***/ }),

/***/ 75726:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TunnelRelayTunnelHost = void 0;
const tunnels_contracts_1 = __webpack_require__(37775);
const vs_ssh_1 = __webpack_require__(92126);
const vs_ssh_tcp_1 = __webpack_require__(59133);
const vscode_jsonrpc_1 = __webpack_require__(83730);
const _1 = __webpack_require__(29605);
const multiModeTunnelHost_1 = __webpack_require__(57820);
const tunnelHostBase_1 = __webpack_require__(65666);
/**
 * Tunnel host implementation that uses data-plane relay
 *  to accept client connections.
 */
class TunnelRelayTunnelHost extends tunnelHostBase_1.TunnelHostBase {
    constructor(managementClient) {
        super(managementClient);
        /**
         * Gets or sets a factory for creating relay streams.
         */
        this.streamFactory = new _1.DefaultTunnelRelayStreamFactory();
        this.clientSessionPromises = [];
        this.disposeCts = new vscode_jsonrpc_1.CancellationTokenSource();
        this.hostId = multiModeTunnelHost_1.MultiModeTunnelHost.hostId;
    }
    async startServer(tunnel, hostPublicKeys) {
        let accessToken = tunnel.accessTokens
            ? tunnel.accessTokens[tunnels_contracts_1.TunnelAccessScopes.Host]
            : undefined;
        if (!accessToken) {
            this.trace(vs_ssh_1.TraceLevel.Info, 0, `There is no access token for ${tunnels_contracts_1.TunnelAccessScopes.Host} scope on the tunnel.`);
        }
        let endpoint = {
            hostId: this.hostId,
            hostPublicKeys: hostPublicKeys,
            connectionMode: tunnels_contracts_1.TunnelConnectionMode.TunnelRelay,
        };
        endpoint = await this.managementClient.updateTunnelEndpoint(tunnel, endpoint, undefined);
        this.tunnel = tunnel;
        let hostRelayUri = endpoint.hostRelayUri;
        if (!hostRelayUri) {
            throw new Error(`The tunnel host relay endpoint URI is missing.`);
        }
        this.trace(vs_ssh_1.TraceLevel.Info, 0, `Connecting to host tunnel relay ${hostRelayUri}`);
        this.trace(vs_ssh_1.TraceLevel.Verbose, 0, `Sec-WebSocket-Protocol: ${TunnelRelayTunnelHost.webSocketSubProtocol}`);
        if (accessToken) {
            this.trace(vs_ssh_1.TraceLevel.Verbose, 0, `Authorization: tunnel ${accessToken}`);
        }
        try {
            let stream = await this.streamFactory.createRelayStream(hostRelayUri, TunnelRelayTunnelHost.webSocketSubProtocol, accessToken, this.managementClient.httpsAgent
                ? { tlsOptions: this.managementClient.httpsAgent.options }
                : undefined);
            this.hostSession = new vs_ssh_1.MultiChannelStream(stream);
            const channelOpenEventRegistration = this.hostSession.onChannelOpening((e) => {
                this.hostSession_ChannelOpening(this.hostSession, e);
            });
            const closeEventRegistration = this.hostSession.onClosed((e) => {
                this.hostSession_Closed(channelOpenEventRegistration, closeEventRegistration);
            });
            try {
                await this.hostSession.connect();
            }
            catch (_a) {
                await this.hostSession.close();
                throw new Error();
            }
        }
        catch (exception) {
            throw new Error('Failed to connect to tunnel relay. ' + exception);
        }
    }
    hostSession_ChannelOpening(sender, e) {
        if (!e.isRemoteRequest) {
            // Auto approve all local requests (not that there are any for the time being).
            return;
        }
        if (e.channel.channelType !== TunnelRelayTunnelHost.clientStreamChannelType) {
            e.failureDescription = `Unexpected channel type. Only ${TunnelRelayTunnelHost.clientStreamChannelType} is supported.`;
            e.failureReason = vs_ssh_1.SshChannelOpenFailureReason.unknownChannelType;
            return;
        }
        const promise = this.acceptClientSession(sender, this.disposeCts.token);
        this.clientSessionPromises.push(promise);
        promise.then(() => {
            const index = this.clientSessionPromises.indexOf(promise);
            this.clientSessionPromises.splice(index, 1);
        });
    }
    async acceptClientSession(hostSession, cancellation) {
        try {
            let stream = await hostSession.acceptStream(TunnelRelayTunnelHost.clientStreamChannelType, cancellation);
            await this.connectAndRunClientSession(stream, cancellation);
        }
        catch (ex) {
            this.trace(vs_ssh_1.TraceLevel.Error, 0, `Error running client SSH session: ${ex}`);
        }
    }
    async connectAndRunClientSession(stream, cancellation) {
        let serverConfig = new vs_ssh_1.SshSessionConfiguration();
        serverConfig.addService(vs_ssh_tcp_1.PortForwardingService);
        let session = new vs_ssh_1.SshServerSession(serverConfig);
        session.trace = this.trace;
        session.credentials = {
            publicKeys: [this.hostPrivateKey],
        };
        let tcs = new vs_ssh_1.PromiseCompletionSource();
        cancellation.onCancellationRequested((e) => {
            tcs.reject(new vs_ssh_1.CancellationError());
        });
        const authenticatingEventRegistration = session.onAuthenticating((e) => {
            this.onSshClientAuthenticating(e);
        });
        session.onClientAuthenticated(() => {
            this.onSshClientAuthenticated(session);
        });
        const channelOpeningEventRegistration = session.onChannelOpening((e) => {
            this.onSshChannelOpening(e, session);
        });
        const closedEventRegistration = session.onClosed((e) => {
            this.session_Closed(e, cancellation);
        });
        try {
            const nodeStream = new vs_ssh_1.NodeStream(stream);
            await session.connect(nodeStream);
            this.sshSessions.push(session);
            await tcs.promise;
        }
        finally {
            authenticatingEventRegistration.dispose();
            channelOpeningEventRegistration.dispose();
            closedEventRegistration.dispose();
        }
    }
    onSshClientAuthenticating(e) {
        if (e.authenticationType === vs_ssh_1.SshAuthenticationType.clientNone) {
            // For now, the client is allowed to skip SSH authentication;
            // they must have a valid tunnel access token already to get this far.
            e.authenticationPromise = Promise.resolve({});
        }
        else if (e.authenticationType === vs_ssh_1.SshAuthenticationType.clientPassword &&
            !e.clientUsername) {
            // The client is authenticating with a Live Share session token.
            // TODO: Validate the Live Share session token.
            e.authenticationPromise = Promise.resolve({});
        }
        else {
            // Other authentication types are not implemented. Doing nothing here
            // results in a client authentication failure.
        }
    }
    onSshClientAuthenticated(session) {
        let pfs = session.activateService(vs_ssh_tcp_1.PortForwardingService);
        if (this.tunnel && this.tunnel.ports) {
            this.tunnel.ports.forEach(async (port) => {
                try {
                    await this.forwardPort(pfs, port);
                }
                catch (ex) {
                    this.trace(vs_ssh_1.TraceLevel.Error, 0, `Error forwarding port ${port.portNumber}: ${ex}`);
                }
            });
        }
    }
    onSshChannelOpening(e, session) {
        if (!(e.request instanceof vs_ssh_tcp_1.PortForwardChannelOpenMessage)) {
            // This is to let the Go SDK open an unused session channel
            if (e.request.channelType === 'session') {
                return;
            }
            this.trace(vs_ssh_1.TraceLevel.Warning, 0, 'Rejecting request to open non-portforwarding channel.');
            e.failureReason = vs_ssh_1.SshChannelOpenFailureReason.administrativelyProhibited;
            return;
        }
        let portForwardRequest = e.request;
        if (portForwardRequest.channelType === 'direct-tcpip') {
            if (!this.tunnel.ports.some((p) => p.portNumber === portForwardRequest.port)) {
                this.trace(vs_ssh_1.TraceLevel.Warning, 0, 'Rejecting request to connect to non-forwarded port:' + portForwardRequest.port);
                e.failureReason = vs_ssh_1.SshChannelOpenFailureReason.administrativelyProhibited;
            }
        }
        else if (portForwardRequest.channelType === 'forwarded-tcpip') {
            if (!(session instanceof vs_ssh_1.SshServerSession)) {
                this.trace(vs_ssh_1.TraceLevel.Warning, 0, 'Rejecting request due to invalid sender');
                e.failureReason = vs_ssh_1.SshChannelOpenFailureReason.connectFailed;
            }
            else {
                let sessionId = session.sessionId;
                if (!sessionId) {
                    this.trace(vs_ssh_1.TraceLevel.Warning, 0, 'Rejecting request as session has no Id');
                    e.failureReason = vs_ssh_1.SshChannelOpenFailureReason.administrativelyProhibited;
                    return;
                }
                if (!this.remoteForwarders[new _1.SessionPortKey(sessionId, portForwardRequest.port).toString()]) {
                    this.trace(vs_ssh_1.TraceLevel.Warning, 0, 'Rejecting request to connect to non-forwarded port:' +
                        portForwardRequest.port);
                    e.failureReason = vs_ssh_1.SshChannelOpenFailureReason.administrativelyProhibited;
                }
            }
        }
        else {
            this.trace(vs_ssh_1.TraceLevel.Warning, 0, 'Nonrecognized channel type ' + portForwardRequest.channelType);
            e.failureReason = vs_ssh_1.SshChannelOpenFailureReason.unknownChannelType;
        }
    }
    session_Closed(e, cancellation) {
        if (e.reason === vs_ssh_1.SshDisconnectReason.byApplication) {
            this.trace(vs_ssh_1.TraceLevel.Info, 0, 'Client ssh session closed.');
        }
        else if (cancellation.isCancellationRequested) {
            this.trace(vs_ssh_1.TraceLevel.Info, 0, 'Client ssh session cancelled.');
        }
        else {
            this.trace(vs_ssh_1.TraceLevel.Error, 0, `Client ssh session closed unexpectely due to ${e.reason}, \"${e.message}\"\n${e.error}`);
        }
    }
    hostSession_Closed(channelOpenEventRegistration, closeEventRegistration) {
        closeEventRegistration.dispose();
        channelOpenEventRegistration.dispose();
        this.hostSession = undefined;
        this.trace(vs_ssh_1.TraceLevel.Info, 0, 'Connection to host tunnel relay closed.');
    }
    async dispose() {
        this.disposeCts.cancel();
        let hostSession = this.hostSession;
        if (hostSession) {
            this.hostSession = undefined;
            try {
                await hostSession.close();
            }
            catch (e) {
                if (!(e instanceof vs_ssh_1.ObjectDisposedError))
                    throw e;
            }
        }
        let promises = Object.assign([], this.clientSessionPromises);
        this.clientSessionPromises.length = 0;
        if (this.tunnel) {
            const promise = this.managementClient.deleteTunnelEndpoints(this.tunnel, this.hostId, tunnels_contracts_1.TunnelConnectionMode.TunnelRelay);
            promises.push(promise);
        }
        for (const key of Object.keys(this.remoteForwarders)) {
            this.remoteForwarders[key].dispose();
        }
        this.sshSessions.forEach((sshSession) => {
            promises.push(sshSession.close(vs_ssh_1.SshDisconnectReason.byApplication));
        });
        await Promise.all(promises);
        this.clientSessionPromises.length = 0;
    }
}
exports.TunnelRelayTunnelHost = TunnelRelayTunnelHost;
/**
 * Web socket sub-protocol to connect to the tunnel relay endpoint.
 */
TunnelRelayTunnelHost.webSocketSubProtocol = 'tunnel-relay-host';
/**
 * Ssh channel type in host relay ssh session where client session streams are passed.
 */
TunnelRelayTunnelHost.clientStreamChannelType = 'client-ssh-session-stream';
//# sourceMappingURL=tunnelRelayTunnelHost.js.map

/***/ }),

/***/ 53862:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.List = void 0;
class List {
    static groupBy(list, keyGetter) {
        const map = new Map();
        list.forEach((item) => {
            const key = keyGetter(item);
            const collection = map.get(key);
            if (!collection) {
                map.set(key, [item]);
            }
            else {
                collection.push(item);
            }
        });
        return map;
    }
}
exports.List = List;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 37775:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(14488), exports);
__exportStar(__webpack_require__(73505), exports);
__exportStar(__webpack_require__(72697), exports);
__exportStar(__webpack_require__(25580), exports);
__exportStar(__webpack_require__(73784), exports);
__exportStar(__webpack_require__(87334), exports);
__exportStar(__webpack_require__(27321), exports);
__exportStar(__webpack_require__(56655), exports);
__exportStar(__webpack_require__(8825), exports);
__exportStar(__webpack_require__(1036), exports);
__exportStar(__webpack_require__(45876), exports);
__exportStar(__webpack_require__(56748), exports);
__exportStar(__webpack_require__(67164), exports);
__exportStar(__webpack_require__(59019), exports);
__exportStar(__webpack_require__(30377), exports);
__exportStar(__webpack_require__(59579), exports);
__exportStar(__webpack_require__(42293), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 73505:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=liveShareRelayTunnelEndpoint.js.map

/***/ }),

/***/ 72697:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=problemDetails.js.map

/***/ }),

/***/ 14488:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=tunnel.js.map

/***/ }),

/***/ 25580:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=tunnelAccessControl.js.map

/***/ }),

/***/ 73784:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Providers = exports.TunnelAccessControlEntry = void 0;
const tunnelAccessControlEntryType_1 = __webpack_require__(87334);
/**
 * Data contract for an access control entry on a tunnel or tunnel port.
 */
class TunnelAccessControlEntry {
    constructor() {
        /**
         * @returns A compact textual representation of the access control entry.
         */
        this.toString = () => {
            var _a;
            let res = '';
            if (this.isInherited) {
                res += 'Inherited: ';
            }
            res += this.isDeny ? '- ' : '+';
            res += this.getEntryTypeString(this.type, ((_a = this.subjects) === null || _a === void 0 ? void 0 : _a.length) !== 1, this.provider);
            if (this.scopes && this.scopes.length > 0) {
                res += ` [${this.scopes.join(', ')}]`;
            }
            if (this.subjects && this.subjects.length > 0) {
                res += ` ([)${this.subjects.join(', ')})`;
            }
            return res;
        };
        this.type = tunnelAccessControlEntryType_1.TunnelAccessControlEntryType.None;
        this.scopes = [];
        this.subjects = [];
    }
    getEntryTypeString(entryType, plural, provider) {
        if (entryType === tunnelAccessControlEntryType_1.TunnelAccessControlEntryType.Anonymous) {
            plural = false;
        }
        let label;
        switch (entryType) {
            case tunnelAccessControlEntryType_1.TunnelAccessControlEntryType.Anonymous:
                label = 'Anonymous';
                break;
            case tunnelAccessControlEntryType_1.TunnelAccessControlEntryType.Users:
                label = 'User';
                break;
            case tunnelAccessControlEntryType_1.TunnelAccessControlEntryType.Groups:
                label = provider === Providers.github ? 'Team' : 'Group';
                break;
            case tunnelAccessControlEntryType_1.TunnelAccessControlEntryType.Organizations:
                label = provider === Providers.microsoft ? 'Tenant' : 'Org';
                break;
            case tunnelAccessControlEntryType_1.TunnelAccessControlEntryType.Repositories:
                label = 'Repo';
                break;
            case tunnelAccessControlEntryType_1.TunnelAccessControlEntryType.PublicKeys:
                label = 'Key';
                break;
            case tunnelAccessControlEntryType_1.TunnelAccessControlEntryType.IPAddressRanges:
                label = 'IP Range';
                break;
            default:
                label = entryType.toString();
                break;
        }
        if (plural) {
            label += 's';
        }
        if (provider) {
            switch (provider) {
                case Providers.microsoft:
                    label = `AAD ${label}`;
                    break;
                case Providers.github:
                    label = `GitHub ${label}`;
                    break;
                case Providers.ssh:
                    label = `SSH ${label}`;
                    break;
                case Providers.ipv4:
                    label = label.replace('IP', 'IPv4');
                    break;
                case Providers.ipv6:
                    label = label.replace('IP', 'IPv6');
                    break;
                default:
                    label = `${label} (${provider})`;
                    break;
            }
        }
        return label;
    }
}
exports.TunnelAccessControlEntry = TunnelAccessControlEntry;
/**
 * Constants for well-known identity providers.
 */
class Providers {
}
exports.Providers = Providers;
Providers.microsoft = 'microsoft';
Providers.github = 'github';
Providers.ssh = 'ssh';
Providers.ipv4 = 'ipv4';
Providers.ipv6 = 'ipv6';
//# sourceMappingURL=tunnelAccessControlEntry.js.map

/***/ }),

/***/ 87334:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TunnelAccessControlEntryType = void 0;
var TunnelAccessControlEntryType;
(function (TunnelAccessControlEntryType) {
    // Uninitialized access control entry type.
    TunnelAccessControlEntryType["None"] = "none";
    // The access control entry refers to all anonymous users.
    TunnelAccessControlEntryType["Anonymous"] = "anonymous";
    // The access control entry is a list of user IDs that are allowed (or denied) access.
    TunnelAccessControlEntryType["Users"] = "users";
    // The access control entry is a list of groups IDs that are allowed (or denied) access.
    TunnelAccessControlEntryType["Groups"] = "groups";
    // The access control entry is a list of organization IDs that are allowed (or denied) access.
    TunnelAccessControlEntryType["Organizations"] = "organizations";
    // The access control entry is a list of repositories. Users are allowed access to the tunnel if they have access to the repo.
    TunnelAccessControlEntryType["Repositories"] = "repositories";
    // The access control entry is a list of public keys. Users are allowed access if they can authenticate using a private key corresponding to one of the public keys.
    TunnelAccessControlEntryType["PublicKeys"] = "publickeys";
    // The access control entry is a list of IP address ranges that are allowed (or denied) access to the tunnel.
    TunnelAccessControlEntryType["IPAddressRanges"] = "ipaddressranges";
})(TunnelAccessControlEntryType = exports.TunnelAccessControlEntryType || (exports.TunnelAccessControlEntryType = {}));
//# sourceMappingURL=tunnelAccessControlEntryType.js.map

/***/ }),

/***/ 27321:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TunnelAccessScopes = void 0;
/**
 * Defines scopes for tunnel access tokens.
 */
class TunnelAccessScopes {
    /**
     * Checks that all items in an array of scopes are valid.
     */
    static validate(scopes, validScopes) {
        if (scopes == null) {
            throw new Error('Argument invalid: scopes');
        }
        scopes.forEach((scope) => {
            if (!scope) {
                throw new Error('Tunnel access scopes include a null/empty item.');
            }
            else if (!TunnelAccessScopes.all.includes(scope)) {
                throw new Error('Invalid tunnel access scope: ' + scope);
            }
        });
        if (validScopes) {
            scopes.forEach((scope) => {
                if (!validScopes.includes(scope)) {
                    throw new Error('Tunnel access scope is invalid for current request: scope');
                }
            });
        }
    }
}
exports.TunnelAccessScopes = TunnelAccessScopes;
_a = TunnelAccessScopes;
/**
 * Allows management operations on tunnels and tunnel ports.
 */
TunnelAccessScopes.manage = 'manage';
/**
 * Allows accepting connections on tunnels as a host.
 */
TunnelAccessScopes.host = 'host';
/**
 * Allows inspecting tunnel connection activity and data.
 */
TunnelAccessScopes.inspect = 'inspect';
/**
 * Allows connecting to tunnels as a client.
 */
TunnelAccessScopes.connect = 'connect';
/**
 * Array of all access scopes.
 */
TunnelAccessScopes.all = [_a.manage, _a.host, _a.inspect, _a.connect];
//# sourceMappingURL=tunnelAccessScopes.js.map

/***/ }),

/***/ 56655:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TunnelConnectionMode = void 0;
/**
 * Specifies the connection protocol / implementation for a tunnel.
 */
var TunnelConnectionMode;
(function (TunnelConnectionMode) {
    /**
     * Connect directly to the host over the local network.
     */
    TunnelConnectionMode["LocalNetwork"] = "LocalNetwork";
    /**
     * Use the tunnel service's integrated relay function.
     */
    TunnelConnectionMode["TunnelRelay"] = "TunnelRelay";
    /**
     * Connect via a Live Share workspace's Azure Relay endpoint.
     */
    TunnelConnectionMode["LiveShareRelay"] = "LiveShareRelay";
})(TunnelConnectionMode = exports.TunnelConnectionMode || (exports.TunnelConnectionMode = {}));
//# sourceMappingURL=tunnelConnectionMode.js.map

/***/ }),

/***/ 8825:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getTunnelPortUri = void 0;
/**
 * Token included in `TunnelEndpoint.portUriFormat` that is to be replaced by a specified
 * port number.
 */
const portUriToken = '{port}';
/**
 * Gets a URI where a web client can connect to a tunnel port.
 *
 * Requests to the URI may result in HTTP 307 redirections, so the client may need to
 * follow the redirection in order to connect to the port.
 *
 * If the port is not currently shared via the tunnel, or if a host is not currently
 * connected to the tunnel, then requests to the port URI may result in a 502 Bad Gateway
 * response.
 *
 * @param endpoint The tunnel endpoint containing connection information.
 * @param portNumber The port number to connect to; the port is assumed to be
 * separately shared by a tunnel host.
 * @returns URI for the requested port, or `undefined` if the endpoint does not support
 * web client connections.
 */
function getTunnelPortUri(endpoint, portNumber) {
    if (!endpoint) {
        throw new TypeError('A tunnel endpoint is required.');
    }
    if (typeof portNumber !== 'number' || !endpoint.portUriFormat) {
        return undefined;
    }
    return endpoint.portUriFormat.replace(portUriToken, portNumber.toString());
}
exports.getTunnelPortUri = getTunnelPortUri;
//# sourceMappingURL=tunnelEndpoint.js.map

/***/ }),

/***/ 1036:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TunnelHeaderNames = void 0;
/**
 * Header names for http requests that Tunnel Service can handle
 */
var TunnelHeaderNames;
(function (TunnelHeaderNames) {
    /**
     * Additional authorization header that can be passed to tunnel web forwarding to authenticate and authorize the client.
     * The format of the value is the same as Authorization header that is sent to the Tunnel service by the tunnel SDK.
     * Supported schemes:
     *  - "tunnel" with the tunnel access JWT good for 'Connect' scope.
     */
    TunnelHeaderNames["XTunnelAuthorization"] = "X-Tunnel-Authorization";
    /**
     * Request ID header that nginx ingress controller adds to all requests if it's not there.
     */
    TunnelHeaderNames["XRequestID"] = "X-Request-ID";
})(TunnelHeaderNames = exports.TunnelHeaderNames || (exports.TunnelHeaderNames = {}));
//# sourceMappingURL=tunnelHeaderNames.js.map

/***/ }),

/***/ 45876:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=tunnelOptions.js.map

/***/ }),

/***/ 56748:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=tunnelPort.js.map

/***/ }),

/***/ 67164:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=tunnelPortStatus.js.map

/***/ }),

/***/ 59019:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TunnelProtocol = void 0;
/**
 * Defines possible values for the protocol of a TunnelPort.
 */
var TunnelProtocol;
(function (TunnelProtocol) {
    /**
     * The protocol is automatically detected. (TODO: Define detection semantics.)
     */
    TunnelProtocol["Auto"] = "auto";
    /**
     * Unknown TCP protocol.
     */
    TunnelProtocol["Tcp"] = "tcp";
    /**
     * Unknown UDP protocol.
     */
    TunnelProtocol["Udp"] = "udp";
    /**
     * SSH protocol.
     */
    TunnelProtocol["Ssh"] = "ssh";
    /**
     * Remote desktop protocol.
     */
    TunnelProtocol["Rdp"] = "rdp";
    /**
     * HTTP protocol.
     */
    TunnelProtocol["Http"] = "http";
    /**
     * HTTPS protocol.
     */
    TunnelProtocol["Https"] = "https";
})(TunnelProtocol = exports.TunnelProtocol || (exports.TunnelProtocol = {}));
//# sourceMappingURL=tunnelProtocol.js.map

/***/ }),

/***/ 30377:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=tunnelRelayTunnelEndpoint.js.map

/***/ }),

/***/ 59579:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TunnelServiceProperties = void 0;
/**
 * Provides environment-dependent properties about the service.
 */
class TunnelServiceProperties {
    constructor(serviceUri, serviceAppId, gitHubAppClientId) {
        this.serviceUri = serviceUri;
        this.serviceAppId = serviceAppId;
        this.githubAppClientId = gitHubAppClientId;
    }
    /**
     * @param environmentName
     * @returns Properties for the service in the specified environment.
     */
    static environment(environmentName) {
        if (!environmentName) {
            throw new Error(`Invalid argument: ${environmentName}`);
        }
        switch (environmentName.toLowerCase()) {
            case 'prod':
            case 'production':
                return this.production;
            case 'ppe':
            case 'preprod':
                return this.staging;
            case 'dev':
            case 'development':
                return this.development;
            default:
                throw new Error(`Invalid service environment: ${environmentName}`);
        }
    }
}
exports.TunnelServiceProperties = TunnelServiceProperties;
TunnelServiceProperties.prodAppId = '46da2f7e-b5ef-422a-88d4-2a7f9de6a0b2';
TunnelServiceProperties.nonProdAppId = '54c45752-bacd-424a-b928-652f3eca2b18';
TunnelServiceProperties.nonProdGitHubAppClientId = 'Iv1.b231c327f1eaa229';
TunnelServiceProperties.prodGitHubAppClientId = 'Iv1.e7b89e013f801f03';
/**
 * Gets production service properties.
 */
TunnelServiceProperties.production = new TunnelServiceProperties('https://global.rel.tunnels.api.visualstudio.com/', TunnelServiceProperties.prodAppId, TunnelServiceProperties.prodGitHubAppClientId);
/**
 * Gets properties for the service in the staging environment (PPE).
 */
TunnelServiceProperties.staging = new TunnelServiceProperties('https://global.rel.tunnels.ppe.api.visualstudio.com/', TunnelServiceProperties.nonProdAppId, TunnelServiceProperties.nonProdGitHubAppClientId);
/**
 * Gets properties for the service in the development environment.
 */
TunnelServiceProperties.development = new TunnelServiceProperties('https://global.ci.tunnels.dev.api.visualstudio.com/', TunnelServiceProperties.nonProdAppId, TunnelServiceProperties.nonProdGitHubAppClientId);
//# sourceMappingURL=tunnelServiceProperties.js.map

/***/ }),

/***/ 42293:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=tunnelStatus.js.map

/***/ }),

/***/ 79323:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForwardedPort = void 0;
/**
 * Represents a port being forwarded over an SSH session.
 */
class ForwardedPort {
    /** @internal */
    constructor(localPort, remotePort, isRemote) {
        if (localPort === null && remotePort === null) {
            throw new TypeError('Local and remote ports cannot both be null.');
        }
        else if (!isRemote && remotePort === null) {
            // The remote port number should always be known for locally forwarded ports.
            throw new TypeError('The report port number must not be null for locally forwarded ports.');
        }
        if (localPort !== null && (typeof localPort !== 'number' || localPort <= 0)) {
            throw new TypeError('Local port must be a positive integer.');
        }
        else if (remotePort !== null && (typeof remotePort !== 'number' || remotePort <= 0)) {
            throw new TypeError('Remote port must be a positive integer.');
        }
        this.localPort = localPort;
        this.remotePort = remotePort;
        // The string representation is constructed ahead of time because it is used as a workaround
        // for JavaScript Map<T> objects not supporting custom object equality. The string
        // representation is used as the map key.
        const arrow = isRemote ? '->' : '<-';
        if (this.localPort === null) {
            this.str = `${arrow}${this.remotePort}`;
        }
        else if (this.remotePort == null) {
            this.str = `${this.localPort}${arrow}`;
        }
        else {
            this.str = `${this.localPort}${arrow}${this.remotePort}`;
        }
    }
    /**
     * Gets a string representation of the forwarded port, which includes both
     * local and remote port numbers if present.
     *
     * An arrow shows the direction of connections (channel open requests).
     * Once connections are opened, data may flow in both directions.
     */
    toString() {
        return this.str;
    }
}
exports.ForwardedPort = ForwardedPort;
//# sourceMappingURL=forwardedPort.js.map

/***/ }),

/***/ 9291:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForwardedPortChannelEventArgs = exports.ForwardedPortEventArgs = void 0;
class ForwardedPortEventArgs {
    constructor(port) {
        this.port = port;
    }
    toString() {
        return this.port.toString();
    }
}
exports.ForwardedPortEventArgs = ForwardedPortEventArgs;
class ForwardedPortChannelEventArgs extends ForwardedPortEventArgs {
    constructor(port, channel) {
        super(port);
        this.port = port;
        this.channel = channel;
    }
    toString() {
        return `${this.port} ${this.channel}`;
    }
}
exports.ForwardedPortChannelEventArgs = ForwardedPortChannelEventArgs;
//# sourceMappingURL=forwardedPortEventArgs.js.map

/***/ }),

/***/ 12675:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForwardedPortsCollection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
const forwardedPortEventArgs_1 = __webpack_require__(9291);
/**
 * Tracks the list of ports that are currently being forwarded between the SSH client and server,
 * along with the set of channel connections for each forwarded port.
 *
 * Ports forwarded in either direction (client->server or server->client) are tracked in separate
 * collections. Typically within a session the forwarding is done only in one direction, though
 * the protocol supports bi-directional forwarding.
 *
 * @see PortForwardingService.RemoteForwardedPorts
 * @see PortForwardingService.LocalForwardedPorts
 */
class ForwardedPortsCollection {
    constructor() {
        /**
         * Maintains a mapping from port keys to port objects and channels for the port.
         *
         * The ForwardedPort string representation is used as the keys.
         */
        this.portChannelMap = new Map();
        this.portAddedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onPortAdded = this.portAddedEmitter.event;
        this.portRemovedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onPortRemoved = this.portRemovedEmitter.event;
        this.portChannelAddedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onPortChannelAdded = this.portChannelAddedEmitter.event;
        this.portChannelRemovedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onPortChannelRemoved = this.portChannelRemovedEmitter.event;
    }
    /** Gets the number of ports in the collection. */
    get size() {
        return this.portChannelMap.size;
    }
    /** Checks whether a port is in the collection. */
    has(port) {
        return this.portChannelMap.has(port.toString());
    }
    /** Lists all the ports in the collection. */
    *values() {
        for (let [port, channels] of this.portChannelMap.values()) {
            yield port;
        }
    }
    /** Iterates over all the ports in the collection. */
    [Symbol.iterator]() {
        return this.values();
    }
    /** Lists all the ports in the collection. */
    *entries() {
        for (let [port, channels] of this.portChannelMap.values()) {
            yield [port, port];
        }
    }
    /**
     * Lists all the ports in the collection.
     * (In a set, the keys are the same as the values.)
     */
    keys() {
        return this.values();
    }
    /** Iterates over all the ports in the collection, invoking a callback function on each. */
    forEach(callbackfn, thisArg) {
        for (let [port, channels] of this.portChannelMap.values()) {
            callbackfn.apply(thisArg, [port, port, this]);
        }
    }
    getChannels(port) {
        const portAndChannels = this.portChannelMap.get(port.toString());
        if (!portAndChannels) {
            throw new Error(`Port ${port} is not in the collection.`);
        }
        return portAndChannels[1];
    }
    /** Finds the first port in the collection that matches a predicate. */
    find(predicate) {
        for (let port of this.values()) {
            if (predicate(port)) {
                return port;
            }
        }
        return undefined;
    }
    /* @internal */
    addPort(port) {
        if (this.has(port)) {
            throw new Error(`Port ${port} is already in the collection.`);
        }
        this.portChannelMap.set(port.toString(), [port, []]);
        this.portAddedEmitter.fire(new forwardedPortEventArgs_1.ForwardedPortEventArgs(port));
    }
    /* @internal */
    removePort(port) {
        if (!this.has(port)) {
            throw new Error(`Port ${port} is not in the collection.`);
        }
        this.portChannelMap.delete(port.toString());
        this.portRemovedEmitter.fire(new forwardedPortEventArgs_1.ForwardedPortEventArgs(port));
    }
    /* @internal */
    addChannel(port, channel) {
        const portAndChannels = this.portChannelMap.get(port.toString());
        if (!portAndChannels) {
            throw new Error(`Port ${port} is not in the collection.`);
        }
        const portChannels = portAndChannels[1];
        if (portChannels.find((c) => c.channelId === channel.channelId)) {
            throw new Error(`Channel ${channel.channelId} is already in the collection for port ${port}`);
        }
        portChannels.push(channel);
        channel.onClosed(() => this.tryRemoveChannel(port, channel));
        this.portChannelAddedEmitter.fire(new forwardedPortEventArgs_1.ForwardedPortChannelEventArgs(port, channel));
    }
    tryRemoveChannel(port, channel) {
        const portAndChannels = this.portChannelMap.get(port.toString());
        if (portAndChannels) {
            const portChannels = portAndChannels[1];
            const index = portChannels.findIndex((c) => c.channelId === channel.channelId);
            if (index >= 0) {
                portChannels.splice(index, 1);
                this.portChannelRemovedEmitter.fire(new forwardedPortEventArgs_1.ForwardedPortChannelEventArgs(port, channel));
            }
        }
    }
    toString() {
        return [...this].join(', ');
    }
}
exports.ForwardedPortsCollection = ForwardedPortsCollection;
//# sourceMappingURL=forwardedPortsCollection.js.map

/***/ }),

/***/ 59133:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForwardedPortChannelEventArgs = exports.ForwardedPortEventArgs = exports.ForwardedPortsCollection = exports.ForwardedPort = exports.PortForwardChannelOpenMessage = exports.PortForwardSuccessMessage = exports.PortForwardRequestMessage = exports.RemotePortStreamer = exports.RemotePortForwarder = exports.LocalPortForwarder = exports.PortForwardingService = exports.SshServer = exports.SshClient = void 0;
var sshClient_1 = __webpack_require__(6376);
Object.defineProperty(exports, "SshClient", ({ enumerable: true, get: function () { return sshClient_1.SshClient; } }));
var sshServer_1 = __webpack_require__(10058);
Object.defineProperty(exports, "SshServer", ({ enumerable: true, get: function () { return sshServer_1.SshServer; } }));
var portForwardingService_1 = __webpack_require__(75777);
Object.defineProperty(exports, "PortForwardingService", ({ enumerable: true, get: function () { return portForwardingService_1.PortForwardingService; } }));
var localPortForwarder_1 = __webpack_require__(62545);
Object.defineProperty(exports, "LocalPortForwarder", ({ enumerable: true, get: function () { return localPortForwarder_1.LocalPortForwarder; } }));
var remotePortForwarder_1 = __webpack_require__(25346);
Object.defineProperty(exports, "RemotePortForwarder", ({ enumerable: true, get: function () { return remotePortForwarder_1.RemotePortForwarder; } }));
var remotePortStreamer_1 = __webpack_require__(82022);
Object.defineProperty(exports, "RemotePortStreamer", ({ enumerable: true, get: function () { return remotePortStreamer_1.RemotePortStreamer; } }));
var portForwardRequestMessage_1 = __webpack_require__(28628);
Object.defineProperty(exports, "PortForwardRequestMessage", ({ enumerable: true, get: function () { return portForwardRequestMessage_1.PortForwardRequestMessage; } }));
var portForwardSuccessMessage_1 = __webpack_require__(92168);
Object.defineProperty(exports, "PortForwardSuccessMessage", ({ enumerable: true, get: function () { return portForwardSuccessMessage_1.PortForwardSuccessMessage; } }));
var portForwardChannelOpenMessage_1 = __webpack_require__(92737);
Object.defineProperty(exports, "PortForwardChannelOpenMessage", ({ enumerable: true, get: function () { return portForwardChannelOpenMessage_1.PortForwardChannelOpenMessage; } }));
var forwardedPort_1 = __webpack_require__(79323);
Object.defineProperty(exports, "ForwardedPort", ({ enumerable: true, get: function () { return forwardedPort_1.ForwardedPort; } }));
var forwardedPortsCollection_1 = __webpack_require__(12675);
Object.defineProperty(exports, "ForwardedPortsCollection", ({ enumerable: true, get: function () { return forwardedPortsCollection_1.ForwardedPortsCollection; } }));
var forwardedPortEventArgs_1 = __webpack_require__(9291);
Object.defineProperty(exports, "ForwardedPortEventArgs", ({ enumerable: true, get: function () { return forwardedPortEventArgs_1.ForwardedPortEventArgs; } }));
Object.defineProperty(exports, "ForwardedPortChannelEventArgs", ({ enumerable: true, get: function () { return forwardedPortEventArgs_1.ForwardedPortChannelEventArgs; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 30556:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IPAddressConversions = void 0;
/**
 * Converts betwee SSH-protocol address string and IP address strings.
 */
class IPAddressConversions {
    /**
     * Converts from an SSH-protocol address string to an IP address string.
     */
    static fromSshAddress(address) {
        if (!address) {
            // SSH uses an empty address to indicate "both IPv4-any and IPv6-any".
            // While this just returns the IPv4-any address, the default
            // TCP listener factory treats this value as dual-mode anyway,
            // meaning there's no way to actually listen on only IPv4-any.
            // It would be strange for an application to actually want to exclude
            // IPv6 like that, so this should be a reasonable limitation of this library.
            return '0.0.0.0';
        }
        else if (address === 'localhost') {
            // SSH uses a "localhost" address to indicate "both IPv4-loopback and
            // IPv6-loopback", while this just returns the IPv4-loopback address.
            // The default TCP listener factory treats this value as dual-mode anyway.
            return '127.0.0.1';
        }
        else {
            return address;
        }
    }
    /**
     * Converts from an IP Address to an SSH-protocol address string.
     */
    static toSshAddress(ipAddress) {
        if (!ipAddress) {
            return null;
        }
        else if (ipAddress === '0.0.0.0') {
            return '';
        }
        else if (ipAddress === '127.0.0.1') {
            return 'localhost';
        }
        else {
            return ipAddress;
        }
    }
}
exports.IPAddressConversions = IPAddressConversions;
//# sourceMappingURL=ipAddressConversions.js.map

/***/ }),

/***/ 92737:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PortForwardChannelOpenMessage = void 0;
const vs_ssh_1 = __webpack_require__(92126);
class PortForwardChannelOpenMessage extends vs_ssh_1.ChannelOpenMessage {
    constructor() {
        super(...arguments);
        this.host = '';
        this.port = 0;
        this.originatorIPAddress = '';
        this.originatorPort = 0;
    }
    onRead(reader) {
        super.onRead(reader);
        this.host = reader.readString('ascii');
        this.port = reader.readUInt32();
        this.originatorIPAddress = reader.readString('ascii');
        this.originatorPort = reader.readUInt32();
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeString(this.validateField(this.host, 'host'), 'ascii');
        writer.writeUInt32(this.validateField(this.port, 'port'));
        writer.writeString(this.originatorIPAddress || '', 'ascii');
        writer.writeUInt32(this.originatorPort || 0);
    }
    toString() {
        return `${super.toString()} (host=${this.host} port=${this.port})`;
    }
}
exports.PortForwardChannelOpenMessage = PortForwardChannelOpenMessage;
//# sourceMappingURL=portForwardChannelOpenMessage.js.map

/***/ }),

/***/ 28628:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PortForwardRequestMessage = void 0;
const vs_ssh_1 = __webpack_require__(92126);
const portForwardingService_1 = __webpack_require__(75777);
class PortForwardRequestMessage extends vs_ssh_1.SessionRequestMessage {
    constructor() {
        super();
        this.addressToBind = '';
        this.port = 0;
        this.requestType = portForwardingService_1.PortForwardingService.portForwardRequestType;
        this.wantReply = true;
    }
    onRead(reader) {
        super.onRead(reader);
        this.addressToBind = reader.readString('ascii');
        this.port = reader.readUInt32();
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeString(this.validateField(this.addressToBind, 'address'), 'ascii');
        writer.writeUInt32(this.validateField(this.port, 'port'));
    }
    toString() {
        return `${super.toString()} (addressToBind=${this.addressToBind} port=${this.port})`;
    }
}
exports.PortForwardRequestMessage = PortForwardRequestMessage;
//# sourceMappingURL=portForwardRequestMessage.js.map

/***/ }),

/***/ 92168:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PortForwardSuccessMessage = void 0;
const vs_ssh_1 = __webpack_require__(92126);
class PortForwardSuccessMessage extends vs_ssh_1.SessionRequestSuccessMessage {
    constructor() {
        super(...arguments);
        this.port = 0;
    }
    onRead(reader) {
        super.onRead(reader);
        if (reader.available >= 4) {
            this.port = reader.readUInt32();
        }
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeUInt32(this.validateField(this.port, 'port'));
    }
    toString() {
        return `${super.toString()} (port=${this.port})`;
    }
}
exports.PortForwardSuccessMessage = PortForwardSuccessMessage;
//# sourceMappingURL=portForwardSuccessMessage.js.map

/***/ }),

/***/ 1317:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChannelForwarder = void 0;
const vs_ssh_1 = __webpack_require__(92126);
const vscode_jsonrpc_1 = __webpack_require__(83730);
class ChannelForwarder {
    /* @internal */
    constructor(pfs, channel, socket) {
        this.pfs = pfs;
        this.channel = channel;
        this.socket = socket;
        this.disposeCancellationSource = new vscode_jsonrpc_1.CancellationTokenSource();
        socket.on('data', this.onSocketDataReceived.bind(this));
        socket.on('error', this.onSocketError.bind(this));
        socket.on('close', this.onSocketClosed.bind(this));
        channel.onDataReceived(this.onChannelDataReceived.bind(this));
        channel.onClosed(this.onChannelClosed.bind(this));
    }
    get trace() {
        return this.channel.session.trace;
    }
    onSocketDataReceived(data) {
        this.socket.pause(); // Block further data events while sending.
        this.channel
            .send(data, this.disposeCancellationSource.token)
            .then(this.socket.resume.bind(this.socket), (e) => {
            this.trace(vs_ssh_1.TraceLevel.Warning, vs_ssh_1.SshTraceEventIds.portForwardConnectionFailed, `Forwarder error sending channel data: ${e.message}`, e);
        });
    }
    onSocketClosed(hadError) {
        const closePromise = hadError
            ? this.channel.close('SIGABRT', 'Socket closed with error.')
            : this.channel.close();
        closePromise.catch((e) => {
            this.trace(vs_ssh_1.TraceLevel.Error, vs_ssh_1.SshTraceEventIds.portForwardConnectionFailed, `Forwarder channel close failed with error: ${e.message}`, e);
        });
    }
    onSocketError(error) {
        this.trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.portForwardChannelClosed, `Forwarder socket closed with error: ${error.message}`);
        this.channel.close('SIGABRT', error.message).catch((e) => {
            this.trace(vs_ssh_1.TraceLevel.Error, vs_ssh_1.SshTraceEventIds.portForwardConnectionFailed, `Forwarder channel close failed with error: ${e.message}`, e);
        });
    }
    onChannelDataReceived(data) {
        this.socket.write(data, (error) => {
            if (error) {
                this.trace(vs_ssh_1.TraceLevel.Error, vs_ssh_1.SshTraceEventIds.portForwardConnectionFailed, `Forwarder failed to write to socket: ${error.message}`, error);
            }
            else {
                this.channel.adjustWindow(data.length);
            }
        });
    }
    onChannelClosed(e) {
        if (!e.errorMessage) {
            this.trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.portForwardConnectionClosed, `Forwarder channel ${this.channel.channelId} closed.`);
            this.socket.end();
        }
        else {
            this.trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.portForwardConnectionClosed, `Forwarder channel ${this.channel.channelId} closed with error: ${e.errorMessage}`);
            // TODO: Destroy the socket in a way that causes a connection reset:
            // https://github.com/nodejs/node/issues/27428
            this.socket.destroy();
        }
        const index = this.pfs.channelForwarders.indexOf(this);
        if (index >= 0) {
            this.pfs.channelForwarders.splice(index, 1);
        }
        this.dispose();
    }
    dispose() {
        this.disposeCancellationSource.dispose();
        this.socket.destroy();
    }
}
exports.ChannelForwarder = ChannelForwarder;
//# sourceMappingURL=channelForwarder.js.map

/***/ }),

/***/ 62545:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalPortForwarder = void 0;
const vs_ssh_1 = __webpack_require__(92126);
const channelForwarder_1 = __webpack_require__(1317);
/**
 * Listens on a local port and forwards incoming connections as SSH channels.
 */
class LocalPortForwarder extends vs_ssh_1.SshService {
    /* @internal */
    constructor(pfs, session, channelType, localIPAddress, localPort, remoteHost, remotePort) {
        super(session);
        this.pfs = pfs;
        this.channelType = channelType;
        this.localIPAddress = localIPAddress;
        this.port = localPort;
        this.remoteHost = remoteHost;
        // The remote port defaults to the same as the local port, if the remote port
        // was unspecified and a specific (nonzero) local port was specified. Whether
        // or not a specific local port was specified, the local port may be changed
        // by the TCP listener factory. In that case the remote port does not change.
        this.remotePort = remotePort !== null && remotePort !== void 0 ? remotePort : (localPort !== 0 ? localPort : undefined);
    }
    /**
     * Local port that the forwarder is listening on.
     */
    get localPort() {
        return this.port;
    }
    /* @internal */
    async startForwarding(cancellation) {
        var _a, _b;
        let listenAddress = this.localIPAddress;
        try {
            // When the requested port number is not 0 (random) then changing the port number
            // is not compliant with the SSH protocol. Only allow it if the remote side is
            // this library, which is known to support it.
            const canChangePort = this.port === 0 || ((_a = this.pfs.session.remoteVersion) === null || _a === void 0 ? void 0 : _a.isVsSsh) === true;
            this.tcpListener = await this.pfs.tcpListenerFactory.createTcpListener(listenAddress, this.port, canChangePort);
            const serverAddress = this.tcpListener.address();
            if (!(serverAddress.port > 0)) {
                this.tcpListener.close();
                throw new Error('Could not get server port.');
            }
            this.port = serverAddress.port;
            // The SSH protocol specifies that "localhost" or "" (any) should be dual-mode.
            // So 2 TCP listener instances are required in those cases.
            if (this.localIPAddress === '127.0.0.1' || this.localIPAddress === '0.0.0.0') {
                // Call the factory again to create another listener, but this time with the
                // corresponding IPv6 local address, and not allowing a port change.
                listenAddress =  true ? '::' : 0;
                try {
                    this.tcpListener2 = await this.pfs.tcpListenerFactory.createTcpListener(listenAddress, this.port, false);
                }
                catch (e) {
                    if (!(e instanceof Error) || e.code !== 'EADDRNOTAVAIL') {
                        throw e;
                    }
                    // The OS may not support IPv6 or there may be no IPv6 network interfaces.
                    this.trace(vs_ssh_1.TraceLevel.Warning, vs_ssh_1.SshTraceEventIds.portForwardServerListenFailed, `PortForwardingService failed to listen on {listenAddress}:{LocalPort}: {e.message}`, e);
                    // Do not rethrow, just skip IPv6 in this case.
                }
            }
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            this.trace(vs_ssh_1.TraceLevel.Error, vs_ssh_1.SshTraceEventIds.portForwardServerListenFailed, `PortForwardingService failed to listen on ${listenAddress}:${this.port}: ${e.message}`, e);
            throw e;
        }
        this.tcpListener.on('connection', this.acceptConnection.bind(this));
        (_b = this.tcpListener2) === null || _b === void 0 ? void 0 : _b.on('connection', this.acceptConnection.bind(this));
        this.trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.portForwardServerListening, `PortForwardingService listening on ${this.localIPAddress}:${this.port}.`);
        if (this.tcpListener2) {
            this.trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.portForwardServerListening, `PortForwardingService also listening on ${listenAddress}:${this.port}.`);
        }
    }
    async acceptConnection(socket) {
        var _a, _b, _c, _d;
        this.trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.portForwardConnectionAccepted, 'PortForwardingService accepted connection from: ' +
            `${socket.remoteAddress} on port ${this.port}`);
        // TODO: Set socket options?
        let channel;
        try {
            channel = await this.pfs.openChannel(this.session, this.channelType, (_a = socket.remoteAddress) !== null && _a !== void 0 ? _a : null, (_b = socket.remotePort) !== null && _b !== void 0 ? _b : null, (_c = this.remoteHost) !== null && _c !== void 0 ? _c : this.localIPAddress, (_d = this.remotePort) !== null && _d !== void 0 ? _d : this.localPort);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            // TODO: Destroy the socket in a way that causes a connection reset:
            // https://github.com/nodejs/node/issues/27428
            socket.destroy();
            // Don't re-throw. This is an async event handler so the caller isn't awaiting.
            // The error details have already been traced.
            return;
        }
        const forwarder = new channelForwarder_1.ChannelForwarder(this.pfs, channel, socket);
        this.pfs.channelForwarders.push(forwarder);
    }
    dispose() {
        var _a, _b;
        // Note stopping the listener does not disconnect any already-accepted sockets.
        (_a = this.tcpListener) === null || _a === void 0 ? void 0 : _a.close();
        (_b = this.tcpListener2) === null || _b === void 0 ? void 0 : _b.close();
        this.trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.portForwardServerListening, `PortForwardingService stopped listening on ${this.localIPAddress}:${this.port}.`);
        super.dispose();
    }
}
exports.LocalPortForwarder = LocalPortForwarder;
//# sourceMappingURL=localPortForwarder.js.map

/***/ }),

/***/ 75777:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PortForwardingService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PortForwardingService = void 0;
const vs_ssh_1 = __webpack_require__(92126);
const forwardedPort_1 = __webpack_require__(79323);
const forwardedPortsCollection_1 = __webpack_require__(12675);
const ipAddressConversions_1 = __webpack_require__(30556);
const portForwardChannelOpenMessage_1 = __webpack_require__(92737);
const portForwardRequestMessage_1 = __webpack_require__(28628);
const portForwardSuccessMessage_1 = __webpack_require__(92168);
const tcpListenerFactory_1 = __webpack_require__(99572);
const localPortForwarder_1 = __webpack_require__(62545);
const remotePortForwarder_1 = __webpack_require__(25346);
const remotePortStreamer_1 = __webpack_require__(82022);
/**
 * Implements the standard SSH port-forwarding protocol.
 * @example
 * Use `SshSessionConfiguration.addService()` on both client and server side configurations
 * to add the `PortForwardingService` type before attempting to call methods on the service.
 * Then use `SshSession.activateService()` to get the service instance:
 *
 *     const config = new SshSessionConfiguration();
 *     config.addService(PortForwardingService);
 *     const client = new SshClient(config);
 *     const session = await client.openSession(host, port);
 *     await session.authenticate(clientCredentials);
 *     const pfs = session.activateService(PortForwardingService);
 *     const forwarder = pfs.forwardToRemotePort('::', 3000);
 */
let PortForwardingService = PortForwardingService_1 = class PortForwardingService extends vs_ssh_1.SshService {
    /* @internal */
    constructor(session) {
        super(session);
        this.localForwarders = new Map();
        this.remoteConnectors = new Map();
        /* @internal */
        this.channelForwarders = [];
        /**
         * Gets or sets a value that controls whether the port-forwarding service listens on
         * local TCP sockets to accept connections for ports that are forwarded from the remote side.
         *
         * The default is true.
         *
         * This property is typically initialized before connecting a session (if not keeping the
         * default). It may be changed at any time while the session is connected, and the new value
         * will affect any newly forwarded ports after that, but not previously-forwarded ports.
         *
         * Regardless of whether this is enabled, connections to forwarded ports can be made using
         * `connectToForwardedPort()`.
         */
        this.acceptLocalConnectionsForForwardedPorts = true;
        /**
         * Gets or sets a value that controls whether the port-forwarding service accepts
         * 'direct-tcpip' channel open requests and forwards the channel connections to the local port.
         *
         * The default is true.
         *
         * This property is typically initialized before connecting a session (if not keeping the
         * default). It may be changed at any time while the session is connected, and the new value
         * will affect any newly forwarded ports after that, but not previously-forwarded ports.
         *
         * Regardless of whether this is enabled, the remote side can open 'forwarded-tcpip' channels
         * to connect to ports that were explicitly forwarded by this side.
         */
        this.acceptRemoteConnectionsForNonForwardedPorts = true;
        /**
         * Gets the collection of ports that are currently being forwarded from the remote side
         * to the local side.
         *
         * Ports are added to this collection when `forwardFromRemotePort()` or
         * `streamFromRemotePort()` is called (and the other side accepts the
         * 'tcpip-forward' request), and then are removed when the `RemotePortForwarder`
         * is disposed (which also sends a 'cancel-tcpip-forward' message).
         *
         * Each forwarded port may have 0 or more active connections (channels).
         *
         * The collection does not include direct connections initiated via
         * `forwardToRemotePort()` or `streamToRemotePort()`.
         *
         * Local forwarded ports may or may not have local TCP listeners automatically set up,
         * depending on the value of `acceptLocalConnectionsForForwardedPorts`.
         */
        this.localForwardedPorts = new forwardedPortsCollection_1.ForwardedPortsCollection();
        /**
         * Gets the collection of ports that are currently being forwarded from the local side
         * to the remote side.
         *
         * Ports are added to this collection when the port-forwarding service handles a
         * 'tcpip-forward' request message, and removed when it receives a 'cancel-tcpip-forward'
         * request message.
         *
         * Each forwarded port may have 0 or more active connections (channels).
         *
         * The collection does not include direct connections initiated via
         * `forwardToRemotePort()` or `streamToRemotePort()`.
         */
        this.remoteForwardedPorts = new forwardedPortsCollection_1.ForwardedPortsCollection();
        /**
         * Gets or sets a factory for creating TCP listeners.
         *
         * Applications may override this factory to provide custom logic for selecting
         * local port numbers to listen on for port-forwarding.
         *
         * This factory is not used when `acceptLocalConnectionsForForwardedPorts` is
         * set to false.
         */
        this.tcpListenerFactory = new tcpListenerFactory_1.DefaultTcpListenerFactory();
    }
    async forwardFromRemotePort(remoteIPAddress, remotePort, localHostOrCancellation, localPort, cancellation) {
        let localHost = typeof localHostOrCancellation === 'string' ? localHostOrCancellation : '127.0.0.1';
        if (typeof localPort === 'undefined')
            localPort = remotePort;
        if (!remoteIPAddress)
            throw new TypeError('Remote IP address is required.');
        if (!Number.isInteger(remotePort) || remotePort < 0) {
            throw new TypeError('Remote port must be a non-negative integer.');
        }
        if (!localHost)
            throw new TypeError('Local host is required.');
        if (!Number.isInteger(localPort) || localPort <= 0) {
            throw new TypeError('Local port must be a positive integer.');
        }
        if (this.localForwardedPorts.find((p) => localPort === localPort)) {
            throw new Error(`Local port ${localPort} is already forwarded.`);
        }
        else if (remotePort > 0 &&
            this.localForwardedPorts.find((p) => p.remotePort === remotePort)) {
            throw new Error(`Remote port ${remotePort} is already forwarded.`);
        }
        const forwarder = new remotePortForwarder_1.RemotePortForwarder(this, this.session, remoteIPAddress, remotePort, localHost, localPort);
        if (!(await forwarder.request(cancellation))) {
            forwarder.dispose();
            return null;
        }
        remotePort = forwarder.remotePort;
        const remoteEndPoint = `${remoteIPAddress}:${remotePort}`;
        this.remoteConnectors.set(remoteEndPoint, forwarder);
        const forwardedPort = new forwardedPort_1.ForwardedPort(localPort, remotePort, false);
        this.localForwardedPorts.addPort(forwardedPort);
        forwarder.onDisposed(() => this.localForwardedPorts.removePort(forwardedPort));
        return forwarder;
    }
    async forwardToRemotePort(localIPAddress, localPort, remoteHostOrCancellation, remotePort, cancellation) {
        let remoteHost = typeof remoteHostOrCancellation === 'string' ? remoteHostOrCancellation : '127.0.0.1';
        if (typeof remotePort === 'undefined')
            remotePort = localPort;
        if (!localIPAddress)
            throw new TypeError('Local IP address is required.');
        if (!Number.isInteger(localPort) || localPort < 0) {
            throw new TypeError('Local port must be a non-negative integer.');
        }
        if (!remoteHost)
            throw new TypeError('Remote host is required.');
        if (!Number.isInteger(remotePort) || remotePort <= 0) {
            throw new TypeError('Remote port must be a positive integer.');
        }
        const forwarder = new localPortForwarder_1.LocalPortForwarder(this, this.session, PortForwardingService_1.reversePortForwardChannelType, localIPAddress, localPort, remoteHost, remotePort);
        await forwarder.startForwarding(cancellation);
        const localEndPoint = `${localIPAddress}:${localPort}`;
        this.localForwarders.set(localEndPoint, forwarder);
        return forwarder;
    }
    /**
     * Sends a request to the remote side to listen on a port and forward incoming connections as
     * SSH channels of type 'forwarded-tcpip', which will then be relayed as local streams.
     *
     * @param remoteIPAddress IP address of the interface to bind to on the remote side.
     * @param remotePort The remote port to listen on, or 0 to choose an available port.
     * (The chosen port can then be obtained via the `remotePort` property on the returned object.)
     * @param cancellation Cancellation token for the request; note this cannot cancel forwarding
     * once it has started; use the returned disposable do do that.
     * @returns A disposable object that when disposed will cancel forwarding the port, or `null`
     * if the request was rejected by the remote side, possibly because the remote port was already
     * in use. Handle the `onStreamOpened` event on this object to receive streams.
     */
    async streamFromRemotePort(remoteIPAddress, remotePort, cancellation) {
        if (!remoteIPAddress)
            throw new TypeError('Remote IP address is required.');
        if (!Number.isInteger(remotePort) || remotePort < 0) {
            throw new TypeError('Remote port must be a non-negative integer.');
        }
        const streamer = new remotePortStreamer_1.RemotePortStreamer(this.session, remoteIPAddress, remotePort);
        if (!(await streamer.request(cancellation))) {
            streamer.dispose();
            return null;
        }
        remotePort = streamer.remotePort;
        const remoteEndPoint = `${remoteIPAddress}:${remotePort}`;
        this.remoteConnectors.set(remoteEndPoint, streamer);
        const forwardedPort = new forwardedPort_1.ForwardedPort(null, remotePort, false);
        this.localForwardedPorts.addPort(forwardedPort);
        streamer.onDisposed(() => this.localForwardedPorts.removePort(forwardedPort));
        return streamer;
    }
    /**
     * Opens a stream for an SSH channel of type 'direct-tcpip' that is relayed to remote port,
     * regardless of whether the remote side has explicitly forwarded that port.
     *
     * @param remoteHost The destination hostname or IP address for forwarded connections, to be
     * resolved on the remote side. WARNING: Avoid using the hostname `localhost` as the destination
     * host; use `127.0.0.1` or `::1` instead. (OpenSSH does not recognize `localhost` as a valid
     * destination host.)
     * @param remotePort The destination port for the forwarded stream. (Must not be 0.)
     * @param cancellation Cancellation token for the request; note this cannot cancel streaming
     * once it has started; dipose the returned stream for that.
     * @returns A stream that is relayed to the remote port.
     * @throws `SshChannelError` if the streaming channel could not be opened, either because it
     * was rejected by the remote side, or the remote connection failed.
     */
    async streamToRemotePort(remoteHost, remotePort, cancellation) {
        if (!remoteHost)
            throw new TypeError('Remote host is required.');
        if (!Number.isInteger(remotePort) || remotePort <= 0) {
            throw new TypeError('Remote port must be a positive integer.');
        }
        const channel = await this.openChannel(this.session, PortForwardingService_1.reversePortForwardChannelType, null, null, remoteHost, remotePort, cancellation);
        return new vs_ssh_1.SshStream(channel);
    }
    /**
     * Opens a stream for an SSH channel of type 'forwarded-tcpip' that is relayed to a remote
     * port. The port must have been explicitly forwarded by the remote side.
     *
     * It may be necessary to call `waitForForwardedPort` before this method
     * to ensure the port is ready for connections.
     *
     * An error is thrown if the requested port could not be forwarded, possibly because it was
     * rejected by the remote side, or the remote connection failed.
     *
     * @param forwardedPort Remote port number that was forwarded.
     * @param cancellation Cancellation token for the request; note this cannot
     * cancel streaming once it has started; dipose the returned stream for that.
     * @returns A stream that is relayed to the remote forwarded port.
     */
    async connectToForwardedPort(forwardedPort, cancellation) {
        if (!Number.isInteger(forwardedPort) || forwardedPort <= 0) {
            throw new TypeError('Forwarded port must be a positive integer.');
        }
        const channel = await this.openChannel(this.session, PortForwardingService_1.portForwardChannelType, null, null, '127.0.0.1', forwardedPort, cancellation);
        return new vs_ssh_1.SshStream(channel);
    }
    /**
     * Waits asynchronously for the remote side to forward an expected port number.
     *
     * A common pattern for some applications may be to call this method just before
     * `ConnectToForwardedPortAsync`.
     *
     * @param forwardedPort Port number that is expected to be forwarded.
     * @param cancellation Token that can be used to cancel waiting.
     * @returns A promise that completes when the expected port number has been forwarded.
     */
    async waitForForwardedPort(forwardedPort, cancellation) {
        if (this.remoteForwardedPorts.find((p) => p.remotePort === forwardedPort)) {
            // It's already forwarded, so there's no need to wait.
            return;
        }
        const waitCompletion = new vs_ssh_1.PromiseCompletionSource();
        let cancellationRegistration;
        if (cancellation) {
            cancellationRegistration = cancellation.onCancellationRequested(() => waitCompletion.reject(new vs_ssh_1.CancellationError()));
        }
        let portAddedRegistration;
        let sessionClosedRegistration;
        try {
            portAddedRegistration = this.remoteForwardedPorts.onPortAdded((e) => {
                if (e.port.remotePort === forwardedPort) {
                    waitCompletion.resolve();
                }
            });
            sessionClosedRegistration = this.session.onClosed(() => {
                waitCompletion.reject(new vs_ssh_1.ObjectDisposedError('The session was closed.'));
            });
            await waitCompletion.promise;
        }
        finally {
            portAddedRegistration === null || portAddedRegistration === void 0 ? void 0 : portAddedRegistration.dispose();
            sessionClosedRegistration === null || sessionClosedRegistration === void 0 ? void 0 : sessionClosedRegistration.dispose();
            cancellationRegistration === null || cancellationRegistration === void 0 ? void 0 : cancellationRegistration.dispose();
        }
    }
    async onSessionRequest(request, cancellation) {
        if (!request)
            throw new TypeError('Request is required.');
        else if (request.requestType !== PortForwardingService_1.portForwardRequestType &&
            request.requestType !== PortForwardingService_1.cancelPortForwardRequestType) {
            throw new Error(`Unexpected request type: ${request.requestType}`);
        }
        const portForwardRequest = request.request.convertTo(new portForwardRequestMessage_1.PortForwardRequestMessage());
        const localIPAddress = ipAddressConversions_1.IPAddressConversions.fromSshAddress(portForwardRequest.addressToBind);
        let localPort = portForwardRequest.port;
        const args = new vs_ssh_1.SshRequestEventArgs(request.requestType, portForwardRequest, this.session.principal);
        await super.onSessionRequest(args, cancellation);
        let response;
        if (args.isAuthorized) {
            if (request.requestType === PortForwardingService_1.portForwardRequestType) {
                let localForwardedPort;
                try {
                    localForwardedPort = await this.startForwarding(localIPAddress, localPort, cancellation);
                }
                catch (e) {
                    // The error is already traced.
                    localForwardedPort = null;
                }
                if (localForwardedPort !== null) {
                    const portResponse = new portForwardSuccessMessage_1.PortForwardSuccessMessage();
                    portResponse.port = localForwardedPort;
                    response = portResponse;
                }
            }
            else if (request.requestType === PortForwardingService_1.cancelPortForwardRequestType) {
                if (await this.cancelForwarding(localIPAddress, localPort, cancellation)) {
                    response = new vs_ssh_1.SessionRequestSuccessMessage();
                }
            }
        }
        if (request.request.wantReply) {
            await this.sendMessage(response !== null && response !== void 0 ? response : new vs_ssh_1.SessionRequestFailureMessage(), cancellation);
        }
        // Add to the collection (and raise event) after sending the response,
        // to ensure event-handlers can immediately open a channel.
        if (response instanceof portForwardSuccessMessage_1.PortForwardSuccessMessage) {
            const forwardedPort = new forwardedPort_1.ForwardedPort(response.port, portForwardRequest.port === 0 ? null : portForwardRequest.port, true);
            this.remoteForwardedPorts.addPort(forwardedPort);
        }
    }
    async startForwarding(localIPAddress, localPort, cancellation) {
        if (this.acceptLocalConnectionsForForwardedPorts) {
            // The initially requested local endpoint uses the remote port, but it may change
            // when starting forwarding, if there was a conflict.
            const remotePort = localPort === 0 ? null : localPort;
            const forwarder = new localPortForwarder_1.LocalPortForwarder(this, this.session, PortForwardingService_1.portForwardChannelType, localIPAddress, localPort);
            await forwarder.startForwarding(cancellation);
            const localEndPoint = `${localIPAddress}:${forwarder.localPort}`;
            this.localForwarders.set(localEndPoint, forwarder);
            localPort = forwarder.localPort;
            forwarder.onDisposed(() => {
                const forwardedPort = new forwardedPort_1.ForwardedPort(localPort, remotePort, true);
                this.remoteForwardedPorts.removePort(forwardedPort);
            });
            return localPort;
        }
        else if (localPort > 0) {
            return localPort;
        }
        else {
            return null;
        }
    }
    async cancelForwarding(localIPAddress, localPort, cancellation) {
        const localEndPoint = `${localIPAddress}:${localPort}`;
        const forwarder = this.localForwarders.get(localEndPoint);
        if (!forwarder) {
            return false;
        }
        this.localForwarders.delete(localEndPoint);
        forwarder.dispose();
        return true;
    }
    async onChannelOpening(request, cancellation) {
        var _a;
        if (!request)
            throw new TypeError('Request is required.');
        const channelType = request.request.channelType;
        if (channelType !== PortForwardingService_1.portForwardChannelType &&
            channelType !== PortForwardingService_1.reversePortForwardChannelType) {
            request.failureReason = vs_ssh_1.SshChannelOpenFailureReason.unknownChannelType;
            return;
        }
        let remoteConnector = null;
        const portForwardMessage = request.request instanceof portForwardChannelOpenMessage_1.PortForwardChannelOpenMessage
            ? request.request
            : request.request.convertTo(new portForwardChannelOpenMessage_1.PortForwardChannelOpenMessage());
        if (request.isRemoteRequest) {
            if (channelType === PortForwardingService_1.portForwardChannelType) {
                const remoteIPAddress = ipAddressConversions_1.IPAddressConversions.fromSshAddress(portForwardMessage.host);
                const remoteEndPoint = `${remoteIPAddress}:${portForwardMessage.port}`;
                remoteConnector = (_a = this.remoteConnectors.get(remoteEndPoint)) !== null && _a !== void 0 ? _a : null;
                if (!remoteConnector) {
                    this.trace(vs_ssh_1.TraceLevel.Error, vs_ssh_1.SshTraceEventIds.portForwardRequestInvalid, `PortForwardingService received forwarding channel ` +
                        `for ${remoteEndPoint} that was not requested.`);
                    request.failureReason = vs_ssh_1.SshChannelOpenFailureReason.connectFailed;
                    request.failureDescription = 'Forwarding channel was not requested.';
                    return;
                }
            }
            else if (!this.acceptRemoteConnectionsForNonForwardedPorts) {
                const errorMessage = 'The session has disabled connections to non-forwarded ports.';
                this.session.trace(vs_ssh_1.TraceLevel.Warning, vs_ssh_1.SshTraceEventIds.portForwardChannelOpenFailed, errorMessage);
                request.failureDescription = errorMessage;
                request.failureReason = vs_ssh_1.SshChannelOpenFailureReason.administrativelyProhibited;
                return;
            }
        }
        const portForwardRequest = new vs_ssh_1.SshChannelOpeningEventArgs(portForwardMessage, request.channel, request.isRemoteRequest);
        await super.onChannelOpening(portForwardRequest, cancellation);
        request.failureReason = portForwardRequest.failureReason;
        request.failureDescription = portForwardRequest.failureDescription;
        if (request.failureReason !== vs_ssh_1.SshChannelOpenFailureReason.none || !request.isRemoteRequest) {
            return;
        }
        if (remoteConnector) {
            // The forwarding was initiated by this session.
            await remoteConnector.onChannelOpening(request, cancellation);
            const localPort = remoteConnector instanceof remotePortForwarder_1.RemotePortForwarder ? remoteConnector.localPort : null;
            const forwardedPort = new forwardedPort_1.ForwardedPort(localPort, portForwardMessage.port, false);
            this.localForwardedPorts.addChannel(forwardedPort, request.channel);
        }
        else {
            // THe forwarding was initiated by the remote session.
            await remotePortForwarder_1.RemotePortForwarder.forwardChannel(this, request, portForwardMessage.host, portForwardMessage.port, this.trace, cancellation);
        }
    }
    /* @internal */
    async openChannel(session, channelType, originatorIPAddress, originatorPort, host, port, cancellation) {
        var _a;
        let forwardedPort = undefined;
        if (channelType === PortForwardingService_1.portForwardChannelType) {
            forwardedPort = this.remoteForwardedPorts.find((p) => p.remotePort === port || (p.remotePort === null && p.localPort === port));
            if (!forwardedPort) {
                throw new Error(`Port ${port} is not being forwarded.`);
            }
        }
        const openMessage = new portForwardChannelOpenMessage_1.PortForwardChannelOpenMessage();
        openMessage.channelType = channelType;
        openMessage.originatorIPAddress = originatorIPAddress !== null && originatorIPAddress !== void 0 ? originatorIPAddress : '';
        openMessage.originatorPort = originatorPort !== null && originatorPort !== void 0 ? originatorPort : 0;
        openMessage.host = host;
        openMessage.port = (_a = forwardedPort === null || forwardedPort === void 0 ? void 0 : forwardedPort.localPort) !== null && _a !== void 0 ? _a : port;
        const trace = this.session.trace;
        let channel;
        try {
            channel = await session.openChannel(openMessage, null, cancellation);
            trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.portForwardChannelOpened, `PortForwardingService opened ${channelType} channel #${channel.channelId} for ${host}:${port}.`);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            trace(vs_ssh_1.TraceLevel.Error, vs_ssh_1.SshTraceEventIds.portForwardChannelOpenFailed, `PortForwardingService failed to open ${channelType} channel for ${host}:${port}: ${e.message}`, e);
            throw e;
        }
        if (channelType === PortForwardingService_1.portForwardChannelType) {
            this.remoteForwardedPorts.addChannel(forwardedPort, channel);
        }
        return channel;
    }
    dispose() {
        const disposables = [
            ...this.channelForwarders,
            ...this.localForwarders.values(),
            ...this.remoteConnectors.values(),
        ];
        this.channelForwarders.splice(0, this.channelForwarders.length);
        this.localForwarders.clear();
        this.remoteConnectors.clear();
        for (let disposable of disposables) {
            disposable.dispose();
        }
        super.dispose();
    }
};
PortForwardingService.portForwardRequestType = 'tcpip-forward';
PortForwardingService.cancelPortForwardRequestType = 'cancel-tcpip-forward';
PortForwardingService.portForwardChannelType = 'forwarded-tcpip';
PortForwardingService.reversePortForwardChannelType = 'direct-tcpip';
PortForwardingService = PortForwardingService_1 = __decorate([
    (0, vs_ssh_1.serviceActivation)({ sessionRequest: PortForwardingService_1.portForwardRequestType }),
    (0, vs_ssh_1.serviceActivation)({ sessionRequest: PortForwardingService_1.cancelPortForwardRequestType }),
    (0, vs_ssh_1.serviceActivation)({ channelType: PortForwardingService_1.portForwardChannelType }),
    (0, vs_ssh_1.serviceActivation)({ channelType: PortForwardingService_1.reversePortForwardChannelType })
], PortForwardingService);
exports.PortForwardingService = PortForwardingService;
//# sourceMappingURL=portForwardingService.js.map

/***/ }),

/***/ 34073:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemotePortConnector = void 0;
const vs_ssh_1 = __webpack_require__(92126);
const portForwardRequestMessage_1 = __webpack_require__(28628);
const portForwardSuccessMessage_1 = __webpack_require__(92168);
const portForwardingService_1 = __webpack_require__(75777);
/**
 * Base class for services that receive SSH channels forwarded from a remote port.
 */
class RemotePortConnector extends vs_ssh_1.SshService {
    /* @internal */
    constructor(session, remoteIPAddress, remotePort) {
        super(session);
        this.forwarding = false;
        this.remoteIPAddress = remoteIPAddress;
        this.port = remotePort;
    }
    /**
     * Port that the remote server is listening on. If the request specified port 0, this
     * property returns the actual available port that was chosen by the server.
     */
    get remotePort() {
        return this.port;
    }
    /* @internal */
    async request(cancellation) {
        if (this.forwarding) {
            throw new Error('Already forwarding.');
        }
        const request = new portForwardRequestMessage_1.PortForwardRequestMessage();
        request.addressToBind = this.remoteIPAddress;
        request.port = this.remotePort;
        request.wantReply = true;
        const response = await this.session.requestResponse(request, portForwardSuccessMessage_1.PortForwardSuccessMessage, vs_ssh_1.SessionRequestFailureMessage, cancellation);
        let result = false;
        if (response instanceof portForwardSuccessMessage_1.PortForwardSuccessMessage) {
            if (response.port !== 0) {
                this.port = response.port;
            }
            result = true;
        }
        this.forwarding = result;
        return result;
    }
    dispose() {
        if (this.forwarding) {
            this.forwarding = false;
            const request = new portForwardRequestMessage_1.PortForwardRequestMessage();
            request.requestType = portForwardingService_1.PortForwardingService.cancelPortForwardRequestType;
            request.addressToBind = this.remoteIPAddress;
            request.port = this.remotePort;
            request.wantReply = false;
            try {
                this.session.request(request).catch((e) => {
                    // Ignore async cancel failure.
                    // Error details have already been trace.
                });
            }
            catch (e) { }
        }
        super.dispose();
    }
}
exports.RemotePortConnector = RemotePortConnector;
//# sourceMappingURL=remotePortConnector.js.map

/***/ }),

/***/ 25346:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemotePortForwarder = void 0;
const net = __webpack_require__(87556);
const vs_ssh_1 = __webpack_require__(92126);
const channelForwarder_1 = __webpack_require__(1317);
const remotePortConnector_1 = __webpack_require__(34073);
/**
 * Receives SSH channels forwarded from a remote port and forwards them on to a local port.
 */
class RemotePortForwarder extends remotePortConnector_1.RemotePortConnector {
    /* @internal */
    constructor(pfs, session, remoteIPAddress, remotePort, localHost, localPort) {
        super(session, remoteIPAddress, remotePort);
        this.pfs = pfs;
        this.localHost = localHost;
        this.localPort = localPort;
    }
    /* @internal */
    async onChannelOpening(request, cancellation) {
        await RemotePortForwarder.forwardChannel(this.pfs, request, this.localHost, this.localPort, this.trace, cancellation);
    }
    /* @internal */
    static async forwardChannel(pfs, request, host, port, trace, cancellation) {
        const channel = request.channel;
        const socket = net.createConnection({
            host: host,
            port: port,
        });
        const connectCompletion = new vs_ssh_1.PromiseCompletionSource();
        let cancellationRegistration = cancellation
            ? cancellation.onCancellationRequested(() => socket.destroy(new Error('Cancelled.')))
            : null;
        try {
            socket.once('connect', () => {
                connectCompletion.resolve();
            });
            socket.once('error', (e) => {
                connectCompletion.reject(e);
            });
            await connectCompletion.promise;
        }
        catch (e) {
            if (!(e instanceof Error) || (cancellation === null || cancellation === void 0 ? void 0 : cancellation.isCancellationRequested)) {
                throw e;
            }
            trace(vs_ssh_1.TraceLevel.Error, vs_ssh_1.SshTraceEventIds.portForwardConnectionFailed, `${channel.session} PortForwardingService forwarded channel #${channel.channelId} ` +
                `connection to ${host}:${port} failed: ${e.message}`, e);
            request.failureReason = vs_ssh_1.SshChannelOpenFailureReason.connectFailed;
            request.failureDescription = e.message;
        }
        finally {
            cancellationRegistration === null || cancellationRegistration === void 0 ? void 0 : cancellationRegistration.dispose();
        }
        // TODO: Set socket options?
        const channelForwarder = new channelForwarder_1.ChannelForwarder(pfs, channel, socket);
        trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.portForwardConnectionOpened, `${channel.session} PortForwardingService forwarded channel #${channel.channelId} connection to ${host}:${port}.`);
        pfs.channelForwarders.push(channelForwarder);
    }
}
exports.RemotePortForwarder = RemotePortForwarder;
//# sourceMappingURL=remotePortForwarder.js.map

/***/ }),

/***/ 82022:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemotePortStreamer = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
const vs_ssh_1 = __webpack_require__(92126);
const remotePortConnector_1 = __webpack_require__(34073);
/**
 * Receives SSH channels forwarded from a remote port and exposes them as streams.
 */
class RemotePortStreamer extends remotePortConnector_1.RemotePortConnector {
    /* @internal */
    constructor(session, remoteIPAddress, remotePort) {
        super(session, remoteIPAddress, remotePort);
        this.streamOpenedEmitter = new vscode_jsonrpc_1.Emitter();
        /**
         * Event raised when a new connection stream is forwarded from the remote port.
         */
        this.onStreamOpened = this.streamOpenedEmitter.event;
    }
    async onChannelOpening(request, cancellation) {
        const stream = new vs_ssh_1.SshStream(request.channel);
        this.streamOpenedEmitter.fire(stream);
    }
}
exports.RemotePortStreamer = RemotePortStreamer;
//# sourceMappingURL=remotePortStreamer.js.map

/***/ }),

/***/ 6376:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshClient = void 0;
const net = __webpack_require__(83040);
const vs_ssh_1 = __webpack_require__(92126);
/**
 * Enables opening an SSH session over a TCP connection.
 *
 * It's possible to create an `SshClientSession` over any `Stream` instance;
 * this class is merely a convenient helper that manages creating a session
 * over a Node.js TCP `Socket`.
 */
class SshClient {
    constructor(config) {
        this.config = config;
        this.sessions = [];
        /**
         * Gets or sets a function that handles trace messages associated with the client session.
         *
         * By default, no messages are traced. To enable tracing, set this property to a function
         * that routes the message to console.log, a file, or anywhere else.
         *
         * @param level The level of message being traced: error, warning, info, or verbose.
         * @param eventId An integer that identifies the type of event. Normally this is one of
         * the values from `SshTraceEventIds`, but extensions may define additional event IDs.
         * @param msg A description of the event (non-localized).
         * @param err Optional `Error` object associated with the event, often included with
         * warning or error events. While the `Error.message` property is typically included as
         * (part of) the `msg` parameter, the error object may contain additional useful context
         * such as the stack trace.
         */
        this.trace = (level, eventId, msg, err) => { };
        if (!config)
            throw new TypeError('SshSessionConfiguration is required.');
    }
    async openSession(serverHost, serverPort, cancellation) {
        if (!serverHost)
            throw new TypeError('Server host is reqiured.');
        const stream = await this.openConnection(serverHost, serverPort, cancellation);
        const session = new vs_ssh_1.SshClientSession(this.config);
        session.trace = this.trace;
        session.onClosed((e) => {
            stream.close(e.error || undefined).catch(() => { });
        });
        await session.connect(stream, cancellation);
        this.sessions.push(session);
        return session;
    }
    async openConnection(serverHost, serverPort, cancellation) {
        let socket = new net.Socket();
        await new Promise((resolve, reject) => {
            socket.on('connect', resolve);
            socket.on('error', reject);
            if (cancellation) {
                if (cancellation.isCancellationRequested) {
                    reject(new vs_ssh_1.CancellationError());
                    return;
                }
                cancellation.onCancellationRequested(reject);
            }
            socket.connect(serverPort || SshClient.defaultServerPort, serverHost);
        });
        return new vs_ssh_1.NodeStream(socket);
    }
    async reconnectSession(session, serverHost, serverPort, cancellation) {
        const stream = await this.openConnection(serverHost, serverPort, cancellation);
        await session.reconnect(stream, cancellation);
    }
    dispose() {
        while (this.sessions.length > 0) {
            const session = this.sessions.shift();
            session.dispose();
        }
    }
}
exports.SshClient = SshClient;
SshClient.defaultServerPort = 22;
//# sourceMappingURL=sshClient.js.map

/***/ }),

/***/ 10058:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshServer = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
const vs_ssh_1 = __webpack_require__(92126);
const tcpListenerFactory_1 = __webpack_require__(99572);
/**
 * Enables accepting SSH sessions on a TCP socket.
 *
 * It's possible to create an `SshServerSession` over any `Stream` instance;
 * this class is merely a convenient helper that manages creating sessions
 * over Node.js TCP `Socket`s from incoming connections.
 */
class SshServer {
    constructor(config) {
        this.config = config;
        this.sessions = [];
        /**
         * Gets or sets a function that handles trace messages associated with the server sessions.
         *
         * By default, no messages are traced. To enable tracing, set this property to a function
         * that routes the message to console.log, a file, or anywhere else.
         *
         * @param level The level of message being traced: error, warning, info, or verbose.
         * @param eventId An integer that identifies the type of event. Normally this is one of
         * the values from `SshTraceEventIds`, but extensions may define additional event IDs.
         * @param msg A description of the event (non-localized).
         * @param err Optional `Error` object associated with the event, often included with
         * warning or error events. While the `Error.message` property is typically included as
         * (part of) the `msg` parameter, the error object may contain additional useful context
         * such as the stack trace.
         */
        this.trace = (level, eventId, msg, err) => { };
        this.errorEmitter = new vscode_jsonrpc_1.Emitter();
        this.onError = this.errorEmitter.event;
        this.sessionOpenedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onSessionOpened = this.sessionOpenedEmitter.event;
        this.credentials = { publicKeys: [] };
        /**
         * Gets or sets a factory for creating TCP listeners.
         *
         * Applications may override this factory to provide custom logic for selecting
         * local port numbers to listen on for port-forwarding.
         */
        this.tcpListenerFactory = new tcpListenerFactory_1.DefaultTcpListenerFactory();
        if (!config)
            throw new TypeError('SshSessionConfiguration is required.');
        if (config.protocolExtensions.includes(vs_ssh_1.SshProtocolExtensionNames.sessionReconnect)) {
            this.reconnectableSessions = [];
        }
    }
    async acceptSessions(localPort, localAddress) {
        if (!localAddress) {
            localAddress = '0.0.0.0';
        }
        const portPrefix = localAddress === '0.0.0.0' ? 'port ' : localAddress + ':';
        try {
            this.tcpListener = await this.tcpListenerFactory.createTcpListener(localAddress, localPort, false);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            this.trace(vs_ssh_1.TraceLevel.Error, vs_ssh_1.SshTraceEventIds.serverListenFailed, `SshServer failed to listen on ${portPrefix}${localPort}: ${e.message}`, e);
            throw e;
        }
        this.tcpListener.addListener('connection', this.acceptSession.bind(this));
        this.trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.serverListening, `SshServer listening on ${portPrefix}${localPort}.`);
    }
    async acceptConnection(socket) {
        socket.setNoDelay(true);
        return new vs_ssh_1.NodeStream(socket);
    }
    async acceptSession(socket) {
        this.trace(vs_ssh_1.TraceLevel.Info, vs_ssh_1.SshTraceEventIds.serverClientConnected, 'SshServer client connected.');
        const stream = await this.acceptConnection(socket);
        const session = new vs_ssh_1.SshServerSession(this.config, this.reconnectableSessions);
        session.trace = this.trace;
        session.onClosed((e) => {
            stream.close(e.error || undefined).catch(() => { });
        });
        session.credentials = this.credentials;
        this.sessions.push(session);
        session.onClosed((e) => {
            const sessionIndex = this.sessions.indexOf(session);
            if (sessionIndex >= 0) {
                this.sessions.splice(sessionIndex, 1);
            }
        });
        this.sessionOpenedEmitter.fire(session);
        try {
            await session.connect(stream);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            if (e instanceof vs_ssh_1.SshConnectionError) {
                await session.close(e.reason || vs_ssh_1.SshDisconnectReason.connectionLost, e.message, e);
            }
            else {
                await session.close(vs_ssh_1.SshDisconnectReason.protocolError, e.message, e);
            }
            this.errorEmitter.fire(e);
        }
    }
    dispose() {
        var _a;
        (_a = this.tcpListener) === null || _a === void 0 ? void 0 : _a.close();
    }
}
exports.SshServer = SshServer;
//# sourceMappingURL=sshServer.js.map

/***/ }),

/***/ 99572:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultTcpListenerFactory = void 0;
const net = __webpack_require__(83040);
class DefaultTcpListenerFactory {
    async createTcpListener(localIPAddress, localPort, canChangePort, cancellation) {
        if (!localIPAddress)
            throw new TypeError('Local IP address is required.');
        if (!Number.isInteger(localPort) || localPort < 0)
            throw new TypeError('Local port must be a non-negative integer.');
        const listener = net.createServer();
        await new Promise((resolve, reject) => {
            listener.listen({
                host: localIPAddress,
                port: localPort,
                ipv6Only: net.isIPv6(localIPAddress),
                exclusive: false,
            });
            listener.on('listening', resolve);
            listener.on('error', reject);
        });
        return listener;
    }
}
exports.DefaultTcpListenerFactory = DefaultTcpListenerFactory;
//# sourceMappingURL=tcpListenerFactory.js.map

/***/ }),

/***/ 96327:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.curves = void 0;
/**
 * List of EC curves supported by the SSH ECDSA algorithm.
 */
exports.curves = [
    {
        shortName: 'P-256',
        name: 'nistp256',
        oid: '1.2.840.10045.3.1.7',
        keySize: 256,
    },
    {
        shortName: 'P-384',
        name: 'nistp384',
        oid: '1.3.132.0.34',
        keySize: 384,
    },
    {
        shortName: 'P-521',
        name: 'nistp521',
        oid: '1.3.132.0.35',
        keySize: 521,
    },
];
//# sourceMappingURL=ecdsaCurves.js.map

/***/ }),

/***/ 27867:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EncryptionAlgorithm = void 0;
class EncryptionAlgorithm {
    constructor(name) {
        this.name = name;
    }
}
exports.EncryptionAlgorithm = EncryptionAlgorithm;
//# sourceMappingURL=encryptionAlgorithm.js.map

/***/ }),

/***/ 33307:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HmacAlgorithm = void 0;
class HmacAlgorithm {
    constructor(name, algorithmName, keyLength, digestLength) {
        this.name = name;
        this.algorithmName = algorithmName;
        this.keyLength = keyLength;
        this.digestLength = digestLength;
    }
}
exports.HmacAlgorithm = HmacAlgorithm;
//# sourceMappingURL=hmacAlgorithm.js.map

/***/ }),

/***/ 84468:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyExchangeAlgorithm = void 0;
class KeyExchangeAlgorithm {
    constructor(name, keySizeInBits, hashAlgorithmName, hashDigestLength) {
        this.name = name;
        this.keySizeInBits = keySizeInBits;
        this.hashAlgorithmName = hashAlgorithmName;
        this.hashDigestLength = hashDigestLength;
    }
}
exports.KeyExchangeAlgorithm = KeyExchangeAlgorithm;
//# sourceMappingURL=keyExchangeAlgorithm.js.map

/***/ }),

/***/ 93814:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Sec1KeyFormatter = exports.Pkcs1KeyFormatter = exports.parsePem = exports.formatPem = void 0;
const bigInt_1 = __webpack_require__(30404);
const derData_1 = __webpack_require__(85875);
const ecdsaCurves_1 = __webpack_require__(96327);
function formatPem(keyBytes, name) {
    const key = `-----BEGIN ${name}-----\n` +
        keyBytes
            .toString('base64')
            .match(/.{1,64}/g)
            .join('\n') +
        '\n' +
        `-----END ${name}-----\n`;
    return key;
}
exports.formatPem = formatPem;
function parsePem(key) {
    const keyBase64 = key.replace(/-+[^-\n]+KEY-+/g, '').replace(/\s/g, '');
    const keyBytes = Buffer.from(keyBase64, 'base64');
    return keyBytes;
}
exports.parsePem = parsePem;
/**
 * Provides *minimal* PKCS#1 import/export support for Node.js keys.
 *
 * This code is redundant with some of the PKCS#1 import/export code in the separate
 * `ssh-keys` library; that is intentional, and necessary to support a consistent
 * interface for importing/exporting key parameters in the core `ssh` library.
 */
class Pkcs1KeyFormatter {
    static formatRsaPublic(rsa) {
        const writer = new derData_1.DerWriter(Buffer.alloc(1024));
        writer.writeInteger(rsa.modulus);
        writer.writeInteger(rsa.exponent);
        return writer.toBuffer();
    }
    static formatRsaPrivate(rsa) {
        if (!(rsa.d && rsa.p && rsa.q && rsa.dp && rsa.dq && rsa.qi)) {
            throw new Error('Missing private key parameters.');
        }
        const writer = new derData_1.DerWriter(Buffer.alloc(2048));
        writer.writeInteger(bigInt_1.BigInt.fromInt32(0));
        writer.writeInteger(rsa.modulus);
        writer.writeInteger(rsa.exponent);
        writer.writeInteger(rsa.d);
        writer.writeInteger(rsa.p);
        writer.writeInteger(rsa.q);
        writer.writeInteger(rsa.dp);
        writer.writeInteger(rsa.dq);
        writer.writeInteger(rsa.qi);
        return writer.toBuffer();
    }
    static parseRsaPublic(keyBytes) {
        const reader = new derData_1.DerReader(keyBytes);
        const modulus = reader.readInteger();
        const exponent = reader.readInteger();
        return { modulus, exponent };
    }
    static parseRsaPrivate(keyBytes) {
        const reader = new derData_1.DerReader(keyBytes);
        const version = reader.readInteger();
        const modulus = reader.readInteger();
        const exponent = reader.readInteger();
        const d = reader.readInteger();
        const p = reader.readInteger();
        const q = reader.readInteger();
        const dp = reader.readInteger();
        const dq = reader.readInteger();
        const qi = reader.readInteger();
        return { modulus, exponent, d, p, q, dp, dq, qi };
    }
}
exports.Pkcs1KeyFormatter = Pkcs1KeyFormatter;
/**
 * Provides *minimal* SEC1 import/export support for Node.js keys.
 *
 * This code is redundant with some of the SEC1 import/export code in the separate
 * `ssh-keys` library; that is intentional, and necessary to support a consistent
 * interface for importing/exporting key parameters in the core `ssh` library.
 */
class Sec1KeyFormatter {
    static formatECPublic(ec) {
        const curve = ecdsaCurves_1.curves.find((c) => c.oid === ec.curve.oid);
        const keySizeInBytes = Math.ceil(curve.keySize / 8);
        const writer = new derData_1.DerWriter(Buffer.alloc(512));
        const oidsWriter = new derData_1.DerWriter(Buffer.alloc(100));
        oidsWriter.writeObjectIdentifier(Sec1KeyFormatter.ecPublicKeyOid);
        oidsWriter.writeObjectIdentifier(ec.curve.oid);
        writer.writeSequence(oidsWriter);
        const x = ec.x.toBytes({ unsigned: true, length: keySizeInBytes });
        const y = ec.y.toBytes({ unsigned: true, length: keySizeInBytes });
        const publicKeyData = Buffer.alloc(1 + x.length + y.length);
        publicKeyData[0] = 4; // Indicates uncompressed curve format
        x.copy(publicKeyData, 1);
        y.copy(publicKeyData, 1 + x.length);
        writer.writeBitString(publicKeyData);
        return writer.toBuffer();
    }
    static formatECPrivate(ec) {
        const curve = ecdsaCurves_1.curves.find((c) => c.oid === ec.curve.oid);
        const keySizeInBytes = Math.ceil(curve.keySize / 8);
        const writer = new derData_1.DerWriter(Buffer.alloc(512));
        writer.writeInteger(bigInt_1.BigInt.fromInt32(1)); // version
        writer.writeOctetString(ec.d.toBytes({ unsigned: true, length: keySizeInBytes }));
        const curveWriter = new derData_1.DerWriter(Buffer.alloc(100));
        curveWriter.writeObjectIdentifier(ec.curve.oid);
        writer.writeTagged(0, curveWriter);
        const x = ec.x.toBytes({ unsigned: true, length: keySizeInBytes });
        const y = ec.y.toBytes({ unsigned: true, length: keySizeInBytes });
        const publicKeyData = Buffer.alloc(1 + x.length + y.length);
        publicKeyData[0] = 4; // Indicates uncompressed curve format
        x.copy(publicKeyData, 1);
        y.copy(publicKeyData, 1 + x.length);
        const keyWriter = new derData_1.DerWriter(Buffer.alloc(512));
        keyWriter.writeBitString(publicKeyData);
        writer.writeTagged(1, keyWriter);
        return writer.toBuffer();
    }
    static parseECPublic(keyBytes) {
        var _a;
        const reader = new derData_1.DerReader(keyBytes);
        const oidsReader = reader.readSequence();
        const keyTypeOid = oidsReader.readObjectIdentifier();
        if (keyTypeOid !== Sec1KeyFormatter.ecPublicKeyOid) {
            throw new Error(`Unexpected key type OID: ${keyTypeOid}`);
        }
        const curveOid = oidsReader.readObjectIdentifier();
        const curveName = (_a = ecdsaCurves_1.curves.find((c) => c.oid === curveOid)) === null || _a === void 0 ? void 0 : _a.name;
        const xy = reader.readBitString();
        if (xy.length % 2 !== 1) {
            throw new Error(`Unexpected key data length: ${xy.length}`);
        }
        const x = bigInt_1.BigInt.fromBytes(xy.slice(1, 1 + (xy.length - 1) / 2), { unsigned: true });
        const y = bigInt_1.BigInt.fromBytes(xy.slice(1 + (xy.length - 1) / 2), { unsigned: true });
        const ec = {
            curve: { name: curveName, oid: curveOid },
            x,
            y,
        };
        return ec;
    }
    static parseECPrivate(keyBytes) {
        var _a;
        const reader = new derData_1.DerReader(keyBytes);
        const version = reader.readInteger().toInt32();
        if (version !== 1) {
            throw new Error(`Unsupported SEC1 format version: ${version}`);
        }
        const d = bigInt_1.BigInt.fromBytes(reader.readOctetString(), { unsigned: true });
        const curveReader = reader.tryReadTagged(0);
        if (!curveReader) {
            throw new Error('SEC1 curve info not found.');
        }
        const curveOid = curveReader.readObjectIdentifier();
        const curveName = (_a = ecdsaCurves_1.curves.find((c) => c.oid === curveOid)) === null || _a === void 0 ? void 0 : _a.name;
        const publicKeyReader = reader.tryReadTagged(1);
        if (!publicKeyReader) {
            throw new Error('SEC1 public key data not found.');
        }
        const xy = publicKeyReader.readBitString();
        if (xy.length % 2 !== 1) {
            throw new Error(`Unexpected key data length: ${xy.length}`);
        }
        const x = bigInt_1.BigInt.fromBytes(xy.slice(1, 1 + (xy.length - 1) / 2), { unsigned: true });
        const y = bigInt_1.BigInt.fromBytes(xy.slice(1 + (xy.length - 1) / 2), { unsigned: true });
        const ec = {
            curve: { name: curveName, oid: curveOid },
            x,
            y,
            d,
        };
        return ec;
    }
}
exports.Sec1KeyFormatter = Sec1KeyFormatter;
Sec1KeyFormatter.ecPublicKeyOid = '1.2.840.10045.2.1';
//# sourceMappingURL=keyFormatters.js.map

/***/ }),

/***/ 67158:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;
/* provided dependency */ var process = __webpack_require__(27061);

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
__webpack_unused_export__ = ({ value: true });
exports.b = void 0;
const crypto = __webpack_require__(48738);
const buffer_1 = __webpack_require__(30816);
const publicKeyAlgorithm_1 = __webpack_require__(59009);
const ecdsaCurves_1 = __webpack_require__(96327);
const bigInt_1 = __webpack_require__(30404);
const derData_1 = __webpack_require__(85875);
const sshData_1 = __webpack_require__(67914);
const keyFormatters_1 = __webpack_require__(93814);
const nodeVersionParts = process.versions.node.split('.').map((v) => parseInt(v, 10));
const nodeGenerateKeyPairSupport = nodeVersionParts[0] > 10 || (nodeVersionParts[0] === 10 && nodeVersionParts[1] >= 12);
const nodeKeyObjectSupport = nodeVersionParts[0] > 11 || (nodeVersionParts[0] === 11 && nodeVersionParts[1] >= 6);
class NodeECDsaKeyPair {
    /**
     * Constructs a new ECDSA key pair object.
     *
     * @param algorithmName Key pair algorithm name. If unspecified, the key pair object must be
     * initialized before use via `importParameters()`.
     */
    constructor(algorithmName) {
        this.comment = null;
        if (algorithmName) {
            this.algorithmName = algorithmName;
        }
    }
    get hasPublicKey() {
        return !!this.publicKey;
    }
    get hasPrivateKey() {
        return !!this.privateKey;
    }
    get keyAlgorithmName() {
        return this.algorithmName;
    }
    get algorithmName() {
        return this.algorithm;
    }
    set algorithmName(value) {
        const curveName = value.split('-')[2];
        this.curve = ecdsaCurves_1.curves.find((c) => c.name === curveName);
        if (!this.curve) {
            throw new Error('Invalid or unsupported ECDSA algorithm: ' + value);
        }
        this.algorithm = value;
    }
    generate() {
        if (nodeGenerateKeyPairSupport && nodeKeyObjectSupport) {
            return this.generateNodeKeyPairObjects();
        }
        else if (nodeGenerateKeyPairSupport) {
            return this.generateNodeKeyPairBuffers();
        }
        else {
            return this.generateExternalKeyPair();
        }
    }
    async generateNodeKeyPairObjects() {
        [this.publicKey, this.privateKey] = await new Promise((resolve, reject) => {
            const keyGenParams = {
                namedCurve: this.curve.shortName,
            };
            try {
                crypto.generateKeyPair('ec', keyGenParams, (err, publicKey, privateKey) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve([publicKey, privateKey]);
                    }
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    async generateNodeKeyPairBuffers() {
        [this.publicKey, this.privateKey] = await new Promise((resolve, reject) => {
            const keyGenParams = {
                namedCurve: this.curve.shortName,
                publicKeyEncoding: { type: 'spki', format: 'pem' },
                privateKeyEncoding: {
                    type: 'sec1',
                    format: 'pem',
                    cipher: undefined,
                    passphrase: undefined,
                },
            };
            try {
                crypto.generateKeyPair('ec', keyGenParams, (err, publicKey, privateKey) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve([publicKey, privateKey]);
                    }
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    async generateExternalKeyPair() {
        throw new Error('This version of node does not support generating key pairs. Use node >= 10.12.');
    }
    async setPublicKeyBytes(keyBytes, algorithmName) {
        if (!keyBytes) {
            throw new TypeError('Buffer is required.');
        }
        // Read public key in SSH format.
        const reader = new sshData_1.SshDataReader(keyBytes);
        const readAlgorithmName = reader.readString('ascii');
        this.algorithmName = algorithmName || readAlgorithmName;
        const curveName = reader.readString('ascii');
        this.algorithmName = `ecdsa-sha2-${curveName}`;
        const xy = reader.readBinary();
        const x = bigInt_1.BigInt.fromBytes(xy.slice(1, 1 + (xy.length - 1) / 2), { unsigned: true });
        const y = bigInt_1.BigInt.fromBytes(xy.slice(1 + (xy.length - 1) / 2), { unsigned: true });
        const derKeyBytes = keyFormatters_1.Sec1KeyFormatter.formatECPublic({
            curve: { name: this.curve.name, oid: this.curve.oid },
            x,
            y,
        });
        if (nodeKeyObjectSupport) {
            this.publicKey = crypto.createPublicKey({
                key: derKeyBytes,
                type: 'spki',
                format: 'der',
            });
        }
        else {
            this.publicKey = (0, keyFormatters_1.formatPem)(derKeyBytes, 'PUBLIC KEY');
        }
    }
    async getPublicKeyBytes(algorithmName) {
        if (!this.publicKey) {
            return null;
        }
        let derKeyBytes;
        if (typeof this.publicKey === 'string') {
            derKeyBytes = (0, keyFormatters_1.parsePem)(this.publicKey);
        }
        else {
            derKeyBytes = this.publicKey.export({
                type: 'spki',
                format: 'der',
            });
        }
        const ec = keyFormatters_1.Sec1KeyFormatter.parseECPublic(derKeyBytes);
        // Write public key in SSH format.
        algorithmName = algorithmName || this.algorithmName || this.keyAlgorithmName;
        const keyWriter = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(512));
        keyWriter.writeString(algorithmName, 'ascii');
        keyWriter.writeString(this.curve.name, 'ascii');
        const keySizeInBytes = Math.ceil(this.curve.keySize / 8);
        const xBytes = ec.x.toBytes({ unsigned: true, length: keySizeInBytes });
        const yBytes = ec.y.toBytes({ unsigned: true, length: keySizeInBytes });
        keyWriter.writeUInt32(1 + xBytes.length + yBytes.length);
        keyWriter.writeByte(4); // Indicates uncompressed curve format
        keyWriter.write(xBytes);
        keyWriter.write(yBytes);
        const keyBytes = keyWriter.toBuffer();
        return keyBytes;
    }
    async importParameters(parameters) {
        if (!parameters.curve)
            throw new TypeError('A curve is required.');
        let curve;
        if (parameters.curve.oid) {
            curve = ecdsaCurves_1.curves.find((c) => c.oid === parameters.curve.oid);
            if (!curve) {
                throw new Error(`Unsupported curve OID: ${parameters.curve.oid}`);
            }
        }
        else if (parameters.curve.name) {
            curve = ecdsaCurves_1.curves.find((c) => c.name === parameters.curve.name);
            if (!curve) {
                throw new Error(`Unsupported curve: ${parameters.curve.name}`);
            }
        }
        else {
            throw new TypeError('A curve OID or name is required.');
        }
        this.algorithmName = 'ecdsa-sha2-' + curve.name;
        const publicKeyBytes = keyFormatters_1.Sec1KeyFormatter.formatECPublic(parameters);
        if (nodeKeyObjectSupport) {
            this.publicKey = crypto.createPublicKey({
                key: publicKeyBytes,
                type: 'spki',
                format: 'der',
            });
        }
        else {
            this.publicKey = (0, keyFormatters_1.formatPem)(publicKeyBytes, 'EC PUBLIC KEY');
        }
        if (parameters.d) {
            const privateKeyBytes = keyFormatters_1.Sec1KeyFormatter.formatECPrivate(parameters);
            if (nodeKeyObjectSupport) {
                this.privateKey = crypto.createPrivateKey({
                    key: privateKeyBytes,
                    type: 'sec1',
                    format: 'der',
                });
            }
            else {
                this.privateKey = (0, keyFormatters_1.formatPem)(privateKeyBytes, 'EC PRIVATE KEY');
            }
        }
        else {
            this.privateKey = undefined;
        }
    }
    async exportParameters() {
        var _a, _b;
        if (!this.publicKey) {
            throw new Error('Key is not present.');
        }
        let derKeyBytes;
        if (typeof this.publicKey === 'string') {
            derKeyBytes = (0, keyFormatters_1.parsePem)((_a = this.privateKey) !== null && _a !== void 0 ? _a : this.publicKey);
        }
        else {
            derKeyBytes = ((_b = this.privateKey) !== null && _b !== void 0 ? _b : this.publicKey).export({
                type: this.privateKey ? 'sec1' : 'spki',
                format: 'der',
            });
        }
        return this.privateKey
            ? keyFormatters_1.Sec1KeyFormatter.parseECPrivate(derKeyBytes)
            : keyFormatters_1.Sec1KeyFormatter.parseECPublic(derKeyBytes);
    }
    dispose() { }
}
class NodeECDsa extends publicKeyAlgorithm_1.PublicKeyAlgorithm {
    constructor(name, hashAlgorithmName) {
        super(name, name, // The key algorithm name is the same (unlike RSA).
        hashAlgorithmName);
    }
    createKeyPair() {
        return new NodeECDsaKeyPair(this.name);
    }
    async generateKeyPair() {
        const ecdsaKey = new NodeECDsaKeyPair(this.name);
        await ecdsaKey.generate();
        return ecdsaKey;
    }
    createSigner(keyPair) {
        if (!(keyPair instanceof NodeECDsaKeyPair)) {
            throw new TypeError('ECDSA key pair object expected.');
        }
        return new NodeECDsaSignerVerifier(keyPair, NodeECDsa.convertHashAlgorithmName(this.hashAlgorithmName));
    }
    createVerifier(keyPair) {
        if (!(keyPair instanceof NodeECDsaKeyPair)) {
            throw new TypeError('ECDSA key pair object expected.');
        }
        return new NodeECDsaSignerVerifier(keyPair, NodeECDsa.convertHashAlgorithmName(this.hashAlgorithmName));
    }
    static convertHashAlgorithmName(hashAlgorithmName) {
        return hashAlgorithmName.replace('SHA2-', 'SHA');
    }
    /* @internal */
    static getSignatureLength(keySizeInBits) {
        // The signature is double the key size, but formatted as 2 bigints.
        // To each bigint add 4 for the length and 1 for a leading zero.
        const keySizeInBytes = Math.ceil(keySizeInBits / 8);
        return (4 + 1 + keySizeInBytes) * 2;
    }
}
exports.b = NodeECDsa;
NodeECDsa.ecdsaSha2Nistp256 = 'ecdsa-sha2-nistp256';
NodeECDsa.ecdsaSha2Nistp384 = 'ecdsa-sha2-nistp384';
NodeECDsa.ecdsaSha2Nistp521 = 'ecdsa-sha2-nistp521';
NodeECDsa.curves = ecdsaCurves_1.curves;
// eslint-disable-next-line @typescript-eslint/tslint/config
NodeECDsa.KeyPair = NodeECDsaKeyPair;
class NodeECDsaSignerVerifier {
    constructor(keyPair, hashAlgorithmName) {
        this.keyPair = keyPair;
        this.hashAlgorithmName = hashAlgorithmName;
    }
    get digestLength() {
        const curve = this.keyPair.curve;
        if (!curve) {
            return 0;
        }
        else {
            return NodeECDsa.getSignatureLength(curve.keySize);
        }
    }
    async sign(data) {
        if (!this.keyPair.privateKey) {
            throw new Error('Private key not set.');
        }
        const signer = crypto.createSign(this.hashAlgorithmName);
        signer.update(data);
        let signature = signer.sign(this.keyPair.privateKey);
        // Reformat the signature integer bytes as required by SSH.
        const signatureReader = new derData_1.DerReader(signature);
        const x = signatureReader.readInteger();
        const y = signatureReader.readInteger();
        const keySizeInBytes = Math.ceil(this.keyPair.curve.keySize / 8);
        const signatureWriter = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(this.digestLength));
        signatureWriter.writeBinary(x.toBytes({ unsigned: true, length: keySizeInBytes + 1 }));
        signatureWriter.writeBinary(y.toBytes({ unsigned: true, length: keySizeInBytes + 1 }));
        signature = signatureWriter.toBuffer();
        return signature;
    }
    async verify(data, signature) {
        if (!this.keyPair.publicKey) {
            throw new Error('Public key not set.');
        }
        // Reformat the signature integer bytes as required by node.
        const signatureReader = new sshData_1.SshDataReader(signature);
        const x = signatureReader.readBigInt();
        const y = signatureReader.readBigInt();
        const signatureWriter = new derData_1.DerWriter(buffer_1.Buffer.alloc(signature.length));
        signatureWriter.writeInteger(x);
        signatureWriter.writeInteger(y);
        signature = signatureWriter.toBuffer();
        const verifier = crypto.createVerify(this.hashAlgorithmName);
        verifier.update(data);
        const result = verifier.verify(this.keyPair.publicKey, signature);
        return result;
    }
    dispose() { }
}
//# sourceMappingURL=nodeECDsa.js.map

/***/ }),

/***/ 80637:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
__webpack_unused_export__ = ({ value: true });
exports.r = void 0;
const crypto = __webpack_require__(48738);
const buffer_1 = __webpack_require__(30816);
const encryptionAlgorithm_1 = __webpack_require__(27867);
class NodeEncryption extends encryptionAlgorithm_1.EncryptionAlgorithm {
    constructor(name, algorithmName, cipherMode, keySizeInBits) {
        super(name);
        this.algorithmName = algorithmName;
        this.cipherMode = cipherMode;
        this.keySizeInBits = keySizeInBits;
        if (algorithmName !== 'AES') {
            throw new Error(`Unsupported encryption algorithm: ${algorithmName}`);
        }
        this.blockSizeInBits = NodeEncryption.getBlockSize(algorithmName);
    }
    get keyLength() {
        return this.keySizeInBits / 8;
    }
    get blockLength() {
        return this.blockSizeInBits / 8;
    }
    async createCipher(isEncryption, key, iv) {
        let cipher;
        if (this.cipherMode === 'CTR' || this.cipherMode === 'CBC') {
            cipher = new NodeAesCipher(isEncryption, this.keySizeInBits, this.blockSizeInBits, key, iv, this.cipherMode);
        }
        else if (this.cipherMode === 'GCM') {
            cipher = new NodeAesGcmCipher(isEncryption, this.keySizeInBits, this.blockSizeInBits, key, iv);
        }
        else {
            throw new Error(`Unsupported cipher mode: ${this.cipherMode}`);
        }
        return cipher;
    }
    static getBlockSize(algorithmName) {
        if (algorithmName === 'AES') {
            return 128;
        }
        else {
            throw new Error(`Unsupported encryption algorithm: ${algorithmName}`);
        }
    }
}
exports.r = NodeEncryption;
class NodeAesCipher {
    constructor(isEncryption, keySizeInBits, blockSizeInBits, key, iv, cipherMode) {
        this.isEncryption = isEncryption;
        this.keySizeInBits = keySizeInBits;
        this.blockSizeInBits = blockSizeInBits;
        const nodeAlgorithm = `AES-${this.keySizeInBits}-${cipherMode}`;
        this.cipher = this.isEncryption
            ? crypto.createCipheriv(nodeAlgorithm, key, iv)
            : crypto.createDecipheriv(nodeAlgorithm, key, iv);
        this.cipher.setAutoPadding(false);
    }
    get blockLength() {
        return this.blockSizeInBits / 8;
    }
    transform(data) {
        const result = this.cipher.update(data);
        if (result.length !== data.length) {
            const message = 'Result from encrypt/decrypt has invalid length ' +
                `${result.length}, expected ${data.length}.`;
            throw new Error(message);
        }
        return Promise.resolve(result);
    }
    dispose() { }
}
class NodeAesGcmCipher {
    constructor(isEncryption, keySizeInBits, blockSizeInBits, key, iv) {
        this.isEncryption = isEncryption;
        this.keySizeInBits = keySizeInBits;
        this.blockSizeInBits = blockSizeInBits;
        this.tag = null;
        this.algorithmName = `aes-${this.keySizeInBits}-gcm`;
        this.key = buffer_1.Buffer.alloc(key.length);
        key.copy(this.key);
        // Ininitialize the nonce to the first 12 bytes of the IV. It will be incremented by each op.
        this.nonce = buffer_1.Buffer.alloc(12);
        iv.copy(this.nonce, 0, 0, 12);
        this.associatedData = buffer_1.Buffer.alloc(4);
    }
    get blockLength() {
        return this.blockSizeInBits / 8;
    }
    get digestLength() {
        return 16;
    }
    get authenticatedEncryption() {
        return true;
    }
    transform(data) {
        if (data.length % this.blockLength !== 0) {
            const message = 'Encrypt/decrypt input has invalid length ' +
                `${data.length}, not a multiple of block size ${this.blockLength}.`;
            throw new Error(message);
        }
        const cipher = this.isEncryption
            ? crypto.createCipheriv(this.algorithmName, this.key, this.nonce)
            : crypto.createDecipheriv(this.algorithmName, this.key, this.nonce);
        // Associated data is the 32-bit packet length.
        const packetLength = data.length;
        this.associatedData[0] = packetLength >>> 24;
        this.associatedData[1] = packetLength >>> 16;
        this.associatedData[2] = packetLength >>> 8;
        this.associatedData[3] = packetLength;
        cipher.setAAD(this.associatedData);
        if (!this.isEncryption) {
            if (!this.tag) {
                throw new Error('AES-GCM tag was not set before decrypting.');
            }
            cipher.setAuthTag(this.tag);
        }
        const result = cipher.update(data);
        if (result.length !== data.length) {
            const message = 'Result from encrypt/decrypt has invalid length ' +
                `${result.length}, expected ${data.length}.`;
            throw new Error(message);
        }
        cipher.final();
        if (this.isEncryption) {
            this.tag = cipher.getAuthTag();
        }
        else {
            this.tag = null;
        }
        // Increment the counter (last 8 bytes of the nonce) as a big-endian integer.
        // First increment the last byte, and if it reaches 0 then increment the
        // next-to-last byte, and so on.
        let k = 12;
        while (--k >= 4) {
            this.nonce[k]++;
            if (this.nonce[k] !== 0) {
                break;
            }
        }
        return Promise.resolve(result);
    }
    async sign(data) {
        if (!this.tag) {
            throw new Error('AES-GCM tag was not obtained by encrypting.');
        }
        return this.tag;
    }
    async verify(data, signature) {
        if (signature.length !== this.digestLength) {
            throw new Error('Incorrect AES-GCM tag length.');
        }
        this.tag = signature;
        return true;
    }
    dispose() { }
}
//# sourceMappingURL=nodeEncryption.js.map

/***/ }),

/***/ 9133:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NodeHmac = void 0;
const crypto = __webpack_require__(48738);
const buffer_1 = __webpack_require__(30816);
const hmacAlgorithm_1 = __webpack_require__(33307);
class NodeHmac extends hmacAlgorithm_1.HmacAlgorithm {
    constructor(name, algorithmName, encryptThenMac = false) {
        super(name, algorithmName, NodeHmac.getHashKeyLength(algorithmName), NodeHmac.getHashDigestLength(algorithmName));
        this.encryptThenMac = encryptThenMac;
    }
    async createSigner(key) {
        const hmac = new NodeSignerVerifier(NodeHmac.getNodeHashAlgorithmName(this.algorithmName), this.digestLength, this.encryptThenMac, key);
        return hmac;
    }
    async createVerifier(key) {
        const hmac = new NodeSignerVerifier(NodeHmac.getNodeHashAlgorithmName(this.algorithmName), this.digestLength, this.encryptThenMac, key);
        return hmac;
    }
    static getHashKeyLength(hashAlgorithmName) {
        if (hashAlgorithmName === 'SHA2-512')
            return 512 / 8;
        if (hashAlgorithmName === 'SHA2-384')
            return 384 / 8;
        if (hashAlgorithmName === 'SHA2-256')
            return 256 / 8;
        throw new Error(`Unsupported hash algorithm: ${hashAlgorithmName}`);
    }
    static getHashDigestLength(hashAlgorithmName) {
        return this.getHashKeyLength(hashAlgorithmName);
    }
    static getNodeHashAlgorithmName(hashAlgorithmName) {
        if (hashAlgorithmName === 'SHA2-512')
            return 'sha512';
        if (hashAlgorithmName === 'SHA2-384')
            return 'sha384';
        if (hashAlgorithmName === 'SHA2-256')
            return 'sha256';
        throw new Error(`Unsupported hash algorithm: ${hashAlgorithmName}`);
    }
}
exports.NodeHmac = NodeHmac;
class NodeSignerVerifier {
    constructor(algorithmName, digestLength, encryptThenMac, key) {
        this.algorithmName = algorithmName;
        this.digestLength = digestLength;
        this.encryptThenMac = encryptThenMac;
        // crypto.createSecretKey is only available on node >= 11.6.
        this.key = crypto.createSecretKey ? crypto.createSecretKey(key) : buffer_1.Buffer.from(key);
    }
    async sign(data) {
        const signer = crypto.createHmac(this.algorithmName, this.key);
        signer.update(data);
        const hmac = signer.digest();
        return hmac;
    }
    async verify(data, signature) {
        const verifier = crypto.createHmac(this.algorithmName, this.key);
        verifier.update(data);
        const hmac = verifier.digest();
        const result = hmac.equals(signature);
        return result;
    }
    dispose() { }
}
//# sourceMappingURL=nodeHmac.js.map

/***/ }),

/***/ 57631:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
__webpack_unused_export__ = ({ value: true });
exports.th = exports.yk = void 0;
const crypto = __webpack_require__(48738);
const buffer_1 = __webpack_require__(30816);
const keyExchangeAlgorithm_1 = __webpack_require__(84468);
const nodeHmac_1 = __webpack_require__(9133);
const bigInt_1 = __webpack_require__(30404);
class NodeDiffieHellman extends keyExchangeAlgorithm_1.KeyExchangeAlgorithm {
    constructor(name, keySizeInBits, hashAlgorithmName) {
        super(name, keySizeInBits, hashAlgorithmName, nodeHmac_1.NodeHmac.getHashDigestLength(hashAlgorithmName));
    }
    createKeyExchange() {
        return new NodeDiffieHellmanKex(this.keySizeInBits, nodeHmac_1.NodeHmac.getNodeHashAlgorithmName(this.hashAlgorithmName), this.hashDigestLength);
    }
}
exports.yk = NodeDiffieHellman;
class NodeDiffieHellmanKex {
    constructor(bitLength, hashAlgorithmName, digestLength) {
        this.hashAlgorithmName = hashAlgorithmName;
        this.digestLength = digestLength;
        switch (bitLength) {
            case 1024:
                this.dh = crypto.getDiffieHellman('modp2');
                break;
            case 2048:
                this.dh = crypto.getDiffieHellman('modp14');
                break;
            case 4096:
                this.dh = crypto.getDiffieHellman('modp16');
                break;
            default:
                throw new Error('Invalid DH bit length.');
        }
    }
    startKeyExchange() {
        const exchangeValueKeys = this.dh.generateKeys();
        const exchangeValue = bigInt_1.BigInt.fromBytes(exchangeValueKeys, { unsigned: true }).toBytes();
        return Promise.resolve(exchangeValue);
    }
    decryptKeyExchange(exchangeValue) {
        const key = this.dh.computeSecret(exchangeValue);
        const sharedSecret = bigInt_1.BigInt.fromBytes(key, { unsigned: true }).toBytes();
        return Promise.resolve(sharedSecret);
    }
    async sign(data) {
        const hash = crypto.createHash(this.hashAlgorithmName);
        hash.update(data);
        return buffer_1.Buffer.from(hash.digest());
    }
    dispose() { }
}
class NodeECDiffieHellman extends keyExchangeAlgorithm_1.KeyExchangeAlgorithm {
    constructor(name, keySizeInBits, hashAlgorithmName) {
        super(name, keySizeInBits, hashAlgorithmName, nodeHmac_1.NodeHmac.getHashDigestLength(hashAlgorithmName));
    }
    createKeyExchange() {
        return new NodeECDiffieHellmanKex(this.keySizeInBits, nodeHmac_1.NodeHmac.getNodeHashAlgorithmName(this.hashAlgorithmName), this.hashDigestLength);
    }
}
exports.th = NodeECDiffieHellman;
class NodeECDiffieHellmanKex {
    constructor(bitLength, hashAlgorithmName, digestLength) {
        this.hashAlgorithmName = hashAlgorithmName;
        this.digestLength = digestLength;
        switch (bitLength) {
            case 256:
                this.ecdh = crypto.createECDH('prime256v1');
                break;
            case 384:
                this.ecdh = crypto.createECDH('secp384r1');
                break;
            case 521:
                this.ecdh = crypto.createECDH('secp521r1');
                break;
            default:
                throw new Error('Invalid ECDH bit length.');
        }
    }
    startKeyExchange() {
        const exchangeValue = this.ecdh.generateKeys();
        return Promise.resolve(exchangeValue);
    }
    decryptKeyExchange(exchangeValue) {
        const sharedSecretBytes = this.ecdh.computeSecret(exchangeValue);
        const sharedSecret = bigInt_1.BigInt.fromBytes(sharedSecretBytes, { unsigned: true }).toBytes();
        return Promise.resolve(sharedSecret);
    }
    async sign(data) {
        const hash = crypto.createHash(this.hashAlgorithmName);
        hash.update(data);
        return buffer_1.Buffer.from(hash.digest());
    }
    dispose() { }
}
//# sourceMappingURL=nodeKeyExchange.js.map

/***/ }),

/***/ 52750:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
__webpack_unused_export__ = ({ value: true });
exports.e = void 0;
const crypto = __webpack_require__(48738);
class NodeRandom {
    getBytes(buffer) {
        const randomBytes = crypto.randomBytes(buffer.length);
        randomBytes.copy(buffer);
    }
}
exports.e = NodeRandom;
//# sourceMappingURL=nodeRandom.js.map

/***/ }),

/***/ 338:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;
/* provided dependency */ var process = __webpack_require__(27061);

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
__webpack_unused_export__ = ({ value: true });
exports.G = void 0;
const crypto = __webpack_require__(48738);
const buffer_1 = __webpack_require__(30816);
const publicKeyAlgorithm_1 = __webpack_require__(59009);
const sshData_1 = __webpack_require__(67914);
const nodeHmac_1 = __webpack_require__(9133);
const keyFormatters_1 = __webpack_require__(93814);
const nodeVersionParts = process.versions.node.split('.').map((v) => parseInt(v, 10));
const nodeGenerateKeyPairSupport = nodeVersionParts[0] > 10 || (nodeVersionParts[0] === 10 && nodeVersionParts[1] >= 12);
const nodeKeyObjectSupport = nodeVersionParts[0] > 11 || (nodeVersionParts[0] === 11 && nodeVersionParts[1] >= 6);
// Note this is exposed as an inner-class property below: `NodeRsa.KeyPair`.
// TypeScript requires that the class definition comes first.
class NodeRsaKeyPair {
    /* @internal */
    constructor() {
        this.comment = null;
    }
    get hasPublicKey() {
        return !!this.publicKey;
    }
    get hasPrivateKey() {
        return !!this.privateKey;
    }
    get keyAlgorithmName() {
        return NodeRsa.keyAlgorithmName;
    }
    generate(keySizeInBits) {
        keySizeInBits = keySizeInBits !== null && keySizeInBits !== void 0 ? keySizeInBits : NodeRsaKeyPair.defaultKeySize;
        if (nodeGenerateKeyPairSupport && nodeKeyObjectSupport) {
            return this.generateNodeKeyPairObjects(keySizeInBits);
        }
        else if (nodeGenerateKeyPairSupport) {
            return this.generateNodeKeyPairBuffers(keySizeInBits);
        }
        else {
            return this.generateExternalKeyPair(keySizeInBits);
        }
    }
    async generateNodeKeyPairObjects(keySizeInBits) {
        [this.publicKey, this.privateKey] = await new Promise((resolve, reject) => {
            const keyGenParams = {
                modulusLength: keySizeInBits,
            };
            try {
                crypto.generateKeyPair('rsa', keyGenParams, (err, publicKey, privateKey) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve([publicKey, privateKey]);
                    }
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    async generateNodeKeyPairBuffers(keySizeInBits) {
        [this.publicKey, this.privateKey] = await new Promise((resolve, reject) => {
            const keyGenParams = {
                modulusLength: keySizeInBits,
                publicKeyEncoding: { type: 'pkcs1', format: 'pem' },
                privateKeyEncoding: {
                    type: 'pkcs1',
                    format: 'pem',
                    cipher: undefined,
                    passphrase: undefined,
                },
            };
            try {
                crypto.generateKeyPair('rsa', keyGenParams, (err, publicKey, privateKey) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve([publicKey, privateKey]);
                    }
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    async generateExternalKeyPair(keySizeInBits) {
        // When running in a version of node that doesn't have a built-in API
        // for RSA key-gen, use an external library. Note this implementation
        // is SLOW because it's pure JS. It may take 1-5 seconds to generate
        // a 2048 bit key.
        const externRsa = await Promise.resolve().then(() => __webpack_require__(62859));
        const keyPair = new externRsa({ b: keySizeInBits });
        this.publicKey = keyPair.exportKey('pkcs1-public-pem');
        this.privateKey = keyPair.exportKey('pkcs1-private-pem');
        // Ensure the PEM format ends in a newline, just for consistency.
        if (!this.publicKey.endsWith('\n'))
            this.publicKey += '\n';
        if (!this.privateKey.endsWith('\n'))
            this.privateKey += '\n';
    }
    async setPublicKeyBytes(keyBytes) {
        if (!keyBytes) {
            throw new TypeError('Buffer is required.');
        }
        // Read public key in SSH format.
        const reader = new sshData_1.SshDataReader(keyBytes);
        const algorithmName = reader.readString('ascii');
        if (algorithmName !== this.keyAlgorithmName &&
            algorithmName !== NodeRsa.rsaWithSha256 &&
            algorithmName !== NodeRsa.rsaWithSha512) {
            throw new Error(`Invalid RSA key algorithm: ${algorithmName}`);
        }
        const exponent = reader.readBigInt();
        const modulus = reader.readBigInt();
        // Write public key in PKCS#1 format.
        keyBytes = keyFormatters_1.Pkcs1KeyFormatter.formatRsaPublic({ modulus, exponent });
        if (nodeKeyObjectSupport) {
            this.publicKey = crypto.createPublicKey({
                key: keyBytes,
                type: 'pkcs1',
                format: 'der',
            });
        }
        else {
            this.publicKey = (0, keyFormatters_1.formatPem)(keyBytes, 'RSA PUBLIC KEY');
        }
    }
    async getPublicKeyBytes(algorithmName) {
        if (!this.publicKey) {
            return null;
        }
        if (!algorithmName) {
            algorithmName = this.keyAlgorithmName;
        }
        let keyBytes;
        if (typeof this.publicKey === 'string') {
            keyBytes = (0, keyFormatters_1.parsePem)(this.publicKey);
        }
        else {
            keyBytes = this.publicKey.export({
                type: 'pkcs1',
                format: 'der',
            });
        }
        const parameters = keyFormatters_1.Pkcs1KeyFormatter.parseRsaPublic(keyBytes);
        // Write public key in SSH format.
        const keyBuffer = buffer_1.Buffer.alloc(512);
        const keyWriter = new sshData_1.SshDataWriter(keyBuffer);
        keyWriter.writeString(algorithmName, 'ascii');
        keyWriter.writeBigInt(parameters.exponent);
        keyWriter.writeBigInt(parameters.modulus);
        keyBytes = keyWriter.toBuffer();
        return keyBytes;
    }
    async importParameters(parameters) {
        if (nodeKeyObjectSupport) {
            this.publicKey = crypto.createPublicKey({
                key: keyFormatters_1.Pkcs1KeyFormatter.formatRsaPublic(parameters),
                format: 'der',
                type: 'pkcs1',
            });
            if (parameters.d) {
                this.privateKey = crypto.createPrivateKey({
                    key: keyFormatters_1.Pkcs1KeyFormatter.formatRsaPrivate(parameters),
                    format: 'der',
                    type: 'pkcs1',
                });
            }
            else {
                this.privateKey = undefined;
            }
        }
        else {
            const publicKeyBytes = keyFormatters_1.Pkcs1KeyFormatter.formatRsaPublic(parameters);
            this.publicKey = (0, keyFormatters_1.formatPem)(publicKeyBytes, 'RSA PUBLIC KEY');
            if (parameters.d) {
                const privateKeyBytes = keyFormatters_1.Pkcs1KeyFormatter.formatRsaPrivate(parameters);
                this.privateKey = (0, keyFormatters_1.formatPem)(privateKeyBytes, 'RSA PRIVATE KEY');
            }
        }
    }
    async exportParameters() {
        var _a, _b;
        if (!this.publicKey)
            throw new Error('Public key not set.');
        let keyBytes;
        if (nodeKeyObjectSupport) {
            keyBytes = ((_a = this.privateKey) !== null && _a !== void 0 ? _a : this.publicKey).export({
                format: 'der',
                type: 'pkcs1',
            });
        }
        else {
            keyBytes = (0, keyFormatters_1.parsePem)((_b = this.privateKey) !== null && _b !== void 0 ? _b : this.publicKey);
        }
        return this.privateKey
            ? keyFormatters_1.Pkcs1KeyFormatter.parseRsaPrivate(keyBytes)
            : keyFormatters_1.Pkcs1KeyFormatter.parseRsaPublic(keyBytes);
    }
    dispose() {
        this.publicKey = undefined;
        this.privateKey = undefined;
    }
}
NodeRsaKeyPair.defaultKeySize = 2048;
class NodeRsa extends publicKeyAlgorithm_1.PublicKeyAlgorithm {
    constructor(name, hashAlgorithmName) {
        super(name, NodeRsa.keyAlgorithmName, hashAlgorithmName);
    }
    createKeyPair() {
        return new NodeRsaKeyPair();
    }
    async generateKeyPair(keySizeInBits) {
        const rsaKey = new NodeRsaKeyPair();
        await rsaKey.generate(keySizeInBits);
        return rsaKey;
    }
    createSigner(keyPair) {
        if (!(keyPair instanceof NodeRsaKeyPair)) {
            throw new TypeError('RSA key pair object expected.');
        }
        return new NodeRsaSignerVerifier(keyPair, NodeRsa.convertHashAlgorithmName(this.hashAlgorithmName), nodeHmac_1.NodeHmac.getHashDigestLength(this.hashAlgorithmName));
    }
    createVerifier(keyPair) {
        if (!(keyPair instanceof NodeRsaKeyPair)) {
            throw new TypeError('RSA key pair object expected.');
        }
        return new NodeRsaSignerVerifier(keyPair, NodeRsa.convertHashAlgorithmName(this.hashAlgorithmName), nodeHmac_1.NodeHmac.getHashDigestLength(this.hashAlgorithmName));
    }
    static convertHashAlgorithmName(hashAlgorithmName) {
        return hashAlgorithmName.replace('SHA2-', 'SHA');
    }
}
exports.G = NodeRsa;
NodeRsa.keyAlgorithmName = 'ssh-rsa';
NodeRsa.rsaWithSha256 = 'rsa-sha2-256';
NodeRsa.rsaWithSha512 = 'rsa-sha2-512';
// eslint-disable-next-line @typescript-eslint/tslint/config
NodeRsa.KeyPair = NodeRsaKeyPair;
class NodeRsaSignerVerifier {
    constructor(keyPair, hashAlgorithmName, digestLength) {
        this.keyPair = keyPair;
        this.hashAlgorithmName = hashAlgorithmName;
        this.digestLength = digestLength;
    }
    async sign(data) {
        if (!this.keyPair.privateKey) {
            throw new Error('Private key not set.');
        }
        const signer = crypto.createSign(this.hashAlgorithmName);
        signer.update(data);
        const signature = signer.sign(this.keyPair.privateKey);
        return signature;
    }
    async verify(data, signature) {
        if (!this.keyPair.publicKey) {
            throw new Error('Public key not set.');
        }
        const verifier = crypto.createVerify(this.hashAlgorithmName);
        verifier.update(data);
        const result = verifier.verify(this.keyPair.publicKey, signature);
        return result;
    }
    dispose() { }
}
//# sourceMappingURL=nodeRsa.js.map

/***/ }),

/***/ 59009:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PublicKeyAlgorithm = void 0;
const buffer_1 = __webpack_require__(30816);
const sshData_1 = __webpack_require__(67914);
class PublicKeyAlgorithm {
    constructor(name, keyAlgorithmName, hashAlgorithmName) {
        this.name = name;
        this.keyAlgorithmName = keyAlgorithmName;
        this.hashAlgorithmName = hashAlgorithmName;
    }
    readSignatureData(signatureData) {
        const reader = new sshData_1.SshDataReader(signatureData);
        const algorithmName = reader.readString('ascii');
        if (algorithmName !== this.name) {
            throw new Error('Mismatched public key algorithm: ' +
                `got '${algorithmName}', expected '${this.name}'.`);
        }
        const signature = reader.readBinary();
        return signature;
    }
    createSignatureData(signature) {
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(this.name.length + signature.length + 20));
        writer.writeString(this.name, 'ascii');
        writer.writeBinary(signature);
        return writer.toBuffer();
    }
}
exports.PublicKeyAlgorithm = PublicKeyAlgorithm;
//# sourceMappingURL=publicKeyAlgorithm.js.map

/***/ }),

/***/ 91605:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.algorithmNames = exports.SshAlgorithms = exports.Encryption = exports.ECDsa = exports.Rsa = exports.HmacAlgorithm = exports.EncryptionAlgorithm = exports.PublicKeyAlgorithm = exports.KeyExchangeAlgorithm = void 0;
const keyExchangeAlgorithm_1 = __webpack_require__(84468);
Object.defineProperty(exports, "KeyExchangeAlgorithm", ({ enumerable: true, get: function () { return keyExchangeAlgorithm_1.KeyExchangeAlgorithm; } }));
const publicKeyAlgorithm_1 = __webpack_require__(59009);
Object.defineProperty(exports, "PublicKeyAlgorithm", ({ enumerable: true, get: function () { return publicKeyAlgorithm_1.PublicKeyAlgorithm; } }));
const encryptionAlgorithm_1 = __webpack_require__(27867);
Object.defineProperty(exports, "EncryptionAlgorithm", ({ enumerable: true, get: function () { return encryptionAlgorithm_1.EncryptionAlgorithm; } }));
const hmacAlgorithm_1 = __webpack_require__(33307);
Object.defineProperty(exports, "HmacAlgorithm", ({ enumerable: true, get: function () { return hmacAlgorithm_1.HmacAlgorithm; } }));
// Swap imports to node crypto implementations when web crypto is not available.
const useWebCrypto = !!(typeof crypto === 'object' && crypto.subtle);
const webKeyExchange_1 = __webpack_require__(46554);
const webRsa_1 = __webpack_require__(52001);
const webECDsa_1 = __webpack_require__(10918);
const webEncryption_1 = __webpack_require__(4522);
const webHmac_1 = __webpack_require__(25914);
const webRandom_1 = __webpack_require__(81685);
// tslint:disable:variable-name
const DiffieHellman = useWebCrypto
    ? webKeyExchange_1.WebDiffieHellman
    : (__webpack_require__(57631)/* .NodeDiffieHellman */ .yk);
const ECDiffieHellman = useWebCrypto
    ? webKeyExchange_1.WebECDiffieHellman
    : (__webpack_require__(57631)/* .NodeECDiffieHellman */ .th);
const Rsa = useWebCrypto ? webRsa_1.WebRsa : (__webpack_require__(338)/* .NodeRsa */ .G);
exports.Rsa = Rsa;
const ECDsa = useWebCrypto ? webECDsa_1.WebECDsa : (__webpack_require__(67158)/* .NodeECDsa */ .b);
exports.ECDsa = ECDsa;
const Encryption = useWebCrypto
    ? webEncryption_1.WebEncryption
    : (__webpack_require__(80637)/* .NodeEncryption */ .r);
exports.Encryption = Encryption;
const Hmac = useWebCrypto ? webHmac_1.WebHmac : (__webpack_require__(9133).NodeHmac);
const Random = useWebCrypto ? webRandom_1.WebRandom : (__webpack_require__(52750)/* .NodeRandom */ .e);
class SshAlgorithms {
}
exports.SshAlgorithms = SshAlgorithms;
SshAlgorithms.keyExchange = {
    none: null,
    dhGroup14Sha256: new DiffieHellman('diffie-hellman-group14-sha256', 2048, 'SHA2-256'),
    dhGroup16Sha512: new DiffieHellman('diffie-hellman-group16-sha512', 4096, 'SHA2-512'),
    ecdhNistp256Sha256: new ECDiffieHellman('ecdh-sha2-nistp256', 256, 'SHA2-256'),
    ecdhNistp384Sha384: new ECDiffieHellman('ecdh-sha2-nistp384', 384, 'SHA2-384'),
    ecdhNistp521Sha512: new ECDiffieHellman('ecdh-sha2-nistp521', 521, 'SHA2-512'),
};
SshAlgorithms.publicKey = {
    none: null,
    rsaWithSha256: new Rsa('rsa-sha2-256', 'SHA2-256'),
    rsaWithSha512: new Rsa('rsa-sha2-512', 'SHA2-512'),
    ecdsaSha2Nistp256: new ECDsa('ecdsa-sha2-nistp256', 'SHA2-256'),
    ecdsaSha2Nistp384: new ECDsa('ecdsa-sha2-nistp384', 'SHA2-384'),
    ecdsaSha2Nistp521: new ECDsa('ecdsa-sha2-nistp521', 'SHA2-512'),
};
SshAlgorithms.encryption = {
    none: null,
    ////aes256Cbc: new Encryption('aes256-cbc', 'AES', 'CBC', 256) },
    aes256Ctr: new Encryption('aes256-ctr', 'AES', 'CTR', 256),
    aes256Gcm: new Encryption('aes256-gcm@openssh.com', 'AES', 'GCM', 256),
};
SshAlgorithms.hmac = {
    none: null,
    hmacSha256: new Hmac('hmac-sha2-256', 'SHA2-256'),
    hmacSha512: new Hmac('hmac-sha2-512', 'SHA2-512'),
    hmacSha256Etm: new Hmac('hmac-sha2-256-etm@openssh.com', 'SHA2-256', true),
    hmacSha512Etm: new Hmac('hmac-sha2-512-etm@openssh.com', 'SHA2-512', true),
};
SshAlgorithms.compression = {
    none: null,
};
SshAlgorithms.random = new Random();
function algorithmNames(list) {
    return list.map((a) => (a ? a.name : 'none'));
}
exports.algorithmNames = algorithmNames;
//# sourceMappingURL=sshAlgorithms.js.map

/***/ }),

/***/ 60453:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JsonWebKeyFormatter = void 0;
const bigInt_1 = __webpack_require__(30404);
const ecdsaCurves_1 = __webpack_require__(96327);
/**
 * Provides *minimal* JWK import/export support for web keys.
 *
 * This code is redundant with some of the JWK import/export code in the separate
 * `ssh-keys` library; that is intentional, and necessary to support a consistent
 * interface for importing/exporting key parameters in the core `ssh` library.
 */
class JsonWebKeyFormatter {
    static formatRsa(rsa, includePrivate) {
        const formatBigInt = JsonWebKeyFormatter.formatBigInt;
        let jwk;
        if (includePrivate !== false && rsa.d && rsa.p && rsa.q && rsa.dp && rsa.dq && rsa.qi) {
            jwk = {
                kty: 'RSA',
                n: formatBigInt(rsa.modulus),
                e: formatBigInt(rsa.exponent),
                d: formatBigInt(rsa.d),
                p: formatBigInt(rsa.p),
                q: formatBigInt(rsa.q),
                dp: formatBigInt(rsa.dp),
                dq: formatBigInt(rsa.dq),
                qi: formatBigInt(rsa.qi),
            };
        }
        else if (!includePrivate) {
            jwk = {
                kty: 'RSA',
                n: formatBigInt(rsa.modulus),
                e: formatBigInt(rsa.exponent),
            };
        }
        else {
            throw new Error('Missing private key parameters.');
        }
        return jwk;
    }
    static parseRsa(jwk, includePrivate) {
        if ((jwk === null || jwk === void 0 ? void 0 : jwk.kty) !== 'RSA' || !(jwk.n && jwk.e))
            throw new Error('Invalid RSA JWK.');
        const parseBigInt = JsonWebKeyFormatter.parseBigInt;
        let rsa;
        if (includePrivate !== false && jwk.d && jwk.p && jwk.q && jwk.dp && jwk.dq && jwk.qi) {
            rsa = {
                modulus: parseBigInt(jwk.n),
                exponent: parseBigInt(jwk.e),
                d: parseBigInt(jwk.d),
                p: parseBigInt(jwk.p),
                q: parseBigInt(jwk.q),
                dp: parseBigInt(jwk.dp),
                dq: parseBigInt(jwk.dq),
                qi: parseBigInt(jwk.qi),
            };
        }
        else {
            rsa = {
                modulus: parseBigInt(jwk.n),
                exponent: parseBigInt(jwk.e),
            };
        }
        return rsa;
    }
    static formatEC(ec, includePrivate) {
        const formatBigInt = JsonWebKeyFormatter.formatBigInt;
        const curve = ecdsaCurves_1.curves.find((c) => c.oid === ec.curve.oid || c.name === ec.curve.name || c.shortName === ec.curve.name);
        const keySizeInBytes = Math.ceil(curve.keySize / 8);
        const jwk = {
            kty: 'EC',
            crv: ec.curve.name,
            x: formatBigInt(ec.x, keySizeInBytes),
            y: formatBigInt(ec.y, keySizeInBytes),
        };
        if (includePrivate !== false && ec.d) {
            jwk.d = formatBigInt(ec.d, keySizeInBytes);
        }
        else if (includePrivate) {
            throw new Error('Missing private key parameters.');
        }
        return jwk;
    }
    static parseEC(jwk, includePrivate) {
        if ((jwk === null || jwk === void 0 ? void 0 : jwk.kty) !== 'EC' || !(jwk.crv && jwk.x && jwk.y))
            throw new Error('Invalid EC JWK.');
        const parseBigInt = JsonWebKeyFormatter.parseBigInt;
        const ec = {
            curve: { name: jwk.crv },
            x: parseBigInt(jwk.x),
            y: parseBigInt(jwk.y),
        };
        if (includePrivate !== false && jwk.d) {
            ec.d = parseBigInt(jwk.d);
        }
        return ec;
    }
    static formatBigInt(value, length) {
        return JsonWebKeyFormatter.base64UrlEncode(value.toBytes({ unsigned: true, length }));
    }
    static parseBigInt(value) {
        return bigInt_1.BigInt.fromBytes(Buffer.from(value, 'base64'), { unsigned: true });
    }
    static base64UrlEncode(data) {
        // JWK format uses base64-url-encoding, which is base64 but with 2 substituted characters.
        // (Note Buffer's base64 DECODING implicitly supports this format.)
        return data
            .toString('base64')
            .replace(/=+$/g, '')
            .replace(/\+/g, '-')
            .replace(/\//g, '_');
    }
}
exports.JsonWebKeyFormatter = JsonWebKeyFormatter;
//# sourceMappingURL=jsonWebKeyFormatter.js.map

/***/ }),

/***/ 10918:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebECDsa = void 0;
const buffer_1 = __webpack_require__(30816);
const publicKeyAlgorithm_1 = __webpack_require__(59009);
const sshData_1 = __webpack_require__(67914);
const ecdsaCurves_1 = __webpack_require__(96327);
const bigInt_1 = __webpack_require__(30404);
const jsonWebKeyFormatter_1 = __webpack_require__(60453);
class WebECDsaKeyPair {
    /**
     * Constructs a new ECDSA key pair object.
     *
     * @param algorithmName Key pair algorithm name. If unspecified, the key pair object must be
     * initialized before use via `importParameters()`.
     */
    constructor(algorithmName) {
        this.comment = null;
        if (algorithmName) {
            this.algorithmName = algorithmName;
        }
    }
    get hasPublicKey() {
        return !!this.publicKey;
    }
    get hasPrivateKey() {
        return !!this.privateKey;
    }
    get keyAlgorithmName() {
        return this.algorithmName;
    }
    get algorithmName() {
        return this.algorithm;
    }
    set algorithmName(value) {
        const curveName = value.split('-')[2];
        this.curve = ecdsaCurves_1.curves.find((c) => c.name === curveName);
        if (!this.curve) {
            throw new Error('Invalid or unsupported ECDSA algorithm: ' + value);
        }
        this.algorithm = value;
    }
    async generate() {
        try {
            const keyGenParams = {
                name: 'ECDSA',
                namedCurve: this.curve.shortName,
            };
            const keyPair = (await crypto.subtle.generateKey(keyGenParams, true, ['sign', 'verify']));
            this.publicKey = keyPair.publicKey;
            this.privateKey = keyPair.privateKey;
        }
        catch (e) {
            throw new Error('Failed to generate RSA key pair: ' + e);
        }
    }
    async setPublicKeyBytes(keyBytes, algorithmName) {
        if (!keyBytes) {
            throw new TypeError('Buffer is required.');
        }
        // Read public key in SSH format.
        const reader = new sshData_1.SshDataReader(keyBytes);
        const readAlgorithmName = reader.readString('ascii');
        this.algorithmName = algorithmName || readAlgorithmName;
        const curveName = reader.readString('ascii');
        if (curveName !== this.curve.name) {
            throw new Error('EC curve name does not match.');
        }
        // X and Y parameters are equal length, after a one-byte header.
        const key = reader.readBinary();
        const n = Math.ceil(this.curve.keySize / 8);
        const x = bigInt_1.BigInt.fromBytes(key.slice(1, 1 + n), { unsigned: true });
        const y = bigInt_1.BigInt.fromBytes(key.slice(1 + n, key.length), { unsigned: true });
        const jwk = jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatEC({
            curve: { name: this.curve.shortName, oid: this.curve.oid },
            x,
            y,
        });
        try {
            const importParams = {
                name: 'ECDSA',
                namedCurve: this.curve.shortName,
            };
            this.publicKey = await crypto.subtle.importKey('jwk', jwk, importParams, true, ['verify']);
        }
        catch (e) {
            throw new Error('Failed to import EC public key: ' + e);
        }
    }
    async getPublicKeyBytes(algorithmName) {
        if (!this.publicKey) {
            return null;
        }
        // Export public key in JWK format.
        let jwk;
        try {
            jwk = await crypto.subtle.exportKey('jwk', this.publicKey);
        }
        catch (e) {
            throw new Error('Failed to export ECDSA public key: ' + e);
        }
        const x = buffer_1.Buffer.from(jwk.x, 'base64');
        const y = buffer_1.Buffer.from(jwk.y, 'base64');
        const n = Math.ceil(this.curve.keySize / 8);
        if (x.length !== n || y.length !== n) {
            throw new Error('Unexpected key length.');
        }
        // Write public key in SSH format.
        algorithmName = algorithmName || this.algorithmName || this.keyAlgorithmName;
        const keyBuffer = buffer_1.Buffer.alloc(algorithmName.length + x.length + y.length + 10);
        const keyWriter = new sshData_1.SshDataWriter(keyBuffer);
        keyWriter.writeString(algorithmName, 'ascii');
        keyWriter.writeString(this.curve.name, 'ascii');
        keyWriter.writeUInt32(1 + x.length + y.length);
        keyWriter.writeByte(4); // Indicates uncompressed curve format
        keyWriter.write(x);
        keyWriter.write(y);
        const keyBytes = keyWriter.toBuffer();
        return keyBytes;
    }
    async importParameters(parameters) {
        if (!parameters.curve)
            throw new TypeError('A curve is required.');
        let curve;
        if (parameters.curve.oid) {
            curve = ecdsaCurves_1.curves.find((c) => c.oid === parameters.curve.oid);
            if (!curve) {
                throw new Error(`Unsupported curve OID: ${parameters.curve.oid}`);
            }
        }
        else if (parameters.curve.name) {
            curve = ecdsaCurves_1.curves.find((c) => c.name === parameters.curve.name);
            if (!curve) {
                throw new Error(`Unsupported curve: ${parameters.curve.name}`);
            }
        }
        else {
            throw new TypeError('A curve OID or name is required.');
        }
        this.algorithmName = 'ecdsa-sha2-' + curve.name;
        const importParams = {
            name: 'ECDSA',
            namedCurve: this.curve.shortName,
        };
        const jwk = jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatEC(parameters);
        jwk.crv = this.curve.shortName;
        try {
            if (jwk.d) {
                this.privateKey = await crypto.subtle.importKey('jwk', jwk, importParams, true, [
                    'sign',
                ]);
                jwk.d = undefined;
            }
            else {
                this.privateKey = undefined;
            }
            this.publicKey = await crypto.subtle.importKey('jwk', jwk, importParams, true, ['verify']);
        }
        catch (e) {
            throw new Error('Failed to import ECDSA key pair: ' + e);
        }
    }
    async exportParameters() {
        var _a;
        const exportKey = (_a = this.privateKey) !== null && _a !== void 0 ? _a : this.publicKey;
        if (!exportKey) {
            throw new Error('Key not present.');
        }
        let jwk;
        try {
            jwk = await crypto.subtle.exportKey('jwk', exportKey);
        }
        catch (e) {
            throw new Error('Failed to export ECDSA key pair: ' + e);
        }
        const parameters = jsonWebKeyFormatter_1.JsonWebKeyFormatter.parseEC(jwk);
        parameters.curve = { name: this.curve.name, oid: this.curve.oid };
        return parameters;
    }
    dispose() { }
}
class WebECDsa extends publicKeyAlgorithm_1.PublicKeyAlgorithm {
    constructor(name, hashAlgorithmName) {
        super(name, name, hashAlgorithmName);
    }
    createKeyPair() {
        return new WebECDsaKeyPair(this.name);
    }
    async generateKeyPair() {
        const ecdsaKey = new WebECDsaKeyPair(this.name);
        await ecdsaKey.generate();
        return ecdsaKey;
    }
    createSigner(keyPair) {
        if (!(keyPair instanceof WebECDsaKeyPair)) {
            throw new TypeError('ECDSA key pair object expected.');
        }
        const hashAlgorithm = WebECDsa.convertHashAlgorithmName(this.hashAlgorithmName);
        return new WebECDsaSignerVerifier(keyPair, hashAlgorithm);
    }
    createVerifier(keyPair) {
        if (!(keyPair instanceof WebECDsaKeyPair)) {
            throw new TypeError('ECDSA key pair object expected.');
        }
        const hashAlgorithm = WebECDsa.convertHashAlgorithmName(this.hashAlgorithmName);
        return new WebECDsaSignerVerifier(keyPair, hashAlgorithm);
    }
    static convertHashAlgorithmName(hashAlgorithmName) {
        return hashAlgorithmName.replace('SHA2-', 'SHA-');
    }
    /* @internal */
    static getSignatureLength(keySizeInBits) {
        // The signature is double the key size, but formatted as 2 bigints.
        // To each bigint add 4 for the length and 1 for a leading zero.
        const keySizeInBytes = Math.ceil(keySizeInBits / 8);
        return (4 + 1 + keySizeInBytes) * 2;
    }
}
exports.WebECDsa = WebECDsa;
WebECDsa.ecdsaSha2Nistp256 = 'ecdsa-sha2-nistp256';
WebECDsa.ecdsaSha2Nistp384 = 'ecdsa-sha2-nistp384';
WebECDsa.ecdsaSha2Nistp521 = 'ecdsa-sha2-nistp521';
WebECDsa.curves = ecdsaCurves_1.curves;
// eslint-disable-next-line @typescript-eslint/tslint/config
WebECDsa.KeyPair = WebECDsaKeyPair;
class WebECDsaSignerVerifier {
    constructor(keyPair, hashAlgorithm) {
        this.keyPair = keyPair;
        this.hashAlgorithm = hashAlgorithm;
    }
    get digestLength() {
        const curve = this.keyPair.curve;
        if (!curve) {
            return 0;
        }
        else {
            return WebECDsa.getSignatureLength(curve.keySize);
        }
    }
    async sign(data) {
        if (!this.keyPair.privateKey) {
            throw new Error('Private key not set.');
        }
        let signature = buffer_1.Buffer.from(await crypto.subtle.sign({ name: 'ECDSA', hash: { name: this.hashAlgorithm } }, this.keyPair.privateKey, data));
        const keySizeInBytes = Math.ceil(this.keyPair.curve.keySize / 8);
        if (signature.length !== 2 * keySizeInBytes) {
            throw new Error(`Unexpected signature length: ${signature.length}`);
        }
        // Reformat the signature integer bytes as required by SSH.
        const x = bigInt_1.BigInt.fromBytes(signature.slice(0, keySizeInBytes), { unsigned: true });
        const y = bigInt_1.BigInt.fromBytes(signature.slice(keySizeInBytes, signature.length), {
            unsigned: true,
        });
        const signatureWriter = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(this.digestLength));
        signatureWriter.writeBinary(x.toBytes({ unsigned: true, length: keySizeInBytes + 1 }));
        signatureWriter.writeBinary(y.toBytes({ unsigned: true, length: keySizeInBytes + 1 }));
        signature = signatureWriter.toBuffer();
        return signature;
    }
    async verify(data, signature) {
        if (!this.keyPair.publicKey) {
            throw new Error('Public key not set.');
        }
        // Reformat the signature integer bytes as required by the web crypto API.
        const signatureReader = new sshData_1.SshDataReader(signature);
        const x = signatureReader.readBigInt();
        const y = signatureReader.readBigInt();
        const keySizeInBytes = Math.ceil(this.keyPair.curve.keySize / 8);
        signature = buffer_1.Buffer.alloc(2 * keySizeInBytes);
        x.toBytes({ unsigned: true, length: keySizeInBytes }).copy(signature, 0);
        y.toBytes({ unsigned: true, length: keySizeInBytes }).copy(signature, keySizeInBytes);
        const result = await crypto.subtle.verify({ name: 'ECDSA', hash: { name: this.hashAlgorithm } }, this.keyPair.publicKey, signature, data);
        return result;
    }
    dispose() { }
}
//# sourceMappingURL=webECDsa.js.map

/***/ }),

/***/ 4522:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebEncryption = void 0;
const buffer_1 = __webpack_require__(30816);
const encryptionAlgorithm_1 = __webpack_require__(27867);
class WebEncryption extends encryptionAlgorithm_1.EncryptionAlgorithm {
    constructor(name, algorithmName, cipherMode, keySizeInBits) {
        super(name);
        this.algorithmName = algorithmName;
        this.cipherMode = cipherMode;
        this.keySizeInBits = keySizeInBits;
        this.blockSizeInBits = WebEncryption.getBlockSize(algorithmName);
    }
    get keyLength() {
        return this.keySizeInBits / 8;
    }
    get blockLength() {
        return this.blockSizeInBits / 8;
    }
    async createCipher(isEncryption, key, iv) {
        const cipher = new WebCipher(isEncryption, this.algorithmName, this.cipherMode, this.keySizeInBits, this.blockSizeInBits);
        await cipher.init(key, iv);
        return cipher;
    }
    static getBlockSize(algorithmName) {
        if (algorithmName === 'AES') {
            return 128;
        }
        else {
            throw new Error(`Unsupported encryption algorithm: ${algorithmName}`);
        }
    }
}
exports.WebEncryption = WebEncryption;
class WebCipher {
    constructor(isEncryption, algorithmName, cipherMode, keySizeInBits, blockSizeInBits) {
        this.isEncryption = isEncryption;
        this.algorithmName = algorithmName;
        this.cipherMode = cipherMode;
        this.keySizeInBits = keySizeInBits;
        this.blockSizeInBits = blockSizeInBits;
        this.tag = null;
        if (this.algorithmName === 'AES' && this.cipherMode === 'CTR') {
            this.transform = this.aesCtr.bind(this, isEncryption);
        }
        else if (this.algorithmName === 'AES' && this.cipherMode === 'CBC') {
            this.transform = this.aesCbc.bind(this, isEncryption);
        }
        else if (this.algorithmName === 'AES' && this.cipherMode === 'GCM') {
            this.transform = this.aesGcm.bind(this, isEncryption);
            this.associatedData = buffer_1.Buffer.alloc(4);
            this.decryptBuffer = buffer_1.Buffer.alloc(this.blockLength * 4);
        }
        else {
            throw new Error(`Unsupported encryption algorithm: ${this.algorithmName}-${this.cipherMode}`);
        }
    }
    get blockLength() {
        return this.blockSizeInBits / 8;
    }
    async init(key, iv) {
        try {
            const name = `${this.algorithmName}-${this.cipherMode}`;
            this.key = await crypto.subtle.importKey('raw', key, { name, length: this.keySizeInBits }, false, this.isEncryption ? ['encrypt'] : ['decrypt']);
        }
        catch (e) {
            throw new Error('Failed to initialize AES: ' + e);
        }
        if (this.cipherMode === 'GCM') {
            this.iv = buffer_1.Buffer.from(iv.slice(0, 12));
        }
        else {
            this.iv = buffer_1.Buffer.from(iv);
        }
    }
    async aesCtr(isEncryption, data) {
        if (data.length % this.blockLength !== 0) {
            const message = 'Encrypt/decrypt input has invalid length ' +
                `${data.length}, not a multiple of block size ${this.blockLength}.`;
            throw new Error(message);
        }
        let result;
        if (isEncryption) {
            result = buffer_1.Buffer.from(await crypto.subtle.encrypt({ name: 'AES-CTR', counter: this.iv, length: this.blockSizeInBits }, this.key, data));
        }
        else {
            result = buffer_1.Buffer.from(await crypto.subtle.decrypt({ name: 'AES-CTR', counter: this.iv, length: this.blockSizeInBits }, this.key, data));
        }
        if (result.length !== data.length) {
            const message = 'Result from encrypt/decrypt has invalid length ' +
                `${result.length}, expected ${data.length}.`;
            throw new Error(message);
        }
        // A single call to encrypt() or decrypt() internally increments the counter.
        // This code ensures those increments get preserved across multiple calls.
        const incrementCount = data.length / this.blockLength;
        for (let i = 0; i < incrementCount; i++) {
            // Increment the counter that is combined with the IV as a big-endian integer.
            // First increment the last byte, and if it reaches 0 then increment the
            // next-to-last byte, and so on.
            for (let k = this.iv.length - 1; k >= 0; k--) {
                this.iv[k] = this.iv[k] + 1;
                if (this.iv[k])
                    break;
            }
        }
        return result;
    }
    async aesCbc(isEncryption, data) {
        // TODO: Fix padding. Web crypto's AES-CBC uses padding by default,
        // which isn't compatible with SSH.
        if (isEncryption) {
            let result = buffer_1.Buffer.from(await crypto.subtle.encrypt({ name: 'AES-CBC', iv: this.iv }, this.key, data));
            result = result.slice(0, data.length);
            return result;
        }
        else {
            return buffer_1.Buffer.from(await crypto.subtle.decrypt({ name: 'AES-CBC', iv: this.iv }, this.key, data));
        }
    }
    async aesGcm(isEncryption, data) {
        if (data.length % this.blockLength !== 0) {
            const message = 'Encrypt/decrypt input has invalid length ' +
                `${data.length}, not a multiple of block size ${this.blockLength}.`;
            throw new Error(message);
        }
        // Associated data is the 32-bit packet length.
        const packetLength = data.length;
        this.associatedData[0] = packetLength >>> 24;
        this.associatedData[1] = packetLength >>> 16;
        this.associatedData[2] = packetLength >>> 8;
        this.associatedData[3] = packetLength;
        let result;
        if (isEncryption) {
            result = buffer_1.Buffer.from(await crypto.subtle.encrypt({
                name: 'AES-GCM',
                iv: this.iv,
                additionalData: this.associatedData,
                tagLength: this.digestLength * 8, // tagLength is in bits, not bytes
            }, this.key, data));
            this.tag = result.slice(result.length - this.digestLength);
            result = result.slice(0, result.length - this.digestLength);
        }
        else {
            if (!this.tag) {
                throw new Error('AES-GCM tag was not set before decrypting.');
            }
            // The AES-GCM decrypt API expects the ciphertext and tag to be in a contiguous buffer.
            // Re-use a temporary buffer for that purpose, expanding it as needed.
            const inputLength = data.length + this.digestLength;
            if (this.decryptBuffer.length < inputLength) {
                let newLength = this.decryptBuffer.length * 2;
                while (newLength < inputLength)
                    newLength *= 2;
                this.decryptBuffer = buffer_1.Buffer.alloc(newLength);
            }
            const input = this.decryptBuffer.slice(0, inputLength);
            data.copy(input, 0);
            this.tag.copy(input, data.length);
            result = buffer_1.Buffer.from(await crypto.subtle.decrypt({
                name: 'AES-GCM',
                iv: this.iv,
                additionalData: this.associatedData,
                tagLength: this.digestLength * 8, // tagLength is in bits, not bytes
            }, this.key, input));
        }
        if (result.length !== data.length) {
            const message = 'Result from encrypt/decrypt has invalid length ' +
                `${result.length}, expected ${data.length}.`;
            throw new Error(message);
        }
        // Increment the counter (last 8 bytes of the iv/nonce) as a big-endian integer.
        // First increment the last byte, and if it reaches 0 then increment the
        // next-to-last byte, and so on.
        let k = 12;
        while (--k >= 4) {
            this.iv[k]++;
            if (this.iv[k] !== 0) {
                break;
            }
        }
        return result;
    }
    get digestLength() {
        return 16;
    }
    get authenticatedEncryption() {
        return this.cipherMode === 'GCM';
    }
    async sign(data) {
        if (!this.tag) {
            throw new Error('AES-GCM tag was not obtained by encrypting.');
        }
        return this.tag;
    }
    async verify(data, signature) {
        if (signature.length !== this.digestLength) {
            throw new Error('Incorrect AES-GCM tag length.');
        }
        this.tag = signature;
        return true;
    }
    dispose() { }
}
//# sourceMappingURL=webEncryption.js.map

/***/ }),

/***/ 25914:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebHmac = void 0;
const buffer_1 = __webpack_require__(30816);
const hmacAlgorithm_1 = __webpack_require__(33307);
class WebHmac extends hmacAlgorithm_1.HmacAlgorithm {
    constructor(name, algorithmName, encryptThenMac = false) {
        super(name, algorithmName, WebHmac.getHashKeyLength(algorithmName), WebHmac.getHashDigestLength(algorithmName));
        this.encryptThenMac = encryptThenMac;
    }
    async createSigner(key) {
        const hmac = new WebSignerVerifier(this.algorithmName, true, this.digestLength, this.encryptThenMac);
        await hmac.init(key);
        return hmac;
    }
    async createVerifier(key) {
        const hmac = new WebSignerVerifier(this.algorithmName, false, this.digestLength, this.encryptThenMac);
        await hmac.init(key);
        return hmac;
    }
    static getHashKeyLength(hashAlgorithmName) {
        if (hashAlgorithmName === 'SHA2-512')
            return 512 / 8;
        if (hashAlgorithmName === 'SHA2-384')
            return 384 / 8;
        if (hashAlgorithmName === 'SHA2-256')
            return 256 / 8;
        throw new Error(`Unsupported hash algorithm: ${hashAlgorithmName}`);
    }
    static getHashDigestLength(hashAlgorithmName) {
        return this.getHashKeyLength(hashAlgorithmName);
    }
    static getWebHashAlgorithmName(hashAlgorithmName) {
        if (hashAlgorithmName === 'SHA2-512')
            return 'SHA-512';
        if (hashAlgorithmName === 'SHA2-384')
            return 'SHA-384';
        if (hashAlgorithmName === 'SHA2-256')
            return 'SHA-256';
        throw new Error(`Unsupported hash algorithm: ${hashAlgorithmName}`);
    }
}
exports.WebHmac = WebHmac;
class WebSignerVerifier {
    constructor(algorithmName, isSigning, digestLength, encryptThenMac) {
        this.algorithmName = algorithmName;
        this.isSigning = isSigning;
        this.digestLength = digestLength;
        this.encryptThenMac = encryptThenMac;
    }
    async init(key) {
        try {
            const name = this.algorithmName.replace('SHA2-', 'SHA-');
            this.key = await crypto.subtle.importKey('raw', key, { name: 'HMAC', hash: { name } }, false, this.isSigning ? ['sign'] : ['verify']);
        }
        catch (e) {
            throw new Error('Failed to initialize HMAC: ' + e);
        }
    }
    async sign(data) {
        return buffer_1.Buffer.from(await crypto.subtle.sign({ name: 'HMAC', hash: { name: this.algorithmName } }, this.key, data));
    }
    async verify(data, signature) {
        return await crypto.subtle.verify({ name: 'HMAC', hash: { name: this.algorithmName } }, this.key, signature, data);
    }
    dispose() { }
}
//# sourceMappingURL=webHmac.js.map

/***/ }),

/***/ 46554:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebECDiffieHellman = exports.WebDiffieHellman = void 0;
const buffer_1 = __webpack_require__(30816);
const diffie_hellman_1 = __webpack_require__(82834);
const keyExchangeAlgorithm_1 = __webpack_require__(84468);
const webHmac_1 = __webpack_require__(25914);
const bigInt_1 = __webpack_require__(30404);
const jsonWebKeyFormatter_1 = __webpack_require__(60453);
class WebDiffieHellman extends keyExchangeAlgorithm_1.KeyExchangeAlgorithm {
    constructor(name, keySizeInBits, hashAlgorithmName) {
        super(name, keySizeInBits, hashAlgorithmName, webHmac_1.WebHmac.getHashDigestLength(hashAlgorithmName));
    }
    createKeyExchange() {
        return new WebDiffieHellmanKex(this.keySizeInBits, webHmac_1.WebHmac.getWebHashAlgorithmName(this.hashAlgorithmName), this.hashDigestLength);
    }
}
exports.WebDiffieHellman = WebDiffieHellman;
class WebDiffieHellmanKex {
    constructor(bitLength, hashAlgorithmName, digestLength) {
        this.hashAlgorithmName = hashAlgorithmName;
        this.digestLength = digestLength;
        switch (bitLength) {
            case 1024:
                this.dh = (0, diffie_hellman_1.getDiffieHellman)('modp2');
                break;
            case 2048:
                this.dh = (0, diffie_hellman_1.getDiffieHellman)('modp14');
                break;
            case 4096:
                this.dh = (0, diffie_hellman_1.getDiffieHellman)('modp16');
                break;
            default:
                throw new Error('Invalid DH bit length.');
        }
    }
    startKeyExchange() {
        const exchangeValueKeys = this.dh.generateKeys();
        const exchangeValue = bigInt_1.BigInt.fromBytes(exchangeValueKeys, { unsigned: true }).toBytes();
        return Promise.resolve(exchangeValue);
    }
    decryptKeyExchange(exchangeValue) {
        const key = this.dh.computeSecret(exchangeValue);
        const sharedSecret = bigInt_1.BigInt.fromBytes(key, { unsigned: true }).toBytes();
        return Promise.resolve(sharedSecret);
    }
    async sign(data) {
        const hashBuffer = await crypto.subtle.digest(this.hashAlgorithmName, data);
        return buffer_1.Buffer.from(hashBuffer);
    }
    dispose() { }
}
class WebECDiffieHellman extends keyExchangeAlgorithm_1.KeyExchangeAlgorithm {
    constructor(name, keySizeInBits, hashAlgorithmName) {
        super(name, keySizeInBits, hashAlgorithmName, webHmac_1.WebHmac.getHashDigestLength(hashAlgorithmName));
    }
    createKeyExchange() {
        return new WebECDiffieHellmanKex(this.keySizeInBits, webHmac_1.WebHmac.getWebHashAlgorithmName(this.hashAlgorithmName), this.hashDigestLength);
    }
}
exports.WebECDiffieHellman = WebECDiffieHellman;
class WebECDiffieHellmanKex {
    constructor(bitLength, hashAlgorithmName, digestLength) {
        this.bitLength = bitLength;
        this.hashAlgorithmName = hashAlgorithmName;
        this.digestLength = digestLength;
        this.algorithm = {
            name: 'ECDH',
            namedCurve: 'P-' + bitLength,
        };
    }
    async startKeyExchange() {
        if (!this.keyPair) {
            this.keyPair = await crypto.subtle.generateKey(this.algorithm, true, // exportable
            ['deriveBits']);
        }
        const jwk = await crypto.subtle.exportKey('jwk', this.keyPair.publicKey);
        const ec = jsonWebKeyFormatter_1.JsonWebKeyFormatter.parseEC(jwk);
        const length = Math.ceil(this.bitLength / 8);
        const publicKeyBytes = buffer_1.Buffer.alloc(1 + length * 2);
        publicKeyBytes[0] = 4;
        ec.x.toBytes({ unsigned: true, length }).copy(publicKeyBytes, 1);
        ec.y.toBytes({ unsigned: true, length }).copy(publicKeyBytes, 1 + length);
        return buffer_1.Buffer.from(publicKeyBytes);
    }
    async decryptKeyExchange(exchangeValue) {
        if (!this.keyPair) {
            throw new Error('Key exchange not started.');
        }
        const xy = exchangeValue;
        const jwk = jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatEC({
            curve: { name: this.algorithm.namedCurve },
            x: bigInt_1.BigInt.fromBytes(xy.slice(1, 1 + (xy.length - 1) / 2), { unsigned: true }),
            y: bigInt_1.BigInt.fromBytes(xy.slice(1 + (xy.length - 1) / 2), { unsigned: true }),
        });
        const otherPublicKey = await crypto.subtle.importKey('jwk', jwk, this.algorithm, false, []);
        const sharedSecretBytes = buffer_1.Buffer.from(await crypto.subtle.deriveBits(Object.assign(Object.assign({}, this.algorithm), { public: otherPublicKey }), this.keyPair.privateKey, Math.ceil(this.bitLength / 8) * 8));
        const sharedSecret = bigInt_1.BigInt.fromBytes(sharedSecretBytes, { unsigned: true }).toBytes();
        return sharedSecret;
    }
    async sign(data) {
        const hashBuffer = await crypto.subtle.digest(this.hashAlgorithmName, data);
        return buffer_1.Buffer.from(hashBuffer);
    }
    dispose() { }
}
//# sourceMappingURL=webKeyExchange.js.map

/***/ }),

/***/ 81685:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebRandom = void 0;
class WebRandom {
    getBytes(buffer) {
        crypto.getRandomValues(buffer);
    }
}
exports.WebRandom = WebRandom;
//# sourceMappingURL=webRandom.js.map

/***/ }),

/***/ 52001:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebRsa = void 0;
const buffer_1 = __webpack_require__(30816);
const publicKeyAlgorithm_1 = __webpack_require__(59009);
const webHmac_1 = __webpack_require__(25914);
const sshData_1 = __webpack_require__(67914);
const jsonWebKeyFormatter_1 = __webpack_require__(60453);
// Note this is exposed as an inner-class property below: `WebRsa.KeyPair`.
// TypeScript requires that the class definition comes first.
class WebRsaKeyPair {
    /* @internal */
    constructor(hashAlgorithm) {
        this.hashAlgorithm = hashAlgorithm;
        this.comment = null;
    }
    get hasPublicKey() {
        return !!this.publicKey;
    }
    get hasPrivateKey() {
        return !!this.privateKey;
    }
    get keyAlgorithmName() {
        return WebRsa.keyAlgorithmName;
    }
    async generate(keySizeInBits) {
        keySizeInBits = keySizeInBits !== null && keySizeInBits !== void 0 ? keySizeInBits : WebRsaKeyPair.defaultKeySize;
        try {
            const keyGenParams = {
                name: 'RSASSA-PKCS1-v1_5',
                modulusLength: keySizeInBits,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                hash: { name: this.hashAlgorithm },
            };
            const keyPair = (await crypto.subtle.generateKey(keyGenParams, true, ['sign', 'verify']));
            this.publicKey = keyPair.publicKey;
            this.privateKey = keyPair.privateKey;
        }
        catch (e) {
            throw new Error('Failed to generate RSA key pair: ' + e);
        }
    }
    async setPublicKeyBytes(keyBytes) {
        if (!keyBytes) {
            throw new TypeError('Buffer is required.');
        }
        // Read public key in SSH format.
        const reader = new sshData_1.SshDataReader(keyBytes);
        const algorithmName = reader.readString('ascii');
        if (algorithmName !== this.keyAlgorithmName &&
            algorithmName !== WebRsa.rsaWithSha256 &&
            algorithmName !== WebRsa.rsaWithSha512) {
            throw new Error(`Invalid RSA key algorithm: ${algorithmName}`);
        }
        const exponent = reader.readBigInt();
        const modulus = reader.readBigInt();
        // Import public key in JWK format.
        const jwk = jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatRsa({ modulus, exponent }, false);
        jwk.alg = 'RS' + this.hashAlgorithm.replace('SHA-', '');
        jwk.key_ops = ['verify'];
        try {
            const importParams = {
                name: 'RSASSA-PKCS1-v1_5',
                hash: { name: this.hashAlgorithm },
            };
            this.publicKey = await crypto.subtle.importKey('jwk', jwk, importParams, true, ['verify']);
        }
        catch (e) {
            throw new Error('Failed to import RSA public key: ' + e);
        }
    }
    async getPublicKeyBytes(algorithmName) {
        if (!this.publicKey) {
            return null;
        }
        if (!algorithmName) {
            algorithmName = this.keyAlgorithmName;
        }
        // Export public key in JWK format.
        let jwk;
        try {
            jwk = await crypto.subtle.exportKey('jwk', this.publicKey);
        }
        catch (e) {
            throw new Error('Failed to export RSA public key: ' + e);
        }
        const { modulus, exponent } = jsonWebKeyFormatter_1.JsonWebKeyFormatter.parseRsa(jwk, false);
        // Write public key in SSH format.
        const keyBuffer = buffer_1.Buffer.alloc(512);
        const keyWriter = new sshData_1.SshDataWriter(keyBuffer);
        keyWriter.writeString(algorithmName, 'ascii');
        keyWriter.writeBigInt(exponent);
        keyWriter.writeBigInt(modulus);
        const keyBytes = keyWriter.toBuffer();
        return keyBytes;
    }
    async importParameters(parameters) {
        const privateJwk = parameters.d ? jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatRsa(parameters, true) : null;
        const publicJwk = jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatRsa(parameters, false);
        const importParams = {
            name: 'RSASSA-PKCS1-v1_5',
            hash: { name: this.hashAlgorithm },
        };
        try {
            this.publicKey = await crypto.subtle.importKey('jwk', publicJwk, importParams, true, [
                'verify',
            ]);
            if (privateJwk) {
                this.privateKey = await crypto.subtle.importKey('jwk', privateJwk, importParams, true, [
                    'sign',
                ]);
            }
            else {
                this.privateKey = undefined;
            }
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            throw new Error('Failed to import RSA key pair: ' + e.message);
        }
    }
    async exportParameters() {
        var _a;
        if (!this.publicKey)
            throw new Error('Public key not set.');
        let jwk;
        try {
            jwk = await crypto.subtle.exportKey('jwk', (_a = this.privateKey) !== null && _a !== void 0 ? _a : this.publicKey);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            throw new Error('Failed to export RSA public key: ' + e.message);
        }
        return jsonWebKeyFormatter_1.JsonWebKeyFormatter.parseRsa(jwk, !!this.privateKey);
    }
    dispose() { }
}
WebRsaKeyPair.defaultKeySize = 2048;
class WebRsa extends publicKeyAlgorithm_1.PublicKeyAlgorithm {
    constructor(name, hashAlgorithmName) {
        super(name, WebRsa.keyAlgorithmName, hashAlgorithmName);
    }
    createKeyPair() {
        const hashAlgorithm = WebRsa.convertHashAlgorithmName(this.hashAlgorithmName);
        return new WebRsaKeyPair(hashAlgorithm);
    }
    async generateKeyPair(keySizeInBits) {
        const hashAlgorithm = WebRsa.convertHashAlgorithmName(this.hashAlgorithmName);
        const rsaKey = new WebRsaKeyPair(hashAlgorithm);
        await rsaKey.generate(keySizeInBits);
        return rsaKey;
    }
    createSigner(keyPair) {
        if (!(keyPair instanceof WebRsaKeyPair)) {
            throw new TypeError('RSA key pair object expected.');
        }
        const hashAlgorithm = WebRsa.convertHashAlgorithmName(this.hashAlgorithmName);
        return new WebRsaSignerVerifier(keyPair, hashAlgorithm, webHmac_1.WebHmac.getHashDigestLength(this.hashAlgorithmName));
    }
    createVerifier(keyPair) {
        if (!(keyPair instanceof WebRsaKeyPair)) {
            throw new TypeError('RSA key pair object expected.');
        }
        const hashAlgorithm = WebRsa.convertHashAlgorithmName(this.hashAlgorithmName);
        return new WebRsaSignerVerifier(keyPair, hashAlgorithm, webHmac_1.WebHmac.getHashDigestLength(this.hashAlgorithmName));
    }
    static convertHashAlgorithmName(hashAlgorithmName) {
        return hashAlgorithmName.replace('SHA2-', 'SHA-');
    }
}
exports.WebRsa = WebRsa;
WebRsa.keyAlgorithmName = 'ssh-rsa';
WebRsa.rsaWithSha256 = 'rsa-sha2-256';
WebRsa.rsaWithSha512 = 'rsa-sha2-512';
// eslint-disable-next-line @typescript-eslint/tslint/config
WebRsa.KeyPair = WebRsaKeyPair;
class WebRsaSignerVerifier {
    constructor(keyPair, hashAlgorithm, digestLength) {
        this.keyPair = keyPair;
        this.hashAlgorithm = hashAlgorithm;
        this.digestLength = digestLength;
    }
    async sign(data) {
        if (!this.keyPair.privateKey) {
            throw new Error('Private key not set.');
        }
        await this.convertKeyHashAlgorithm();
        const signature = buffer_1.Buffer.from(await crypto.subtle.sign('RSASSA-PKCS1-v1_5', this.keyPair.privateKey, data));
        return signature;
    }
    async verify(data, signature) {
        if (!this.keyPair.publicKey) {
            throw new Error('Public key not set.');
        }
        await this.convertKeyHashAlgorithm();
        const result = await crypto.subtle.verify('RSASSA-PKCS1-v1_5', this.keyPair.publicKey, signature, data);
        return result;
    }
    async convertKeyHashAlgorithm() {
        if (this.keyPair.hashAlgorithm !== this.hashAlgorithm) {
            const parameters = await this.keyPair.exportParameters();
            this.keyPair = new WebRsaKeyPair(this.hashAlgorithm);
            await this.keyPair.importParameters(parameters);
        }
    }
    dispose() { }
}
//# sourceMappingURL=webRsa.js.map

/***/ }),

/***/ 72917:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectDisposedError = exports.SshChannelError = exports.SshReconnectError = exports.SshConnectionError = void 0;
class SshConnectionError extends Error {
    constructor(message, reason) {
        super(message);
        this.reason = reason;
    }
}
exports.SshConnectionError = SshConnectionError;
class SshReconnectError extends Error {
    constructor(message, reason) {
        super(message);
        this.reason = reason;
    }
}
exports.SshReconnectError = SshReconnectError;
class SshChannelError extends Error {
    constructor(message, reason) {
        super(message);
        this.reason = reason;
    }
}
exports.SshChannelError = SshChannelError;
class ObjectDisposedError extends Error {
    constructor(objectOrMessage) {
        var _a, _b;
        let message;
        if (typeof objectOrMessage === 'string') {
            // Custom message.
            message = objectOrMessage;
        }
        else if (typeof objectOrMessage === 'function') {
            // Constructor function (class name).
            message = objectOrMessage.name + ' disposed.';
        }
        else {
            // Disposable object - get its class name.
            message = ((_b = (_a = objectOrMessage === null || objectOrMessage === void 0 ? void 0 : objectOrMessage.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'Object ') + ' disposed.';
        }
        super(message);
    }
}
exports.ObjectDisposedError = ObjectDisposedError;
//# sourceMappingURL=errors.js.map

/***/ }),

/***/ 28047:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshAuthenticatingEventArgs = exports.SshAuthenticationType = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
/**
 * Indicates the type of authentication being requested by an SSH client or server when an
 * `SshSession.authenticating` event is raised.
 */
var SshAuthenticationType;
(function (SshAuthenticationType) {
    /**
     * The client is attempting to authenticate without any credentials, or with only a
     * username, or is merely checking what authentication methods are supported by the server.
     *
     * This event is raised by an `SshServerSession` when the client requests authentication
     * using the "none" method. With this method, all of the credential properties in the
     * `SshAuthenticatingEventArgs` are null.
     *
     * If the server app wishes to allow the client to authenticate with only a username, it may
     * return a principal for the user. Othwerwise, the "none" authentication method fails, and
     * the client may make a follow-up attempt to authenticate _with_ credentials.
     */
    SshAuthenticationType[SshAuthenticationType["clientNone"] = 0] = "clientNone";
    /**
     * The client is attempting to authenticate with a client host public key.
     *
     * This event is raised by an `SshServerSession` when the client requests authentication
     * using the "hostbased" method. The authentication handler must verify that the public key
     * actually belongs to the client host name, _and_ that the network address the client
     * connected from matches that host name, before returning a user principal to indicate
     * successful authentication.
     */
    SshAuthenticationType[SshAuthenticationType["clientHostBased"] = 1] = "clientHostBased";
    /**
     * The client is attempting to authenticate with a username and password credential.
     *
     * This event is raised by an `SshServerSession` when the client requests authentication
     * using the "password" method. The authentication handler must verify that the username
     * and password match known credentials on the server, before returning a user principal
     * to indicate successful authentication.
     */
    SshAuthenticationType[SshAuthenticationType["clientPassword"] = 2] = "clientPassword";
    /**
     * The client is querying whether authentication may be possible for a specified username and
     * public key without yet proving they have the private key.
     *
     * This event is raised by an `SshServerSession` when the client requests authentication
     * using the "publickey" method _without_ providing a signature. The authentication handler
     * must verify that the username and public key match known credentials on the server. If
     * they match, an _unauthenticated_ principal should be returned. That indicates to the
     * client that they may proceed to actually authenticate using that username and public key.
     */
    SshAuthenticationType[SshAuthenticationType["clientPublicKeyQuery"] = 3] = "clientPublicKeyQuery";
    /**
     * The client is attempting to authenticate with a username and public key credential.
     *
     * This event is raised by an `SshServerSession` when the client requests authentication
     * using the "publickey" method, including a signature that proves they have the private
     * key. The authentication handler must verify that the username and public key match known
     * credentials on the server, before returning a user principal to indicate successful
     * authentication.
     */
    SshAuthenticationType[SshAuthenticationType["clientPublicKey"] = 4] = "clientPublicKey";
    /**
     * The server is attempting to authenticate with a public key credential.
     *
     * This event is raised by an `SshClientSession` when the server requests
     * authentication by providing a signature that proves it has the private key. The client
     * authentication handler must verify that the public key matches known public key(s) for
     * that server. Or if not known (often the case for the first time connecting to that server)
     * it may prompt the user to consent, and then save the public key for later reference. To
     * indicate successful authentication, the client authentication handler returns a principal
     * that represents the server.
     */
    SshAuthenticationType[SshAuthenticationType["serverPublicKey"] = 10] = "serverPublicKey";
})(SshAuthenticationType = exports.SshAuthenticationType || (exports.SshAuthenticationType = {}));
/**
 * Arguments for the `SshSession.Authenticating` event that is raised when a client
 * or server is requesting authentication.
 *
 * See `SshAuthenticationType` for a description of the different authentication methods and
 * how they map to properties in this event-args object.
 *
 * After validating the credentials, the event handler must set the `authenticationPromise`
 * property to a task that resolves to a principal object to indicate successful authentication.
 * That principal will then be associated with the sesssion as the `SshSession.principal` property.
 */
class SshAuthenticatingEventArgs {
    constructor(authenticationType, { username, password, publicKey, clientHostname, clientUsername, }, cancellation) {
        this.authenticationType = authenticationType;
        const validate = ({ usernameRequired, passwordRequired, publicKeyRequired, clientHostnameRequired, clientUsernameRequired, }) => {
            // This is intentionally not checking for empty strings. The authentication handler
            // should determine whether any non-null string values are valid.
            if ((typeof username === 'string') !== !!usernameRequired)
                return false;
            if ((typeof password === 'string') !== !!passwordRequired)
                return false;
            if (!!publicKey !== !!publicKeyRequired)
                return false;
            if ((typeof clientHostname === 'string') !== !!clientHostnameRequired)
                return false;
            if ((typeof clientUsername === 'string') !== !!clientUsernameRequired)
                return false;
            return true;
        };
        let valid;
        switch (authenticationType) {
            case SshAuthenticationType.clientNone:
                valid = validate({ usernameRequired: true });
                break;
            case SshAuthenticationType.clientHostBased:
                valid = validate({
                    usernameRequired: true,
                    publicKeyRequired: true,
                    clientHostnameRequired: true,
                    clientUsernameRequired: true,
                });
                break;
            case SshAuthenticationType.clientPassword:
                valid = validate({ usernameRequired: true, passwordRequired: true });
                break;
            case SshAuthenticationType.clientPublicKeyQuery:
            case SshAuthenticationType.clientPublicKey:
                valid = validate({ usernameRequired: true, publicKeyRequired: true });
                break;
            case SshAuthenticationType.serverPublicKey:
                valid = validate({ publicKeyRequired: true });
                break;
            default:
                throw new Error(`Invalid authentication type: ${authenticationType}`);
        }
        if (!valid) {
            throw new Error(`Invalid arguments for authentication type: ${authenticationType}`);
        }
        this.username = username !== null && username !== void 0 ? username : null;
        this.password = password !== null && password !== void 0 ? password : null;
        this.publicKey = publicKey !== null && publicKey !== void 0 ? publicKey : null;
        this.clientHostname = clientHostname !== null && clientHostname !== void 0 ? clientHostname : null;
        this.clientUsername = clientUsername !== null && clientUsername !== void 0 ? clientUsername : null;
        this.cancellationValue = cancellation !== null && cancellation !== void 0 ? cancellation : vscode_jsonrpc_1.CancellationToken.None;
    }
    /**
     * Gets a token that is cancelled if the session ends before the authentication handler
     * completes.
     */
    get cancellation() {
        return this.cancellationValue;
    }
    /* @internal */
    set cancellation(value) {
        this.cancellationValue = value;
    }
    toString() {
        if (this.password) {
            return `${this.username ? '"' + this.username + '" ' : ''}[password]`;
        }
        else if (this.publicKey) {
            return `${this.username ? '"' + this.username + '" ' : ''}[${this.publicKey.keyAlgorithmName}]`;
        }
        else {
            return `"${this.username}"`;
        }
    }
}
exports.SshAuthenticatingEventArgs = SshAuthenticatingEventArgs;
//# sourceMappingURL=sshAuthenticatingEventArgs.js.map

/***/ }),

/***/ 83229:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshChannelClosedEventArgs = void 0;
class SshChannelClosedEventArgs {
    constructor(exitStatusOrSignalOrError, errorMessage) {
        if (typeof exitStatusOrSignalOrError === 'number') {
            this.exitStatus = exitStatusOrSignalOrError;
        }
        else if (typeof exitStatusOrSignalOrError === 'string') {
            this.exitSignal = exitStatusOrSignalOrError;
            this.errorMessage = errorMessage;
        }
        else if (exitStatusOrSignalOrError instanceof Error) {
            this.error = exitStatusOrSignalOrError;
        }
    }
}
exports.SshChannelClosedEventArgs = SshChannelClosedEventArgs;
//# sourceMappingURL=sshChannelClosedEventArgs.js.map

/***/ }),

/***/ 56442:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshChannelOpeningEventArgs = void 0;
const connectionMessages_1 = __webpack_require__(45757);
class SshChannelOpeningEventArgs {
    constructor(request, channel, isRemoteRequest) {
        this.request = request;
        this.channel = channel;
        this.isRemoteRequest = isRemoteRequest;
        this.failureReason = connectionMessages_1.SshChannelOpenFailureReason.none;
        this.failureDescription = null;
        if (!request)
            throw new TypeError('A channel open message is required.');
        if (!channel)
            throw new TypeError('A channel is required.');
    }
    toString() {
        return `${this.channel.toString()}${this.failureReason ? ' ' + connectionMessages_1.SshChannelOpenFailureReason[this.failureReason] : ''}`;
    }
}
exports.SshChannelOpeningEventArgs = SshChannelOpeningEventArgs;
//# sourceMappingURL=sshChannelOpeningEventArgs.js.map

/***/ }),

/***/ 96002:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshRequestEventArgs = void 0;
class SshRequestEventArgs {
    constructor(requestType, request, principal) {
        this.requestType = requestType;
        this.request = request;
        this.principal = principal;
    }
    toString() {
        return `RequestType: ${this.requestType}` + this.request ? ` Request: ${this.request}` : '';
    }
}
exports.SshRequestEventArgs = SshRequestEventArgs;
//# sourceMappingURL=sshRequestEventArgs.js.map

/***/ }),

/***/ 13068:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshSessionClosedEventArgs = void 0;
const transportMessages_1 = __webpack_require__(90818);
class SshSessionClosedEventArgs {
    constructor(reason, message, error) {
        this.reason = reason;
        this.message = message;
        this.error = error;
        if (!message)
            throw new TypeError('A disconnect message is required.');
    }
    toString() {
        return `${transportMessages_1.SshDisconnectReason[this.reason]}: ${this.message}`;
    }
}
exports.SshSessionClosedEventArgs = SshSessionClosedEventArgs;
//# sourceMappingURL=sshSessionClosedEventArgs.js.map

/***/ }),

/***/ 92126:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectDisposedError = exports.SshReconnectError = exports.SshConnectionError = exports.SshChannelError = exports.BigInt = exports.DerWriter = exports.DerReader = exports.formatBuffer = exports.SshDataWriter = exports.SshDataReader = exports.ECDsa = exports.Rsa = exports.Encryption = exports.HmacAlgorithm = exports.EncryptionAlgorithm = exports.PublicKeyAlgorithm = exports.KeyExchangeAlgorithm = exports.SshAlgorithms = exports.CommandRequestMessage = exports.ChannelRequestType = exports.ChannelRequestMessage = exports.ChannelOpenMessage = exports.SshChannelOpenFailureReason = exports.SshReconnectFailureReason = exports.SshDisconnectReason = exports.SessionRequestFailureMessage = exports.SessionRequestSuccessMessage = exports.DebugMessage = exports.SessionRequestMessage = exports.SshMessage = exports.SshChannelClosedEventArgs = exports.SshSessionClosedEventArgs = exports.SshChannelOpeningEventArgs = exports.SshRequestEventArgs = exports.SshAuthenticatingEventArgs = exports.SshAuthenticationType = exports.serviceActivation = exports.SshService = exports.SshRpcMessageStream = exports.WebSocketStream = exports.NodeStream = exports.BaseStream = exports.SshStream = exports.SshChannel = exports.SshServerSession = exports.SshClientSession = exports.SshSession = exports.SshVersionInfo = exports.SshProtocolExtensionNames = exports.SshSessionConfiguration = void 0;
exports.SshTraceEventIds = exports.TraceLevel = exports.MultiChannelStream = exports.SessionContour = exports.ChannelMetrics = exports.SessionMetrics = exports.Queue = exports.Semaphore = exports.PromiseCompletionSource = exports.CancellationError = exports.CancellationTokenSource = exports.CancellationToken = void 0;
var sshSessionConfiguration_1 = __webpack_require__(97183);
Object.defineProperty(exports, "SshSessionConfiguration", ({ enumerable: true, get: function () { return sshSessionConfiguration_1.SshSessionConfiguration; } }));
Object.defineProperty(exports, "SshProtocolExtensionNames", ({ enumerable: true, get: function () { return sshSessionConfiguration_1.SshProtocolExtensionNames; } }));
var sshVersionInfo_1 = __webpack_require__(87505);
Object.defineProperty(exports, "SshVersionInfo", ({ enumerable: true, get: function () { return sshVersionInfo_1.SshVersionInfo; } }));
var sshSession_1 = __webpack_require__(7395);
Object.defineProperty(exports, "SshSession", ({ enumerable: true, get: function () { return sshSession_1.SshSession; } }));
var sshClientSession_1 = __webpack_require__(51485);
Object.defineProperty(exports, "SshClientSession", ({ enumerable: true, get: function () { return sshClientSession_1.SshClientSession; } }));
var sshServerSession_1 = __webpack_require__(71410);
Object.defineProperty(exports, "SshServerSession", ({ enumerable: true, get: function () { return sshServerSession_1.SshServerSession; } }));
var sshChannel_1 = __webpack_require__(34756);
Object.defineProperty(exports, "SshChannel", ({ enumerable: true, get: function () { return sshChannel_1.SshChannel; } }));
var sshStream_1 = __webpack_require__(2656);
Object.defineProperty(exports, "SshStream", ({ enumerable: true, get: function () { return sshStream_1.SshStream; } }));
var streams_1 = __webpack_require__(569);
Object.defineProperty(exports, "BaseStream", ({ enumerable: true, get: function () { return streams_1.BaseStream; } }));
Object.defineProperty(exports, "NodeStream", ({ enumerable: true, get: function () { return streams_1.NodeStream; } }));
Object.defineProperty(exports, "WebSocketStream", ({ enumerable: true, get: function () { return streams_1.WebSocketStream; } }));
var sshRpcMessageStream_1 = __webpack_require__(66521);
Object.defineProperty(exports, "SshRpcMessageStream", ({ enumerable: true, get: function () { return sshRpcMessageStream_1.SshRpcMessageStream; } }));
var sshService_1 = __webpack_require__(90447);
Object.defineProperty(exports, "SshService", ({ enumerable: true, get: function () { return sshService_1.SshService; } }));
var serviceActivation_1 = __webpack_require__(34670);
Object.defineProperty(exports, "serviceActivation", ({ enumerable: true, get: function () { return serviceActivation_1.serviceActivation; } }));
var sshAuthenticatingEventArgs_1 = __webpack_require__(28047);
Object.defineProperty(exports, "SshAuthenticationType", ({ enumerable: true, get: function () { return sshAuthenticatingEventArgs_1.SshAuthenticationType; } }));
Object.defineProperty(exports, "SshAuthenticatingEventArgs", ({ enumerable: true, get: function () { return sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs; } }));
var sshRequestEventArgs_1 = __webpack_require__(96002);
Object.defineProperty(exports, "SshRequestEventArgs", ({ enumerable: true, get: function () { return sshRequestEventArgs_1.SshRequestEventArgs; } }));
var sshChannelOpeningEventArgs_1 = __webpack_require__(56442);
Object.defineProperty(exports, "SshChannelOpeningEventArgs", ({ enumerable: true, get: function () { return sshChannelOpeningEventArgs_1.SshChannelOpeningEventArgs; } }));
var sshSessionClosedEventArgs_1 = __webpack_require__(13068);
Object.defineProperty(exports, "SshSessionClosedEventArgs", ({ enumerable: true, get: function () { return sshSessionClosedEventArgs_1.SshSessionClosedEventArgs; } }));
var sshChannelClosedEventArgs_1 = __webpack_require__(83229);
Object.defineProperty(exports, "SshChannelClosedEventArgs", ({ enumerable: true, get: function () { return sshChannelClosedEventArgs_1.SshChannelClosedEventArgs; } }));
var sshMessage_1 = __webpack_require__(285);
Object.defineProperty(exports, "SshMessage", ({ enumerable: true, get: function () { return sshMessage_1.SshMessage; } }));
var transportMessages_1 = __webpack_require__(90818);
Object.defineProperty(exports, "SessionRequestMessage", ({ enumerable: true, get: function () { return transportMessages_1.SessionRequestMessage; } }));
Object.defineProperty(exports, "DebugMessage", ({ enumerable: true, get: function () { return transportMessages_1.DebugMessage; } }));
Object.defineProperty(exports, "SessionRequestSuccessMessage", ({ enumerable: true, get: function () { return transportMessages_1.SessionRequestSuccessMessage; } }));
Object.defineProperty(exports, "SessionRequestFailureMessage", ({ enumerable: true, get: function () { return transportMessages_1.SessionRequestFailureMessage; } }));
Object.defineProperty(exports, "SshDisconnectReason", ({ enumerable: true, get: function () { return transportMessages_1.SshDisconnectReason; } }));
Object.defineProperty(exports, "SshReconnectFailureReason", ({ enumerable: true, get: function () { return transportMessages_1.SshReconnectFailureReason; } }));
var connectionMessages_1 = __webpack_require__(45757);
Object.defineProperty(exports, "SshChannelOpenFailureReason", ({ enumerable: true, get: function () { return connectionMessages_1.SshChannelOpenFailureReason; } }));
Object.defineProperty(exports, "ChannelOpenMessage", ({ enumerable: true, get: function () { return connectionMessages_1.ChannelOpenMessage; } }));
Object.defineProperty(exports, "ChannelRequestMessage", ({ enumerable: true, get: function () { return connectionMessages_1.ChannelRequestMessage; } }));
Object.defineProperty(exports, "ChannelRequestType", ({ enumerable: true, get: function () { return connectionMessages_1.ChannelRequestType; } }));
Object.defineProperty(exports, "CommandRequestMessage", ({ enumerable: true, get: function () { return connectionMessages_1.CommandRequestMessage; } }));
var sshAlgorithms_1 = __webpack_require__(91605);
Object.defineProperty(exports, "SshAlgorithms", ({ enumerable: true, get: function () { return sshAlgorithms_1.SshAlgorithms; } }));
Object.defineProperty(exports, "KeyExchangeAlgorithm", ({ enumerable: true, get: function () { return sshAlgorithms_1.KeyExchangeAlgorithm; } }));
Object.defineProperty(exports, "PublicKeyAlgorithm", ({ enumerable: true, get: function () { return sshAlgorithms_1.PublicKeyAlgorithm; } }));
Object.defineProperty(exports, "EncryptionAlgorithm", ({ enumerable: true, get: function () { return sshAlgorithms_1.EncryptionAlgorithm; } }));
Object.defineProperty(exports, "HmacAlgorithm", ({ enumerable: true, get: function () { return sshAlgorithms_1.HmacAlgorithm; } }));
Object.defineProperty(exports, "Encryption", ({ enumerable: true, get: function () { return sshAlgorithms_1.Encryption; } }));
Object.defineProperty(exports, "Rsa", ({ enumerable: true, get: function () { return sshAlgorithms_1.Rsa; } }));
Object.defineProperty(exports, "ECDsa", ({ enumerable: true, get: function () { return sshAlgorithms_1.ECDsa; } }));
var sshData_1 = __webpack_require__(67914);
Object.defineProperty(exports, "SshDataReader", ({ enumerable: true, get: function () { return sshData_1.SshDataReader; } }));
Object.defineProperty(exports, "SshDataWriter", ({ enumerable: true, get: function () { return sshData_1.SshDataWriter; } }));
Object.defineProperty(exports, "formatBuffer", ({ enumerable: true, get: function () { return sshData_1.formatBuffer; } }));
var derData_1 = __webpack_require__(85875);
Object.defineProperty(exports, "DerReader", ({ enumerable: true, get: function () { return derData_1.DerReader; } }));
Object.defineProperty(exports, "DerWriter", ({ enumerable: true, get: function () { return derData_1.DerWriter; } }));
var bigInt_1 = __webpack_require__(30404);
Object.defineProperty(exports, "BigInt", ({ enumerable: true, get: function () { return bigInt_1.BigInt; } }));
var errors_1 = __webpack_require__(72917);
Object.defineProperty(exports, "SshChannelError", ({ enumerable: true, get: function () { return errors_1.SshChannelError; } }));
Object.defineProperty(exports, "SshConnectionError", ({ enumerable: true, get: function () { return errors_1.SshConnectionError; } }));
Object.defineProperty(exports, "SshReconnectError", ({ enumerable: true, get: function () { return errors_1.SshReconnectError; } }));
Object.defineProperty(exports, "ObjectDisposedError", ({ enumerable: true, get: function () { return errors_1.ObjectDisposedError; } }));
var cancellation_1 = __webpack_require__(97437);
Object.defineProperty(exports, "CancellationToken", ({ enumerable: true, get: function () { return cancellation_1.CancellationToken; } }));
Object.defineProperty(exports, "CancellationTokenSource", ({ enumerable: true, get: function () { return cancellation_1.CancellationTokenSource; } }));
Object.defineProperty(exports, "CancellationError", ({ enumerable: true, get: function () { return cancellation_1.CancellationError; } }));
var promiseCompletionSource_1 = __webpack_require__(93708);
Object.defineProperty(exports, "PromiseCompletionSource", ({ enumerable: true, get: function () { return promiseCompletionSource_1.PromiseCompletionSource; } }));
var semaphore_1 = __webpack_require__(24564);
Object.defineProperty(exports, "Semaphore", ({ enumerable: true, get: function () { return semaphore_1.Semaphore; } }));
var queue_1 = __webpack_require__(28776);
Object.defineProperty(exports, "Queue", ({ enumerable: true, get: function () { return queue_1.Queue; } }));
var sessionMetrics_1 = __webpack_require__(13965);
Object.defineProperty(exports, "SessionMetrics", ({ enumerable: true, get: function () { return sessionMetrics_1.SessionMetrics; } }));
var channelMetrics_1 = __webpack_require__(65321);
Object.defineProperty(exports, "ChannelMetrics", ({ enumerable: true, get: function () { return channelMetrics_1.ChannelMetrics; } }));
var sessionContour_1 = __webpack_require__(20419);
Object.defineProperty(exports, "SessionContour", ({ enumerable: true, get: function () { return sessionContour_1.SessionContour; } }));
var multiChannelStream_1 = __webpack_require__(79802);
Object.defineProperty(exports, "MultiChannelStream", ({ enumerable: true, get: function () { return multiChannelStream_1.MultiChannelStream; } }));
var trace_1 = __webpack_require__(43776);
Object.defineProperty(exports, "TraceLevel", ({ enumerable: true, get: function () { return trace_1.TraceLevel; } }));
Object.defineProperty(exports, "SshTraceEventIds", ({ enumerable: true, get: function () { return trace_1.SshTraceEventIds; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 30404:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BigInt = void 0;
const buffer_1 = __webpack_require__(30816);
const sshData_1 = __webpack_require__(67914);
/**
 * Represents a large signed integer as a byte byffer.
 */
class BigInt {
    /**
     * Creates a new BigInt instance from a buffer of signed bytes.
     *
     * The first (high) bit of the first (high) byte is the sign bit. Therefore if the
     * highest byte of an unsigned integer is greater than 127, the bytes must include
     * a leading zero byte to prevent interpretation as a negative value.
     */
    constructor(buffer) {
        this.buffer = buffer;
        if (buffer.length === 0) {
            throw new Error('BigInt buffer length must be greater than zero.');
        }
    }
    /**
     * Gets a value that indicates the sign of the big integer:
     * 1 for positive, 0 for zero, -1 for negative.
     */
    get sign() {
        const highByte = this.buffer[0];
        if (highByte === 0) {
            return this.buffer.length > 1 ? 1 : 0;
        }
        else {
            return (highByte & 0x80) === 0 ? 1 : -1;
        }
    }
    static fromInt32(value) {
        if (value === 0) {
            return BigInt.zero;
        }
        let isNegative = false;
        if (value < 0) {
            isNegative = true;
            value = -value;
        }
        const bytes = [];
        for (let bit = 24; bit >= 0; bit -= 8) {
            if (value >= 1 << bit || bytes.length > 0) {
                bytes.push(value >> bit);
                value = value & ~((1 << bit) - 1);
            }
        }
        if (isNegative) {
            if ((bytes[0] & 0x80) === 0) {
                bytes[0] |= 0x80;
            }
            else {
                bytes.splice(0, 0, 0x80);
            }
        }
        return new BigInt(buffer_1.Buffer.from(new Uint8Array(bytes)));
    }
    toInt32() {
        if (this.buffer.length > 4) {
            throw new TypeError(`BigInt value cannot be converted to a 32-bit signed integer.`);
        }
        let value = this.buffer[0];
        if (this.sign < 0) {
            value &= 0x7f;
        }
        for (let i = 1; i < this.buffer.length; i++) {
            value = (value << 8) + this.buffer[i];
        }
        if (this.sign < 0) {
            value = -value;
        }
        return value;
    }
    /**
     * Creates a new BigInt instance from a byte buffer.
     * @param bytes Source byte buffer.
     * @param options.unsigned True if the bytes should be interpreted as unsigned. If false,
     * the high bit of the high byte is the sign bit. The default is false.
     */
    static fromBytes(bytes, options) {
        if (!buffer_1.Buffer.isBuffer(bytes)) {
            throw new TypeError('Buffer expected.');
        }
        else if (bytes.length === 0) {
            throw new Error('BigInt buffer length must be greater than zero.');
        }
        options = options !== null && options !== void 0 ? options : {};
        const highBit = (bytes[0] & 0x80) !== 0;
        const prependZeroCount = options.unsigned && highBit ? 1 : 0;
        let skipZeroCount = 0;
        // Skip non-significant zeroes at the big end.
        for (let i = 0; i < bytes.length - 1 && bytes[i] === 0; i++) {
            if ((bytes[i + 1] & 0x80) === 0) {
                skipZeroCount++;
            }
        }
        const newBytes = buffer_1.Buffer.alloc(bytes.length + prependZeroCount - skipZeroCount);
        bytes.copy(newBytes, prependZeroCount, skipZeroCount, bytes.length);
        return new BigInt(newBytes);
    }
    /**
     * Converts a BigInt instance to a byte buffer.
     *
     * @param options.unsigned True if the returned bytes will be interprted as unsigned.
     * If false, a positive integer may have a leading zero to prevent it from being
     * interpreted as negative.
     * @param options.length Desired length of the resulting buffer. The value will be zero-
     * padded to fill the length. Only applies when `options.unsigned` is true.
     */
    toBytes(options) {
        options = options !== null && options !== void 0 ? options : {};
        let bytes = this.buffer;
        if (options.unsigned) {
            if (this.sign < 0) {
                throw new TypeError('Cannot format a negative BigInt as unsigned.');
            }
            else if (bytes[0] === 0 && bytes.length > 1) {
                bytes = bytes.slice(1, bytes.length);
            }
            if (options.length !== undefined) {
                if (bytes.length > options.length) {
                    throw new Error(`BigInt (${bytes.length} bytes) is too large for length ${options.length}.`);
                }
                else if (bytes.length < options.length) {
                    const padded = buffer_1.Buffer.alloc(options.length);
                    bytes.copy(padded, options.length - bytes.length);
                    return padded;
                }
            }
        }
        const newBytes = buffer_1.Buffer.alloc(bytes.length);
        bytes.copy(newBytes, 0, 0, bytes.length);
        return newBytes;
    }
    copyTo(buffer, offset = 0) {
        this.buffer.copy(buffer, offset, 0, this.buffer.length);
    }
    equals(other) {
        return other instanceof BigInt && this.buffer.equals(other.buffer);
    }
    toString(name) {
        return (0, sshData_1.formatBuffer)(this.buffer, name !== null && name !== void 0 ? name : 'BigInt');
    }
}
exports.BigInt = BigInt;
BigInt.zero = new BigInt(buffer_1.Buffer.alloc(1));
//# sourceMappingURL=bigInt.js.map

/***/ }),

/***/ 85875:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DerWriter = exports.DerReader = void 0;
const buffer_1 = __webpack_require__(30816);
const bigInt_1 = __webpack_require__(30404);
/**
 * Reads data in DER (Distinguished Encoding Rules) format.
 *
 * Enables importing and exporting key files, which are commonly DER-encoded.
 */
class DerReader {
    constructor(buffer, dataType = 32 /* Constructed */ | 16 /* Sequence */) {
        this.buffer = buffer;
        this.position = 0;
        this.readType(dataType);
        const length = this.readLength();
        if (length > this.buffer.length - this.position) {
            throw new Error('Read out of bounds.');
        }
        this.buffer = this.buffer.slice(0, this.position + length);
    }
    get available() {
        return this.buffer.length - this.position;
    }
    readNull() {
        this.readType(5 /* Null */);
        if (this.readByte() !== 0) {
            throw new Error('Expected a 0 after Null type.');
        }
    }
    readInteger() {
        this.readType(2 /* Integer */);
        const length = this.readLength();
        const bytes = this.readBytes(length);
        const result = new bigInt_1.BigInt(bytes);
        return result;
    }
    readOctetString() {
        this.readType(4 /* OctetString */);
        const length = this.readLength();
        const result = this.readBytes(length);
        return result;
    }
    readBitString() {
        this.readType(3 /* BitString */);
        const length = this.readLength();
        const padding = this.readByte();
        if (padding !== 0) {
            throw new Error('Padded bit strings are not supported.');
        }
        const result = this.readBytes(length - 1);
        return result;
    }
    readObjectIdentifier(expected) {
        this.readType(6 /* ObjectIdentifier */);
        const length = this.readLength();
        const end = this.position + length;
        const values = [];
        const first = this.readByte();
        values.push(Math.trunc(first / 40));
        values.push(first % 40);
        let next = 0;
        while (this.position < end) {
            const b = this.readByte();
            if ((b & 0x80) !== 0) {
                next = next * 128 + (b & 0x7f);
            }
            else {
                next = next * 128 + b;
                values.push(next);
                next = 0;
            }
        }
        if (next !== 0) {
            throw new Error('Invalid OID format.');
        }
        const result = values.join('.');
        if (expected && result !== expected) {
            throw new Error(`Expected OID ${expected}, found: ${result}`);
        }
        return result;
    }
    readSequence() {
        const start = this.position;
        this.readType(32 /* Constructed */ | 16 /* Sequence */);
        const length = this.readLength();
        this.position += length;
        return new DerReader(this.buffer.slice(start, this.position));
    }
    tryReadTagged(tagId) {
        if (this.position >= this.buffer.length) {
            return null;
        }
        const type = this.buffer[this.position];
        if ((type & 160 /* Tagged */) === 0 || (type & ~160 /* Tagged */) !== tagId) {
            return null;
        }
        const start = this.position;
        this.position++;
        const length = this.readLength();
        this.position += length;
        const taggedData = new DerReader(this.buffer.slice(start, this.position), type);
        return taggedData;
    }
    /** Reads the type of the next value in the sequence WITHOUT advancing the reader position. */
    peek() {
        if (this.position >= this.buffer.length) {
            throw new Error('Read out of bounds.');
        }
        return this.buffer[this.position];
    }
    readLength() {
        let length = this.readByte();
        if (length === 0x80) {
            throw new Error('Indefinite-length encoding is not supported.');
        }
        if (length > 127) {
            const size = length & 0x7f;
            if (size > 4) {
                throw new Error(`DER length size is ${size} and cannot be more than 4 bytes.`);
            }
            length = 0;
            for (let i = 0; i < size; i++) {
                const next = this.readByte();
                length = (length << 8) + next;
            }
            if (length < 0) {
                throw new Error('Corrupted data - negative length found');
            }
        }
        return length;
    }
    readByte() {
        if (this.position >= this.buffer.length) {
            throw new Error('Read out of bounds.');
        }
        return this.buffer[this.position++];
    }
    readBytes(length) {
        if (this.position + length > this.buffer.length) {
            throw new Error('Read out of bounds.');
        }
        const result = this.buffer.slice(this.position, this.position + length);
        this.position += length;
        return result;
    }
    readType(expectedType) {
        const type = this.readByte();
        if (type !== expectedType) {
            throw new Error(`Expected ${expectedType} data type, found : ${type}`);
        }
    }
}
exports.DerReader = DerReader;
/**
 * Writes data in DER (Distinguished Encoding Rules) format.
 *
 * Enables importing and exporting key files, which are commonly DER-encoded.
 */
class DerWriter {
    constructor(buffer, dataType = 32 /* Constructed */ | 16 /* Sequence */) {
        this.buffer = buffer;
        this.dataType = dataType;
        this.position = 0;
        this.buffer = buffer;
    }
    toBuffer() {
        // Move the data over to make space for the type + length prefix.
        const length = this.position;
        const lengthBytes = DerWriter.getLength(length);
        this.ensureCapacity(1 + lengthBytes.length + length);
        const result = this.buffer.slice(0, 1 + lengthBytes.length + length);
        this.buffer.copy(result, 1 + lengthBytes.length);
        // Write the type + length prefix.
        result[0] = this.dataType;
        lengthBytes.copy(result, 1, 0);
        // Restore the writer buffer to its previous state (without the type + length prefix).
        this.buffer = this.buffer.slice(1 + lengthBytes.length, result.length);
        this.position = length;
        return result;
    }
    writeSequence(data) {
        this.writeBytes(data.toBuffer());
    }
    writeTagged(tagId, data) {
        if (tagId > 0xf)
            throw new Error('Invalid DER tag.');
        this.writeByte(160 /* Tagged */ | tagId);
        const lengthBytes = DerWriter.getLength(data.position);
        this.writeBytes(lengthBytes);
        this.writeBytes(data.buffer.slice(0, data.position));
    }
    writeNull() {
        this.writeByte(5 /* Null */);
        this.writeByte(0);
    }
    writeInteger(value) {
        this.writeByte(2 /* Integer */);
        const integerBytes = value.toBytes();
        const lengthBytes = DerWriter.getLength(integerBytes.length);
        this.writeBytes(lengthBytes);
        this.writeBytes(integerBytes);
    }
    writeOctetString(data) {
        this.writeByte(4 /* OctetString */);
        const lengthBytes = DerWriter.getLength(data.length);
        this.writeBytes(lengthBytes);
        this.writeBytes(data);
    }
    writeBitString(data) {
        this.writeByte(3 /* BitString */);
        const lengthBytes = DerWriter.getLength(1 + data.length);
        this.writeBytes(lengthBytes);
        this.writeByte(0);
        this.writeBytes(data);
    }
    writeObjectIdentifier(oid) {
        if (!oid)
            throw new TypeError('OID value is null or empty.');
        const values = oid.split('.').map(Number);
        if (values.length < 2 || values[0] > 3 || values[1] >= 40) {
            throw new Error(`Invalid OID: ${oid}`);
        }
        this.writeByte(6 /* ObjectIdentifier */);
        let length = values.length - 1;
        for (let i = 2; i < values.length; i++) {
            let value = values[i];
            while (value > 128) {
                length++;
                value /= 128;
            }
        }
        const lengthBytes = DerWriter.getLength(length);
        this.writeBytes(lengthBytes);
        this.writeByte(values[0] * 40 + values[1]);
        for (let i = 2; i < values.length; i++) {
            let value = values[i];
            if (value >= 128) {
                let bytes = [];
                bytes.push(value & 0x7f);
                while (value >= 128) {
                    value /= 128;
                    bytes.push(0x80 | (value & 0x7f));
                }
                while (bytes.length > 0) {
                    this.writeByte(bytes.pop());
                }
            }
            else {
                this.writeByte(value);
            }
        }
    }
    static getLength(length) {
        if (length > 127) {
            let size = 1;
            for (let val = length >> 8; val !== 0; val >>= 8) {
                size++;
            }
            const lengthBytes = DerWriter.lengthBuffer.slice(0, size + 1);
            lengthBytes[0] = size | 0x80;
            for (let i = (size - 1) * 8, j = 1; i >= 0; i -= 8, j++) {
                lengthBytes[j] = length >> i;
            }
            return lengthBytes;
        }
        else {
            const lengthBytes = DerWriter.lengthBuffer.slice(0, 1);
            lengthBytes[0] = length;
            return lengthBytes;
        }
    }
    writeByte(value) {
        this.ensureCapacity(this.position + 1);
        this.buffer[this.position++] = value;
    }
    writeBytes(value) {
        this.ensureCapacity(this.position + value.length);
        value.copy(this.buffer, this.position);
        this.position += value.length;
    }
    ensureCapacity(capacity) {
        if (this.buffer.length < capacity) {
            let newLength = Math.max(512, this.buffer.length * 2);
            while (newLength < capacity)
                newLength *= 2;
            const newBuffer = buffer_1.Buffer.alloc(newLength);
            this.buffer.copy(newBuffer, 0, 0, this.position);
            this.buffer = newBuffer;
        }
    }
}
exports.DerWriter = DerWriter;
DerWriter.lengthBuffer = buffer_1.Buffer.alloc(10);
//# sourceMappingURL=derData.js.map

/***/ }),

/***/ 67914:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatBuffer = exports.SshDataWriter = exports.SshDataReader = void 0;
const buffer_1 = __webpack_require__(30816);
const sshAlgorithms_1 = __webpack_require__(91605);
const bigInt_1 = __webpack_require__(30404);
class SshDataReader {
    constructor(buffer) {
        this.buffer = buffer;
        this.position = 0;
    }
    get available() {
        return this.buffer.length - this.position;
    }
    read(length) {
        if (this.available < length) {
            throw new Error('Attempted to read past end of buffer.');
        }
        const data = this.buffer.slice(this.position, this.position + length);
        this.position += length;
        return data;
    }
    readByte() {
        if (this.available === 0) {
            throw new Error('Attempted to read past end of buffer.');
        }
        const value = this.buffer[this.position];
        this.position++;
        return value;
    }
    readBinary() {
        const length = this.readUInt32();
        if (this.available < length) {
            throw new Error('Attempted to read past end of buffer.');
        }
        const data = this.buffer.slice(this.position, this.position + length);
        this.position += length;
        return data;
    }
    readString(encoding) {
        const bytes = this.readBinary();
        return bytes.toString();
    }
    readList(encoding) {
        const stringList = this.readString(encoding);
        return stringList.length === 0 ? [] : stringList.split(',');
    }
    readBoolean() {
        return this.readByte() !== 0;
    }
    readUInt32() {
        if (this.available < 4) {
            throw new Error('Attempted to read past end of buffer.');
        }
        // Big-endian encoding
        const value0 = this.buffer[this.position + 0];
        const value1 = this.buffer[this.position + 1];
        const value2 = this.buffer[this.position + 2];
        const value3 = this.buffer[this.position + 3];
        this.position += 4;
        const value = ((value0 << 24) | (value1 << 16) | (value2 << 8) | value3) >>> 0;
        return value;
    }
    readUInt64() {
        if (this.available < 8) {
            throw new Error('Attempted to read past end of buffer.');
        }
        // Big-endian encoding
        const value0 = this.buffer[this.position + 0];
        const value1 = this.buffer[this.position + 1];
        const value2 = this.buffer[this.position + 2];
        const value3 = this.buffer[this.position + 3];
        const value4 = this.buffer[this.position + 4];
        const value5 = this.buffer[this.position + 5];
        const value6 = this.buffer[this.position + 6];
        const value7 = this.buffer[this.position + 7];
        this.position += 8;
        const high = ((value0 << 24) | (value1 << 16) | (value2 << 8) | value3) >>> 0;
        const low = ((value4 << 24) | (value5 << 16) | (value6 << 8) | value7) >>> 0;
        return high * 0x100000000 + low;
    }
    readBigInt() {
        const data = this.readBinary();
        if (data.length === 0) {
            return bigInt_1.BigInt.zero;
        }
        return bigInt_1.BigInt.fromBytes(data);
    }
}
exports.SshDataReader = SshDataReader;
SshDataReader.mpintZero = buffer_1.Buffer.alloc(1);
class SshDataWriter {
    constructor(buffer) {
        this.buffer = buffer;
        this.position = 0;
    }
    write(data) {
        this.ensureCapacity(this.position + data.length);
        data.copy(this.buffer, this.position);
        this.position += data.length;
    }
    writeByte(value) {
        this.ensureCapacity(this.position + 1);
        this.buffer[this.position] = value;
        this.position++;
    }
    writeBinary(data) {
        this.ensureCapacity(this.position + 4 + data.length);
        this.writeUInt32(data.length);
        data.copy(this.buffer, this.position);
        this.position += data.length;
    }
    writeString(value, encoding) {
        this.writeBinary(buffer_1.Buffer.from(value));
    }
    writeList(value, encoding) {
        this.writeString(value ? value.join(',') : '', encoding);
    }
    writeBoolean(value) {
        this.writeByte(value ? 1 : 0);
    }
    writeUInt32(value) {
        this.ensureCapacity(this.position + 4);
        // Big-endian encoding
        this.buffer[this.position + 0] = value >>> 24;
        this.buffer[this.position + 1] = value >>> 16;
        this.buffer[this.position + 2] = value >>> 8;
        this.buffer[this.position + 3] = value >>> 0;
        this.position += 4;
    }
    writeUInt64(value) {
        this.ensureCapacity(this.position + 8);
        const low = value & 0xffffffff;
        const high = (value - low) / 0x100000000;
        // Big-endian encoding
        this.buffer[this.position + 0] = high >>> 24;
        this.buffer[this.position + 1] = high >>> 16;
        this.buffer[this.position + 2] = high >>> 8;
        this.buffer[this.position + 3] = high >>> 0;
        this.buffer[this.position + 4] = low >>> 24;
        this.buffer[this.position + 5] = low >>> 16;
        this.buffer[this.position + 6] = low >>> 8;
        this.buffer[this.position + 7] = low >>> 0;
        this.position += 8;
    }
    writeBigInt(value) {
        const data = value.toBytes();
        if (data.length === 1 && data[0] === 0) {
            this.writeUInt32(0);
        }
        else {
            this.writeBinary(data);
        }
    }
    writeRandom(length) {
        this.ensureCapacity(this.position + length);
        const randomBuffer = this.buffer.slice(this.position, this.position + length);
        sshAlgorithms_1.SshAlgorithms.random.getBytes(randomBuffer);
        this.position += length;
    }
    skip(length) {
        this.ensureCapacity(this.position + length);
        this.position += length;
    }
    ensureCapacity(capacity) {
        if (this.buffer.length < capacity) {
            let newLength = Math.max(512, this.buffer.length * 2);
            while (newLength < capacity)
                newLength *= 2;
            const newBuffer = buffer_1.Buffer.alloc(newLength);
            this.buffer.copy(newBuffer, 0, 0, this.position);
            this.buffer = newBuffer;
        }
    }
    toBuffer() {
        return this.buffer.slice(0, this.position);
    }
}
exports.SshDataWriter = SshDataWriter;
function makeCrcTable() {
    let c;
    const table = [];
    for (let n = 0; n < 256; n++) {
        c = n;
        for (let k = 0; k < 8; k++) {
            c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;
        }
        table[n] = c;
    }
    return table;
}
let crcTable;
function crc32(data) {
    if (!crcTable) {
        crcTable = makeCrcTable();
    }
    let crc = 0 ^ -1;
    for (let i = 0; i < data.length; i++) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ data[i]) & 0xff];
    }
    const result = (crc ^ -1) >>> 0;
    return (result + 0x100000000)
        .toString(16)
        .substr(-8)
        .toUpperCase();
}
/**
 * Formats a byte buffer using the same format as OpenSSH,
 * useful for debugging and comparison in logs.
 */
function formatBuffer(data, name, formatData) {
    let s = `${name === undefined ? 'Buffer' : name}[${data.length}] (${crc32(data)})\n`;
    if (formatData === false) {
        return s;
    }
    const max = Math.min(2048, data.length);
    for (let lineOffset = 0; lineOffset < max; lineOffset += 16) {
        if (lineOffset < 1000)
            s += '0';
        if (lineOffset < 100)
            s += '0';
        if (lineOffset < 10)
            s += '0';
        s += lineOffset + ':';
        for (let i = lineOffset; i < lineOffset + 16; i++) {
            if (i < max) {
                s += ' ' + data.slice(i, i + 1).toString('hex');
            }
            else {
                s += '   ';
            }
        }
        s += '  ';
        for (let i = lineOffset; i < lineOffset + 16; i++) {
            if (i < max) {
                const c = data[i];
                s += c > 32 && c <= 127 ? data.slice(i, i + 1).toString() : '.';
            }
            else {
                s += ' ';
            }
        }
        s += '\n';
    }
    if (max < data.length) {
        s += '...\n';
    }
    return s;
}
exports.formatBuffer = formatBuffer;
//# sourceMappingURL=sshData.js.map

/***/ }),

/***/ 17585:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshProtocol = void 0;
const buffer_1 = __webpack_require__(30816);
const queue_1 = __webpack_require__(28776);
const semaphore_1 = __webpack_require__(24564);
const sshMessage_1 = __webpack_require__(285);
const sshData_1 = __webpack_require__(67914);
const transportMessages_1 = __webpack_require__(90818);
const kexMessages_1 = __webpack_require__(50856);
const connectionMessages_1 = __webpack_require__(45757);
const errors_1 = __webpack_require__(72917);
const trace_1 = __webpack_require__(43776);
class SequencedMessage {
    constructor(sequence, message) {
        this.sequence = sequence;
        this.message = message;
    }
}
/**
 * Implements the base SSH protocol (sending and receiving messages) over a Stream.
 */
class SshProtocol {
    constructor(stream, config, metrics, trace) {
        this.config = config;
        this.metrics = metrics;
        this.trace = trace;
        this.sessionSemaphore = new semaphore_1.Semaphore(1);
        this.inboundPacketSequence = 0;
        this.outboundPacketSequence = 0;
        this.inboundFlow = 0;
        this.outboundFlow = 0;
        // Sent messages are kept for a short time, until the other side acknowledges
        // that they have been received. This enables re-sending lost messages on reconnect.
        this.recentSentMessages = new queue_1.Queue();
        // Initialize buffers that are re-used for each sent/received message.
        // The buffers will be automatically expanded as necessary.
        this.sendWriter = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(1024));
        this.receiveWriter = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(1024));
        /* @internal */
        this.traceChannelData = false;
        this.extensions = null;
        this.kexService = null;
        this.algorithms = null;
        this.outgoingMessagesHaveLatencyInfo = false;
        this.incomingMessagesHaveLatencyInfo = false;
        this.outgoingMessagesHaveReconnectInfo = false;
        this.incomingMessagesHaveReconnectInfo = false;
        this.stream = stream;
    }
    get lastIncomingSequence() {
        return this.inboundPacketSequence - 1;
    }
    getSentMessages(startingSequenceNumber) {
        if (startingSequenceNumber === this.outboundPacketSequence + 1) {
            // The recipient is already up-to-date.
            return [];
        }
        if (this.recentSentMessages.size > 0 &&
            startingSequenceNumber < this.recentSentMessages.peek().sequence) {
            // The cached recent messages do not go back as far as the requested sequence number.
            // This should never happen because messages are not dropped from this list until
            // the other side acknowledges they have been received, so they should not be
            // requested again after reconnecting.
            return null;
        }
        // Return all messages starting with the requested sequence number.
        // Exclude key exchange messages because they cannot be retransmitted; a reconnected
        // session will do key exchange separately. Also exclude any disconnect messages that
        // may have been attempted when the connection was lost.
        const messagesToRetransmit = new Array();
        for (let sequencedMessage of this.recentSentMessages) {
            if (sequencedMessage.sequence >= startingSequenceNumber) {
                const message = sequencedMessage.message;
                if (!(message instanceof kexMessages_1.KeyExchangeMessage || message instanceof transportMessages_1.DisconnectMessage)) {
                    messagesToRetransmit.push(message);
                }
            }
        }
        return messagesToRetransmit;
    }
    async writeProtocolVersion(version, cancellation) {
        const stream = this.stream;
        if (!stream)
            throw new Error('SSH session disconnected.');
        const data = buffer_1.Buffer.from(version + '\r\n');
        await stream.write(data, cancellation);
        this.metrics.addMessageSent(data.length);
        return Promise.resolve();
    }
    async readProtocolVersion(cancellation) {
        const stream = this.stream;
        if (!stream)
            throw new Error('SSH session disconnected.');
        // http://tools.ietf.org/html/rfc4253#section-4.2
        const buffer = buffer_1.Buffer.alloc(255);
        let lineCount = 0;
        for (let i = 0; i < buffer.length; i++) {
            const byteBuffer = await stream.read(1, cancellation);
            if (!byteBuffer) {
                break;
            }
            buffer[i] = byteBuffer[0];
            const carriageReturn = 0x0d;
            const lineFeed = 0x0a;
            if (i > 0 && buffer[i - 1] === carriageReturn && buffer[i] === lineFeed) {
                const line = buffer.toString('utf8', 0, i - 1);
                if (line.startsWith('SSH-')) {
                    this.metrics.addMessageReceived(i + 1);
                    return line;
                }
                else if (lineCount > 20) {
                    // Give up if a version string was not found after 20 lines.
                    break;
                }
                else {
                    // Ignore initial lines before the version line.
                    lineCount++;
                    i = -1;
                }
            }
        }
        throw new errors_1.SshConnectionError('Failed to read the protocol version', transportMessages_1.SshDisconnectReason.protocolError);
    }
    async handleNewKeys(cancellation) {
        try {
            await this.sessionSemaphore.wait(cancellation);
            this.inboundFlow = 0;
            this.outboundFlow = 0;
            this.algorithms = this.kexService.finishKeyExchange();
        }
        finally {
            this.sessionSemaphore.release();
        }
    }
    /**
     * Attempts to read from the stream until the buffer is full.
     * @returns True if the read succeeded, false if the stream was disposed.
     */
    async read(buffer, cancellation) {
        const stream = this.stream;
        if (!stream)
            return false;
        let bytesRead = 0;
        do {
            let data;
            try {
                data = await stream.read(buffer.length - bytesRead, cancellation);
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                if (stream.isDisposed)
                    return false;
                stream.dispose();
                this.stream = null;
                this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.streamReadError, `Error reading from stream: ${e.message}`, e);
                throw new errors_1.SshConnectionError('Error reading from stream: ' + e.message, transportMessages_1.SshDisconnectReason.connectionLost);
            }
            if (!data)
                return false;
            data.copy(buffer, bytesRead);
            bytesRead += data.length;
        } while (bytesRead < buffer.length);
        return true;
    }
    /**
     * Attempts to write data to the stream.
     * @returns True if the write succeeded, false if the stream was disposed.
     */
    async write(data, cancellation) {
        const stream = this.stream;
        if (!stream)
            return false;
        try {
            await stream.write(data, cancellation);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            if (stream.isDisposed)
                return false;
            stream.dispose();
            this.stream = null;
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.streamWriteError, `Error writing to stream: ${e.message}`, e);
            throw new errors_1.SshConnectionError('Error writing to stream: ' + e.message, transportMessages_1.SshDisconnectReason.connectionLost);
        }
        return true;
    }
    async considerReExchange(initial, cancellation) {
        const kexService = this.kexService;
        if (!kexService)
            return;
        let kexMessage = null;
        let kexGuessMessage = null;
        if (!kexService.exchanging &&
            (initial || this.inboundFlow + this.outboundFlow > this.config.keyRotationThreshold)) {
            [kexMessage, kexGuessMessage] = await kexService.startKeyExchange(initial);
        }
        if (kexMessage) {
            await this.sendMessage(kexMessage, cancellation);
            if (kexGuessMessage) {
                await this.sendMessage(kexGuessMessage, cancellation);
            }
        }
    }
    async computeHmac(signer, payload, seq) {
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(4 + payload.length));
        writer.writeUInt32(seq);
        writer.write(payload);
        const result = await signer.sign(writer.toBuffer());
        return result;
    }
    async verifyHmac(verifier, payload, seq, mac) {
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(4 + payload.length));
        writer.writeUInt32(seq);
        writer.write(payload);
        const result = await verifier.verify(writer.toBuffer(), mac);
        return result;
    }
    async readAndVerifyHmac(verifier, data, macBuffer, cancellation) {
        if (!(await this.read(macBuffer, cancellation))) {
            return false;
        }
        const verified = await this.verifyHmac(verifier, data, this.inboundPacketSequence, macBuffer);
        if (!verified) {
            throw new errors_1.SshConnectionError('Invalid MAC', transportMessages_1.SshDisconnectReason.macError);
        }
        return true;
    }
    /**
     * Attemps to write one message to the stream.
     * @returns `true` if writing succeeded, `false` if the stream was disposed.
     * @throws SshConnectionException if writing to the stream failed for any other reason.
     */
    async sendMessage(message, cancellation) {
        var _a;
        const algorithms = this.algorithms;
        const compression = algorithms === null || algorithms === void 0 ? void 0 : algorithms.compressor;
        const encryption = algorithms === null || algorithms === void 0 ? void 0 : algorithms.cipher;
        const hmac = algorithms === null || algorithms === void 0 ? void 0 : algorithms.messageSigner;
        let result;
        await this.sessionSemaphore.wait(cancellation);
        try {
            const blockSize = encryption ? Math.max(8, encryption.blockLength) : 8;
            // Start by writing the uncompressed payload to the buffer at the correct offset.
            const payloadOffset = SshProtocol.packetLengthSize + SshProtocol.paddingLengthSize;
            this.sendWriter.position = payloadOffset;
            message.write(this.sendWriter);
            if (this.outgoingMessagesHaveReconnectInfo) {
                // Write the sequence number of the last inbound packet processed.
                this.sendWriter.writeUInt64(this.lastIncomingSequence);
                if (this.outgoingMessagesHaveLatencyInfo) {
                    // Write the time (in microseconds, not ms) since last packet was received.
                    const timeSinceLastReceivedMessage = Math.min(4294967295, // max uint32
                    Math.round((this.metrics.time - this.lastIncomingTimestamp) * 1000));
                    this.sendWriter.writeUInt32(timeSinceLastReceivedMessage);
                }
            }
            let payload = this.sendWriter.toBuffer().slice(payloadOffset);
            if (compression != null) {
                payload = compression.compress(payload);
            }
            // The packet length is not encrypted when in EtM or AEAD mode.
            const isLengthEncrypted = !((hmac === null || hmac === void 0 ? void 0 : hmac.encryptThenMac) || (hmac === null || hmac === void 0 ? void 0 : hmac.authenticatedEncryption));
            // http://tools.ietf.org/html/rfc4253
            // 6.  Binary Packet Protocol
            // the total length of (packet_length || padding_length || payload || padding)
            // is a multiple of the cipher block size or 8,
            // padding length must between 4 and 255 bytes.
            let paddingLength = blockSize -
                (((isLengthEncrypted ? SshProtocol.packetLengthSize : 0) +
                    SshProtocol.paddingLengthSize +
                    payload.length) %
                    blockSize);
            if (paddingLength < 4) {
                paddingLength += blockSize;
            }
            const packetLength = SshProtocol.paddingLengthSize + payload.length + paddingLength;
            this.sendWriter.position = 0;
            this.sendWriter.writeUInt32(packetLength);
            this.sendWriter.writeByte(paddingLength);
            // The uncompressed payload was already written at the correct offset.
            // When compression is enabled, rewrite the compressed payload.
            if (compression != null) {
                this.sendWriter.write(payload);
            }
            else {
                this.sendWriter.position += payload.length;
            }
            this.sendWriter.writeRandom(paddingLength);
            payload = this.sendWriter.toBuffer();
            let mac = null;
            if ((hmac === null || hmac === void 0 ? void 0 : hmac.encryptThenMac) && encryption) {
                // In EtM mode, compute the MAC after encrypting. And don't encrypt the length.
                const packetWithoutLength = payload.slice(SshProtocol.packetLengthSize, payload.length);
                const encryptedPacket = await encryption.transform(packetWithoutLength);
                encryptedPacket.copy(packetWithoutLength);
                mac = await this.computeHmac(hmac, payload, this.outboundPacketSequence);
            }
            else if (hmac === null || hmac === void 0 ? void 0 : hmac.authenticatedEncryption) {
                // With a GCM cipher, the packet length is not included in the plaintext.
                let packetWithoutLength = payload.slice(SshProtocol.packetLengthSize, payload.length);
                const encryptedPacket = await encryption.transform(packetWithoutLength);
                encryptedPacket.copy(packetWithoutLength);
                // The GCM tag was already generated during the transform call above;
                // this just retrieves it.
                mac = await hmac.sign(packetWithoutLength);
            }
            else {
                if (hmac) {
                    mac = await this.computeHmac(hmac, payload, this.outboundPacketSequence);
                }
                if (encryption) {
                    payload = await encryption.transform(payload);
                }
            }
            if (!(message instanceof connectionMessages_1.ChannelDataMessage)) {
                this.trace(trace_1.TraceLevel.Verbose, trace_1.SshTraceEventIds.sendingMessage, `Sending #${this.outboundPacketSequence} ${message}`);
            }
            else if (this.traceChannelData) {
                this.trace(trace_1.TraceLevel.Verbose, trace_1.SshTraceEventIds.sendingChannelData, `Sending #${this.outboundPacketSequence} ${message}`);
            }
            if (this.incomingMessagesHaveReconnectInfo) {
                // Save sent messages in case they need to be re-sent after reconnect.
                // They'll be discarded soon, after the other side acknowledges them.
                const sequencedMessage = new SequencedMessage(this.outboundPacketSequence, message);
                sequencedMessage.sentTime = this.metrics.time;
                this.recentSentMessages.enqueue(sequencedMessage);
            }
            this.outboundPacketSequence++;
            this.outboundFlow += packetLength;
            if (mac) {
                const packet = buffer_1.Buffer.concat([payload, mac], payload.length + mac.length);
                result = await this.write(packet, cancellation);
            }
            else {
                result = await this.write(payload, cancellation);
            }
            this.metrics.addMessageSent(SshProtocol.packetLengthSize + packetLength + ((_a = hmac === null || hmac === void 0 ? void 0 : hmac.digestLength) !== null && _a !== void 0 ? _a : 0));
        }
        finally {
            this.sessionSemaphore.release();
        }
        await this.considerReExchange(false, cancellation);
        return result;
    }
    /**
     * Attemps to read one message from the stream.
     * @returns The message, or `null` if the stream was disposed.
     * @throws SshConnectionError if reading from the stream failed for any other reason.
     */
    async receiveMessage(cancellation) {
        var _a;
        const algorithms = this.algorithms;
        const encryption = algorithms === null || algorithms === void 0 ? void 0 : algorithms.decipher;
        const hmac = algorithms === null || algorithms === void 0 ? void 0 : algorithms.messageVerifier;
        const compression = algorithms === null || algorithms === void 0 ? void 0 : algorithms.decompressor;
        // The packet length is not encrypted when in EtM or AEAD mode.
        // So read only the length bytes first, separate from the remaining payload.
        const isLengthEncrypted = !((hmac === null || hmac === void 0 ? void 0 : hmac.encryptThenMac) || (hmac === null || hmac === void 0 ? void 0 : hmac.authenticatedEncryption));
        const firstBlockSize = !isLengthEncrypted
            ? SshProtocol.packetLengthSize
            : encryption
                ? Math.max(8, encryption.blockLength)
                : 8;
        this.receiveWriter.position = firstBlockSize;
        let firstBlock = this.receiveWriter.toBuffer();
        if (!(await this.read(firstBlock, cancellation))) {
            return null;
        }
        this.lastIncomingTimestamp = this.metrics.time;
        // Decrypt the first block to get the packet length.
        if (encryption && isLengthEncrypted) {
            firstBlock = await encryption.transform(firstBlock);
            this.receiveWriter.position = 0;
            this.receiveWriter.write(firstBlock);
        }
        const receiveReader = new sshData_1.SshDataReader(firstBlock);
        const packetLength = receiveReader.readUInt32();
        if (packetLength > SshProtocol.maxPacketLength) {
            throw new errors_1.SshConnectionError('Invalid packet length.', transportMessages_1.SshDisconnectReason.protocolError);
        }
        const packetBufferSize = SshProtocol.packetLengthSize + packetLength;
        if (packetBufferSize > firstBlockSize) {
            this.receiveWriter.skip(packetBufferSize - firstBlockSize);
        }
        if (hmac) {
            // Ensure the receive buffer is large enough to also hold the mac without expanding.
            this.receiveWriter.skip(hmac.digestLength);
        }
        const receiveBuffer = this.receiveWriter.toBuffer();
        const packetBuffer = receiveBuffer.slice(0, packetBufferSize);
        const macBuffer = receiveBuffer.slice(packetBufferSize);
        let followingBlocks = packetBuffer.slice(firstBlockSize, packetBufferSize);
        if (followingBlocks.length > 0) {
            if (!(await this.read(followingBlocks, cancellation))) {
                return null;
            }
            if (hmac === null || hmac === void 0 ? void 0 : hmac.encryptThenMac) {
                // In EtM mode, read and verify the MAC before decrypting.
                ///const packetWithoutLength = packet.slice(SshProtocol.packetLengthSize);
                if (!(await this.readAndVerifyHmac(hmac, packetBuffer, macBuffer, cancellation))) {
                    return null;
                }
            }
            if (encryption) {
                if (hmac === null || hmac === void 0 ? void 0 : hmac.authenticatedEncryption) {
                    // With a GCM cipher, the MAC is required for decryption.
                    if (!(await this.read(macBuffer, cancellation))) {
                        return null;
                    }
                    // This doesn't actually verify anything yet (hence the return value is not checked);
                    // it sets the tag to be used for verification in the following transform call.
                    await hmac.verify(followingBlocks, macBuffer);
                }
                try {
                    followingBlocks = await encryption.transform(followingBlocks);
                }
                catch (e) {
                    if (hmac === null || hmac === void 0 ? void 0 : hmac.authenticatedEncryption) {
                        // GCM decryption failed to verify data + tag.
                        throw new errors_1.SshConnectionError('Invalid MAC', transportMessages_1.SshDisconnectReason.macError);
                    }
                    else {
                        throw e;
                    }
                }
                this.receiveWriter.position = firstBlockSize;
                this.receiveWriter.write(followingBlocks);
            }
        }
        if (hmac && !hmac.encryptThenMac && !hmac.authenticatedEncryption) {
            if (!(await this.readAndVerifyHmac(hmac, packetBuffer, macBuffer, cancellation))) {
                return null;
            }
        }
        const paddingLength = packetBuffer[SshProtocol.packetLengthSize];
        let payload = packetBuffer.slice(SshProtocol.packetLengthSize + SshProtocol.paddingLengthSize, SshProtocol.packetLengthSize + (packetLength - paddingLength));
        if (compression) {
            payload = compression.decompress(payload);
        }
        if (this.incomingMessagesHaveReconnectInfo) {
            // Read the extension info from the end of the payload.
            let lastSequenceSeenByRemote;
            let remoteTimeSinceLastReceived;
            if (this.incomingMessagesHaveLatencyInfo) {
                const reader = new sshData_1.SshDataReader(payload.slice(payload.length - 12, payload.length));
                lastSequenceSeenByRemote = reader.readUInt64();
                remoteTimeSinceLastReceived = reader.readUInt32() / 1000; // microseconds to ms
                payload = payload.slice(0, payload.length - 12);
            }
            else {
                const reader = new sshData_1.SshDataReader(payload.slice(payload.length - 8, payload.length));
                lastSequenceSeenByRemote = reader.readUInt64();
                remoteTimeSinceLastReceived = 0;
                payload = payload.slice(0, payload.length - 8);
            }
            // Discard any recently sent messages that were acknowledged.
            while (this.recentSentMessages.size > 0) {
                const oldestSequenceMessage = this.recentSentMessages.peek();
                if (oldestSequenceMessage.sequence > lastSequenceSeenByRemote) {
                    break;
                }
                if (this.stream &&
                    this.incomingMessagesHaveLatencyInfo &&
                    oldestSequenceMessage.sequence === lastSequenceSeenByRemote) {
                    // Compute the time since the message with the last-seen sequence was sent.
                    // Subtract the time between when the remote side received the message with the
                    // last-seen sequence and sent the current message.
                    const timeSinceSent = this.lastIncomingTimestamp - oldestSequenceMessage.sentTime;
                    const roundTripLatency = timeSinceSent - remoteTimeSinceLastReceived;
                    this.metrics.updateLatency(roundTripLatency);
                }
                this.recentSentMessages.dequeue();
            }
        }
        const messageType = payload[0];
        let message = sshMessage_1.SshMessage.create(this.config, messageType, payload);
        if (!message) {
            const unimplementedMessage = new transportMessages_1.UnimplementedMessage();
            unimplementedMessage.sequenceNumber = this.inboundPacketSequence;
            unimplementedMessage.unimplementedMessageType = messageType;
            message = unimplementedMessage;
        }
        if (!(message instanceof connectionMessages_1.ChannelDataMessage)) {
            this.trace(trace_1.TraceLevel.Verbose, trace_1.SshTraceEventIds.receivingMessage, `Receiving #${this.inboundPacketSequence} ${message}`);
        }
        else if (this.traceChannelData) {
            this.trace(trace_1.TraceLevel.Verbose, trace_1.SshTraceEventIds.receivingChannelData, `Receiving #${this.inboundPacketSequence} ${message}`);
        }
        await this.sessionSemaphore.wait(cancellation);
        this.inboundPacketSequence++;
        this.inboundFlow += packetLength;
        this.sessionSemaphore.release();
        this.metrics.addMessageReceived(SshProtocol.packetLengthSize + packetLength + ((_a = hmac === null || hmac === void 0 ? void 0 : hmac.digestLength) !== null && _a !== void 0 ? _a : 0));
        await this.considerReExchange(false, cancellation);
        return message;
    }
    dispose() {
        try {
            if (this.stream)
                this.stream.close().catch((e) => {
                    this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.streamCloseError, `Error closing stream: ${e.message}`, e);
                });
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.streamCloseError, `Error closing stream: ${e.message}`, e);
        }
        this.stream = null;
        this.metrics.updateLatency(0);
        if (this.algorithms)
            this.algorithms.dispose();
    }
}
exports.SshProtocol = SshProtocol;
SshProtocol.maxPacketLength = 1024 * 1024; // 1 MB
SshProtocol.packetLengthSize = 4;
SshProtocol.paddingLengthSize = 1;
//# sourceMappingURL=sshProtocol.js.map

/***/ }),

/***/ 90450:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuthenticationSuccessMessage = exports.AuthenticationFailureMessage = exports.PasswordRequestMessage = exports.PublicKeyOKMessage = exports.PublicKeyRequestMessage = exports.AuthenticationRequestMessage = exports.AuthenticationMessage = void 0;
const sshMessage_1 = __webpack_require__(285);
class AuthenticationMessage extends sshMessage_1.SshMessage {
}
exports.AuthenticationMessage = AuthenticationMessage;
class AuthenticationRequestMessage extends AuthenticationMessage {
    get messageType() {
        return 50;
    }
    onRead(reader) {
        this.username = reader.readString('utf8');
        this.serviceName = reader.readString('ascii');
        this.methodName = reader.readString('ascii');
    }
    onWrite(writer) {
        writer.writeString(this.username || '', 'utf8');
        writer.writeString(this.serviceName || '', 'ascii');
        writer.writeString(this.validateField(this.methodName, 'method name'), 'ascii');
    }
}
exports.AuthenticationRequestMessage = AuthenticationRequestMessage;
class PublicKeyRequestMessage extends AuthenticationRequestMessage {
    constructor() {
        super();
        this.methodName = "publickey" /* publicKey */;
    }
    get hasSignature() {
        return this.signature && this.signature.length > 0 ? true : false;
    }
    onRead(reader) {
        super.onRead(reader);
        const hasSignature = reader.readBoolean();
        this.keyAlgorithmName = reader.readString('ascii');
        this.publicKey = reader.readBinary();
        if (hasSignature) {
            this.signature = reader.readBinary();
            this.payloadWithoutSignature = this.rawBytes.slice(0, this.rawBytes.length - this.signature.length - 4);
        }
        else {
            this.signature = undefined;
        }
    }
    onWrite(writer) {
        var _a, _b;
        super.onWrite(writer);
        if (!this.keyAlgorithmName)
            throw new Error('Key algorithm name not set.');
        if (this.methodName === "hostbased" /* hostBased */) {
            writer.writeString(this.keyAlgorithmName, 'ascii');
            writer.writeBinary(this.publicKey || Buffer.alloc(0));
            writer.writeString((_a = this.clientHostname) !== null && _a !== void 0 ? _a : '', 'ascii');
            writer.writeString((_b = this.clientUsername) !== null && _b !== void 0 ? _b : '', 'ascii');
            if (!this.hasSignature) {
                throw new Error('A signature is required for a host-based authentcation request.');
            }
            writer.writeBinary(this.signature);
        }
        else {
            writer.writeBoolean(this.hasSignature);
            writer.writeString(this.keyAlgorithmName, 'ascii');
            writer.writeBinary(this.publicKey || Buffer.alloc(0));
            if (this.hasSignature) {
                writer.writeBinary(this.signature);
            }
        }
    }
}
exports.PublicKeyRequestMessage = PublicKeyRequestMessage;
class PublicKeyOKMessage extends AuthenticationMessage {
    get messageType() {
        return 60;
    }
    onRead(reader) {
        this.keyAlgorithmName = reader.readString('ascii');
        this.publicKey = reader.readBinary();
    }
    onWrite(writer) {
        if (!this.keyAlgorithmName)
            throw new Error('Key algorithm name not set.');
        if (!this.publicKey)
            throw new Error('Public key not set.');
        writer.writeString(this.keyAlgorithmName, 'ascii');
        writer.writeBinary(this.publicKey);
    }
}
exports.PublicKeyOKMessage = PublicKeyOKMessage;
class PasswordRequestMessage extends AuthenticationRequestMessage {
    constructor() {
        super();
        this.methodName = "password" /* password */;
    }
    onRead(reader) {
        super.onRead(reader);
        reader.readBoolean();
        this.password = reader.readString('utf8');
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeBoolean(false);
        writer.writeString(this.password || '', 'utf8');
    }
}
exports.PasswordRequestMessage = PasswordRequestMessage;
class AuthenticationFailureMessage extends AuthenticationMessage {
    constructor() {
        super(...arguments);
        this.partialSuccess = false;
    }
    get messageType() {
        return 51;
    }
    onRead(reader) {
        this.methodNames = reader.readList('ascii');
        this.partialSuccess = reader.readBoolean();
    }
    onWrite(writer) {
        writer.writeList(this.methodNames || [], 'ascii');
        writer.writeBoolean(this.partialSuccess);
    }
}
exports.AuthenticationFailureMessage = AuthenticationFailureMessage;
class AuthenticationSuccessMessage extends AuthenticationMessage {
    get messageType() {
        return 52;
    }
    onRead(reader) { }
    onWrite(writer) { }
}
exports.AuthenticationSuccessMessage = AuthenticationSuccessMessage;
sshMessage_1.SshMessage.index.set(50, AuthenticationRequestMessage);
sshMessage_1.SshMessage.index.set(51, AuthenticationFailureMessage);
sshMessage_1.SshMessage.index.set(52, AuthenticationSuccessMessage);
//# sourceMappingURL=authenticationMessages.js.map

/***/ }),

/***/ 45757:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChannelFailureMessage = exports.ChannelSuccessMessage = exports.ChannelSignalMessage = exports.CommandRequestMessage = exports.ChannelRequestMessage = exports.ChannelRequestType = exports.ChannelCloseMessage = exports.ChannelEofMessage = exports.ChannelDataMessage = exports.ChannelWindowAdjustMessage = exports.ChannelOpenFailureMessage = exports.SshChannelOpenFailureReason = exports.ChannelOpenConfirmationMessage = exports.ChannelOpenMessage = exports.ConnectionMessage = void 0;
const sshMessage_1 = __webpack_require__(285);
const sshData_1 = __webpack_require__(67914);
class ConnectionMessage extends sshMessage_1.SshMessage {
}
exports.ConnectionMessage = ConnectionMessage;
class ChannelOpenMessage extends ConnectionMessage {
    get messageType() {
        return 90;
    }
    onRead(reader) {
        this.channelType = reader.readString('ascii');
        this.senderChannel = reader.readUInt32();
        this.initialWindowSize = reader.readUInt32();
        this.maximumPacketSize = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeString(this.validateField(this.channelType, 'channel type'), 'ascii');
        writer.writeUInt32(this.validateField(this.senderChannel, 'sender channel'));
        writer.writeUInt32(this.initialWindowSize || ChannelOpenMessage.defaultInitialWindowSize);
        writer.writeUInt32(this.maximumPacketSize || ChannelOpenMessage.defaultMaximumPacketSize);
    }
}
exports.ChannelOpenMessage = ChannelOpenMessage;
ChannelOpenMessage.defaultInitialWindowSize = 1024 * 1024;
ChannelOpenMessage.defaultMaximumPacketSize = 16 * 1024;
class ChannelOpenConfirmationMessage extends ConnectionMessage {
    get messageType() {
        return 91;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
        this.senderChannel = reader.readUInt32();
        this.initialWindowSize = reader.readUInt32();
        this.maximumPacketSize = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
        writer.writeUInt32(this.validateField(this.senderChannel, 'sender channel'));
        writer.writeUInt32(this.validateField(this.initialWindowSize, 'initial window size'));
        writer.writeUInt32(this.validateField(this.maximumPacketSize, 'max packet size'));
    }
    toString() {
        return `${super.toString()} (recipientChannel=${this.recipientChannel} senderChannel=${this.senderChannel})`;
    }
}
exports.ChannelOpenConfirmationMessage = ChannelOpenConfirmationMessage;
var SshChannelOpenFailureReason;
(function (SshChannelOpenFailureReason) {
    SshChannelOpenFailureReason[SshChannelOpenFailureReason["none"] = 0] = "none";
    SshChannelOpenFailureReason[SshChannelOpenFailureReason["administrativelyProhibited"] = 1] = "administrativelyProhibited";
    SshChannelOpenFailureReason[SshChannelOpenFailureReason["connectFailed"] = 2] = "connectFailed";
    SshChannelOpenFailureReason[SshChannelOpenFailureReason["unknownChannelType"] = 3] = "unknownChannelType";
    SshChannelOpenFailureReason[SshChannelOpenFailureReason["resourceShortage"] = 4] = "resourceShortage";
})(SshChannelOpenFailureReason = exports.SshChannelOpenFailureReason || (exports.SshChannelOpenFailureReason = {}));
class ChannelOpenFailureMessage extends ConnectionMessage {
    get messageType() {
        return 92;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
        this.reasonCode = reader.readUInt32();
        this.description = reader.readString('utf8');
        this.language = reader.readString('ascii');
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
        writer.writeUInt32(this.validateField(this.reasonCode, 'reason code'));
        writer.writeString(this.description || '', 'utf8');
        writer.writeString(this.language || 'en', 'ascii');
    }
    toString() {
        return `${super.toString()} (${SshChannelOpenFailureReason[this.reasonCode || 0]}: ${this.description})`;
    }
}
exports.ChannelOpenFailureMessage = ChannelOpenFailureMessage;
class ChannelWindowAdjustMessage extends ConnectionMessage {
    get messageType() {
        return 93;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
        this.bytesToAdd = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
        writer.writeUInt32(this.validateField(this.bytesToAdd, 'bytes to add'));
    }
}
exports.ChannelWindowAdjustMessage = ChannelWindowAdjustMessage;
class ChannelDataMessage extends ConnectionMessage {
    get messageType() {
        return 94;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
        this.data = reader.readBinary();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
        writer.writeBinary(this.validateField(this.data, 'data'));
    }
    toString() {
        return this.data ? (0, sshData_1.formatBuffer)(this.data, '') : `[0]`;
    }
}
exports.ChannelDataMessage = ChannelDataMessage;
class ChannelEofMessage extends ConnectionMessage {
    get messageType() {
        return 96;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
    }
}
exports.ChannelEofMessage = ChannelEofMessage;
class ChannelCloseMessage extends ConnectionMessage {
    get messageType() {
        return 97;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
    }
}
exports.ChannelCloseMessage = ChannelCloseMessage;
var ChannelRequestType;
(function (ChannelRequestType) {
    ChannelRequestType["command"] = "exec";
    ChannelRequestType["shell"] = "shell";
    ChannelRequestType["terminal"] = "pty-req";
    ChannelRequestType["signal"] = "signal";
    ChannelRequestType["exitSignal"] = "exit-signal";
    ChannelRequestType["exitStatus"] = "exit-status";
})(ChannelRequestType = exports.ChannelRequestType || (exports.ChannelRequestType = {}));
class ChannelRequestMessage extends ConnectionMessage {
    constructor(requestType, wantReply) {
        super();
        this.requestType = requestType;
        this.wantReply = wantReply !== null && wantReply !== void 0 ? wantReply : false;
    }
    get messageType() {
        return 98;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
        this.requestType = reader.readString('ascii');
        this.wantReply = reader.readBoolean();
    }
    onWrite(writer) {
        writer.writeUInt32(this.recipientChannel || 0);
        writer.writeString(this.validateField(this.requestType, 'request type'), 'ascii');
        writer.writeBoolean(this.wantReply);
    }
}
exports.ChannelRequestMessage = ChannelRequestMessage;
class CommandRequestMessage extends ChannelRequestMessage {
    constructor() {
        super();
        this.requestType = ChannelRequestType.command;
    }
    onRead(reader) {
        super.onRead(reader);
        this.command = reader.readString('utf8');
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeString(this.validateField(this.command, 'command'), 'utf8');
    }
    toString() {
        return `${super.toString()} (requestType=${this.requestType})`;
    }
}
exports.CommandRequestMessage = CommandRequestMessage;
class ChannelSignalMessage extends ChannelRequestMessage {
    constructor() {
        super();
    }
    get signal() {
        return this.signalValue;
    }
    set signal(value) {
        this.requestType = ChannelRequestType.signal;
        this.signalValue = value;
    }
    get exitSignal() {
        return this.signalValue;
    }
    set exitSignal(value) {
        this.requestType = ChannelRequestType.exitSignal;
        this.signalValue = value;
    }
    get errorMessage() {
        return this.errorMessageValue;
    }
    set errorMessage(value) {
        if (this.requestType !== ChannelRequestType.exitSignal) {
            throw new Error(`Error message property is only valid for ${ChannelRequestType.exitSignal} messages.`);
        }
        this.errorMessageValue = value;
    }
    get exitStatus() {
        return this.statusValue;
    }
    set exitStatus(value) {
        this.requestType = ChannelRequestType.exitStatus;
        this.statusValue = value;
    }
    onRead(reader) {
        super.onRead(reader);
        switch (this.requestType) {
            case ChannelRequestType.exitStatus:
                this.exitStatus = reader.readUInt32();
                break;
            case ChannelRequestType.signal:
                this.signal = reader.readString('ascii');
                break;
            case ChannelRequestType.exitSignal:
                this.exitSignal = reader.readString('ascii');
                reader.readBoolean(); // Core dumped
                this.errorMessage = reader.readString('utf8');
                reader.readString('ascii'); // Language tag
                break;
            default:
                break;
        }
    }
    onWrite(writer) {
        if (!this.requestType) {
            throw new Error('Signal message request type not set.');
        }
        this.wantReply = false;
        super.onWrite(writer);
        switch (this.requestType) {
            case ChannelRequestType.exitStatus:
                writer.writeUInt32(this.validateField(this.exitStatus, 'exit status'));
                break;
            case ChannelRequestType.signal:
                writer.writeString(this.validateField(this.signal, 'signal'), 'ascii');
                break;
            case ChannelRequestType.exitSignal:
                writer.writeString(this.validateField(this.exitSignal, 'exit signal'), 'ascii');
                writer.writeBoolean(false); // Core dumped
                writer.writeString(this.errorMessage || '', 'utf8');
                writer.writeString('', 'ascii'); // Language tag
                break;
            default:
                throw new Error(`Unknown signal message request type: ${this.requestType}`);
        }
    }
}
exports.ChannelSignalMessage = ChannelSignalMessage;
class ChannelSuccessMessage extends ConnectionMessage {
    get messageType() {
        return 99;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
    }
}
exports.ChannelSuccessMessage = ChannelSuccessMessage;
class ChannelFailureMessage extends ConnectionMessage {
    get messageType() {
        return 100;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
    }
}
exports.ChannelFailureMessage = ChannelFailureMessage;
sshMessage_1.SshMessage.index.set(90, ChannelOpenMessage);
sshMessage_1.SshMessage.index.set(91, ChannelOpenConfirmationMessage);
sshMessage_1.SshMessage.index.set(92, ChannelOpenFailureMessage);
sshMessage_1.SshMessage.index.set(93, ChannelWindowAdjustMessage);
sshMessage_1.SshMessage.index.set(94, ChannelDataMessage);
sshMessage_1.SshMessage.index.set(96, ChannelEofMessage);
sshMessage_1.SshMessage.index.set(97, ChannelCloseMessage);
sshMessage_1.SshMessage.index.set(98, ChannelRequestMessage);
sshMessage_1.SshMessage.index.set(99, ChannelSuccessMessage);
sshMessage_1.SshMessage.index.set(100, ChannelFailureMessage);
//# sourceMappingURL=connectionMessages.js.map

/***/ }),

/***/ 50856:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NewKeysMessage = exports.KeyExchangeDhReplyMessage = exports.KeyExchangeDhInitMessage = exports.KeyExchangeInitMessage = exports.KeyExchangeMessage = void 0;
const buffer_1 = __webpack_require__(30816);
const sshMessage_1 = __webpack_require__(285);
const sshAlgorithms_1 = __webpack_require__(91605);
class KeyExchangeMessage extends sshMessage_1.SshMessage {
}
exports.KeyExchangeMessage = KeyExchangeMessage;
class KeyExchangeInitMessage extends KeyExchangeMessage {
    get messageType() {
        return 20;
    }
    onRead(reader) {
        this.cookie = reader.read(16);
        this.keyExchangeAlgorithms = reader.readList('ascii');
        this.serverHostKeyAlgorithms = reader.readList('ascii');
        this.encryptionAlgorithmsClientToServer = reader.readList('ascii');
        this.encryptionAlgorithmsServerToClient = reader.readList('ascii');
        this.macAlgorithmsClientToServer = reader.readList('ascii');
        this.macAlgorithmsServerToClient = reader.readList('ascii');
        this.compressionAlgorithmsClientToServer = reader.readList('ascii');
        this.compressionAlgorithmsServerToClient = reader.readList('ascii');
        this.languagesClientToServer = reader.readList('ascii');
        this.languagesServerToClient = reader.readList('ascii');
        this.firstKexPacketFollows = reader.readBoolean();
        this.reserved = reader.readUInt32();
    }
    onWrite(writer) {
        if (!this.cookie) {
            this.cookie = buffer_1.Buffer.alloc(16);
            sshAlgorithms_1.SshAlgorithms.random.getBytes(this.cookie);
        }
        writer.write(this.cookie);
        writer.writeList(this.keyExchangeAlgorithms || [], 'ascii');
        writer.writeList(this.serverHostKeyAlgorithms || [], 'ascii');
        writer.writeList(this.encryptionAlgorithmsClientToServer || [], 'ascii');
        writer.writeList(this.encryptionAlgorithmsServerToClient || [], 'ascii');
        writer.writeList(this.macAlgorithmsClientToServer || [], 'ascii');
        writer.writeList(this.macAlgorithmsServerToClient || [], 'ascii');
        writer.writeList(this.compressionAlgorithmsClientToServer || [], 'ascii');
        writer.writeList(this.compressionAlgorithmsServerToClient || [], 'ascii');
        writer.writeList(this.languagesClientToServer || [], 'ascii');
        writer.writeList(this.languagesServerToClient || [], 'ascii');
        writer.writeBoolean(this.validateField(this.firstKexPacketFollows, 'first KEX package follows'));
        writer.writeUInt32(this.reserved || 0);
    }
}
exports.KeyExchangeInitMessage = KeyExchangeInitMessage;
class KeyExchangeDhInitMessage extends KeyExchangeMessage {
    get messageType() {
        return 30;
    }
    onRead(reader) {
        this.e = reader.readBinary();
    }
    onWrite(writer) {
        writer.writeBinary(this.validateField(this.e, 'E'));
    }
}
exports.KeyExchangeDhInitMessage = KeyExchangeDhInitMessage;
class KeyExchangeDhReplyMessage extends KeyExchangeMessage {
    get messageType() {
        return 31;
    }
    onRead(reader) {
        this.hostKey = reader.readBinary();
        this.f = reader.readBinary();
        this.signature = reader.readBinary();
    }
    onWrite(writer) {
        writer.writeBinary(this.validateField(this.hostKey, 'host key'));
        writer.writeBinary(this.validateField(this.f, 'F'));
        writer.writeBinary(this.validateField(this.signature, 'signature'));
    }
}
exports.KeyExchangeDhReplyMessage = KeyExchangeDhReplyMessage;
class NewKeysMessage extends KeyExchangeMessage {
    get messageType() {
        return 21;
    }
    onRead(reader) { }
    onWrite(writer) { }
}
exports.NewKeysMessage = NewKeysMessage;
sshMessage_1.SshMessage.index.set(20, KeyExchangeInitMessage);
sshMessage_1.SshMessage.index.set(30, KeyExchangeDhInitMessage);
sshMessage_1.SshMessage.index.set(31, KeyExchangeDhReplyMessage);
sshMessage_1.SshMessage.index.set(21, NewKeysMessage);
//# sourceMappingURL=kexMessages.js.map

/***/ }),

/***/ 285:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshMessage = void 0;
const buffer_1 = __webpack_require__(30816);
const sshData_1 = __webpack_require__(67914);
class SshMessage {
    get messageType() {
        return 0;
    }
    toBuffer() {
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(16));
        this.write(writer);
        return writer.toBuffer();
    }
    read(reader) {
        this.rawBytes = reader.buffer;
        const number = reader.readByte();
        if (number !== this.messageType) {
            throw new Error(`Message type ${number} is not valid.`);
        }
        this.onRead(reader);
    }
    write(writer) {
        writer.writeByte(this.messageType);
        this.onWrite(writer);
    }
    onRead(reader) {
        throw new Error('Not supported.');
    }
    onWrite(writer) {
        throw new Error('Not supported.');
    }
    validateField(value, name) {
        if (typeof value === 'undefined') {
            throw new Error(`${this.constructor.name} ${name} is required.`);
        }
        return value;
    }
    toString() {
        return this.constructor.name;
    }
    static create(config, messageType, data) {
        const messageClass = config.messages.get(messageType);
        if (messageClass) {
            const message = new messageClass();
            message.read(new sshData_1.SshDataReader(data));
            return message;
        }
        else {
            return null;
        }
    }
    convertTo(otherMessage, copy = false) {
        const reader = new sshData_1.SshDataReader(copy ? buffer_1.Buffer.from(this.rawBytes) : this.rawBytes);
        otherMessage.read(reader);
        return otherMessage;
    }
}
exports.SshMessage = SshMessage;
SshMessage.index = new Map();
//# sourceMappingURL=sshMessage.js.map

/***/ }),

/***/ 90818:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SessionReconnectFailureMessage = exports.SshReconnectFailureReason = exports.SessionReconnectResponseMessage = exports.SessionReconnectRequestMessage = exports.SessionChannelRequestMessage = exports.ExtensionInfoMessage = exports.SessionRequestFailureMessage = exports.SessionRequestSuccessMessage = exports.SessionRequestMessage = exports.ServiceAcceptMessage = exports.ServiceRequestMessage = exports.DebugMessage = exports.UnimplementedMessage = exports.IgnoreMessage = exports.DisconnectMessage = exports.SshDisconnectReason = void 0;
const sshMessage_1 = __webpack_require__(285);
const connectionMessages_1 = __webpack_require__(45757);
var SshDisconnectReason;
(function (SshDisconnectReason) {
    SshDisconnectReason[SshDisconnectReason["none"] = 0] = "none";
    SshDisconnectReason[SshDisconnectReason["hostNotAllowedToConnect"] = 1] = "hostNotAllowedToConnect";
    SshDisconnectReason[SshDisconnectReason["protocolError"] = 2] = "protocolError";
    SshDisconnectReason[SshDisconnectReason["keyExchangeFailed"] = 3] = "keyExchangeFailed";
    SshDisconnectReason[SshDisconnectReason["reserved"] = 4] = "reserved";
    SshDisconnectReason[SshDisconnectReason["macError"] = 5] = "macError";
    SshDisconnectReason[SshDisconnectReason["compressionError"] = 6] = "compressionError";
    SshDisconnectReason[SshDisconnectReason["serviceNotAvailable"] = 7] = "serviceNotAvailable";
    SshDisconnectReason[SshDisconnectReason["protocolVersionNotSupported"] = 8] = "protocolVersionNotSupported";
    SshDisconnectReason[SshDisconnectReason["hostKeyNotVerifiable"] = 9] = "hostKeyNotVerifiable";
    SshDisconnectReason[SshDisconnectReason["connectionLost"] = 10] = "connectionLost";
    SshDisconnectReason[SshDisconnectReason["byApplication"] = 11] = "byApplication";
    SshDisconnectReason[SshDisconnectReason["tooManyConnections"] = 12] = "tooManyConnections";
    SshDisconnectReason[SshDisconnectReason["authCancelledByUser"] = 13] = "authCancelledByUser";
    SshDisconnectReason[SshDisconnectReason["noMoreAuthMethodsAvailable"] = 14] = "noMoreAuthMethodsAvailable";
    SshDisconnectReason[SshDisconnectReason["illegalUserName"] = 15] = "illegalUserName";
})(SshDisconnectReason = exports.SshDisconnectReason || (exports.SshDisconnectReason = {}));
class DisconnectMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 1;
    }
    onRead(reader) {
        this.reasonCode = reader.readUInt32();
        this.description = reader.readString('utf8');
        if (reader.available >= 4) {
            this.language = reader.readString('ascii');
        }
        else {
            this.language = null;
        }
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.reasonCode, 'reason code'));
        writer.writeString(this.description || '', 'utf8');
        if (this.language) {
            writer.writeString(this.language, 'ascii');
        }
    }
}
exports.DisconnectMessage = DisconnectMessage;
class IgnoreMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 2;
    }
    onRead(reader) { }
    onWrite(writer) { }
}
exports.IgnoreMessage = IgnoreMessage;
class UnimplementedMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 3;
    }
    onRead(reader) {
        this.sequenceNumber = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.sequenceNumber, 'sequence number'));
    }
    toString() {
        return !!this.unimplementedMessageType
            ? `${super.toString()} (messageType=${this.unimplementedMessageType})`
            : `${super.toString()} (sequenceNumber=${this.sequenceNumber})`;
    }
}
exports.UnimplementedMessage = UnimplementedMessage;
class DebugMessage extends sshMessage_1.SshMessage {
    constructor(message) {
        super();
        this.alwaysDisplay = false;
        this.message = message;
    }
    get messageType() {
        return 4;
    }
    onRead(reader) {
        this.alwaysDisplay = reader.readBoolean();
        this.message = reader.readString('utf8');
        this.language = reader.readString('ascii');
    }
    onWrite(writer) {
        var _a, _b;
        writer.writeBoolean(this.alwaysDisplay);
        writer.writeString((_a = this.message) !== null && _a !== void 0 ? _a : '', 'utf8');
        writer.writeString((_b = this.language) !== null && _b !== void 0 ? _b : '', 'ascii');
    }
    toString() {
        return `${super.toString()}: ${this.message}`;
    }
}
exports.DebugMessage = DebugMessage;
class ServiceRequestMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 5;
    }
    onRead(reader) {
        this.serviceName = reader.readString('ascii');
    }
    onWrite(writer) {
        writer.writeString(this.validateField(this.serviceName, 'service name'), 'ascii');
    }
}
exports.ServiceRequestMessage = ServiceRequestMessage;
class ServiceAcceptMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 6;
    }
    onRead(reader) {
        this.serviceName = reader.readString('ascii');
    }
    onWrite(writer) {
        writer.writeString(this.validateField(this.serviceName, 'service name'), 'ascii');
    }
}
exports.ServiceAcceptMessage = ServiceAcceptMessage;
class SessionRequestMessage extends sshMessage_1.SshMessage {
    constructor(requestType, wantReply) {
        super();
        this.requestType = requestType;
        this.wantReply = wantReply !== null && wantReply !== void 0 ? wantReply : false;
    }
    get messageType() {
        return 80;
    }
    onRead(reader) {
        this.requestType = reader.readString('ascii');
        this.wantReply = reader.readBoolean();
    }
    onWrite(writer) {
        writer.writeString(this.validateField(this.requestType, 'request type'), 'ascii');
        writer.writeBoolean(this.wantReply);
    }
    toString() {
        return `${super.toString()} (requestType=${this.requestType})`;
    }
}
exports.SessionRequestMessage = SessionRequestMessage;
class SessionRequestSuccessMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 81;
    }
    onRead(reader) { }
    onWrite(writer) { }
}
exports.SessionRequestSuccessMessage = SessionRequestSuccessMessage;
class SessionRequestFailureMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 82;
    }
    onRead(reader) { }
    onWrite(writer) { }
}
exports.SessionRequestFailureMessage = SessionRequestFailureMessage;
class ExtensionInfoMessage extends sshMessage_1.SshMessage {
    constructor() {
        // https://tools.ietf.org/html/draft-ietf-curdle-ssh-ext-info-15
        super(...arguments);
        this.extensionInfo = {};
    }
    get messageType() {
        return 7;
    }
    onRead(reader) {
        const count = reader.readUInt32();
        this.extensionInfo = {};
        for (let i = 0; i < count; i++) {
            const key = reader.readString('ascii');
            const value = reader.readString('utf8');
            this.extensionInfo[key] = value;
        }
    }
    onWrite(writer) {
        const keys = Object.keys(this.extensionInfo);
        writer.writeUInt32(keys.length);
        for (let key of keys) {
            writer.writeString(key, 'ascii');
            writer.writeString(this.extensionInfo[key] || '', 'utf8');
        }
    }
    toString() {
        let extensionInfoDetails = '';
        for (const [key, value] of Object.entries(this.extensionInfo)) {
            if (extensionInfoDetails) {
                extensionInfoDetails += '; ';
            }
            extensionInfoDetails += key;
            if (value) {
                extensionInfoDetails += '=' + value;
            }
        }
        return `${super.toString()} (${extensionInfoDetails})`;
    }
}
exports.ExtensionInfoMessage = ExtensionInfoMessage;
ExtensionInfoMessage.serverIndicator = 'ext-info-c';
ExtensionInfoMessage.clientIndicator = 'ext-info-c';
class SessionChannelRequestMessage extends SessionRequestMessage {
    onRead(reader) {
        super.onRead(reader);
        this.senderChannel = reader.readUInt32();
        const request = new connectionMessages_1.ChannelRequestMessage();
        request.read(reader);
        this.request = request;
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeUInt32(this.validateField(this.senderChannel, 'sender channel'));
        this.validateField(this.request, 'request message').write(writer);
    }
}
exports.SessionChannelRequestMessage = SessionChannelRequestMessage;
class SessionReconnectRequestMessage extends SessionRequestMessage {
    onRead(reader) {
        super.onRead(reader);
        this.clientReconnectToken = reader.readBinary();
        this.lastReceivedSequenceNumber = reader.readUInt64();
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeBinary(this.validateField(this.clientReconnectToken, 'clientReconnectToken'));
        writer.writeUInt64(this.validateField(this.lastReceivedSequenceNumber, 'lastReceivedSequenceNumber'));
    }
}
exports.SessionReconnectRequestMessage = SessionReconnectRequestMessage;
class SessionReconnectResponseMessage extends SessionRequestSuccessMessage {
    onRead(reader) {
        super.onRead(reader);
        this.serverReconnectToken = reader.readBinary();
        this.lastReceivedSequenceNumber = reader.readUInt64();
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeBinary(this.validateField(this.serverReconnectToken, 'serverReconnectToken'));
        writer.writeUInt64(this.validateField(this.lastReceivedSequenceNumber, 'lastReceivedSequenceNumber'));
    }
}
exports.SessionReconnectResponseMessage = SessionReconnectResponseMessage;
var SshReconnectFailureReason;
(function (SshReconnectFailureReason) {
    /** No reason was specified. */
    SshReconnectFailureReason[SshReconnectFailureReason["none"] = 0] = "none";
    /**
     * Reconnection failed due to an unknown server-side error.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["unknownServerFailure"] = 1] = "unknownServerFailure";
    /**
     * The session ID requested by the client for reconnection was not found among
     * the server's reconnectable sessions.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["sessionNotFound"] = 2] = "sessionNotFound";
    /**
     * The reconnect token supplied by the client was invalid when checked by the server.
     * The validation ensures that the client knows a secret key negotiated in the
     * previously connected session.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["invalidClientReconnectToken"] = 3] = "invalidClientReconnectToken";
    /**
     * The server was unable to re-send dropped messages that were requested by the client.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["serverDroppedMessages"] = 4] = "serverDroppedMessages";
    /**
     * Reconnection failed due to an unknown client-side error.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["unknownClientFailure"] = 101] = "unknownClientFailure";
    /**
     * The host key supplied by the reconnected server did not match the host key from the
     * original session; the client refused to reconnect to a different host.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["differentServerHostKey"] = 102] = "differentServerHostKey";
    /**
     * The reconnect token supplied by the server was invalid when checked by the client.
     * The validation ensures that the server knows a secret key negotiated in the
     * previously connected session.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["invalidServerReconnectToken"] = 103] = "invalidServerReconnectToken";
    /**
     * The client was unable to re-send dropped messages that were requested by the server.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["clientDroppedMessages"] = 104] = "clientDroppedMessages";
})(SshReconnectFailureReason = exports.SshReconnectFailureReason || (exports.SshReconnectFailureReason = {}));
class SessionReconnectFailureMessage extends SessionRequestFailureMessage {
    onRead(reader) {
        if (reader.available > 0) {
            this.reasonCode = reader.readUInt32();
            this.description = reader.readString('utf8');
            this.language = reader.readString('ascii');
        }
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.reasonCode, 'reason code'));
        writer.writeString(this.description || '', 'utf8');
        writer.writeString(this.language || 'en', 'ascii');
    }
    toString() {
        return `${super.toString()} (${SshReconnectFailureReason[this.reasonCode || 0]}: ${this.description})`;
    }
}
exports.SessionReconnectFailureMessage = SessionReconnectFailureMessage;
sshMessage_1.SshMessage.index.set(1, DisconnectMessage);
sshMessage_1.SshMessage.index.set(2, IgnoreMessage);
sshMessage_1.SshMessage.index.set(3, UnimplementedMessage);
sshMessage_1.SshMessage.index.set(5, ServiceRequestMessage);
sshMessage_1.SshMessage.index.set(6, ServiceAcceptMessage);
sshMessage_1.SshMessage.index.set(7, ExtensionInfoMessage);
sshMessage_1.SshMessage.index.set(80, SessionRequestMessage);
sshMessage_1.SshMessage.index.set(81, SessionRequestSuccessMessage);
sshMessage_1.SshMessage.index.set(82, SessionRequestFailureMessage);
//# sourceMappingURL=transportMessages.js.map

/***/ }),

/***/ 65321:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChannelMetrics = void 0;
/**
 * Collects cumulative measurements about a channel.
 */
class ChannelMetrics {
    /* @internal */
    constructor() {
        this.bytesSentSum = 0;
        this.bytesReceivedSum = 0;
    }
    /**
     * Gets the total cumulative number of bytes sent for the duration of the channel,
     * not including message framing, padding, and MAC bytes.
     */
    get bytesSent() {
        return this.bytesSentSum;
    }
    /**
     * Gets the total cumulative number of bytes received for the duration of the channel,
     * not including message framing, padding, and MAC bytes.
     */
    get bytesReceived() {
        return this.bytesReceivedSum;
    }
    /* @internal */
    addBytesSent(count) {
        this.bytesSentSum += count;
    }
    /* @internal */
    addBytesReceived(count) {
        this.bytesReceivedSum += count;
    }
    toString() {
        return `Bytes S/R: ${this.bytesSent} / ${this.bytesReceived}; `;
    }
}
exports.ChannelMetrics = ChannelMetrics;
//# sourceMappingURL=channelMetrics.js.map

/***/ }),

/***/ 20419:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SessionContour = void 0;
const errors_1 = __webpack_require__(72917);
const queue_1 = __webpack_require__(28776);
const semaphore_1 = __webpack_require__(24564);
/**
 * Collects session metrics over time, producing an outline of the timing, speed,
 * and quantity of bytes sent/received during the session.
 *
 * Metrics are recorded across a number of equal time intervals. As the session time
 * increases, intervals are expanded to keep the number of intervals under the configured
 * maximum. Each expansion doubles the length of all intervals, while combining the metrics
 * within each pair of combined intervals. Therefore, a longer session has longer intervals
 * and less-granular metrics. In this way, the memory usage (and serialized size) of the
 * session contour remains roughly constant regardless of the length of the session.
 *
 * Metrics exposed via the collection properties on this class may be momentarily
 * inconsistent (but will not throw exceptions) if continued session operation causes
 * intervals to be expanded while the data is being read concurrently. To avoid any
 * inconsistency, hold a lock on the <see cref="SessionContour" /> instance while reading
 * data. (Or wait until the session ends.)
 *
 * A session contour can be exported in a compact form suitable for logging or telemetry.
 * Use the code in `SessionContour.kql` to chart a session contour in Azure Data Explorer.
 */
class SessionContour {
    /**
     * Creates a new instance of the `SessionContour` class.
     *
     * @param maxIntervals Maximum number of metric intervals to record,
     * defaults to 256. Must be a power of two.
     */
    constructor(maxIntervals = 256) {
        /** Current size of the metrics interval, in milliseconds. */
        this.intervalMs = SessionContour.initialInterval;
        /** Number of intervals for which metrics have been recorded. */
        this.count = 0;
        this.updateQueue = new queue_1.Queue();
        this.updateSemaphore = new semaphore_1.Semaphore(0);
        this.disposed = false;
        if (maxIntervals < 2 || (maxIntervals & (maxIntervals - 1)) !== 0) {
            throw new Error('Contour intervals must be a power of two.');
        }
        this.maxIntervals = maxIntervals;
        this.intervalBytesSent = new Array(maxIntervals);
        this.intervalBytesReceived = new Array(maxIntervals);
        this.intervalLatencyMin = new Array(maxIntervals);
        this.intervalLatencyMax = new Array(maxIntervals);
        this.intervalLatencySum = new Array(maxIntervals);
        this.intervalLatencyCount = new Array(maxIntervals);
        this.intervalLatencyAvg = new Array(maxIntervals);
        this.intervalBytesSent.fill(0);
        this.intervalBytesReceived.fill(0);
        this.intervalLatencyMin.fill(0);
        this.intervalLatencyMax.fill(0);
        this.intervalLatencySum.fill(0);
        this.intervalLatencyCount.fill(0);
        this.intervalLatencyAvg.fill(0);
    }
    /**
     * Gets the current number of contour intervals with recorded metrics. This is always
     * less than `maxIntervals`.
     */
    get intervalCount() {
        return this.count;
    }
    /**
     * Gets the current time span of each contour interval, in milliseconds. This interval time
     * span is doubled as necesary such that the entire duration of the session is always covered
     * by fewer intervals than the maximum.
     */
    get interval() {
        return this.intervalMs;
    }
    /**
     * Gets the total number of bytes sent for each interval during the session,
     * including all channels and non-channel protocol messages, and including message
     * framing, padding, and MAC bytes. The number of values is equal to `intervalCount`.
     */
    get bytesSent() {
        return this.intervalBytesSent.slice(0, this.count);
    }
    /**
     * Gets the total number of bytes received for each interval during the session,
     * including all channels and non-channel protocol messages, and including message
     * framing, padding, and MAC bytes. The number of values is equal to `intervalCount`.
     */
    get bytesReceived() {
        return this.intervalBytesReceived.slice(0, this.count);
    }
    /**
     * Gets the minimum recorded round-trip connection latency between client and server for
     * each interval during the session. The number of values is equal to `intervalCount`.
     */
    get latencyMinMs() {
        return this.intervalLatencyMin.slice(0, this.count);
    }
    /**
     * Gets the maximum recorded round-trip connection latency between client and server for
     * each interval during the session. The number of values is equal to `intervalCount`.
     */
    get latencyMaxMs() {
        return this.intervalLatencyMax.slice(0, this.count);
    }
    /**
     * Gets the average recorded round-trip connection latency between client and server for
     * each interval during the session. The number of values is equal to `intervalCount`.
     */
    get latencyAverageMs() {
        return this.intervalLatencyAvg.slice(0, this.count);
    }
    onMessageSent(e) {
        this.updateQueue.enqueue({
            time: e.time,
            bytesSent: e.size,
        });
        this.updateSemaphore.tryRelease();
    }
    onMessageReceived(e) {
        this.updateQueue.enqueue({
            time: e.time,
            bytesReceived: e.size,
        });
        this.updateSemaphore.tryRelease();
    }
    onLatencyUpdated(e) {
        this.updateQueue.enqueue(e);
        this.updateSemaphore.tryRelease();
    }
    onSessionClosed() {
        this.updateSemaphore.tryRelease();
    }
    /**
     * Starts collecting session metrics, and processes the metrics in a backgroud loop until
     * cancelled or until the session is closed or the `SessionContour` instance is disposed.
     */
    async collectMetrics(sessionMetrics, cancellation) {
        if (!sessionMetrics)
            throw new TypeError('A session metrics object is required.');
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        const eventRegistrations = [];
        eventRegistrations.push(sessionMetrics.onMessageSent(this.onMessageSent.bind(this)));
        eventRegistrations.push(sessionMetrics.onMessageReceived(this.onMessageReceived.bind(this)));
        eventRegistrations.push(sessionMetrics.onLatencyUpdated(this.onLatencyUpdated.bind(this)));
        eventRegistrations.push(sessionMetrics.onSessionClosed(this.onSessionClosed.bind(this)));
        try {
            while (!(cancellation === null || cancellation === void 0 ? void 0 : cancellation.isCancellationRequested)) {
                try {
                    await this.updateSemaphore.wait(cancellation);
                }
                catch (e) {
                    // The semaphore was disposed.
                    break;
                }
                const update = this.updateQueue.dequeue();
                if (!update) {
                    // The semaphore was released without enqueueing an update item.
                    break;
                }
                const intervalIndex = this.updateInterval(update.time);
                if (update.bytesSent) {
                    this.intervalBytesSent[intervalIndex] += update.bytesSent;
                }
                if (update.bytesReceived) {
                    this.intervalBytesReceived[intervalIndex] += update.bytesReceived;
                }
                const latency = update.latency;
                if (latency) {
                    if (!this.intervalLatencyMin[intervalIndex] ||
                        latency < this.intervalLatencyMin[intervalIndex]) {
                        this.intervalLatencyMin[intervalIndex] = latency;
                    }
                    if (!this.intervalLatencyMax[intervalIndex] ||
                        latency > this.intervalLatencyMax[intervalIndex]) {
                        this.intervalLatencyMax[intervalIndex] = latency;
                    }
                    this.intervalLatencySum[intervalIndex] += latency;
                    this.intervalLatencyCount[intervalIndex]++;
                    this.intervalLatencyAvg[intervalIndex] =
                        this.intervalLatencySum[intervalIndex] / this.intervalLatencyCount[intervalIndex];
                }
            }
            if (this.disposed) {
                this.updateSemaphore.dispose();
            }
        }
        finally {
            for (let eventRegistration of eventRegistrations) {
                eventRegistration.dispose();
            }
        }
    }
    updateInterval(time) {
        let intervalIndex = Math.floor(time / this.intervalMs);
        if (intervalIndex >= this.intervalCount) {
            // Expand as needed to accomodate the current time interval.
            while (intervalIndex >= this.maxIntervals) {
                this.expandIntervals();
                intervalIndex = Math.floor(time / this.intervalMs);
            }
            this.count = intervalIndex + 1;
        }
        return intervalIndex;
    }
    expandIntervals() {
        const combineLatency = (a, b, f) => a === 0 ? b : b === 0 ? a : f(a, b);
        const halfMaxIntervals = this.maxIntervals / 2;
        for (let i = 0; i < halfMaxIntervals; i++) {
            const iA = 2 * i;
            const iB = 2 * i + 1;
            this.intervalBytesSent[i] = this.intervalBytesSent[iA] + this.intervalBytesSent[iB];
            this.intervalBytesReceived[i] =
                this.intervalBytesReceived[iA] + this.intervalBytesReceived[iB];
            this.intervalLatencyMin[i] = combineLatency(this.intervalLatencyMin[iA], this.intervalLatencyMin[iB], Math.min);
            this.intervalLatencyMax[i] = combineLatency(this.intervalLatencyMax[iA], this.intervalLatencyMax[iB], Math.max);
            this.intervalLatencySum[i] = this.intervalLatencySum[iA] + this.intervalLatencySum[iB];
            const countSum = this.intervalLatencyCount[iA] + this.intervalLatencyCount[iB];
            this.intervalLatencyCount[i] = countSum;
            this.intervalLatencyAvg[i] =
                countSum === 0 ? 0 : this.intervalLatencySum[i] / this.intervalLatencyCount[i];
        }
        this.intervalBytesSent.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalBytesReceived.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalLatencyMin.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalLatencyMax.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalLatencySum.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalLatencyCount.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalLatencyAvg.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalMs *= 2;
    }
    dispose() {
        this.disposed = true;
        // The semaphore will be disposed after all remaining updates have been processed.
        this.updateSemaphore.tryRelease();
    }
    /**
     * Serializes the session contour into a compact form suitable for recording in
     * logs or telemetry.
     *
     * This compact serialization format uses one byte per metric per interval, so there is
     * some loss of precision, but generally not so much that it affects a visualization. A
     * scale factor for each metric is automatically determined and included in the serialized
     * header. The size of the serialized encoded data will be a little under 7 bytes per
     * interval. With the default interval maximum (256), that comes out to less than 1.75 KB.
     *
     * Use the code in `SessionContour.kql` to decode and chart this output in
     * Azure Data Explorer.
     */
    export() {
        // Time and value scales are in log2 form, determined based on the maximum
        // value in each series. This allows for a reasonable range of precision for each
        // value (with byte values ranging from 0-255). For example a max latency in the
        // 500ms range will get a scale factor of 1 (because ceil(log2(500/255)) = 1), so
        // each serialized value (0-255) is half the actual value (0-510).
        const getScale = (values) => Math.max(0, Math.ceil(Math.log2(Math.max(...values) / 255)));
        const applyReverseScale = (value, scale) => Math.round(value / Math.pow(2, scale));
        const bytes = Buffer.alloc(3 + (2 + this.intervalCount) * 5);
        const version = 1;
        const timeScale = Math.log2(this.interval / SessionContour.initialInterval);
        bytes[0] = version;
        bytes[1] = 5; // Number of metrics per interval
        bytes[2] = timeScale;
        bytes[3] = getScale(this.latencyMinMs);
        bytes[4] = getScale(this.latencyMaxMs);
        bytes[5] = getScale(this.latencyAverageMs);
        bytes[6] = getScale(this.bytesSent);
        bytes[7] = getScale(this.bytesReceived);
        bytes[8] = SessionMetric.latencyMin;
        bytes[9] = SessionMetric.latencyMax;
        bytes[10] = SessionMetric.latencyAverage;
        bytes[11] = SessionMetric.bytesSent;
        bytes[12] = SessionMetric.bytesReceived;
        for (let i = 0; i < this.intervalCount; i++) {
            const offset = 13 + 5 * i;
            bytes[offset + 0] = applyReverseScale(this.intervalLatencyMin[i], bytes[3]);
            bytes[offset + 1] = applyReverseScale(this.intervalLatencyMax[i], bytes[4]);
            bytes[offset + 2] = applyReverseScale(this.intervalLatencyAvg[i], bytes[5]);
            bytes[offset + 3] = applyReverseScale(this.intervalBytesSent[i], bytes[6]);
            bytes[offset + 4] = applyReverseScale(this.intervalBytesReceived[i], bytes[7]);
        }
        return bytes.toString('base64');
    }
    /**
     * Deserializes a session contour that was previously exported.
     *
     * Due to loss in precision, some values in the deserialized contour will not exactly match
     * the original, but they will be close.
     */
    static import(contourBase64) {
        const bytes = Buffer.from(contourBase64, 'base64');
        if (bytes.length < 3) {
            throw new Error('Invalid session contour string.');
        }
        const version = bytes[0];
        const metricsPerInterval = bytes[1];
        const timeScale = bytes[2];
        if (version !== 1) {
            throw new Error(`Unsupported session contour version: ${version}`);
        }
        const intervalCount = (bytes.length - 3) / metricsPerInterval - 2;
        if (intervalCount < 1 || bytes.length !== 3 + metricsPerInterval * (intervalCount + 2)) {
            throw new Error(`Incomplete session contour string.`);
        }
        const maxIntervals = Math.pow(2, Math.ceil(Math.log2(intervalCount)));
        const sessionContour = new SessionContour(maxIntervals);
        sessionContour.intervalMs = Math.pow(2, timeScale) * SessionContour.initialInterval;
        sessionContour.count = intervalCount;
        const scales = new Array(metricsPerInterval);
        for (let m = 0; m < metricsPerInterval; m++) {
            scales[m] = Math.pow(2, bytes[3 + m]);
        }
        const ids = new Array(metricsPerInterval);
        for (let m = 0; m < metricsPerInterval; m++) {
            ids[m] = bytes[3 + metricsPerInterval + m];
        }
        for (let i = 0; i < intervalCount; i++) {
            const offset = 3 + (2 + i) * metricsPerInterval;
            for (let m = 0; m < metricsPerInterval; m++) {
                switch (ids[m]) {
                    case SessionMetric.latencyMin:
                        sessionContour.intervalLatencyMin[i] = bytes[offset + m] * scales[m];
                        break;
                    case SessionMetric.latencyMax:
                        sessionContour.intervalLatencyMax[i] = bytes[offset + m] * scales[m];
                        break;
                    case SessionMetric.latencyAverage:
                        sessionContour.intervalLatencyAvg[i] = sessionContour.intervalLatencySum[i] =
                            bytes[offset + m] * scales[m];
                        sessionContour.intervalLatencyCount[i] = bytes[offset + m] === 0 ? 0 : 1;
                        break;
                    case SessionMetric.bytesSent:
                        sessionContour.intervalBytesSent[i] = bytes[offset + m] * scales[m];
                        break;
                    case SessionMetric.bytesReceived:
                        sessionContour.intervalBytesReceived[i] = bytes[offset + m] * scales[m];
                        break;
                    default:
                        // Ignore any unknown metrics
                        break;
                }
            }
        }
        return sessionContour;
    }
}
exports.SessionContour = SessionContour;
SessionContour.initialInterval = 1000; // 1 second (in milliseconds)
var SessionMetric;
(function (SessionMetric) {
    SessionMetric[SessionMetric["none"] = 0] = "none";
    SessionMetric[SessionMetric["latencyMin"] = 1] = "latencyMin";
    SessionMetric[SessionMetric["latencyMax"] = 2] = "latencyMax";
    SessionMetric[SessionMetric["latencyAverage"] = 3] = "latencyAverage";
    SessionMetric[SessionMetric["bytesSent"] = 11] = "bytesSent";
    SessionMetric[SessionMetric["bytesReceived"] = 12] = "bytesReceived";
})(SessionMetric || (SessionMetric = {}));
//# sourceMappingURL=sessionContour.js.map

/***/ }),

/***/ 13965:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SessionMetrics = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
/**
 * Collects current and cumulative measurements about a session.
 */
class SessionMetrics {
    /* @internal */
    constructor() {
        this.startTime = 0;
        this.messagesSentCount = 0;
        this.messagesReceivedCount = 0;
        this.bytesSentSum = 0;
        this.bytesReceivedSum = 0;
        this.reconnectionsCount = 0;
        this.currentLatency = 0;
        this.minLatency = 0;
        this.maxLatency = 0;
        this.latencySum = 0;
        this.latencyCount = 0;
        this.messageSentEmitter = new vscode_jsonrpc_1.Emitter();
        this.onMessageSent = this.messageSentEmitter.event;
        this.messageReceivedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onMessageReceived = this.messageReceivedEmitter.event;
        this.latencyUpdatedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onLatencyUpdated = this.latencyUpdatedEmitter.event;
        this.sessionClosedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onSessionClosed = this.sessionClosedEmitter.event;
        if (typeof performance === 'object' && performance.now) {
            Object.defineProperty(this, 'time', { get: this.browserTime });
        }
        else if (typeof process === 'object' && process.hrtime) {
            Object.defineProperty(this, 'time', { get: this.nodejsTime });
        }
        this.startTime = this.time;
    }
    /**
     * Gets the current stopwatch value in milliseconds (possibly including fractional milliseconds),
     * used for measuring latency.
     */
    /* @internal */
    get time() {
        // The SessionMetrics constructor may replace this with either of the below
        // high-precision implementations, depending on availability of platform APIs.
        return Date.now() - this.startTime;
    }
    browserTime() {
        // Use the browser high-resolution time API.
        // Note the precision may be reduced for pricacy depending on browser and page policy.
        return performance.now() - this.startTime;
    }
    nodejsTime() {
        // Use Node.js high-resolution time API.
        const [s, ns] = process.hrtime();
        return s * 1000 + ns / 1000000 - this.startTime;
    }
    /**
     * Gets the total cumulative number of messages sent for the duration of the session,
     * including all channels and non-channel protocol messages.
     */
    get messagesSent() {
        return this.messagesSentCount;
    }
    /**
     * Gets the total cumulative number of messages received for the duration of the session,
     * including all channels and non-channel protocol messages.
     */
    get messagesReceived() {
        return this.messagesReceivedCount;
    }
    /**
     * Gets the total cumulative number of bytes sent for the duration of the session,
     * including all channels and non-channel protocol messages, and including message
     * framing, padding, and MAC bytes.
     */
    get bytesSent() {
        return this.bytesSentSum;
    }
    /**
     * Gets the total cumulative number of bytes received for the duration of the session,
     * including all channels and non-channel protocol messages, and including message
     * framing, padding, and MAC bytes.
     */
    get bytesReceived() {
        return this.bytesReceivedSum;
    }
    /**
     * Gets the number of times the session has reconnected.
     * </summary>
     * <remarks>
     * Reconnection requires both sides to support the
     * <see cref="SshProtocolExtensionNames.SessionReconnect" /> protocol extension.
     */
    get reconnections() {
        return this.reconnectionsCount;
    }
    /**
     * Gets the average measured round-trip connection latency between client and server
     * over the duration of the session, in milliseconds.
     * </summary>
     * <remarks>
     * Latency measurement requires both sides to support the
     * <see cref="SshProtocolExtensionNames.SessionLatency" /> protocol extension.
     * If not supported, this Sum will be 0.
     */
    get latencyAverageMs() {
        return this.latencyCount === 0 ? 0 : this.latencySum / this.latencyCount;
    }
    /**
     * Gets the minimum measured round-trip connection latency between client and server
     * over the duration of the session, in milliseconds.
     * </summary>
     * <remarks>
     * Latency measurement requires both sides to support the
     * <see cref="SshProtocolExtensionNames.SessionLatency" /> protocol extension.
     * If not supported, this Sum will be 0.
     */
    get latencyMinMs() {
        return this.minLatency;
    }
    /**
     * Gets the maximum measured round-trip connection latency between client and server
     * over the duration of the session, in milliseconds.
     * </summary>
     * <remarks>
     * Latency measurement requires both sides to support the
     * <see cref="SshProtocolExtensionNames.SessionLatency" /> protocol extension.
     * If not supported, this Sum will be 0.
     */
    get latencyMaxMs() {
        return this.maxLatency;
    }
    /**
     * Gets the most recent measurement of round-trip connection latency between client and
     * server, in milliseconds.
     * </summary>
     * <remarks>
     * Latency measurement requires both sides to support the
     * <see cref="SshProtocolExtensionNames.SessionLatency" /> protocol extension.
     * If not supported or the session is not currently connected, this Sum will be 0.
     */
    get latencyCurrentMs() {
        return this.currentLatency;
    }
    /* @internal */
    addMessageSent(size) {
        this.messagesSentCount++;
        this.bytesSentSum += size;
        this.messageSentEmitter.fire({ time: this.time, size });
    }
    /* @internal */
    addMessageReceived(size) {
        this.messagesReceivedCount++;
        this.bytesReceivedSum += size;
        this.messageReceivedEmitter.fire({ time: this.time, size });
    }
    /* @internal */
    addReconnection() {
        this.reconnectionsCount++;
    }
    /* @internal */
    updateLatency(latencyMs) {
        if (latencyMs < 0) {
            throw new Error('Measured latency cannot be negative.');
        }
        this.currentLatency = latencyMs;
        if (latencyMs === 0) {
            // Disconnected.
            return;
        }
        if (this.minLatency === 0 || latencyMs < this.minLatency) {
            this.minLatency = latencyMs;
        }
        if (this.maxLatency === 0 || latencyMs > this.maxLatency) {
            this.maxLatency = latencyMs;
        }
        // Enable computing the average.
        this.latencySum += latencyMs;
        this.latencyCount++;
        this.latencyUpdatedEmitter.fire({ time: this.time, latency: latencyMs });
    }
    /* @internal */
    close() {
        this.currentLatency = 0;
        this.sessionClosedEmitter.fire();
    }
    toString() {
        let s = `Messages S/R: ${this.messagesSent} / ${this.messagesReceived}; ` +
            `Bytes S/R: ${this.bytesSent} / ${this.bytesReceived}; ` +
            `Reconnections: ${this.reconnections}; `;
        // Show extra precision for a low-latency connection.
        const precision = this.minLatency >= 10 ? 1 : this.minLatency >= 1 ? 10 : 100;
        if (this.maxLatency > 0) {
            const min = Math.round(this.minLatency * precision) / precision;
            const avg = Math.round((this.latencySum / this.latencyCount) * precision) / precision;
            const max = Math.round(this.maxLatency * precision) / precision;
            s += `Latency Min-Avg-Max: ${min} - ${avg} - ${max} ms; `;
        }
        if (this.currentLatency > 0) {
            const current = Math.round(this.currentLatency * precision) / precision;
            s += `Current Latency: ${current} ms; `;
        }
        return s;
    }
}
exports.SessionMetrics = SessionMetrics;
//# sourceMappingURL=sessionMetrics.js.map

/***/ }),

/***/ 79802:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiChannelStream = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
const sshStream_1 = __webpack_require__(2656);
const sshSession_1 = __webpack_require__(7395);
const sshSessionConfiguration_1 = __webpack_require__(97183);
const transportMessages_1 = __webpack_require__(90818);
const connectionService_1 = __webpack_require__(47165);
const trace_1 = __webpack_require__(43776);
/**
 * This class allows to establish an ssh session with no security beign defined.
 * Both side could open multiple channel to send/receive data.
 */
class MultiChannelStream {
    constructor(transportStream) {
        this.transportStream = transportStream;
        this.disposed = false;
        this.disposables = [];
        this.closedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onClosed = this.closedEmitter.event;
        this.channelOpeningEmitter = new vscode_jsonrpc_1.Emitter();
        if (!transportStream)
            throw new TypeError('transportStream is required.');
        const noSecurityConfig = new sshSessionConfiguration_1.SshSessionConfiguration(false);
        this.session = new sshSession_1.SshSession(noSecurityConfig);
        this.session.onClosed(this.onSessionClosed, this, this.disposables);
        this.session.onChannelOpening(this.onSessionChannelOpening, this, this.disposables);
    }
    get trace() {
        return this.session.trace;
    }
    set trace(trace) {
        this.session.trace = trace;
    }
    get isClosed() {
        return this.disposed || this.session.isClosed;
    }
    get onChannelOpening() {
        if (!this.isClosed) {
            this.session.activateService(connectionService_1.ConnectionService);
        }
        return this.channelOpeningEmitter.event;
    }
    /**
     * Connects ssh session.
     * @param cancellation optional cancellation token.
     */
    async connect(cancellation) {
        await this.session.connect(this.transportStream, cancellation);
    }
    /**
     * Accept a new channel on the ssh session.
     * @param channelType optional channel type
     * @param cancellation optional cancellation token.
     */
    async acceptChannel(channelType, cancellation) {
        await this.session.connect(this.transportStream, cancellation);
        const channel = await this.session.acceptChannel(channelType, cancellation);
        return channel;
    }
    /**
     * Accept a remote ssh stream.
     * @param channelType optional channel type
     * @param cancellation optional cancellation token.
     */
    async acceptStream(channelType, cancellation) {
        return new sshStream_1.SshStream(await this.acceptChannel(channelType, cancellation));
    }
    /**
     * Open a channel to a remote ssh session
     * @param channelType optional channel type
     * @param cancellation optional cancellation token.
     */
    async openChannel(channelType, cancellation) {
        await this.session.connect(this.transportStream, cancellation);
        const channel = await this.session.openChannel(channelType !== null && channelType !== void 0 ? channelType : null, cancellation);
        return channel;
    }
    /**
     * open a stream to a remote ssh session
     * @param channelType optional channel type
     * @param cancellation optional cancellation token.
     */
    async openStream(channelType, cancellation) {
        return new sshStream_1.SshStream(await this.openChannel(channelType, cancellation));
    }
    /**
     * Connect ssh session and run it until closed.
     * @param cancellation optional cancellation token.
     */
    async connectAndRunUntilClosed(cancellation) {
        const disposables = [];
        const sessionClosedPromise = new Promise((resolve, reject) => {
            cancellation === null || cancellation === void 0 ? void 0 : cancellation.onCancellationRequested(reject, null, disposables);
            this.session.onClosed(resolve, null, disposables);
        });
        try {
            await this.connect(cancellation);
            await sessionClosedPromise;
        }
        finally {
            disposables.forEach((d) => d.dispose());
            await this.close();
        }
    }
    dispose() {
        if (!this.disposed) {
            this.disposed = true;
            this.session.dispose();
            this.unsubscribe();
            try {
                if (this.transportStream)
                    this.transportStream.close().catch((e) => {
                        this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.streamCloseError, `Error closing transport stream: ${e.message}`, e);
                    });
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.streamCloseError, `Error closing transport stream: ${e.message}`, e);
            }
        }
    }
    async close() {
        if (!this.disposed) {
            this.disposed = true;
            await this.session.close(transportMessages_1.SshDisconnectReason.none, 'SshSession disposed');
            this.session.dispose();
            this.unsubscribe();
            await this.transportStream.close();
        }
    }
    onSessionClosed(e) {
        this.unsubscribe();
        this.closedEmitter.fire(e);
    }
    onSessionChannelOpening(e) {
        this.channelOpeningEmitter.fire(e);
    }
    unsubscribe() {
        this.disposables.forEach((d) => d.dispose());
        this.disposables = [];
    }
}
exports.MultiChannelStream = MultiChannelStream;
//# sourceMappingURL=multiChannelStream.js.map

/***/ }),

/***/ 76502:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AuthenticationService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuthenticationService = void 0;
const sshService_1 = __webpack_require__(90447);
const authenticationMessages_1 = __webpack_require__(90450);
const vscode_jsonrpc_1 = __webpack_require__(83730);
const sshData_1 = __webpack_require__(67914);
const transportMessages_1 = __webpack_require__(90818);
const sshAuthenticatingEventArgs_1 = __webpack_require__(28047);
const connectionService_1 = __webpack_require__(47165);
const serviceActivation_1 = __webpack_require__(34670);
const queue_1 = __webpack_require__(28776);
const trace_1 = __webpack_require__(43776);
/**
 * Handles SSH protocol messages related to client authentication.
 */
let AuthenticationService = AuthenticationService_1 = class AuthenticationService extends sshService_1.SshService {
    constructor(session) {
        var _a;
        super(session);
        this.authenticationFailureCount = 0;
        this.disposeCancellationSource = new vscode_jsonrpc_1.CancellationTokenSource();
        const algorithmName = (_a = session.algorithms) === null || _a === void 0 ? void 0 : _a.publicKeyAlgorithmName;
        if (!algorithmName) {
            throw new Error('Algorithms not initialized.');
        }
        this.publicKeyAlgorithmName = algorithmName;
    }
    handleMessage(message, cancellation) {
        if (message instanceof authenticationMessages_1.AuthenticationSuccessMessage) {
            return this.handleSuccessMessage(message);
        }
        else if (message instanceof authenticationMessages_1.AuthenticationFailureMessage) {
            return this.handleFailureMessage(message);
        }
        else if (message instanceof authenticationMessages_1.AuthenticationRequestMessage) {
            return this.handleAuthenticationRequestMessage(message, cancellation);
        }
        else {
            throw new Error(`Message not implemented: ${message}`);
        }
    }
    async handleAuthenticationRequestMessage(message, cancellation) {
        this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.sessionAuthenticating, `Authentication request: ${message.methodName}`);
        if (message.methodName === "publickey" /* publicKey */ ||
            message.methodName === "hostbased" /* hostBased */) {
            return this.handlePublicKeyRequestMessage(message.convertTo(new authenticationMessages_1.PublicKeyRequestMessage()), cancellation);
        }
        else if (message.methodName === "password" /* password */) {
            return this.handlePasswordRequestMessage(message.convertTo(new authenticationMessages_1.PasswordRequestMessage()), cancellation);
        }
        else if (message.methodName === "none" /* none */) {
            return this.handleAuthenticating(message, new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.clientNone, { username: message.username }, cancellation));
        }
        else {
            const failureMessage = new authenticationMessages_1.AuthenticationFailureMessage();
            failureMessage.methodNames = [
                "publickey" /* publicKey */,
                "password" /* password */,
                "hostbased" /* hostBased */,
            ];
            await this.session.sendMessage(failureMessage, cancellation);
        }
    }
    async handlePublicKeyRequestMessage(message, cancellation) {
        var _a, _b, _c;
        const publicKeyAlg = this.session.config.getPublicKeyAlgorithm(message.keyAlgorithmName);
        if (!publicKeyAlg) {
            const failureMessage = new authenticationMessages_1.AuthenticationFailureMessage();
            failureMessage.methodNames = [
                "publickey" /* publicKey */,
                "password" /* password */,
            ];
            await this.session.sendMessage(failureMessage, cancellation);
            return;
        }
        const publicKey = publicKeyAlg.createKeyPair();
        await publicKey.setPublicKeyBytes(message.publicKey);
        let args;
        if (message.methodName === "hostbased" /* hostBased */) {
            args = new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.clientHostBased, {
                username: (_a = message.username) !== null && _a !== void 0 ? _a : '',
                publicKey: publicKey,
                clientHostname: message.clientHostname,
                clientUsername: message.clientUsername,
            });
        }
        else if (!message.hasSignature) {
            args = new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.clientPublicKeyQuery, {
                username: (_b = message.username) !== null && _b !== void 0 ? _b : '',
                publicKey: publicKey,
            });
        }
        else {
            // Verify that the signature matches the public key.
            const signature = publicKeyAlg.readSignatureData(message.signature);
            const sessionId = this.session.sessionId;
            if (sessionId == null) {
                throw new Error('Session ID not initialized.');
            }
            const writer = new sshData_1.SshDataWriter(Buffer.alloc(sessionId.length + message.payloadWithoutSignature.length + 20));
            writer.writeBinary(sessionId);
            writer.write(message.payloadWithoutSignature);
            const signedData = writer.toBuffer();
            const verifier = publicKeyAlg.createVerifier(publicKey);
            const verified = await verifier.verify(signedData, signature);
            if (!verified) {
                await this.handleAuthenticationFailure('Public key authentication failed: invalid signature.', cancellation);
            }
            args = new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.clientPublicKey, {
                username: (_c = message.username) !== null && _c !== void 0 ? _c : '',
                publicKey: publicKey,
            });
        }
        // Raise an Authenticating event that allows handlers to do additional verification
        // of the client's username and public key.
        await this.handleAuthenticating(message, args, cancellation);
    }
    async handlePasswordRequestMessage(message, cancellation) {
        var _a, _b;
        // Raise an Authenticating event that allows handlers to do verification
        // of the client's username and password.
        const args = new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.clientPassword, {
            username: (_a = message.username) !== null && _a !== void 0 ? _a : '',
            password: (_b = message.password) !== null && _b !== void 0 ? _b : '',
        });
        await this.handleAuthenticating(message, args, cancellation);
    }
    async handleAuthenticating(requestMessage, args, cancellation) {
        var _a;
        let authenticatedPrincipal = null;
        try {
            authenticatedPrincipal = await this.session.raiseAuthenticatingEvent(args);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.authenticationError, `Error while authenticating client: ${e.message}`, e);
            authenticatedPrincipal = null;
        }
        if (authenticatedPrincipal) {
            if (args.authenticationType === sshAuthenticatingEventArgs_1.SshAuthenticationType.clientPublicKeyQuery) {
                const publicKeyRequest = requestMessage;
                const okMessage = new authenticationMessages_1.PublicKeyOKMessage();
                okMessage.keyAlgorithmName = publicKeyRequest.keyAlgorithmName;
                okMessage.publicKey = publicKeyRequest.publicKey;
                await this.session.sendMessage(okMessage, cancellation);
            }
            else {
                this.session.principal = authenticatedPrincipal;
                if (requestMessage.serviceName) {
                    this.session.activateService(requestMessage.serviceName);
                }
                this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.sessionAuthenticated, `${sshAuthenticatingEventArgs_1.SshAuthenticationType[args.authenticationType]} authentication succeeded.`);
                await this.session.sendMessage(new authenticationMessages_1.AuthenticationSuccessMessage(), cancellation);
                (_a = this.session) === null || _a === void 0 ? void 0 : _a.handleClientAuthenticated();
            }
        }
        else {
            await this.handleAuthenticationFailure(`${sshAuthenticatingEventArgs_1.SshAuthenticationType[args.authenticationType]} authentication failed.`);
        }
    }
    async handleAuthenticationFailure(message, cancellation) {
        this.authenticationFailureCount++;
        this.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.clientAuthenticationFailed, message);
        const failureMessage = new authenticationMessages_1.AuthenticationFailureMessage();
        failureMessage.methodNames = [
            "publickey" /* publicKey */,
            "password" /* password */,
            "hostbased" /* hostBased */,
        ];
        await this.session.sendMessage(failureMessage, cancellation);
        // Allow trying again with another authentication method. But prevent unlimited tries.
        if (this.authenticationFailureCount >= this.session.config.maxClientAuthenticationAttempts) {
            await this.session.close(transportMessages_1.SshDisconnectReason.noMoreAuthMethodsAvailable, 'Authentication failed.');
        }
    }
    async authenticateClient(credentials, cancellation) {
        var _a, _b, _c, _d;
        this.clientAuthenticationMethods = new queue_1.Queue();
        for (let publicKey of (_a = credentials.publicKeys) !== null && _a !== void 0 ? _a : []) {
            if (!publicKey)
                continue;
            const username = (_b = credentials.username) !== null && _b !== void 0 ? _b : '';
            let privateKey = publicKey;
            const privateKeyProvider = credentials.privateKeyProvider;
            this.clientAuthenticationMethods.enqueue(async (cancellation2) => {
                if (!privateKey.hasPrivateKey) {
                    if (privateKeyProvider == null) {
                        throw new Error('A private key provider is required.');
                    }
                    privateKey = await privateKeyProvider(publicKey, cancellation2 !== null && cancellation2 !== void 0 ? cancellation2 : vscode_jsonrpc_1.CancellationToken.None);
                }
                if (privateKey) {
                    await this.requestPublicKeyAuthentication(username, privateKey, cancellation2);
                }
                else {
                    await this.session.close(transportMessages_1.SshDisconnectReason.authCancelledByUser);
                }
            });
        }
        const passwordCredentialProvider = credentials.passwordProvider;
        if (passwordCredentialProvider) {
            this.clientAuthenticationMethods.enqueue(async (cancellation2) => {
                var _a;
                const passwordCredentialPromise = passwordCredentialProvider(cancellation2 !== null && cancellation2 !== void 0 ? cancellation2 : vscode_jsonrpc_1.CancellationToken.None);
                const passwordCredential = passwordCredentialPromise
                    ? await passwordCredentialPromise
                    : null;
                if (passwordCredential) {
                    await this.requestPasswordAuthentication((_a = passwordCredential[0]) !== null && _a !== void 0 ? _a : '', passwordCredential[1], cancellation2);
                }
                else {
                    await this.session.close(transportMessages_1.SshDisconnectReason.authCancelledByUser);
                }
            });
        }
        else if (credentials.password) {
            const username = (_c = credentials.username) !== null && _c !== void 0 ? _c : '';
            const password = credentials.password;
            this.clientAuthenticationMethods.enqueue(async (cancellation2) => {
                await this.requestPasswordAuthentication(username, password, cancellation2);
            });
        }
        if (this.clientAuthenticationMethods.size === 0) {
            const username = (_d = credentials.username) !== null && _d !== void 0 ? _d : '';
            this.clientAuthenticationMethods.enqueue(async (cancellation2) => {
                await this.requestUsernameAuthentication(username, cancellation2);
            });
        }
        const firstAuthMethod = this.clientAuthenticationMethods.dequeue();
        await firstAuthMethod(cancellation);
    }
    async requestUsernameAuthentication(username, cancellation) {
        const authMessage = new authenticationMessages_1.AuthenticationRequestMessage();
        authMessage.serviceName = connectionService_1.ConnectionService.serviceName;
        authMessage.methodName = "none" /* none */;
        authMessage.username = username;
        await this.session.sendMessage(authMessage, cancellation);
        // Assume the included service request succeeds, without waiting for an auth success
        // message. If not, a following channel open request will fail anyway.
        this.session.activateService(connectionService_1.ConnectionService);
    }
    async requestPublicKeyAuthentication(username, key, cancellation) {
        const algorithm = this.session.config.publicKeyAlgorithms.find((a) => (a === null || a === void 0 ? void 0 : a.keyAlgorithmName) === key.keyAlgorithmName);
        if (!algorithm) {
            throw new Error(`Public key algorithm '${key.keyAlgorithmName}' is not in session config.`);
        }
        const authMessage = new authenticationMessages_1.PublicKeyRequestMessage();
        authMessage.serviceName = connectionService_1.ConnectionService.serviceName;
        authMessage.username = username;
        authMessage.keyAlgorithmName = algorithm.name;
        authMessage.publicKey = (await key.getPublicKeyBytes(algorithm.name));
        authMessage.signature = await this.createAuthenticationSignature(authMessage, algorithm, key);
        await this.session.sendMessage(authMessage, cancellation);
        if (this.clientAuthenticationMethods.size === 0) {
            // There are no remaining auth methods. Assume the service request
            // included here succeeds, without waiting for an auth success message
            // If not, a following channel open request will fail anyway.
            this.session.activateService(connectionService_1.ConnectionService);
        }
    }
    async requestPasswordAuthentication(username, password, cancellation) {
        const authMessage = new authenticationMessages_1.PasswordRequestMessage();
        authMessage.serviceName = connectionService_1.ConnectionService.serviceName;
        authMessage.username = username;
        authMessage.password = password;
        await this.session.sendMessage(authMessage, cancellation);
        // Assume the included service request succeeds, without waiting for an auth success
        // message. If not, a following channel open request will fail anyway.
        this.session.activateService(connectionService_1.ConnectionService);
    }
    handleFailureMessage(message) {
        this.session.onAuthenticationComplete(false);
    }
    handleSuccessMessage(message) {
        // The authentication request included the connection service name.
        // So it should be registered when authentication succeeded.
        this.session.activateService(connectionService_1.ConnectionService);
        this.session.onAuthenticationComplete(true);
    }
    async createAuthenticationSignature(requestMessage, algorithm, key) {
        const sessionId = this.session.sessionId;
        if (sessionId == null) {
            throw new Error('Session ID not initialized.');
        }
        const writer = new sshData_1.SshDataWriter(Buffer.alloc(requestMessage.publicKey.length + (requestMessage.username || '').length + 400));
        writer.writeBinary(sessionId);
        writer.writeByte(requestMessage.messageType);
        writer.writeString(requestMessage.username || '', 'utf8');
        writer.writeString(requestMessage.serviceName || '', 'ascii');
        writer.writeString("publickey" /* publicKey */, 'ascii');
        writer.writeBoolean(true);
        writer.writeString(requestMessage.keyAlgorithmName, 'ascii');
        writer.writeBinary(requestMessage.publicKey);
        const signer = algorithm.createSigner(key);
        const signature = await signer.sign(writer.toBuffer());
        return algorithm.createSignatureData(signature);
    }
};
AuthenticationService.serviceName = 'ssh-userauth';
AuthenticationService = AuthenticationService_1 = __decorate([
    (0, serviceActivation_1.serviceActivation)({ serviceRequest: AuthenticationService_1.serviceName })
], AuthenticationService);
exports.AuthenticationService = AuthenticationService;
//# sourceMappingURL=authenticationService.js.map

/***/ }),

/***/ 47165:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ConnectionService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectionService = void 0;
const sshService_1 = __webpack_require__(90447);
const connectionMessages_1 = __webpack_require__(45757);
const promiseCompletionSource_1 = __webpack_require__(93708);
const sshChannel_1 = __webpack_require__(34756);
const cancellation_1 = __webpack_require__(97437);
const errors_1 = __webpack_require__(72917);
const sshChannelOpeningEventArgs_1 = __webpack_require__(56442);
const serviceActivation_1 = __webpack_require__(34670);
const trace_1 = __webpack_require__(43776);
let ConnectionService = ConnectionService_1 = class ConnectionService extends sshService_1.SshService {
    constructor(session) {
        super(session);
        this.channelCounter = 0;
        this.channelMap = new Map();
        this.nonAcceptedChannels = new Map();
        this.pendingChannels = new Map();
        this.pendingAcceptChannels = new Map();
    }
    get channels() {
        return Array.from(this.channelMap.values());
    }
    close(e) {
        for (let channel of this.channelMap.values()) {
            channel.close(e);
        }
    }
    dispose() {
        const channels = [...this.channelMap.values()];
        let channelCompletions = [...this.pendingChannels.values()].map((pc) => pc.completionSource);
        if (this.pendingAcceptChannels.size > 0) {
            channelCompletions = channelCompletions.concat([...this.pendingAcceptChannels.values()].reduce((a, b) => a.concat(b)));
        }
        for (let channel of channels) {
            channel.dispose();
        }
        for (let channelCompletion of channelCompletions) {
            channelCompletion.reject(new errors_1.SshConnectionError('Session closed.'));
        }
        super.dispose();
    }
    async acceptChannel(channelType, cancellation) {
        const completionSource = new promiseCompletionSource_1.PromiseCompletionSource();
        let cancellationRegistration;
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellationRegistration = cancellation.onCancellationRequested(() => {
                const list = this.pendingAcceptChannels.get(channelType);
                if (list) {
                    const index = list.findIndex((item) => Object.is(item, completionSource));
                    if (index >= 0) {
                        list.splice(index, 1);
                    }
                }
                completionSource.reject(new cancellation_1.CancellationError());
            });
        }
        let channel = null;
        channel =
            Array.from(this.nonAcceptedChannels.values()).find((c) => c.channelType === channelType) ||
                null;
        if (channel) {
            // Found a channel that was already opened but not accepted.
            this.nonAcceptedChannels.delete(channel.channelId);
        }
        else {
            // Set up the completion source to wait for a channel of the requested type.
            let list = this.pendingAcceptChannels.get(channelType);
            if (!list) {
                list = [];
                this.pendingAcceptChannels.set(channelType, list);
            }
            list.push(completionSource);
        }
        try {
            return channel || (await completionSource.promise);
        }
        finally {
            if (cancellationRegistration)
                cancellationRegistration.dispose();
        }
    }
    async openChannel(openMessage, completionSource, cancellation) {
        const channelId = ++this.channelCounter;
        openMessage.senderChannel = channelId;
        let cancellationRegistration = null;
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellationRegistration = cancellation.onCancellationRequested(() => {
                if (this.pendingChannels.delete(channelId)) {
                    completionSource.reject(new cancellation_1.CancellationError());
                }
            });
        }
        this.pendingChannels.set(channelId, {
            openMessage: openMessage,
            completionSource: completionSource,
            cancellationRegistration: cancellationRegistration,
        });
        await this.session.sendMessage(openMessage);
        return channelId;
    }
    handleMessage(message, cancellation) {
        if (message instanceof connectionMessages_1.ChannelDataMessage) {
            return this.handleDataMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelWindowAdjustMessage) {
            return this.handleAdjustWindowMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelEofMessage) {
            return this.handleEofMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelOpenMessage) {
            return this.handleOpenMessage(message, cancellation);
        }
        else if (message instanceof connectionMessages_1.ChannelCloseMessage) {
            return this.handleCloseMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelOpenConfirmationMessage) {
            return this.handleOpenConfirmationMessage(message, cancellation);
        }
        else if (message instanceof connectionMessages_1.ChannelOpenFailureMessage) {
            return this.handleOpenFailureMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelRequestMessage) {
            return this.handleRequestMessage(message, cancellation);
        }
        else if (message instanceof connectionMessages_1.ChannelSuccessMessage) {
            return this.handleSuccessMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelFailureMessage) {
            return this.handleFailureMessage(message);
        }
        else {
            throw new Error(`Message not implemented: ${message}`);
        }
    }
    async handleOpenMessage(message, cancellation) {
        if (!this.session.canAcceptRequests) {
            this.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.channelOpenFailed, 'Channel open request blocked because the session is not yet authenticated.');
            const openFailureMessage = new connectionMessages_1.ChannelOpenFailureMessage();
            openFailureMessage.recipientChannel = message.senderChannel;
            openFailureMessage.reasonCode = connectionMessages_1.SshChannelOpenFailureReason.administrativelyProhibited;
            openFailureMessage.description = 'Authenticate before opening channels.';
            await this.session.sendMessage(openFailureMessage, cancellation);
            return;
        }
        else if (!message.channelType) {
            const openFailureMessage = new connectionMessages_1.ChannelOpenFailureMessage();
            openFailureMessage.recipientChannel = message.senderChannel;
            openFailureMessage.reasonCode = connectionMessages_1.SshChannelOpenFailureReason.unknownChannelType;
            openFailureMessage.description = 'Channel type not specified.';
            await this.session.sendMessage(openFailureMessage, cancellation);
            return;
        }
        const channel = new sshChannel_1.SshChannel(this, message.channelType, message.senderChannel, message.initialWindowSize, message.maximumPacketSize, ++this.channelCounter);
        const args = new sshChannelOpeningEventArgs_1.SshChannelOpeningEventArgs(message, channel, true);
        try {
            await this.session.handleChannelOpening(args, cancellation);
        }
        catch (e) {
            channel.dispose();
            throw e;
        }
        if (args.failureReason !== connectionMessages_1.SshChannelOpenFailureReason.none) {
            const failureMessage = new connectionMessages_1.ChannelOpenFailureMessage();
            failureMessage.recipientChannel = channel.remoteChannelId;
            failureMessage.reasonCode = args.failureReason;
            failureMessage.description = args.failureDescription || undefined;
            try {
                await this.session.sendMessage(failureMessage, cancellation);
            }
            finally {
                channel.dispose();
            }
            return;
        }
        // The session might have been closed while opening the channel.
        if (this.session.isClosed) {
            channel.dispose();
            return;
        }
        this.channelMap.set(channel.channelId, channel);
        const confirmationMessage = new connectionMessages_1.ChannelOpenConfirmationMessage();
        confirmationMessage.recipientChannel = channel.remoteChannelId;
        confirmationMessage.senderChannel = channel.channelId;
        confirmationMessage.initialWindowSize = message.initialWindowSize;
        confirmationMessage.maximumPacketSize = message.maximumPacketSize;
        await this.session.sendMessage(confirmationMessage, cancellation);
        // Check if there are any accept operations waiting on this channel type.
        let accepted = false;
        const list = this.pendingAcceptChannels.get(channel.channelType);
        while (list && list.length > 0) {
            const acceptCompletionSource = list.shift();
            acceptCompletionSource.resolve(channel);
            accepted = true;
            break;
        }
        if (!accepted) {
            this.nonAcceptedChannels.set(channel.channelId, channel);
        }
        this.onChannelOpenCompleted(channel.channelId, channel);
        channel.enableSending();
    }
    handleCloseMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (channel) {
            channel.handleClose();
        }
    }
    async handleOpenConfirmationMessage(message, cancellation) {
        var _a;
        let completionSource = null;
        let openMessage;
        const pendingChannel = this.pendingChannels.get(message.recipientChannel);
        if (pendingChannel) {
            openMessage = pendingChannel.openMessage;
            completionSource = pendingChannel.completionSource;
            if (pendingChannel.cancellationRegistration) {
                pendingChannel.cancellationRegistration.dispose();
            }
            this.pendingChannels.delete(message.recipientChannel);
        }
        else if (this.channelMap.has(message.recipientChannel)) {
            throw new Error('Duplicate channel ID.');
        }
        else {
            throw new Error('Channel confirmation was not requested.');
        }
        const channel = new sshChannel_1.SshChannel(this, openMessage.channelType || sshChannel_1.SshChannel.sessionChannelType, message.senderChannel, message.initialWindowSize, message.maximumPacketSize, message.recipientChannel);
        this.channelMap.set(channel.channelId, channel);
        const args = new sshChannelOpeningEventArgs_1.SshChannelOpeningEventArgs(openMessage, channel, false);
        await this.session.handleChannelOpening(args, cancellation);
        if (completionSource) {
            if (args.failureReason === connectionMessages_1.SshChannelOpenFailureReason.none) {
                completionSource.resolve(channel);
            }
            else {
                completionSource.reject(new errors_1.SshChannelError((_a = args.failureDescription) !== null && _a !== void 0 ? _a : 'Channel open failure.', args.failureReason));
                return;
            }
        }
        else {
            this.onChannelOpenCompleted(channel.channelId, channel);
        }
        channel.enableSending();
    }
    handleOpenFailureMessage(message) {
        let completionSource = null;
        const pendingChannel = this.pendingChannels.get(message.recipientChannel);
        if (pendingChannel) {
            completionSource = pendingChannel.completionSource;
            if (pendingChannel.cancellationRegistration) {
                pendingChannel.cancellationRegistration.dispose();
            }
            this.pendingChannels.delete(message.recipientChannel);
        }
        if (completionSource != null) {
            completionSource.reject(new errors_1.SshChannelError(message.description || 'Channel open rejected.', message.reasonCode));
        }
        else {
            this.onChannelOpenCompleted(message.recipientChannel, null);
        }
    }
    async handleRequestMessage(message, cancellation) {
        const channel = this.findChannelById(message.recipientChannel);
        if (!channel) {
            this.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.channelRequestFailed, `Invalid channel ID ${message.recipientChannel} in channel request message.`);
            return;
        }
        await channel.handleRequest(message, cancellation);
    }
    handleSuccessMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (!channel) {
            this.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.channelRequestFailed, `Invalid channel ID ${message.recipientChannel} in channel success message.`);
            return;
        }
        channel.handleResponse(true);
    }
    handleFailureMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (!channel) {
            this.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.channelRequestFailed, `Invalid channel ID ${message.recipientChannel} in channel failure message.`);
            return;
        }
        channel.handleResponse(false);
    }
    handleDataMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (channel) {
            return channel.handleDataReceived(message.data);
        }
    }
    handleAdjustWindowMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (channel) {
            channel.adjustRemoteWindow(message.bytesToAdd);
        }
    }
    handleEofMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (channel) {
            channel.handleEof();
        }
    }
    onChannelOpenCompleted(channelId, channel) {
        if (channel) {
            this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.channelOpened, `${this.session} ChannelOpenCompleted(${channel})`);
        }
        else {
            this.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.channelOpenFailed, `${this.session} ChannelOpenCompleted(${channelId} failed)`);
        }
    }
    findChannelById(id) {
        var _a;
        const channel = (_a = this.channelMap.get(id)) !== null && _a !== void 0 ? _a : null;
        return channel;
    }
    _removeChannel(channel) {
        this.channelMap.delete(channel.channelId);
        this.pendingChannels.delete(channel.channelId);
    }
};
ConnectionService.serviceName = 'ssh-connection';
ConnectionService = ConnectionService_1 = __decorate([
    (0, serviceActivation_1.serviceActivation)({ serviceRequest: ConnectionService_1.serviceName })
], ConnectionService);
exports.ConnectionService = ConnectionService;
//# sourceMappingURL=connectionService.js.map

/***/ }),

/***/ 43210:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var KeyExchangeService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyExchangeService = void 0;
const buffer_1 = __webpack_require__(30816);
const sshSession_1 = __webpack_require__(7395);
const sshService_1 = __webpack_require__(90447);
const bigInt_1 = __webpack_require__(30404);
const kexMessages_1 = __webpack_require__(50856);
const sshAlgorithms_1 = __webpack_require__(91605);
const sshData_1 = __webpack_require__(67914);
const errors_1 = __webpack_require__(72917);
const transportMessages_1 = __webpack_require__(90818);
const sshSessionAlgorithms_1 = __webpack_require__(47462);
const vscode_jsonrpc_1 = __webpack_require__(83730);
const serviceActivation_1 = __webpack_require__(34670);
const trace_1 = __webpack_require__(43776);
class ExchangeContext {
}
const serverExtensionInfoSignal = 'ext-info-s';
const clientExtensionInfoSignal = 'ext-info-c';
let KeyExchangeService = KeyExchangeService_1 = class KeyExchangeService extends sshService_1.SshService {
    constructor(session, isClientSession) {
        super(session);
        this.isClientSession = isClientSession;
        this.isInitialExchange = false;
        this.exchangeContext = null;
    }
    get exchanging() {
        return !!this.exchangeContext;
    }
    async startKeyExchange(isInitialExchange) {
        this.isInitialExchange = isInitialExchange;
        this.exchangeContext = new ExchangeContext();
        const kexInitMessage = this.createKeyExchangeInitMessage();
        let kexGuessMessage = null;
        if (this.isClientSession) {
            if (isInitialExchange && this.session.config.enableKeyExchangeGuess) {
                kexGuessMessage = await this.createKeyExchangeGuessMessage();
                kexInitMessage.firstKexPacketFollows = !!kexGuessMessage;
            }
            this.exchangeContext.clientKexInitPayload = kexInitMessage.toBuffer();
        }
        else {
            this.exchangeContext.serverKexInitPayload = kexInitMessage.toBuffer();
        }
        return [kexInitMessage, kexGuessMessage];
    }
    finishKeyExchange() {
        const newAlgorithms = this.exchangeContext.newAlgorithms;
        this.exchangeContext = null;
        return newAlgorithms;
    }
    abortKeyExchange() {
        this.exchangeContext = null;
    }
    createKeyExchangeInitMessage() {
        // Reference RFC 8308: Signaling of Extension Negotiation in Key Exchange.
        const extinfo = this.isClientSession ? clientExtensionInfoSignal : serverExtensionInfoSignal;
        const config = this.session.config;
        const message = new kexMessages_1.KeyExchangeInitMessage();
        message.keyExchangeAlgorithms = (0, sshAlgorithms_1.algorithmNames)(config.keyExchangeAlgorithms).concat(extinfo);
        message.serverHostKeyAlgorithms = this.getPublicKeyAlgorithms();
        message.encryptionAlgorithmsClientToServer = message.encryptionAlgorithmsServerToClient = (0, sshAlgorithms_1.algorithmNames)(config.encryptionAlgorithms);
        message.macAlgorithmsClientToServer = message.macAlgorithmsServerToClient = (0, sshAlgorithms_1.algorithmNames)(config.hmacAlgorithms);
        message.compressionAlgorithmsClientToServer = message.compressionAlgorithmsServerToClient = (0, sshAlgorithms_1.algorithmNames)(config.compressionAlgorithms);
        message.languagesClientToServer = [''];
        message.languagesServerToClient = [''];
        message.firstKexPacketFollows = false;
        message.reserved = 0;
        return message;
    }
    /**
     * Gets the list of public key algorithms that the current session can support.
     * For a server session the list is filtered based on the available private keys.
     */
    getPublicKeyAlgorithms() {
        var _a, _b;
        let publicKeyAlgorithms = [...this.session.config.publicKeyAlgorithms];
        if (publicKeyAlgorithms.length > 1 && !this.isClientSession) {
            const privateKeyAlgorithms = (_b = (_a = this.session.credentials) === null || _a === void 0 ? void 0 : _a.publicKeys) === null || _b === void 0 ? void 0 : _b.map((k) => k.keyAlgorithmName);
            if (privateKeyAlgorithms) {
                publicKeyAlgorithms = publicKeyAlgorithms.filter((a) => a && privateKeyAlgorithms.includes(a.keyAlgorithmName));
            }
        }
        const publicKeyAlgorithmNames = (0, sshAlgorithms_1.algorithmNames)(publicKeyAlgorithms);
        return publicKeyAlgorithmNames;
    }
    async createKeyExchangeGuessMessage() {
        if (!this.exchangeContext) {
            throw new Error('Key exchange was not started.');
        }
        // Select the first key exchange algorithm as the "guess". (They are in preferential order.)
        const kexAlgorithm = this.session.config.keyExchangeAlgorithms[0];
        if (!kexAlgorithm) {
            return null;
        }
        this.exchangeContext.keyExchange = kexAlgorithm.name;
        this.exchangeContext.exchange = kexAlgorithm.createKeyExchange();
        this.exchangeContext.exchangeValue = await this.exchangeContext.exchange.startKeyExchange();
        const guess = new kexMessages_1.KeyExchangeDhInitMessage();
        guess.e = this.exchangeContext.exchangeValue;
        return guess;
    }
    handleMessage(message, cancellation) {
        if (message instanceof kexMessages_1.KeyExchangeInitMessage) {
            return this.handleInitMessage(message, cancellation);
        }
        else if (message instanceof kexMessages_1.KeyExchangeDhInitMessage) {
            return this.handleDhInitMessage(message, cancellation);
        }
        else if (message instanceof kexMessages_1.KeyExchangeDhReplyMessage) {
            return this.handleDhReplyMessage(message, cancellation);
        }
        else {
            throw new Error(`Message not implemented: ${message}`);
        }
    }
    async handleInitMessage(message, cancellation) {
        var _a, _b, _c, _d, _e;
        if (!this.exchangeContext) {
            throw new Error('Key exchange was not started.');
        }
        const config = this.session.config;
        this.exchangeContext.keyExchange = this.chooseAlgorithm('KeyExchange', (0, sshAlgorithms_1.algorithmNames)(config.keyExchangeAlgorithms), message.keyExchangeAlgorithms);
        if (this.exchangeContext.keyExchange === 'none') {
            this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.algorithmNegotiation, 'Client and server negotiated no security. Cancelling key-exchange.');
            this.exchangeContext.newAlgorithms = new sshSessionAlgorithms_1.SshSessionAlgorithms();
            await this.session.handleNewKeysMessage(new kexMessages_1.NewKeysMessage(), cancellation);
            return;
        }
        this.exchangeContext.publicKey = this.chooseAlgorithm('PublicKey', this.getPublicKeyAlgorithms(), message.serverHostKeyAlgorithms);
        this.exchangeContext.clientEncryption = this.chooseAlgorithm('ClientEncryption', (0, sshAlgorithms_1.algorithmNames)(config.encryptionAlgorithms), message.encryptionAlgorithmsClientToServer);
        this.exchangeContext.serverEncryption = this.chooseAlgorithm('ServerEncryption', (0, sshAlgorithms_1.algorithmNames)(config.encryptionAlgorithms), message.encryptionAlgorithmsServerToClient);
        this.exchangeContext.clientHmac = this.chooseAlgorithm('ClientHmac', (0, sshAlgorithms_1.algorithmNames)(config.hmacAlgorithms), message.macAlgorithmsClientToServer);
        this.exchangeContext.serverHmac = this.chooseAlgorithm('ServerHmac', (0, sshAlgorithms_1.algorithmNames)(config.hmacAlgorithms), message.macAlgorithmsServerToClient);
        this.exchangeContext.clientCompression = this.chooseAlgorithm('ClientCompression', (0, sshAlgorithms_1.algorithmNames)(config.compressionAlgorithms), message.compressionAlgorithmsClientToServer);
        this.exchangeContext.serverCompression = this.chooseAlgorithm('ServerCompression', (0, sshAlgorithms_1.algorithmNames)(config.compressionAlgorithms), message.compressionAlgorithmsServerToClient);
        let extensionInfoSignal;
        if (this.isClientSession) {
            this.exchangeContext.serverKexInitPayload = message.toBuffer();
            // If the exchange value is already initialized then this side sent a guess.
            const alreadySentGuess = !!this.exchangeContext.exchangeValue;
            // Check if the negotiated algorithm is the one preferred by THIS side.
            // This means if there was a "guess" at kex initialization then it was correct.
            const negotiatedKexAlgorthmIsPreferred = this.exchangeContext.keyExchange === ((_a = config.keyExchangeAlgorithms[0]) === null || _a === void 0 ? void 0 : _a.name);
            // If a guess was not sent, or the guess was wrong, send the init message now.
            if (!alreadySentGuess || !negotiatedKexAlgorthmIsPreferred) {
                const kexAlgorithm = config.getKeyExchangeAlgorithm(this.exchangeContext.keyExchange);
                this.exchangeContext.exchange = kexAlgorithm.createKeyExchange();
                this.exchangeContext.exchangeValue = await this.exchangeContext.exchange.startKeyExchange();
                const reply = new kexMessages_1.KeyExchangeDhInitMessage();
                reply.e = this.exchangeContext.exchangeValue;
                await this.session.sendMessage(reply, cancellation);
            }
            extensionInfoSignal = serverExtensionInfoSignal;
        }
        else {
            if (message.firstKexPacketFollows) {
                // The remote side indicated it is sending a guess immediately following.
                // Check if the negotiated algorithm is the one preferred by the OTHER side.
                // If so, the following "guess" will be correct. Otherwise it must be ignored.
                const negotiatedKexAlgorthmIsPreferred = this.exchangeContext.keyExchange === ((_b = message.keyExchangeAlgorithms) === null || _b === void 0 ? void 0 : _b[0]);
                const guessResult = negotiatedKexAlgorthmIsPreferred ? 'correct' : 'incorrect';
                this.trace(trace_1.TraceLevel.Verbose, trace_1.SshTraceEventIds.algorithmNegotiation, `Client's KeyExchange guess was ${guessResult}.`);
                this.exchangeContext.discardGuessedInit = !negotiatedKexAlgorthmIsPreferred;
                if (negotiatedKexAlgorthmIsPreferred &&
                    this.session.remoteVersion.isVsSsh &&
                    ((_c = this.session.remoteVersion.version) === null || _c === void 0 ? void 0 : _c.startsWith('2.'))) {
                    // VS-SSH v2 had a bug in the logic for determining whether the guess was correct.
                    // Use that alternate logic here to preserve compatibility.
                    const clientAndServerHaveSamePreference = ((_d = message.keyExchangeAlgorithms) === null || _d === void 0 ? void 0 : _d[0]) === ((_e = config.keyExchangeAlgorithms[0]) === null || _e === void 0 ? void 0 : _e.name);
                    if (!clientAndServerHaveSamePreference) {
                        this.trace(trace_1.TraceLevel.Verbose, trace_1.SshTraceEventIds.algorithmNegotiation, 'Ignoring correct guess for compatibility with older client.');
                        this.exchangeContext.discardGuessedInit = true;
                    }
                }
            }
            this.exchangeContext.clientKexInitPayload = message.toBuffer();
            extensionInfoSignal = clientExtensionInfoSignal;
        }
        if (this.isInitialExchange && message.keyExchangeAlgorithms.includes(extensionInfoSignal)) {
            // The extension info message will be blocked in the queue
            // until immediately after the key-exchange is done.
            await this.session.sendExtensionInfo(cancellation);
        }
    }
    async handleDhInitMessage(message, cancellation) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (this.isClientSession) {
            return;
        }
        const serverSession = this.session;
        if (!this.exchangeContext ||
            !this.exchangeContext.keyExchange ||
            !this.exchangeContext.publicKey) {
            throw new errors_1.SshConnectionError('Key exchange not started.', transportMessages_1.SshDisconnectReason.protocolError);
        }
        if (this.exchangeContext.discardGuessedInit) {
            // Algorithm negotiation determined that an incorrect guess would be received.
            this.exchangeContext.discardGuessedInit = false;
            return;
        }
        const kexAlg = this.session.config.getKeyExchangeAlgorithm(this.exchangeContext.keyExchange);
        if (!kexAlg) {
            throw new errors_1.SshConnectionError('Key exchange not supported for algorithm: ' + this.exchangeContext.keyExchange, transportMessages_1.SshDisconnectReason.keyExchangeFailed);
        }
        const publicKeyAlg = this.session.config.getPublicKeyAlgorithm(this.exchangeContext.publicKey);
        if (!publicKeyAlg) {
            throw new errors_1.SshConnectionError('Public key algorithm not supported: ' + this.exchangeContext.publicKey, transportMessages_1.SshDisconnectReason.keyExchangeFailed);
        }
        let privateKey = null;
        if ((_a = serverSession.credentials) === null || _a === void 0 ? void 0 : _a.publicKeys) {
            const publicKey = serverSession.credentials.publicKeys.find((k) => k.keyAlgorithmName === publicKeyAlg.keyAlgorithmName);
            privateKey = publicKey !== null && publicKey !== void 0 ? publicKey : null;
            if ((privateKey === null || privateKey === void 0 ? void 0 : privateKey.hasPrivateKey) === false) {
                if (!serverSession.credentials.privateKeyProvider) {
                    throw new Error('A private key provider is required.');
                }
                privateKey = await serverSession.credentials.privateKeyProvider(publicKey, cancellation !== null && cancellation !== void 0 ? cancellation : vscode_jsonrpc_1.CancellationToken.None);
            }
        }
        if (privateKey == null) {
            throw new errors_1.SshConnectionError('Private key not found for algorithm: ' + this.exchangeContext.publicKey, transportMessages_1.SshDisconnectReason.keyExchangeFailed);
        }
        const clientEncryption = this.session.config.getEncryptionAlgorithm(this.exchangeContext.clientEncryption);
        const serverEncryption = this.session.config.getEncryptionAlgorithm(this.exchangeContext.serverEncryption);
        const serverHmac = this.session.config.getHmacAlgorithm(this.exchangeContext.serverHmac);
        const clientHmac = this.session.config.getHmacAlgorithm(this.exchangeContext.clientHmac);
        const keyExchange = kexAlg.createKeyExchange();
        const clientExchangeValue = message.e || buffer_1.Buffer.alloc(0);
        const serverExchangeValue = await keyExchange.startKeyExchange();
        const sharedSecret = await keyExchange.decryptKeyExchange(clientExchangeValue);
        const hostKeyAndCerts = await privateKey.getPublicKeyBytes(publicKeyAlg.name);
        if (!hostKeyAndCerts) {
            throw new errors_1.SshConnectionError('Public key not set.', transportMessages_1.SshDisconnectReason.keyExchangeFailed);
        }
        const exchangeHash = await this.computeExchangeHash(keyExchange, hostKeyAndCerts, clientExchangeValue, serverExchangeValue, sharedSecret);
        if (!this.session.sessionId) {
            this.session.sessionId = exchangeHash;
        }
        const [clientCipherIV, serverCipherIV, clientCipherKey, serverCipherKey, clientHmacKey, serverHmacKey,] = await this.computeKeys(keyExchange, sharedSecret, exchangeHash, clientEncryption, serverEncryption, clientHmac, serverHmac);
        const cipher = (_b = (await (serverEncryption === null || serverEncryption === void 0 ? void 0 : serverEncryption.createCipher(true, serverCipherKey, serverCipherIV)))) !== null && _b !== void 0 ? _b : null;
        const decipher = (_c = (await (clientEncryption === null || clientEncryption === void 0 ? void 0 : clientEncryption.createCipher(false, clientCipherKey, clientCipherIV)))) !== null && _c !== void 0 ? _c : null;
        const signer = (_d = (await (serverHmac === null || serverHmac === void 0 ? void 0 : serverHmac.createSigner(serverHmacKey)))) !== null && _d !== void 0 ? _d : null;
        const verifier = (_e = (await (clientHmac === null || clientHmac === void 0 ? void 0 : clientHmac.createVerifier(clientHmacKey)))) !== null && _e !== void 0 ? _e : null;
        const algorithms = new sshSessionAlgorithms_1.SshSessionAlgorithms();
        algorithms.publicKeyAlgorithmName = this.exchangeContext.publicKey;
        algorithms.cipher = cipher;
        algorithms.decipher = decipher;
        algorithms.signer = signer;
        algorithms.verifier = verifier;
        algorithms.messageSigner = ((_f = cipher) === null || _f === void 0 ? void 0 : _f.authenticatedEncryption)
            ? cipher
            : signer;
        algorithms.messageVerifier = ((_g = decipher) === null || _g === void 0 ? void 0 : _g.authenticatedEncryption)
            ? decipher
            : verifier;
        algorithms.compressor = this.session.config.getCompressionAlgorithm(this.exchangeContext.serverCompression);
        algorithms.decompressor = this.session.config.getCompressionAlgorithm(this.exchangeContext.clientCompression);
        this.exchangeContext.newAlgorithms = algorithms;
        // Wipe the keys from memory after they are stored in native key objects.
        if (clientCipherIV)
            clientCipherIV.fill(0);
        if (clientCipherKey)
            clientCipherKey.fill(0);
        if (clientHmacKey)
            clientHmacKey.fill(0);
        if (serverCipherIV)
            serverCipherIV.fill(0);
        if (serverCipherKey)
            serverCipherKey.fill(0);
        if (serverHmacKey)
            serverHmacKey.fill(0);
        const exchangeSigner = publicKeyAlg.createSigner(privateKey);
        let signature = await exchangeSigner.sign(exchangeHash);
        signature = publicKeyAlg.createSignatureData(signature);
        const reply = new kexMessages_1.KeyExchangeDhReplyMessage();
        reply.hostKey = hostKeyAndCerts;
        reply.f = serverExchangeValue;
        reply.signature = signature;
        await this.session.sendMessage(reply, cancellation);
        await this.session.sendMessage(new kexMessages_1.NewKeysMessage(), cancellation);
    }
    async handleDhReplyMessage(message, cancellation) {
        var _a, _b, _c, _d, _e, _f;
        if (!this.isClientSession) {
            return;
        }
        if (!this.exchangeContext) {
            throw new errors_1.SshConnectionError('Key exchange was not started.', transportMessages_1.SshDisconnectReason.protocolError);
        }
        const config = this.session.config;
        const keyExchange = this.exchangeContext.exchange;
        const publicKeyAlgorithmName = this.exchangeContext.publicKey;
        const publicKeyAlg = config.getPublicKeyAlgorithm(publicKeyAlgorithmName);
        const clientEncryption = config.getEncryptionAlgorithm(this.exchangeContext.clientEncryption);
        const serverEncryption = config.getEncryptionAlgorithm(this.exchangeContext.serverEncryption);
        const serverHmac = config.getHmacAlgorithm(this.exchangeContext.serverHmac);
        const clientHmac = config.getHmacAlgorithm(this.exchangeContext.clientHmac);
        const clientExchangeValue = this.exchangeContext.exchangeValue;
        const serverExchangeValue = message.f;
        if (!keyExchange || !clientExchangeValue) {
            throw new errors_1.SshConnectionError('Failed to initialize crypto after key exchange.', transportMessages_1.SshDisconnectReason.keyExchangeFailed);
        }
        // Load the server's public key bytes into a key-pair instance.
        this.hostKey = publicKeyAlg.createKeyPair();
        await this.hostKey.setPublicKeyBytes(message.hostKey);
        const sharedSecret = await keyExchange.decryptKeyExchange(serverExchangeValue);
        const hostKeyAndCerts = message.hostKey;
        const exchangeHash = await this.computeExchangeHash(keyExchange, hostKeyAndCerts, clientExchangeValue, serverExchangeValue, sharedSecret);
        const signature = publicKeyAlg.readSignatureData(message.signature);
        const exchangeVerifier = publicKeyAlg.createVerifier(this.hostKey);
        let verified;
        try {
            verified = await exchangeVerifier.verify(exchangeHash, signature);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.serverAuthenticationFailed, `Server public key verification error: ${e.message}`, e);
            throw new errors_1.SshConnectionError(`Server public key verification failed: ${e.message}`, transportMessages_1.SshDisconnectReason.hostKeyNotVerifiable);
        }
        if (verified) {
            this.trace(trace_1.TraceLevel.Verbose, trace_1.SshTraceEventIds.sessionAuthenticated, 'Server public key verification succeeded.');
        }
        else {
            this.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.serverAuthenticationFailed, 'Server public key verification failed.');
            throw new errors_1.SshConnectionError('Server public key verification failed.', transportMessages_1.SshDisconnectReason.hostKeyNotVerifiable);
        }
        if (this.session.sessionId == null) {
            this.session.sessionId = exchangeHash;
        }
        const [clientCipherIV, serverCipherIV, clientCipherKey, serverCipherKey, clientHmacKey, serverHmacKey,] = await this.computeKeys(keyExchange, sharedSecret, exchangeHash, clientEncryption, serverEncryption, clientHmac, serverHmac);
        const cipher = (_a = (await (clientEncryption === null || clientEncryption === void 0 ? void 0 : clientEncryption.createCipher(true, clientCipherKey, clientCipherIV)))) !== null && _a !== void 0 ? _a : null;
        const decipher = (_b = (await (serverEncryption === null || serverEncryption === void 0 ? void 0 : serverEncryption.createCipher(false, serverCipherKey, serverCipherIV)))) !== null && _b !== void 0 ? _b : null;
        const signer = (_c = (await (clientHmac === null || clientHmac === void 0 ? void 0 : clientHmac.createSigner(clientHmacKey)))) !== null && _c !== void 0 ? _c : null;
        const verifier = (_d = (await (serverHmac === null || serverHmac === void 0 ? void 0 : serverHmac.createVerifier(serverHmacKey)))) !== null && _d !== void 0 ? _d : null;
        const algorithms = new sshSessionAlgorithms_1.SshSessionAlgorithms();
        algorithms.publicKeyAlgorithmName = publicKeyAlgorithmName;
        algorithms.cipher = cipher;
        algorithms.decipher = decipher;
        algorithms.signer = signer;
        algorithms.verifier = verifier;
        algorithms.messageSigner = ((_e = cipher) === null || _e === void 0 ? void 0 : _e.authenticatedEncryption)
            ? cipher
            : signer;
        algorithms.messageVerifier = ((_f = decipher) === null || _f === void 0 ? void 0 : _f.authenticatedEncryption)
            ? decipher
            : verifier;
        algorithms.compressor = config.getCompressionAlgorithm(this.exchangeContext.clientCompression);
        algorithms.decompressor = config.getCompressionAlgorithm(this.exchangeContext.serverCompression);
        this.exchangeContext.newAlgorithms = algorithms;
        // Wipe the keys from memory after they are stored in native key objects.
        if (clientCipherIV)
            clientCipherIV.fill(0);
        if (clientCipherKey)
            clientCipherKey.fill(0);
        if (clientHmacKey)
            clientHmacKey.fill(0);
        if (serverCipherIV)
            serverCipherIV.fill(0);
        if (serverCipherKey)
            serverCipherKey.fill(0);
        if (serverHmacKey)
            serverHmacKey.fill(0);
        await this.session.sendMessage(new kexMessages_1.NewKeysMessage(), cancellation);
    }
    chooseAlgorithm(label, localAlgorithms, remoteAlgorithms) {
        var _a;
        // Ensure consistent results if the client and server list the same algorithms
        // in different order of preference.
        let serverAlgorithms;
        let clientAlgorithms;
        if (this.isClientSession) {
            serverAlgorithms = remoteAlgorithms || [];
            clientAlgorithms = localAlgorithms;
        }
        else {
            serverAlgorithms = localAlgorithms;
            clientAlgorithms = remoteAlgorithms || [];
        }
        const negotiationDetail = `${label} negotiation: ` +
            `Server (${serverAlgorithms.join(', ')}) ` +
            `Client (${clientAlgorithms.join(', ')})`;
        if (this.session.remoteVersion.isVsSsh &&
            ((_a = this.session.remoteVersion.version) === null || _a === void 0 ? void 0 : _a.startsWith('2.'))) {
            // Older versions of ths library got this backward. Swap for back-compatibility.
            const temp = serverAlgorithms;
            serverAlgorithms = clientAlgorithms;
            clientAlgorithms = temp;
        }
        for (let client of clientAlgorithms) {
            for (let server of serverAlgorithms) {
                if (server === client) {
                    const result = server;
                    this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.algorithmNegotiation, `${negotiationDetail} => ${result}`);
                    return result;
                }
            }
        }
        throw new Error(`Failed ${negotiationDetail}`);
    }
    async computeExchangeHash(kex, hostKeyAndCerts, clientExchangeValue, serverExchangeValue, sharedSecret) {
        if (!this.session.remoteVersion) {
            throw new Error('Key exchange not completed.');
        }
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(2048));
        if (this.isClientSession) {
            writer.writeString(sshSession_1.SshSession.localVersion.toString(), 'ascii');
            writer.writeString(this.session.remoteVersion.toString(), 'ascii');
        }
        else {
            writer.writeString(this.session.remoteVersion.toString(), 'ascii');
            writer.writeString(sshSession_1.SshSession.localVersion.toString(), 'ascii');
        }
        writer.writeBinary(this.exchangeContext.clientKexInitPayload);
        writer.writeBinary(this.exchangeContext.serverKexInitPayload);
        writer.writeBinary(hostKeyAndCerts);
        // These values are formatted as bigints (with leading zeroes if the first bit is high)
        // even though they might not really be bigints, depending on the key-exchange algorithm.
        writer.writeBigInt(bigInt_1.BigInt.fromBytes(clientExchangeValue, { unsigned: true }));
        writer.writeBigInt(bigInt_1.BigInt.fromBytes(serverExchangeValue, { unsigned: true }));
        writer.writeBigInt(bigInt_1.BigInt.fromBytes(sharedSecret, { unsigned: true }));
        const hash = await kex.sign(writer.toBuffer());
        return hash;
    }
    async computeKeys(keyExchange, sharedSecret, exchangeHash, clientEncryption, serverEncryption, clientHmac, serverHmac) {
        var _a, _b;
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(4 /* mpint header */ +
            sharedSecret.length +
            exchangeHash.length +
            Math.max(1 /* letter */ + ((_b = (_a = this.session.sessionId) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0), keyExchange.digestLength)));
        writer.writeBinary(sharedSecret);
        writer.write(exchangeHash);
        const offset = writer.position;
        const clientCipherIV = clientEncryption &&
            (await this.computeKey(keyExchange, writer, offset, clientEncryption.blockLength, 'A'));
        const serverCipherIV = serverEncryption &&
            (await this.computeKey(keyExchange, writer, offset, serverEncryption.blockLength, 'B'));
        const clientCipherKey = clientEncryption &&
            (await this.computeKey(keyExchange, writer, offset, clientEncryption.keyLength, 'C'));
        const serverCipherKey = serverEncryption &&
            (await this.computeKey(keyExchange, writer, offset, serverEncryption.keyLength, 'D'));
        const clientHmacKey = clientHmac &&
            (await this.computeKey(keyExchange, writer, offset, clientHmac.keyLength, 'E'));
        const serverHmacKey = serverHmac &&
            (await this.computeKey(keyExchange, writer, offset, serverHmac.keyLength, 'F'));
        return [
            clientCipherIV,
            serverCipherIV,
            clientCipherKey,
            serverCipherKey,
            clientHmacKey,
            serverHmacKey,
        ];
    }
    async computeKey(keyExchange, writer, writerOffset, blockSize, letter) {
        const keyBuffer = buffer_1.Buffer.alloc(blockSize);
        let keyBufferIndex = 0;
        let currentHashLength = 0;
        let currentHash = null;
        if (!this.session.sessionId) {
            throw new Error('Session ID not set.');
        }
        while (keyBufferIndex < blockSize) {
            writer.position = writerOffset;
            if (!currentHash) {
                writer.writeByte(letter.charCodeAt(0));
                writer.write(this.session.sessionId);
            }
            else {
                writer.write(currentHash);
            }
            currentHash = await keyExchange.sign(writer.toBuffer());
            currentHashLength = Math.min(currentHash.length, blockSize - keyBufferIndex);
            currentHash.copy(keyBuffer, keyBufferIndex);
            keyBufferIndex += currentHashLength;
        }
        if (currentHash) {
            currentHash.fill(0);
        }
        return keyBuffer;
    }
};
KeyExchangeService.serviceName = 'ssh-keyexchange';
KeyExchangeService = KeyExchangeService_1 = __decorate([
    (0, serviceActivation_1.serviceActivation)({ serviceRequest: KeyExchangeService_1.serviceName })
], KeyExchangeService);
exports.KeyExchangeService = KeyExchangeService;
//# sourceMappingURL=keyExchangeService.js.map

/***/ }),

/***/ 34670:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findService = exports.serviceActivation = void 0;
/**
 * Decorator applied to suclasses of `SshService` that declares how the service gets activated.
 */
function serviceActivation(activation) {
    return (constructor) => {
        if (!constructor.activations) {
            constructor.activations = [];
        }
        constructor.activations.push(activation);
    };
}
exports.serviceActivation = serviceActivation;
/**
 * Locates a service type in configuration, using a predicate to check service activation
 * attributes.
 *
 * @param serviceConfigs Service configuration dictionary from `SshSessionConfiguration.services`.
 * @param predicate Function to test whether a service activation attribute matches some condition.
 * @returns Service type (constructor), or null if no service type satisfies the predicate.
 */
function findService(serviceConfigs, predicate) {
    for (let serviceType of serviceConfigs.keys()) {
        const activations = serviceType.activations;
        let foundActivation = false;
        for (let activation of activations) {
            foundActivation = true;
            if (predicate(activation)) {
                return serviceType;
            }
        }
        if (!foundActivation) {
            throw new Error(`SSH service type '${serviceType.name}' must have one or more ` +
                `'serviceActivation' decorators.`);
        }
    }
    return null;
}
exports.findService = findService;
//# sourceMappingURL=serviceActivation.js.map

/***/ }),

/***/ 90447:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshService = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
/**
 * Base class for SSH session services that handle incoming requests.
 *
 * Services can be on either the server side or the client side, because either side may
 * send requests to the other's services.
 *
 * Service subclasses must have one or more `serviceActivation` decorators applied to them to
 * declare the type(s) of requests that cause the service to be activated. Only one instance
 * of each service type gets activated for a session, even if there are multiple activation
 * rules. After activation, a service remains active for the duration of the session,
 * handling any additional requests, until it is disposed when the session is disposed.
 *
 * To enable activation of a service, add the service type to
 * `SshSessionConfiguration.services`. When a service is activated, the session raises a
 * `SshSession.serviceActivated` event.
 */
class SshService {
    constructor(session) {
        this.session = session;
        this.disposed = false;
        this.disposedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onDisposed = this.disposedEmitter.event;
    }
    get trace() {
        return this.session.trace;
    }
    dispose() {
        if (this.disposed)
            return;
        this.disposed = true;
        this.disposedEmitter.fire();
    }
    /**
     * Services that are activated via session requests must override this method to handle
     * incoming session requests.
     *
     * Implementations must send a success or failure response message if
     * `SessionRequestMessage.wantReply` is true.
     */
    async onSessionRequest(request, cancellation) {
        this.session.raiseSessionRequest(request);
    }
    /**
     * Services that are activated via channel types must override this method to handle
     * incoming requests to open a channel.
     *
     * Implementations may set `SshChannelOpeningEventArgs.failureReason`
     * to block opening of the channel. The default behavior allows the channel to open.
     *
     * Requests on the opened channel will not be directed to `onChannelRequest`
     * unless the service also declares activation on specific channel request(s). Otherwise,
     * an implementation of this method may add any event-handlers to the
     * `SshChannelOpeningEventArgs.channel` including a request event handler.
     */
    async onChannelOpening(request, cancellation) {
        this.session.raiseChannelOpening(request);
    }
    /**
     * Services that are activated via channel requests must override this method to handle
     * incoming channel requests.
     *
     * Implementations must set `SshRequestEventArgs.isAuthorized` to `true` or `false` to
     * indicate whether the request was allowed.
     */
    async onChannelRequest(channel, request, cancellation) { }
    /**
     * Sends any message.
     */
    async sendMessage(message, cancellation) {
        await this.session.sendMessage(message, cancellation);
    }
}
exports.SshService = SshService;
//# sourceMappingURL=sshService.js.map

/***/ }),

/***/ 34756:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshChannel = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
const serviceActivation_1 = __webpack_require__(34670);
const connectionMessages_1 = __webpack_require__(45757);
const transportMessages_1 = __webpack_require__(90818);
const channelMetrics_1 = __webpack_require__(65321);
const promiseCompletionSource_1 = __webpack_require__(93708);
const errors_1 = __webpack_require__(72917);
const sshRequestEventArgs_1 = __webpack_require__(96002);
const sshChannelClosedEventArgs_1 = __webpack_require__(83229);
const cancellation_1 = __webpack_require__(97437);
const semaphore_1 = __webpack_require__(24564);
const trace_1 = __webpack_require__(43776);
/**
 * Represents a channel on an SSH session. A session may include multiple channels, which
 * are multiplexed over the connection. Each channel within a session has a unique integer ID.
 */
class SshChannel {
    /* @internal */
    constructor(connectionService, channelType, remoteChannelId, remoteWindowSize, remoteMaxPacketSize, channelId) {
        this.connectionService = connectionService;
        this.channelType = channelType;
        this.remoteChannelId = remoteChannelId;
        this.remoteWindowSize = remoteWindowSize;
        this.remoteMaxPacketSize = remoteMaxPacketSize;
        this.channelId = channelId;
        this.remoteClosed = false;
        this.localClosed = false;
        this.sentEof = false;
        this.disposed = false;
        this.openSendingWindowCompletionSource = null;
        this.requestCompletionSource = null;
        this.sendSemaphore = new semaphore_1.Semaphore(0);
        /**
         * Gets an object that reports measurements about the channel.
         */
        this.metrics = new channelMetrics_1.ChannelMetrics();
        this.dataReceivedEmitter = new vscode_jsonrpc_1.Emitter();
        /**
         * Event raised when a data message is received on the channel.
         *
         * Users of a channel MUST add a `onDataReceived` event handler immediately after a
         * channel is opened/accepted, or else all session communication will be blocked.
         * (The `SshStream` class does this automatically.)
         *
         * The event handler must call `adjustWindow` when the data has been consumed,
         * to notify the remote side that it may send more data.
         */
        this.onDataReceived = this.dataReceivedEmitter.event;
        this.eofEmitter = new vscode_jsonrpc_1.Emitter();
        /**
         * Event raised when an EOF message is received on the channel.
         */
        this.onEof = this.eofEmitter.event;
        this.closedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onClosed = this.closedEmitter.event;
        this.requestEmitter = new vscode_jsonrpc_1.Emitter();
        this.onRequest = this
            .requestEmitter.event;
        this.windowSize = SshChannel.initialWindowSize;
        this.maxPacketSize = SshChannel.dataPacketSize;
    }
    get session() {
        return this.connectionService.session;
    }
    get isClosed() {
        return this.localClosed || this.remoteClosed;
    }
    /**
     * Sends a channel request and waits for a response.
     *
     * Note if `wantReply` is `false`, this method returns `true` immediately after sending the
     * request, without waiting for a reply.
     *
     * @returns The authorization status of the response; if false, the other side denied the
     * request.
     * @throws `ObjectDisposedError` if the channel was closed before sending the request.
     * @throws `SshChannelError` if the channel was closed while waiting for a reply to the request.
     */
    async request(request, cancellation) {
        if (!request)
            throw new TypeError('Request is required.');
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        request.recipientChannel = this.remoteChannelId;
        if (!request.wantReply) {
            // If a reply is not requested, there's no need to set up a completion source.
            await this.session.sendMessage(request, cancellation);
            return true;
        }
        if (this.requestCompletionSource != null) {
            throw new Error('Another request is already pending.');
        }
        // Capture as a local variable because the member may change.
        const requestCompletionSource = new promiseCompletionSource_1.PromiseCompletionSource();
        this.requestCompletionSource = requestCompletionSource;
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellation.onCancellationRequested(() => {
                requestCompletionSource.reject(new cancellation_1.CancellationError());
            });
        }
        await this.session.sendMessage(request, cancellation);
        return await requestCompletionSource.promise;
    }
    async send(data, cancellation) {
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if (data.length === 0) {
            await this.sendEof();
            return;
        }
        else if (this.sentEof) {
            throw new Error('Cannot send more data after EOF.');
        }
        // Prevent out-of-order message chunks even if the caller does not await.
        // Also don't send until the channel is fully opened.
        await this.sendSemaphore.wait(cancellation);
        try {
            let offset = 0;
            let count = data.length;
            while (count > 0) {
                let packetSize = Math.min(Math.min(this.remoteWindowSize, this.remoteMaxPacketSize), count);
                while (packetSize === 0) {
                    if (!this.openSendingWindowCompletionSource) {
                        this.openSendingWindowCompletionSource = new promiseCompletionSource_1.PromiseCompletionSource();
                    }
                    this.session.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.channelWaitForWindowAdjust, `${this} send window is full. Waiting for window adjustment before sending.`);
                    await (0, cancellation_1.withCancellation)(this.openSendingWindowCompletionSource.promise, cancellation);
                    this.openSendingWindowCompletionSource = null;
                    packetSize = Math.min(Math.min(this.remoteWindowSize, this.remoteMaxPacketSize), count);
                }
                const msg = new connectionMessages_1.ChannelDataMessage();
                msg.recipientChannel = this.remoteChannelId;
                // Unfortunately the data must be copied to a new buffer at this point
                // to ensure it is still available to be re-sent later in case of disconnect.
                msg.data = Buffer.from(data.slice(offset, offset + packetSize));
                await this.session.sendMessage(msg, cancellation);
                this.remoteWindowSize -= packetSize;
                count -= packetSize;
                offset += packetSize;
                this.metrics.addBytesSent(packetSize);
            }
        }
        finally {
            this.sendSemaphore.tryRelease();
        }
    }
    /* @internal */
    enableSending() {
        this.sendSemaphore.tryRelease();
    }
    async sendEof(cancellation) {
        if (this.sentEof) {
            return;
        }
        await this.sendSemaphore.wait(cancellation);
        try {
            this.sentEof = true;
            const msg = new connectionMessages_1.ChannelEofMessage();
            msg.recipientChannel = this.remoteChannelId;
            await this.session.sendMessage(msg, cancellation);
        }
        finally {
            this.sendSemaphore.tryRelease();
        }
    }
    /* @internal */
    async handleRequest(request, cancellation) {
        if (!request.requestType) {
            throw new errors_1.SshConnectionError('Channel request type not specified.', transportMessages_1.SshDisconnectReason.protocolError);
        }
        if (request.requestType === connectionMessages_1.ChannelRequestType.exitStatus) {
            const signal = new connectionMessages_1.ChannelSignalMessage();
            request.convertTo(signal);
            this.exitStatus = signal.exitStatus;
            return true;
        }
        else if (request.requestType === connectionMessages_1.ChannelRequestType.exitSignal) {
            const signal = new connectionMessages_1.ChannelSignalMessage();
            request.convertTo(signal);
            this.exitSignal = signal.exitSignal;
            this.exitErrorMessage = signal.errorMessage;
            return true;
        }
        else if (request.requestType === connectionMessages_1.ChannelRequestType.signal) {
            const signal = new connectionMessages_1.ChannelSignalMessage();
            request.convertTo(signal);
        }
        const args = new sshRequestEventArgs_1.SshRequestEventArgs(request.requestType, request, this.session.principal);
        const serviceType = (0, serviceActivation_1.findService)(this.session.config.services, (a) => (!a.channelType || a.channelType === this.channelType) &&
            a.channelRequest === request.requestType);
        await this.sendSemaphore.wait(cancellation);
        try {
            if (serviceType) {
                // A service was configured for activation via this session request type.
                const service = this.session.activateService(serviceType);
                // `onChannelRequest` should really be 'protected internal'.
                await service.onChannelRequest(this, args, cancellation);
            }
            else {
                this.requestEmitter.fire(args);
            }
            if (request.wantReply) {
                let replyMessage;
                if (args.isAuthorized) {
                    const successMessage = new connectionMessages_1.ChannelSuccessMessage();
                    successMessage.recipientChannel = this.remoteChannelId;
                    replyMessage = successMessage;
                }
                else {
                    const failureMessage = new connectionMessages_1.ChannelFailureMessage();
                    failureMessage.recipientChannel = this.remoteChannelId;
                    replyMessage = failureMessage;
                }
                await this.session.sendMessage(replyMessage, cancellation);
            }
        }
        finally {
            this.sendSemaphore.tryRelease();
        }
        return args.isAuthorized || false;
    }
    /* @internal */
    handleResponse(result) {
        if (this.requestCompletionSource) {
            this.requestCompletionSource.resolve(result);
            this.requestCompletionSource = null;
        }
    }
    /* @internal */
    handleDataReceived(data) {
        this.metrics.addBytesReceived(data.length);
        // DataReceived handler is to adjust the window when it's done with the data.
        this.dataReceivedEmitter.fire(data);
    }
    /**
     * Adjusts the local receiving window size by the specified amount, notifying
     * the remote side that it is free to send more data.
     *
     * This method MUST be called either immediately or eventually by the
     * `onDataReceived` event handler as incoming data is processed.
     */
    adjustWindow(messageLength) {
        if (this.disposed)
            return;
        this.windowSize -= messageLength;
        if (this.windowSize <= this.maxPacketSize) {
            const windowAdjustMessage = new connectionMessages_1.ChannelWindowAdjustMessage();
            windowAdjustMessage.recipientChannel = this.remoteChannelId;
            windowAdjustMessage.bytesToAdd = SshChannel.initialWindowSize - this.windowSize;
            this.windowSize = SshChannel.initialWindowSize;
            this.session.sendMessage(windowAdjustMessage).catch((e) => {
                this.session.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.channelWindowAdjustFailed, `Error sending window adjust message: ${e.message}`, e);
            });
        }
    }
    /* @internal */
    adjustRemoteWindow(bytesToAdd) {
        this.remoteWindowSize += bytesToAdd;
        if (this.openSendingWindowCompletionSource) {
            this.openSendingWindowCompletionSource.resolve(undefined);
        }
    }
    /* @internal */
    handleEof() {
        this.session.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.channelEofReceived, `${this} EOF received.`);
        this.eofEmitter.fire();
    }
    close(exitStatusOrSignal, errorMessage, cancellation) {
        if (exitStatusOrSignal instanceof Error) {
            const error = exitStatusOrSignal;
            if (!this.localClosed) {
                this.localClosed = true;
                this.session.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.channelClosed, `${this} Closed: ${error.message}`);
                this.closedEmitter.fire(new sshChannelClosedEventArgs_1.SshChannelClosedEventArgs(error));
            }
            this.disposeInternal();
            return;
        }
        if (typeof exitStatusOrSignal === 'number') {
            return this.closeWithStatus(exitStatusOrSignal, errorMessage);
        }
        else if (typeof exitStatusOrSignal === 'string') {
            return this.closeWithSignal(exitStatusOrSignal, errorMessage, cancellation);
        }
        else {
            return this.closeDefault(exitStatusOrSignal);
        }
    }
    async closeDefault(cancellation) {
        var _a;
        if (!this.remoteClosed && !this.localClosed) {
            this.remoteClosed = true;
            await this.sendSemaphore.wait(cancellation);
            try {
                const closeMessage = new connectionMessages_1.ChannelCloseMessage();
                closeMessage.recipientChannel = this.remoteChannelId;
                await this.session.sendMessage(closeMessage);
            }
            catch (e) {
                // The session was already closed.
            }
            finally {
                this.sendSemaphore.tryRelease();
            }
        }
        if (!this.localClosed) {
            this.localClosed = true;
            const closedMessage = this.raiseClosedEvent();
            (_a = this.requestCompletionSource) === null || _a === void 0 ? void 0 : _a.reject(new errors_1.SshChannelError(closedMessage));
        }
        this.disposeInternal();
    }
    async closeWithStatus(exitStatus, cancellation) {
        if (!this.remoteClosed && !this.localClosed) {
            this.exitStatus = exitStatus;
            const signalMessage = new connectionMessages_1.ChannelSignalMessage();
            signalMessage.recipientChannel = this.remoteChannelId;
            signalMessage.exitStatus = exitStatus;
            await this.session.sendMessage(signalMessage);
        }
        await this.closeDefault(cancellation);
    }
    async closeWithSignal(exitSignal, errorMessage, cancellation) {
        if (!this.remoteClosed && !this.localClosed) {
            this.exitSignal = exitSignal;
            this.exitErrorMessage = errorMessage;
            const signalMessage = new connectionMessages_1.ChannelSignalMessage();
            signalMessage.recipientChannel = this.remoteChannelId;
            signalMessage.exitSignal = exitSignal;
            signalMessage.errorMessage = errorMessage;
            await this.session.sendMessage(signalMessage);
        }
        await this.closeDefault(cancellation);
    }
    /* @internal */
    handleClose() {
        var _a;
        if (!this.localClosed) {
            this.localClosed = true;
            const closedMessage = this.raiseClosedEvent(true);
            (_a = this.requestCompletionSource) === null || _a === void 0 ? void 0 : _a.reject(new errors_1.SshChannelError(closedMessage));
        }
        this.disposeInternal();
    }
    raiseClosedEvent(closedByRemote = false) {
        const metricsMessage = ` (S: ${this.metrics.bytesSent}, R: ${this.metrics.bytesReceived})`;
        const originMessage = closedByRemote ? 'remotely' : 'locally';
        let closedMessage;
        let args;
        if (typeof this.exitStatus !== 'undefined') {
            args = new sshChannelClosedEventArgs_1.SshChannelClosedEventArgs(this.exitStatus);
            closedMessage = `${this} closed ${originMessage}: status=${this.exitStatus}`;
        }
        else if (typeof this.exitSignal !== 'undefined') {
            args = new sshChannelClosedEventArgs_1.SshChannelClosedEventArgs(this.exitSignal, this.exitErrorMessage);
            closedMessage = `${this} closed ${originMessage}: signal=${this.exitSignal} ${this.exitErrorMessage}`;
        }
        else {
            args = new sshChannelClosedEventArgs_1.SshChannelClosedEventArgs();
            closedMessage = `${this} closed ${originMessage}.`;
        }
        this.session.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.channelClosed, closedMessage + metricsMessage);
        this.closedEmitter.fire(args);
        return closedMessage;
    }
    dispose() {
        var _a;
        if (!this.disposed && !this.localClosed) {
            if (!this.remoteClosed) {
                this.remoteClosed = true;
                const closeMessage = new connectionMessages_1.ChannelCloseMessage();
                closeMessage.recipientChannel = this.remoteChannelId;
                this.session.sendMessage(closeMessage).catch((e) => {
                    // The session was already closed, or some other sending error occurred.
                    // The details have already been traced.
                });
            }
            const message = this.session.isClosed ? `${this.session} closed.` : `${this} disposed.`;
            this.session.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.channelClosed, message);
            const args = new sshChannelClosedEventArgs_1.SshChannelClosedEventArgs('SIGABRT', message);
            this.localClosed = true;
            this.closedEmitter.fire(args);
            (_a = this.requestCompletionSource) === null || _a === void 0 ? void 0 : _a.reject(new errors_1.SshChannelError(message));
        }
        this.disposeInternal();
    }
    disposeInternal() {
        var _a;
        if (this.disposed)
            return;
        this.disposed = true;
        (_a = this.requestCompletionSource) === null || _a === void 0 ? void 0 : _a.reject(new errors_1.ObjectDisposedError(this));
        this.connectionService._removeChannel(this);
        this.sendSemaphore.dispose();
    }
    toString() {
        return `SshChannel(Type: ${this.channelType}, Id: ${this.channelId}, RemoteId: ${this.remoteChannelId})`;
    }
}
exports.SshChannel = SshChannel;
SshChannel.sessionChannelType = 'session';
SshChannel.dataPacketSize = 32 * 1024;
SshChannel.initialWindowSize = SshChannel.dataPacketSize * 32;
//# sourceMappingURL=sshChannel.js.map

/***/ }),

/***/ 51485:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshClientSession = void 0;
const sshSession_1 = __webpack_require__(7395);
const transportMessages_1 = __webpack_require__(90818);
const sshAuthenticatingEventArgs_1 = __webpack_require__(28047);
const promiseCompletionSource_1 = __webpack_require__(93708);
const cancellation_1 = __webpack_require__(97437);
const sshSessionConfiguration_1 = __webpack_require__(97183);
const authenticationService_1 = __webpack_require__(76502);
const connectionService_1 = __webpack_require__(47165);
const errors_1 = __webpack_require__(72917);
const trace_1 = __webpack_require__(43776);
/**
 * The client side of an SSH session. Extends the base `SshSession` class to
 * support client authentication.
 */
class SshClientSession extends sshSession_1.SshSession {
    constructor(config) {
        super(config, true);
        this.serviceRequests = new Map();
        this.clientAuthCompletion = null;
    }
    /**
     * Attempts to authenticate both the server and client.
     *
     * This method must be called only after encrypting the session. It is equivalent
     * to calling both `authenticateServer()` and `authenticateClient()` and waiting on
     * both results.
     *
     * @returns `true` if authentication succeeded, `false` if it failed.
     */
    async authenticate(clientCredentials, cancellation) {
        const serverAuthenticated = await this.authenticateServer(cancellation);
        if (!serverAuthenticated) {
            return false;
        }
        const clientAuthenticated = await this.authenticateClient(clientCredentials, cancellation);
        if (!clientAuthenticated) {
            return false;
        }
        return true;
    }
    /**
     * Triggers server authentication by invoking the `authenticating` event with
     * the verified server host key.
     *
     * This method must be called only after encrypting the session. It does not wait for any
     * further message exchange with the server, since the server host key would have already
     * been obtained during the key-exchange.
     *
     * @returns `true` if authentication succeeded, `false` if it failed.
     */
    async authenticateServer(cancellation) {
        if (!(this.kexService && this.kexService.hostKey)) {
            throw new Error('Encrypt the session before authenticating.');
        }
        try {
            // Raise an Authenticating event that allows handlers to do verification
            // of the host key and return a principal for the server.
            this.principal = await this.raiseAuthenticatingEvent(new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.serverPublicKey, {
                publicKey: this.kexService.hostKey,
            }, cancellation));
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.authenticationError, `Error while authenticating server: ${e.message}`, e);
            throw e;
        }
        if (!this.principal) {
            await this.close(transportMessages_1.SshDisconnectReason.hostKeyNotVerifiable, 'Server authentication failed.');
            this.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.serverAuthenticationFailed, `${this} server authentication failed.`);
            return false;
        }
        this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.sessionAuthenticated, `${this} server authenticated.`);
        return true;
    }
    /* @internal */
    authenticateClient(credentials, callbackOrCancellation, cancellation) {
        if (!credentials) {
            throw new TypeError('A credentials object is required.');
        }
        if (typeof callbackOrCancellation === 'function') {
            return this.authenticateClientWithCompletion(credentials, callbackOrCancellation, cancellation);
        }
        else {
            return new Promise(async (resolve, reject) => {
                await this.authenticateClientWithCompletion(credentials, (err, result) => {
                    if (err)
                        reject(err);
                    else
                        resolve(result);
                }, callbackOrCancellation);
            });
        }
    }
    async authenticateClientWithCompletion(credentials, callback, cancellation) {
        this.clientAuthCompletion = new promiseCompletionSource_1.PromiseCompletionSource();
        this.clientAuthCompletion.promise.then((result) => callback(undefined, result), (err) => callback(err));
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellation.onCancellationRequested((e) => {
                if (this.clientAuthCompletion) {
                    this.clientAuthCompletion.reject(new cancellation_1.CancellationError());
                }
            });
        }
        let authService = this.getService(authenticationService_1.AuthenticationService);
        if (!authService) {
            const serviceRequestMessage = new transportMessages_1.ServiceRequestMessage();
            serviceRequestMessage.serviceName = authenticationService_1.AuthenticationService.serviceName;
            await this.sendMessage(serviceRequestMessage, cancellation);
            // Assume the service request is accepted, without waiting for an accept message.
            // (If not, the following auth requests will fail anyway.)
            authService = this.activateService(authenticationService_1.AuthenticationService);
        }
        await authService.authenticateClient(credentials, cancellation);
    }
    /* @internal */
    onAuthenticationComplete(success) {
        if (success) {
            this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.sessionAuthenticated, `${this} client authenticated.`);
        }
        else {
            this.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.clientAuthenticationFailed, `${this} client authentication failed.`);
        }
        if (this.clientAuthCompletion) {
            this.clientAuthCompletion.resolve(success);
            this.clientAuthCompletion = null;
        }
    }
    /**
     * Sends a request for a service and waits for a response.
     *
     * @param serviceName Name of the service to be requested.
     * @param cancellation Optional cancellation token.
     * @returns A promise that resolves when the service request has been accepted.
     *
     * If the server does not accept the service request, it will disconnect the session.
     */
    async requestService(serviceName, cancellation) {
        let sendRequest = false;
        let completion = this.serviceRequests.get(serviceName);
        if (!completion) {
            completion = new promiseCompletionSource_1.PromiseCompletionSource();
            this.serviceRequests.set(serviceName, completion);
            sendRequest = true;
        }
        if (sendRequest) {
            const requestMessage = new transportMessages_1.ServiceRequestMessage();
            requestMessage.serviceName = serviceName;
            await this.sendMessage(requestMessage, cancellation);
        }
        await completion.promise;
    }
    /* @internal */
    async handleServiceAcceptMessage(message, cancellation) {
        const completion = this.serviceRequests.get(message.serviceName);
        completion === null || completion === void 0 ? void 0 : completion.resolve(true);
    }
    async openChannel(channelTypeOrOpenMessageOrCancellation, initialRequestOrCancellation, cancellation) {
        if (!this.connectionService) {
            // Authentication must have been skipped, meaning there was no
            // connection service request sent yet. Send it now, and assume
            // it is accepted without waiting for a response.
            const serviceRequestMessage = new transportMessages_1.ServiceRequestMessage();
            serviceRequestMessage.serviceName = connectionService_1.ConnectionService.serviceName;
            await this.sendMessage(serviceRequestMessage, cancellation);
        }
        return await super.openChannel(channelTypeOrOpenMessageOrCancellation, initialRequestOrCancellation, cancellation);
    }
    /* @internal */
    handleDisconnected() {
        if (this.reconnecting) {
            this.reconnecting = false;
            return false;
        }
        return super.handleDisconnected();
    }
    /**
     * Call instead of `connect()` to reconnect to a prior session instead of connecting
     * a new session.
     * @param stream A new stream that has just (re-) connected to the server.
     * @param cancellation Optional cancellation token.
     * @returns True if reconnect succeeded, false if the server declined the reconnect
     * request or reconnect session validation failed. In the case of a false return value,
     * retrying is unlikely to succeed.
     * @throws {SshConnectionError} There was a problem connecting to or communicating with
     * the server; retrying may still succeed if connectivity is restored.
     * @throws {SshReconnectError} Reconnect failed for some reason other than a communication
     * issue: see the `failureReason` property of the error. Retrying is unlikely to succeed,
     * unless the specific error condition can be addressed.
     */
    async reconnect(stream, cancellation) {
        this.trace(trace_1.TraceLevel.Verbose, trace_1.SshTraceEventIds.clientSessionReconnecting, 'Attempting to reconnect...');
        if (this.isClosed) {
            throw new errors_1.ObjectDisposedError(this);
        }
        else if (this.isConnected) {
            throw new Error('Already connected.');
        }
        if (!this.protocol) {
            throw new Error('The session was never previously connected.');
        }
        if (this.reconnecting) {
            throw new Error('Already reconnecting.');
        }
        this.reconnecting = true;
        try {
            await this.reconnectInternal(stream, cancellation);
        }
        finally {
            this.reconnecting = false;
        }
    }
    async reconnectInternal(stream, cancellation) {
        var _a, _b, _c, _d, _e, _f;
        const previousSessionId = this.sessionId;
        const previousProtocolInstance = this.protocol;
        const previousHostKey = (_a = this.kexService) === null || _a === void 0 ? void 0 : _a.hostKey;
        if (!previousSessionId ||
            !previousProtocolInstance ||
            !this.kexService ||
            !previousHostKey ||
            !((_b = previousProtocolInstance.extensions) === null || _b === void 0 ? void 0 : _b.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
            throw new Error('Reconnect was not enabled for this session.');
        }
        let newSessionId;
        try {
            // Reconnecting will temporarily create a new session ID.
            this.sessionId = null;
            await this.connect(stream, cancellation);
            if (!this.sessionId || !this.algorithms || !this.algorithms.signer) {
                throw new Error('Session is not encrypted.');
            }
            // Ensure the client is not reconnecting to a different server.
            const newHostKey = this.kexService.hostKey;
            const newHostPublicKey = !newHostKey ? null : await newHostKey.getPublicKeyBytes();
            const previousHostPublicKey = await previousHostKey.getPublicKeyBytes();
            if (!newHostPublicKey ||
                !previousHostPublicKey ||
                !newHostPublicKey.equals(previousHostPublicKey)) {
                const message = 'The server host key is different.';
                this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.clientSessionReconnectFailed, `Reconnection failed: ${message}`);
                throw new errors_1.SshReconnectError(message, transportMessages_1.SshReconnectFailureReason.differentServerHostKey);
            }
            newSessionId = this.sessionId;
        }
        catch (e) {
            // Restore the previous protocol instance so reconnect may be attempted again.
            this.protocol = previousProtocolInstance;
            super.handleDisconnected();
            throw e;
        }
        finally {
            // Restore the previous session ID and host key for the reconnected session.
            this.sessionId = previousSessionId;
            this.kexService.hostKey = previousHostKey;
        }
        const reconnectToken = await this.createReconnectToken(previousSessionId, newSessionId);
        const reconnectRequest = new transportMessages_1.SessionReconnectRequestMessage();
        reconnectRequest.requestType = "session-reconnect@microsoft.com" /* sessionReconnect */;
        reconnectRequest.clientReconnectToken = reconnectToken;
        reconnectRequest.lastReceivedSequenceNumber = previousProtocolInstance.lastIncomingSequence;
        reconnectRequest.wantReply = true;
        const response = await this.requestResponse(reconnectRequest, transportMessages_1.SessionReconnectResponseMessage, transportMessages_1.SessionReconnectFailureMessage, cancellation);
        if (response instanceof transportMessages_1.SessionReconnectFailureMessage) {
            const reason = (_c = response.reasonCode) !== null && _c !== void 0 ? _c : transportMessages_1.SshReconnectFailureReason.unknownServerFailure;
            const message = (_d = response.description) !== null && _d !== void 0 ? _d : 'The server rejected the reconnect request.';
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.clientSessionReconnectFailed, `Reconnection failed: ${message}`);
            // Restore the previous protocol instance so reconnect may be attempted again.
            this.protocol = previousProtocolInstance;
            throw new errors_1.SshReconnectError(message, reason);
        }
        if (!this.verifyReconnectToken(previousSessionId, newSessionId, (_e = response.serverReconnectToken) !== null && _e !== void 0 ? _e : Buffer.alloc(0))) {
            const message = 'The reconnect token provided by the server was invalid.';
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.clientSessionReconnectFailed, `Reconnection failed: ${message}`);
            throw new errors_1.SshReconnectError(message, transportMessages_1.SshReconnectFailureReason.invalidServerReconnectToken);
        }
        this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.clientSessionReconnecting, 'Reconnect request was accepted by the server.');
        // Re-send lost messages.
        const messagesToResend = previousProtocolInstance.getSentMessages(((_f = response.lastReceivedSequenceNumber) !== null && _f !== void 0 ? _f : 0) + 1);
        if (!messagesToResend) {
            const message = 'Client is unable to re-send messages requested by the server.';
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.clientSessionReconnectFailed, `Reconnection failed: ${message}`);
            throw new errors_1.SshReconnectError(message, transportMessages_1.SshReconnectFailureReason.clientDroppedMessages);
        }
        let count = 0;
        for (let message of messagesToResend) {
            await this.sendMessage(message, cancellation);
            count++;
        }
        // Now the session is fully reconnected!
        previousProtocolInstance.dispose();
        this.metrics.addReconnection();
        this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.clientSessionReconnecting, `Reconnected. Re-sent ${count} dropped messages.`);
    }
    dispose() {
        if (this.clientAuthCompletion) {
            this.clientAuthCompletion.reject(new errors_1.ObjectDisposedError(this));
        }
        super.dispose();
    }
}
exports.SshClientSession = SshClientSession;
//# sourceMappingURL=sshClientSession.js.map

/***/ }),

/***/ 66521:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshRpcMessageStream = void 0;
const rpc = __webpack_require__(83730);
const buffer_1 = __webpack_require__(30816);
const sshData_1 = __webpack_require__(67914);
const contentLengthHeaderPrefix = 'Content-Length: ';
const headersSeparator = '\r\n\r\n';
class SshRpcMessageReader {
    constructor(channel) {
        this.channel = channel;
        this.errorEmitter = new rpc.Emitter();
        this.closeEmitter = new rpc.Emitter();
        this.partialMessageEmitter = new rpc.Emitter();
        this.callback = null;
        this.messageBuffer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(1024));
        this.headersLength = null;
        this.messageLength = null;
        this.onError = this.errorEmitter.event;
        this.onClose = this.closeEmitter.event;
        this.onPartialMessage = this.partialMessageEmitter.event;
        this.eventRegistration = this.channel.onDataReceived(this.onDataReceived.bind(this));
        this.channel.onClosed((e) => {
            if (e.error) {
                this.errorEmitter.fire(e.error);
            }
            // Note: we always want to fire a close event to avoid the rpc connection
            // to be used. After the event any usage of the rpc message connection will
            // throw an error with this code: ConnectionErrors.Closed
            this.closeEmitter.fire();
        });
    }
    listen(callback) {
        this.callback = callback;
    }
    dispose() {
        if (this.eventRegistration) {
            this.eventRegistration.dispose();
        }
    }
    onDataReceived(data) {
        this.messageBuffer.write(data);
        this.channel.adjustWindow(data.length);
        // In case of recursion, the `data` might have already been a slice of the message buffer,
        // but it could have been invalidated by expansion during write() above.
        data = this.messageBuffer.toBuffer();
        if (this.messageLength === null) {
            const headersEnd = data.indexOf(headersSeparator);
            if (headersEnd < 0) {
                return; // Wait for more data.
            }
            const headers = data.slice(0, headersEnd).toString();
            if (!headers.startsWith(contentLengthHeaderPrefix)) {
                throw new Error(`Message does not start with JSON-RPC headers.\n${headers}`);
            }
            this.headersLength = headersEnd + headersSeparator.length;
            this.messageLength = parseInt(headers.substr(contentLengthHeaderPrefix.length, headersEnd - contentLengthHeaderPrefix.length), 10);
        }
        const position = this.messageBuffer.position;
        const totalLength = this.headersLength + this.messageLength;
        if (position >= totalLength) {
            if (this.callback) {
                const messageJson = data.slice(this.headersLength, totalLength).toString();
                let message;
                try {
                    message = JSON.parse(messageJson);
                }
                catch (e) {
                    if (!(e instanceof Error))
                        throw e;
                    throw new Error(`Failed to parse JSON-RPC message: ${e.message}\n${messageJson}`);
                }
                this.callback(message);
            }
            this.messageLength = null;
            this.messageBuffer.position = 0;
            if (position > totalLength) {
                // Recursively receive the remaining data, which will cause it
                // to be copied to the beginning of the buffer;
                this.onDataReceived(data.slice(totalLength));
            }
        }
    }
}
class SshRpcMessageWriter {
    constructor(channel) {
        this.channel = channel;
        this.errorEmitter = new rpc.Emitter();
        this.closeEmitter = new rpc.Emitter();
        this.onError = this.errorEmitter.event;
        this.onClose = this.closeEmitter.event;
        this.channel.onClosed((e) => {
            if (e.error) {
                this.errorEmitter.fire([
                    e.error,
                    (e.errorMessage && { jsonrpc: e.errorMessage }) || undefined,
                    e.exitStatus,
                ]);
            }
            this.closeEmitter.fire();
        });
    }
    write(message) {
        const messageJson = JSON.stringify(message);
        const messageData = buffer_1.Buffer.from(messageJson);
        const headerData = buffer_1.Buffer.from(contentLengthHeaderPrefix + messageData.length + headersSeparator);
        const data = buffer_1.Buffer.alloc(headerData.length + messageData.length);
        headerData.copy(data, 0);
        messageData.copy(data, headerData.length);
        this.channel.send(data).catch((e) => {
            this.errorEmitter.fire([e, undefined, undefined]);
        });
    }
    dispose() { }
}
class SshRpcMessageStream {
    constructor(channel) {
        this.reader = new SshRpcMessageReader(channel);
        this.writer = new SshRpcMessageWriter(channel);
    }
}
exports.SshRpcMessageStream = SshRpcMessageStream;
//# sourceMappingURL=sshRpcMessageStream.js.map

/***/ }),

/***/ 71410:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshServerSession = void 0;
const sshSession_1 = __webpack_require__(7395);
const vscode_jsonrpc_1 = __webpack_require__(83730);
const transportMessages_1 = __webpack_require__(90818);
const errors_1 = __webpack_require__(72917);
const sshSessionConfiguration_1 = __webpack_require__(97183);
const trace_1 = __webpack_require__(43776);
/**
 * The server side of an SSH session. Extends the base `SshSession` class
 * to support host authentication.
 */
class SshServerSession extends sshSession_1.SshSession {
    constructor(config, reconnectableSessions) {
        super(config, false);
        this.clientAuthenticatedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onClientAuthenticated = this.clientAuthenticatedEmitter.event;
        this.reconnectedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onReconnected = this.reconnectedEmitter.event;
        /**
         * Gets or sets credentials and/or credential callbacks for authenticating the session.
         */
        this.credentials = { publicKeys: [] };
        const enableReconnect = config.protocolExtensions.includes(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect);
        if (enableReconnect && !reconnectableSessions) {
            throw new Error('When reconnect is enabled, server sessions require a reference to a ' +
                'shared collection to track reconnectable sessions.');
        }
        else if (!enableReconnect && reconnectableSessions) {
            throw new Error('When reconnect is not enabled, the reconnectable sessions collection ' +
                'is not applicable.');
        }
        this.reconnectableSessions = reconnectableSessions;
    }
    /* @internal */
    async handleServiceRequestMessage(message, cancellation) {
        const service = this.activateService(message.serviceName);
        if (service) {
            const acceptMessage = new transportMessages_1.ServiceAcceptMessage();
            acceptMessage.serviceName = message.serviceName;
            await this.sendMessage(acceptMessage, cancellation);
        }
        else {
            throw new errors_1.SshConnectionError(`Service "${message.serviceName}" not available.`, transportMessages_1.SshDisconnectReason.serviceNotAvailable);
        }
    }
    /* @internal */
    async handleRequestMessage(message, cancellation) {
        var _a;
        if (message.requestType === "session-reconnect@microsoft.com" /* sessionReconnect */ &&
            ((_a = this.config.protocolExtensions) === null || _a === void 0 ? void 0 : _a.includes(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
            const reconnectRequest = message.convertTo(new transportMessages_1.SessionReconnectRequestMessage());
            await this.reconnect(reconnectRequest, cancellation);
            // reconnect() handles sending the response message.
            return;
        }
        await super.handleRequestMessage(message, cancellation);
    }
    /* @internal */
    handleClientAuthenticated() {
        this.clientAuthenticatedEmitter.fire();
    }
    /* @internal */
    async enableReconnect(cancellation) {
        await super.enableReconnect(cancellation);
        if (!this.reconnectableSessions.includes(this)) {
            this.reconnectableSessions.push(this);
        }
    }
    /* @internal */
    handleDisconnected() {
        if (this.reconnecting) {
            // Prevent closing the session while reconnecting.
            return true;
        }
        return super.handleDisconnected();
    }
    /**
     * Attempts to reconnect the client to a disconnected server session.
     *
     * If reconnection is successful, the current server session is disposed because the client
     * gets reconnected to a different server session.
     */
    /* @internal */
    async reconnect(reconnectRequest, cancellation) {
        var _a, _b, _c;
        if (!this.reconnectableSessions) {
            throw new Error('Disconnected sessions collection ' +
                'should have been initialied when reconnect is enabled.');
        }
        // Try to find the requested server session in the list of available disconnected
        // server sessions, by validating the reconnect token.
        let reconnectSession;
        for (let reconnectableSession of this.reconnectableSessions) {
            if (reconnectableSession !== this &&
                (await this.verifyReconnectToken(reconnectableSession.sessionId, this.sessionId, (_a = reconnectRequest.clientReconnectToken) !== null && _a !== void 0 ? _a : Buffer.alloc(0)))) {
                reconnectSession = reconnectableSession;
                this.reconnectableSessions.splice(this.reconnectableSessions.indexOf(reconnectSession), 1);
                break;
            }
        }
        if (!reconnectSession || reconnectSession.isClosed) {
            const message = 'Requested reconnect session was not found or ' +
                'the reconnect token provided by the client was invalid.';
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.serverSessionReconnectFailed, `Reconnect failed: ${message}`);
            const failure = new transportMessages_1.SessionReconnectFailureMessage();
            failure.reasonCode = transportMessages_1.SshReconnectFailureReason.sessionNotFound;
            failure.description = message;
            await this.sendMessage(failure, cancellation);
            return;
        }
        const messagesToResend = reconnectSession.protocol.getSentMessages(((_b = reconnectRequest.lastReceivedSequenceNumber) !== null && _b !== void 0 ? _b : 0) + 1);
        if (!messagesToResend) {
            // Messages are not available from requested sequence number.
            // Restore the current session protocol and put the old session back in the collection.
            this.reconnectableSessions.push(reconnectSession);
            const message = 'Server is unable to re-send messages requested by the client.';
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.serverSessionReconnectFailed, `Reconnect failed: ${message}`);
            const failure = new transportMessages_1.SessionReconnectFailureMessage();
            failure.reasonCode = transportMessages_1.SshReconnectFailureReason.serverDroppedMessages;
            failure.description = message;
            await this.sendMessage(failure, cancellation);
            return;
        }
        const responseMessage = new transportMessages_1.SessionReconnectResponseMessage();
        responseMessage.serverReconnectToken = await this.createReconnectToken(reconnectSession.sessionId, this.sessionId);
        responseMessage.lastReceivedSequenceNumber = reconnectSession.protocol.lastIncomingSequence;
        await this.sendMessage(responseMessage, cancellation);
        try {
            reconnectSession.reconnecting = true;
            // Ensure the old connection is disconnected before switching over to the new one.
            (_c = reconnectSession.protocol) === null || _c === void 0 ? void 0 : _c.dispose();
            while (reconnectSession.isConnected) {
                await new Promise((resolve) => setTimeout(() => resolve(), 5));
            }
            // Move this session's protocol instance over to the reconnected session.
            reconnectSession.protocol = this.protocol;
            reconnectSession.protocol.kexService = reconnectSession.kexService;
            this.protocol = undefined;
            // Re-send the lost messages that the client requested.
            for (let message of messagesToResend) {
                await reconnectSession.sendMessage(message, cancellation);
            }
            // Now this server session is invalid because the client reconnected to another one.
            this.dispose();
        }
        finally {
            reconnectSession.reconnecting = false;
        }
        this.reconnectableSessions.push(reconnectSession);
        reconnectSession.metrics.addReconnection();
        // Restart the message loop for the reconnected session.
        reconnectSession.processMessages().catch((e) => {
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.unknownError, `Unhandled error processing messages: ${e.message}`, e);
        });
        this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.serverSessionReconnecting, `Session reconnected. Re-sent ${messagesToResend.length} dropped messages.`);
        // Notify event listeners about the successful reconnection.
        reconnectSession.reconnectedEmitter.fire();
    }
    dispose() {
        if (this.reconnectableSessions) {
            const index = this.reconnectableSessions.indexOf(this);
            if (index >= 0) {
                this.reconnectableSessions.splice(index, 1);
            }
        }
        super.dispose();
    }
}
exports.SshServerSession = SshServerSession;
//# sourceMappingURL=sshServerSession.js.map

/***/ }),

/***/ 7395:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshSession = void 0;
const trace_1 = __webpack_require__(43776);
const buffer_1 = __webpack_require__(30816);
const vscode_jsonrpc_1 = __webpack_require__(83730);
const sshSessionConfiguration_1 = __webpack_require__(97183);
const sshChannel_1 = __webpack_require__(34756);
const sshVersionInfo_1 = __webpack_require__(87505);
const sshProtocol_1 = __webpack_require__(17585);
const keyExchangeService_1 = __webpack_require__(43210);
const serviceActivation_1 = __webpack_require__(34670);
const connectionService_1 = __webpack_require__(47165);
const authenticationService_1 = __webpack_require__(76502);
const sshMessage_1 = __webpack_require__(285);
const kexMessages_1 = __webpack_require__(50856);
const connectionMessages_1 = __webpack_require__(45757);
const authenticationMessages_1 = __webpack_require__(90450);
const transportMessages_1 = __webpack_require__(90818);
const sessionMetrics_1 = __webpack_require__(13965);
const promiseCompletionSource_1 = __webpack_require__(93708);
const sshSessionClosedEventArgs_1 = __webpack_require__(13068);
const sshRequestEventArgs_1 = __webpack_require__(96002);
const sshAlgorithms_1 = __webpack_require__(91605);
const cancellation_1 = __webpack_require__(97437);
const errors_1 = __webpack_require__(72917);
const semaphore_1 = __webpack_require__(24564);
/**
 * Base class for an SSH server or client connection; coordinates high-level SSH
 * protocol details and dispatches messages to registered internal services.
 * Enables opening and accepting `SshChannel` instances.
 */
class SshSession {
    constructor(config, isClientSession) {
        this.config = config;
        this.remoteVersion = null;
        this.activatedServices = new Map();
        this.connectionService = null;
        this.requestHandler = null;
        this.blockedMessages = [];
        this.blockedMessagesSemaphore = new semaphore_1.Semaphore(1);
        this.connected = false;
        this.disposed = false;
        /**
         * Gets an object that reports current and cumulative measurements about the session.
         */
        this.metrics = new sessionMetrics_1.SessionMetrics();
        /* @internal */
        this.reconnecting = false;
        this.sessionId = null;
        this.principalValue = null;
        this.authenticatingEmitter = new vscode_jsonrpc_1.Emitter();
        /**
         * Event that is raised when a client or server is requesting authentication.
         *
         * See `SshAuthenticationType` for a description of the different authentication
         * methods and how they map to the event-args object.
         *
         * After validating the credentials, the event handler must set the
         * `SshAuthenticatingEventArgs.authenticationPromise` property to a task that
         * resolves to a principal object to indicate successful authentication. That principal will
         * then be associated with the sesssion as the `principal` property.
         */
        this.onAuthenticating = this.authenticatingEmitter.event;
        this.closedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onClosed = this.closedEmitter.event;
        this.disconnectedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onDisconnected = this.disconnectedEmitter.event;
        this.serviceActivatedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onServiceActivated = this.serviceActivatedEmitter.event;
        this.channelOpeningEmitter = new vscode_jsonrpc_1.Emitter();
        this.onChannelOpening = this.channelOpeningEmitter.event;
        this.requestEmitter = new vscode_jsonrpc_1.Emitter();
        this.onRequest = this
            .requestEmitter.event;
        /**
         * Gets or sets a function that handles trace messages associated with the session.
         *
         * By default, no messages are traced. To enable tracing, set this property to a function
         * that routes the message to console.log, a file, or anywhere else.
         *
         * @param level Level of message: error, warning, info, or verbose
         * @param eventId Integer identifier of the event being traced.
         * @param msg Message (non-localized) describing the event.
         */
        this.trace = (level, eventId, msg, err) => { };
        if (!config)
            throw new TypeError('Session configuration is required.');
        if (!config.keyExchangeAlgorithms.find((a) => !!a)) {
            if (config.encryptionAlgorithms.length > 0 &&
                config.encryptionAlgorithms.indexOf(null) < 0) {
                throw new Error('Encryption requires a key-exchange algorithm to be configured.');
            }
            else if (config.hmacAlgorithms.length > 0 && config.hmacAlgorithms.indexOf(null) < 0) {
                throw new Error('HMAC requires a key-exchange algorithm to be configured.');
            }
            else if (config.publicKeyAlgorithms.length > 0 &&
                config.publicKeyAlgorithms.indexOf(null) < 0) {
                throw new Error('Host authentication requires a key-exchange algorithm to be configured.');
            }
            // No key exchange, no encryption, no HMAC.
            this.kexService = null;
        }
        else {
            this.kexService = new keyExchangeService_1.KeyExchangeService(this, isClientSession !== null && isClientSession !== void 0 ? isClientSession : false);
        }
        config.onConfigurationChanged(() => {
            const protocol = this.protocol;
            if (protocol) {
                protocol.traceChannelData = config.traceChannelData;
            }
        });
    }
    get algorithms() {
        return this.protocol ? this.protocol.algorithms : null;
    }
    /**
     * Gets an object containing claims about the server or client on the
     * other end of the session, or `null` if the session is not authenticated.
     *
     * This property is initially `null` for an unauthenticated session. On
     * successful authentication, the session Authenticating event handler
     * provides a Task that returns a principal that is stored here.
     */
    get principal() {
        return this.principalValue;
    }
    /* @internal */
    set principal(value) {
        this.principalValue = value;
    }
    get isConnected() {
        return this.connected;
    }
    get isClosed() {
        return this.disposed;
    }
    get services() {
        return [...this.activatedServices.values()];
    }
    get channels() {
        var _a, _b;
        return (_b = (_a = this.connectionService) === null || _a === void 0 ? void 0 : _a.channels) !== null && _b !== void 0 ? _b : [];
    }
    get protocolExtensions() {
        var _a;
        return ((_a = this.protocol) === null || _a === void 0 ? void 0 : _a.extensions) || null;
    }
    /**
     * Gets an activated service instance by type.
     *
     * @returns The service instance, or `null` if the service has not been activated.
     */
    getService(serviceType) {
        const service = this.activatedServices.get(serviceType);
        return service ? service : null;
    }
    /* @internal */
    activateService(serviceTypeOrName) {
        let serviceType;
        if (typeof serviceTypeOrName === 'function') {
            serviceType = serviceTypeOrName;
        }
        else {
            let serviceName = serviceTypeOrName;
            serviceType = (0, serviceActivation_1.findService)(this.config.services, (a) => a.serviceRequest === serviceName);
            if (!serviceType) {
                return null;
            }
        }
        let activatedService = this.activatedServices.get(serviceType);
        if (!activatedService) {
            if (!this.config.services.has(serviceType)) {
                throw new Error(`Service type not configured: ${serviceType.name}`);
            }
            const serviceConfig = this.config.services.get(serviceType);
            activatedService = new serviceType(this, serviceConfig);
            // This service is maintained in a separate member because it is accessed frequently.
            if (serviceType === connectionService_1.ConnectionService) {
                this.connectionService = activatedService;
            }
            this.activatedServices.set(serviceType, activatedService);
            this.serviceActivatedEmitter.fire(activatedService);
        }
        return activatedService;
    }
    async connect(stream, cancellation) {
        if (!stream)
            throw new TypeError('A session stream is required.');
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if (!this.connectPromise) {
            this.connectPromise = this.doConnect(stream, cancellation);
        }
        await this.connectPromise;
    }
    async doConnect(stream, cancellation) {
        this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.sessionConnecting, `${this} ${this.reconnecting ? 're' : ''}connecting...`);
        this.protocol = new sshProtocol_1.SshProtocol(stream, this.config, this.metrics, this.trace);
        this.protocol.kexService = this.kexService;
        await this.exchangeVersions(cancellation);
        if (this.kexService) {
            await this.encrypt(cancellation);
        }
        else {
            // When encrypting, the key-exchange step will wait on the version-exchange.
            // When not encrypting, it must be directly awaited.
            await (0, cancellation_1.withCancellation)(this.versionExchangePromise, cancellation);
            this.connected = true;
        }
        this.processMessages().catch((e) => {
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.unknownError, `Unhandled error processing messages: ${e.message}`, e);
        });
    }
    async exchangeVersions(cancellation) {
        const writePromise = this.protocol.writeProtocolVersion(SshSession.localVersion.toString(), cancellation);
        const readPromise = this.protocol.readProtocolVersion(cancellation);
        // Don't wait for and verify the other side's version info yet.
        // Instead save a promise that can be awaited later.
        this.versionExchangePromise = readPromise.then(async (remoteVersion) => {
            this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.protocolVersion, `Local version: ${SshSession.localVersion}, remote version: ${remoteVersion}`);
            let errorMessage;
            const remoteVersionInfo = sshVersionInfo_1.SshVersionInfo.tryParse(remoteVersion);
            if (remoteVersionInfo) {
                this.remoteVersion = remoteVersionInfo;
                if (remoteVersionInfo.protocolVersion === '2.0') {
                    return;
                }
                errorMessage =
                    `Remote SSH version ${this.remoteVersion} is not supported. ` +
                        'This library only supports SSH v2.0.';
            }
            else {
                errorMessage = `Could not parse remote SSH version ${remoteVersion}`;
            }
            await this.close(transportMessages_1.SshDisconnectReason.protocolVersionNotSupported, errorMessage, new Error(errorMessage));
        });
        await writePromise;
    }
    async encrypt(cancellation) {
        var _a, _b;
        const protocol = this.protocol;
        if (!protocol)
            throw new errors_1.ObjectDisposedError(this);
        await protocol.considerReExchange(true, cancellation);
        // Ensure the protocol version has been received before receiving any messages.
        await (0, cancellation_1.withCancellation)(this.versionExchangePromise, cancellation);
        this.connected = true;
        let message = null;
        while (!this.isClosed &&
            !((_a = this.protocol) === null || _a === void 0 ? void 0 : _a.algorithms) &&
            !(message instanceof transportMessages_1.DisconnectMessage)) {
            message = await protocol.receiveMessage(cancellation);
            if (!message) {
                break;
            }
            await this.handleMessage(message, cancellation);
        }
        if (!((_b = this.protocol) === null || _b === void 0 ? void 0 : _b.algorithms)) {
            throw new errors_1.SshConnectionError('Session closed while encrypting.', transportMessages_1.SshDisconnectReason.connectionLost);
        }
        else if (this.protocol.algorithms.cipher) {
            this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.sessionEncrypted, `${this} encrypted.`);
        }
    }
    /* @internal */
    async processMessages() {
        var _a;
        this.connected = true;
        while (!this.disposed) {
            const protocol = this.protocol;
            if (!protocol) {
                break;
            }
            let message = null;
            try {
                message = await protocol.receiveMessage();
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                let reason = transportMessages_1.SshDisconnectReason.protocolError;
                if (e instanceof errors_1.SshConnectionError) {
                    reason = (_a = e.reason) !== null && _a !== void 0 ? _a : reason;
                }
                else {
                    this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.receiveMessageFailed, `Error receiving message: ${e.message}`, e);
                }
                await this.close(reason, e.message, e);
            }
            if (!message) {
                await this.close(transportMessages_1.SshDisconnectReason.connectionLost, 'Connection lost.');
                break;
            }
            try {
                await this.handleMessage(message);
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.handleMessageFailed, `Error handling ${message}: ${e.message}`, e);
                await this.close(transportMessages_1.SshDisconnectReason.protocolError, e.message, e);
            }
        }
        this.connected = false;
    }
    /**
     * Checks whether the session is in a state that allows requests, such as session requests
     * and open-channel requests.
     *
     * A session with disabled crypto (no key-exchange service) always allows requests. A
     * session with enabled crypto does not allow requests until the first key-exchange has
     * completed (algorithms are negotiated). If the negotiated algorithms enabled encryption,
     * then the session must be authenticated (have a principal) before allowing requests.
     */
    /* @internal */
    get canAcceptRequests() {
        var _a;
        return (!this.kexService ||
            (!!((_a = this.protocol) === null || _a === void 0 ? void 0 : _a.algorithms) && (!this.protocol.algorithms.cipher || !!this.principal)));
    }
    async sendMessage(message, cancellation) {
        var _a, _b;
        if (!message)
            throw new TypeError('Message expected.');
        if (cancellation && cancellation.isCancellationRequested)
            throw new cancellation_1.CancellationError();
        const protocol = this.protocol;
        if (!protocol || this.disposed) {
            throw new errors_1.ObjectDisposedError(this);
        }
        // Delay sending messages if in the middle of a key (re-)exchange.
        if (this.kexService &&
            this.kexService.exchanging &&
            message.messageType > 4 &&
            (message.messageType < 20 || message.messageType > 49)) {
            this.blockedMessages.push(message);
            return;
        }
        await this.blockedMessagesSemaphore.wait(cancellation);
        let result;
        try {
            result = await protocol.sendMessage(message, cancellation);
            this.blockedMessagesSemaphore.release();
        }
        catch (e) {
            this.blockedMessagesSemaphore.release();
            if (e instanceof errors_1.SshConnectionError) {
                const ce = e;
                if (ce.reason === transportMessages_1.SshDisconnectReason.connectionLost &&
                    ((_a = this.protocolExtensions) === null || _a === void 0 ? void 0 : _a.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
                    // Connection-lost error when reconnect is enabled. Don't throw an error;
                    // the message will remain in the reconnect message cache and will be re-sent
                    // upon reconnection.
                    return;
                }
            }
            if (!(e instanceof Error))
                throw e;
            this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.sendMessageFailed, `Error sending ${message}: ${e.message}`, e);
            throw e;
        }
        if (!result) {
            // Sending failed due to a closed stream, but don't throw when reconnect is enabled.
            // In that case the sent message is buffered and will be re-sent after reconnecting.
            if (!((_b = this.protocolExtensions) === null || _b === void 0 ? void 0 : _b.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
                throw new errors_1.SshConnectionError('Session disconnected.', transportMessages_1.SshDisconnectReason.connectionLost);
            }
        }
    }
    /**
     * Handles an incoming message. Can be overridden by subclasses to handle additional
     * message types that are registered via `SshSessionConfiguration.messages`.
     */
    handleMessage(message, cancellation) {
        var _a;
        if (message instanceof connectionMessages_1.ConnectionMessage && this.connectionService) {
            return this.connectionService.handleMessage(message, cancellation);
        }
        else if (message instanceof kexMessages_1.NewKeysMessage) {
            return this.handleNewKeysMessage(message, cancellation);
        }
        else if (message instanceof kexMessages_1.KeyExchangeMessage) {
            return this.handleKeyExchangeMessage(message, cancellation);
        }
        else if (message instanceof authenticationMessages_1.AuthenticationMessage) {
            return (_a = this.getService(authenticationService_1.AuthenticationService)) === null || _a === void 0 ? void 0 : _a.handleMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.ServiceRequestMessage) {
            return this.handleServiceRequestMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.ServiceAcceptMessage) {
            return this.handleServiceAcceptMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.SessionRequestMessage) {
            return this.handleRequestMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.SessionRequestSuccessMessage) {
            return this.handleRequestSuccessMessage(message);
        }
        else if (message instanceof transportMessages_1.SessionRequestFailureMessage) {
            return this.handleRequestFailureMessage(message);
        }
        else if (message instanceof transportMessages_1.ExtensionInfoMessage) {
            return this.handleExtensionInfoMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.UnimplementedMessage) {
            return this.handleUnimplementedMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.DebugMessage) {
            return this.handleDebugMessage(message);
        }
        else if (message instanceof sshMessage_1.SshMessage) {
            throw new Error(`Unhandled message type: ${message.constructor.name}`);
        }
        else {
            throw new TypeError('Message argument was ' + (message ? 'invalid type.' : 'null.'));
        }
    }
    /* @internal */
    async handleRequestMessage(message, cancellation) {
        var _a;
        let result = false;
        if (message.requestType === "initial-channel-request@microsoft.com" /* initialChannelRequest */ &&
            this.config.protocolExtensions.includes(sshSessionConfiguration_1.SshProtocolExtensionNames.openChannelRequest)) {
            const sessionChannelRequest = message.convertTo(new transportMessages_1.SessionChannelRequestMessage());
            const remoteChannelId = sessionChannelRequest.senderChannel;
            const channel = this.channels.find((c) => c.remoteChannelId === remoteChannelId);
            if (channel && sessionChannelRequest.request) {
                sessionChannelRequest.request.wantReply = false; // Avoid redundant reply
                result = await channel.handleRequest(sessionChannelRequest.request, cancellation);
            }
        }
        else if (message.requestType === "enable-session-reconnect@microsoft.com" /* enableSessionReconnect */ &&
            ((_a = this.config.protocolExtensions) === null || _a === void 0 ? void 0 : _a.includes(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
            if (!this.protocol.incomingMessagesHaveReconnectInfo) {
                // Starting immediately after this message, all incoming messages include
                // an extra field or two after the payload.
                this.protocol.incomingMessagesHaveReconnectInfo = true;
                this.protocol.incomingMessagesHaveLatencyInfo = this.protocol.extensions.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionLatency);
                result = true;
            }
        }
        else if (!this.canAcceptRequests) {
            this.trace(trace_1.TraceLevel.Warning, trace_1.SshTraceEventIds.sessionRequestFailed, 'Session request blocked because the session is not yet authenticated.');
            result = false;
        }
        else {
            const args = new sshRequestEventArgs_1.SshRequestEventArgs(message.requestType || '', message, this.principal);
            const serviceType = (0, serviceActivation_1.findService)(this.config.services, (a) => a.sessionRequest === message.requestType);
            if (serviceType) {
                // A service was configured for activation via this session request type.
                const service = this.activateService(serviceType);
                // `onSessionRequest` should really be 'protected internal'.
                await service.onSessionRequest(args, cancellation);
                // The service should have handled sending the response message, if any.
                return;
            }
            else {
                // Raise a request event to let an event listener handle this request.
                this.raiseSessionRequest(args);
            }
            result = args.isAuthorized || false;
        }
        if (message.wantReply) {
            await this.sendMessage(result ? new transportMessages_1.SessionRequestSuccessMessage() : new transportMessages_1.SessionRequestFailureMessage(), cancellation);
        }
    }
    /* @internal */
    raiseSessionRequest(args) {
        this.requestEmitter.fire(args);
    }
    /* @internal */
    async handleServiceRequestMessage(message, cancellation) {
        // Do nothing. Subclasses may override.
    }
    /* @internal */
    async handleServiceAcceptMessage(message, cancellation) {
        // Do nothing. Subclasses may override.
    }
    async handleKeyExchangeMessage(message, cancellation) {
        if (!this.kexService) {
            if (message instanceof kexMessages_1.KeyExchangeInitMessage && this.protocol) {
                // This side didn't configure security, but the other side still wants to negotiate.
                // Start the KEX sequence just to try to negotiate 'none'.
                this.kexService = this.activateService(keyExchangeService_1.KeyExchangeService);
                this.protocol.kexService = this.kexService;
                await this.protocol.considerReExchange(true, cancellation);
            }
            else {
                await this.close(transportMessages_1.SshDisconnectReason.keyExchangeFailed);
                return;
            }
        }
        return this.kexService.handleMessage(message, cancellation);
    }
    /* @internal */
    async handleNewKeysMessage(message, cancellation) {
        try {
            await this.blockedMessagesSemaphore.wait(cancellation);
            await this.protocol.handleNewKeys(cancellation);
            try {
                // Send messages that were blocked during key exchange.
                while (this.blockedMessages.length > 0) {
                    const blockedMessage = this.blockedMessages.shift();
                    if (!this.protocol)
                        throw new errors_1.ObjectDisposedError(this);
                    await this.protocol.sendMessage(blockedMessage, cancellation);
                }
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                await this.close(transportMessages_1.SshDisconnectReason.protocolError, undefined, e);
            }
        }
        finally {
            this.blockedMessagesSemaphore.release();
        }
    }
    async handleUnimplementedMessage(message, cancellation) {
        if (message.unimplementedMessageType !== undefined) {
            // Received a message type that is unimplemented by this side.
            // Send a reply to inform the other side.
            await this.sendMessage(message, cancellation);
        }
        else {
            // This is a reply indicating this side previously sent a message type
            // that is not implemented by the other side. It has already been traced.
        }
    }
    handleDebugMessage(message) {
        if (message.message) {
            this.trace(message.alwaysDisplay ? trace_1.TraceLevel.Info : trace_1.TraceLevel.Verbose, trace_1.SshTraceEventIds.debugMessage, message.message);
        }
    }
    /* @internal */
    async raiseAuthenticatingEvent(args) {
        this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.sessionAuthenticating, `${this} Authenticating(${args})`);
        this.authenticatingEmitter.fire(args);
        let authPromise = args.authenticationPromise;
        if (!authPromise) {
            authPromise = Promise.resolve(null);
        }
        const principal = await authPromise;
        return principal;
    }
    /**
     * Sends a session request and waits for a response.
     *
     * Note if `wantReply` is `false`, this method returns `true` immediately after sending
     * the request, without waiting for a response.
     *
     * @returns The authorization status of the response; if `false`, the other side denied the
     * request.
     */
    async request(request, cancellation) {
        if (!request)
            throw new TypeError('Request is required.');
        if (!request.wantReply) {
            await this.sendMessage(request, cancellation);
            return true;
        }
        const response = await this.requestResponse(request, transportMessages_1.SessionRequestSuccessMessage, transportMessages_1.SessionRequestFailureMessage, cancellation);
        return response instanceof transportMessages_1.SessionRequestSuccessMessage;
    }
    /**
     * Sends a session request and waits for a specific type of success or failure message.
     *
     * @returns The success or failure response message.
     */
    async requestResponse(request, successType, failureType, cancellation) {
        if (!request)
            throw new TypeError('Request is required.');
        if (!successType)
            throw new TypeError('Success response type is required.');
        if (!failureType)
            throw new TypeError('Failure response type is required.');
        if (this.requestHandler) {
            throw new Error('Another request is already pending.');
        }
        request.wantReply = true;
        // Capture as a local variable because the member may change.
        const requestCompletionSource = new promiseCompletionSource_1.PromiseCompletionSource();
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellation.onCancellationRequested(() => {
                this.requestHandler = null;
                requestCompletionSource.reject(new cancellation_1.CancellationError());
            });
        }
        this.requestHandler = (err, result) => {
            var _a, _b;
            this.requestHandler = null;
            if (err) {
                requestCompletionSource.reject(err);
            }
            else if (result instanceof transportMessages_1.SessionRequestFailureMessage) {
                const failure = (_a = result === null || result === void 0 ? void 0 : result.convertTo(new failureType(), true)) !== null && _a !== void 0 ? _a : null;
                requestCompletionSource.resolve(failure);
            }
            else if (result instanceof transportMessages_1.SessionRequestSuccessMessage) {
                // Make a copy of the response message because the continuation may be
                // asynchronous; meanwhile the receive buffer will be re-used.
                const success = (_b = result === null || result === void 0 ? void 0 : result.convertTo(new successType(), true)) !== null && _b !== void 0 ? _b : null;
                requestCompletionSource.resolve(success);
            }
            else {
                requestCompletionSource.reject(new Error('Unknown response message type.'));
            }
        };
        await this.sendMessage(request, cancellation);
        return await requestCompletionSource.promise;
    }
    handleRequestSuccessMessage(message) {
        if (this.requestHandler) {
            this.requestHandler(undefined, message);
        }
    }
    handleRequestFailureMessage(message) {
        if (this.requestHandler) {
            this.requestHandler(undefined, message);
        }
    }
    async acceptChannel(channelTypeOrCancellation, cancellation) {
        const channelType = typeof channelTypeOrCancellation === 'string' ? channelTypeOrCancellation : undefined;
        if (!cancellation && typeof channelTypeOrCancellation === 'object')
            cancellation = channelTypeOrCancellation;
        this.activateService(connectionService_1.ConnectionService);
        // Prepare to accept the channel before connecting. This ensures that if the channel
        // open request comes in immediately after connecting then the channel won't be missed
        // in case of a task scheduling delay.
        const acceptPromise = this.connectionService.acceptChannel(channelType || sshChannel_1.SshChannel.sessionChannelType, cancellation);
        return await acceptPromise;
    }
    async openChannel(channelTypeOrOpenMessageOrCancellation, initialRequestOrCancellation, cancellation) {
        let openMessage;
        if (typeof channelTypeOrOpenMessageOrCancellation === 'string' ||
            channelTypeOrOpenMessageOrCancellation === null) {
            openMessage = new connectionMessages_1.ChannelOpenMessage();
            openMessage.channelType =
                channelTypeOrOpenMessageOrCancellation !== null && channelTypeOrOpenMessageOrCancellation !== void 0 ? channelTypeOrOpenMessageOrCancellation : sshChannel_1.SshChannel.sessionChannelType;
        }
        else if (channelTypeOrOpenMessageOrCancellation instanceof connectionMessages_1.ChannelOpenMessage) {
            openMessage = channelTypeOrOpenMessageOrCancellation;
        }
        else {
            openMessage = new connectionMessages_1.ChannelOpenMessage();
            openMessage.channelType = sshChannel_1.SshChannel.sessionChannelType;
            cancellation = channelTypeOrOpenMessageOrCancellation;
        }
        if (initialRequestOrCancellation instanceof connectionMessages_1.ChannelRequestMessage) {
            return await this.openChannelWithInitialRequest(openMessage, initialRequestOrCancellation, cancellation);
        }
        else if (!cancellation && initialRequestOrCancellation !== null) {
            cancellation = initialRequestOrCancellation;
        }
        this.activateService(connectionService_1.ConnectionService);
        const completionSource = new promiseCompletionSource_1.PromiseCompletionSource();
        await this.connectionService.openChannel(openMessage, completionSource, cancellation);
        return await completionSource.promise;
    }
    async openChannelWithInitialRequest(openMessage, initialRequest, cancellation) {
        var _a;
        this.activateService(connectionService_1.ConnectionService);
        const completionSource = new promiseCompletionSource_1.PromiseCompletionSource();
        const channelId = await this.connectionService.openChannel(openMessage, completionSource, cancellation);
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellation.onCancellationRequested(() => completionSource.reject(new cancellation_1.CancellationError()));
        }
        let channel;
        let requestResult;
        const isExtensionSupported = this.config.protocolExtensions.includes(sshSessionConfiguration_1.SshProtocolExtensionNames.openChannelRequest) &&
            ((_a = this.protocolExtensions) === null || _a === void 0 ? void 0 : _a.has(sshSessionConfiguration_1.SshProtocolExtensionNames.openChannelRequest));
        if (isExtensionSupported === false) {
            // The local or remote side definitely doesn't support this extension. Just send a
            // normal channel request after waiting for the channel open confirmation.
            channel = await completionSource.promise;
            requestResult = await channel.request(initialRequest, cancellation);
        }
        else {
            // The remote side does or might support this extension. If uncertain then a reply
            // is required.
            const wantReply = initialRequest.wantReply || isExtensionSupported === undefined;
            // Send the initial channel request message BEFORE waiting for the
            // channel open confirmation.
            const sessionRequest = new transportMessages_1.SessionChannelRequestMessage();
            sessionRequest.requestType = "initial-channel-request@microsoft.com" /* initialChannelRequest */;
            sessionRequest.senderChannel = channelId;
            sessionRequest.request = initialRequest;
            sessionRequest.wantReply = wantReply;
            const requestPromise = this.request(sessionRequest, cancellation);
            // Wait for the channel open confirmation.
            channel = await completionSource.promise;
            if (!wantReply) {
                requestResult = true;
            }
            else {
                // Wait for the response to the initial channel request.
                requestResult = await requestPromise;
                if (!requestResult && isExtensionSupported === undefined) {
                    // The initial request failed. This could be because the other side doesn't
                    // support the initial-request extension or because the request was denied.
                    // Try sending the request again as a regular channel request.
                    requestResult = await channel.request(initialRequest);
                }
            }
        }
        if (!requestResult) {
            // The regular request still failed, so close the channel and throw.
            await channel.close();
            throw new Error('The initial channel request was denied.');
        }
        return channel;
    }
    /* @internal */
    async handleChannelOpening(args, cancellation) {
        const serviceType = (0, serviceActivation_1.findService)(this.config.services, (a) => a.channelType === args.channel.channelType && !a.channelRequest);
        if (serviceType) {
            // A service was configured for activation via this channel type.
            const service = this.activateService(serviceType);
            // `onChannelOpening` should really be 'protected internal'.
            await service.onChannelOpening(args, cancellation);
        }
        else {
            this.raiseChannelOpening(args);
        }
    }
    /* @internal */
    raiseChannelOpening(args) {
        this.channelOpeningEmitter.fire(args);
    }
    /* @internal */
    async sendExtensionInfo(cancellation) {
        const message = new transportMessages_1.ExtensionInfoMessage();
        message.extensionInfo = {};
        for (let extensionName of this.config.protocolExtensions) {
            if (extensionName === sshSessionConfiguration_1.SshProtocolExtensionNames.serverSignatureAlgorithms) {
                // Send the list of enabled host key signature algorithms.
                const publicKeyAlgorithms = Array.from(new Set((0, sshAlgorithms_1.algorithmNames)(this.config.publicKeyAlgorithms))).join(',');
                message.extensionInfo[extensionName] = publicKeyAlgorithms;
            }
            else {
                message.extensionInfo[extensionName] = '';
            }
        }
        await this.sendMessage(message, cancellation);
    }
    async handleExtensionInfoMessage(message, cancellation) {
        if (!this.protocol) {
            return;
        }
        this.protocol.extensions = new Map();
        const proposedExtensions = message.extensionInfo;
        if (!proposedExtensions) {
            return;
        }
        for (let extensionName of this.config.protocolExtensions) {
            const proposedExtension = message.extensionInfo[extensionName];
            if (typeof proposedExtension === 'string') {
                this.protocol.extensions.set(extensionName, proposedExtension);
            }
        }
        if (this.protocol.extensions.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect)) {
            await this.enableReconnect(cancellation);
        }
    }
    async close(reason, message, error) {
        var _a, _b, _c;
        if (this.disposed || !this.connected) {
            return;
        }
        this.connected = false;
        this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.sessionClosing, `${this} Close(${transportMessages_1.SshDisconnectReason[reason]}, "${message || ''}")`);
        if (reason !== transportMessages_1.SshDisconnectReason.connectionLost) {
            try {
                const disconnectMessage = new transportMessages_1.DisconnectMessage();
                disconnectMessage.reasonCode = reason;
                disconnectMessage.description = message || '';
                await ((_a = this.protocol) === null || _a === void 0 ? void 0 : _a.sendMessage(disconnectMessage));
            }
            catch (e) {
                // Already disconnected.
            }
        }
        else if (this.handleDisconnected()) {
            // Keep the session in a disconnected (but not closed) state.
            (_b = this.protocol) === null || _b === void 0 ? void 0 : _b.dispose();
            this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.sessionDisconnected, `${this} disconnected.`);
            this.disconnectedEmitter.fire();
            return;
        }
        this.disposed = true;
        if (error) {
            (_c = this.connectionService) === null || _c === void 0 ? void 0 : _c.close(error);
        }
        this.closedEmitter.fire(new sshSessionClosedEventArgs_1.SshSessionClosedEventArgs(reason, message || 'Disconnected.', error || null));
        this.dispose();
    }
    /* @internal */
    handleDisconnected() {
        var _a, _b;
        this.connectPromise = undefined;
        (_a = this.kexService) === null || _a === void 0 ? void 0 : _a.abortKeyExchange();
        if (!((_b = this.protocolExtensions) === null || _b === void 0 ? void 0 : _b.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
            return false;
        }
        return true;
    }
    dispose() {
        var _a, _b;
        if (!this.disposed) {
            this.trace(trace_1.TraceLevel.Info, trace_1.SshTraceEventIds.sessionClosing, `${this} disposed.`);
            this.disposed = true;
            this.closedEmitter.fire(new sshSessionClosedEventArgs_1.SshSessionClosedEventArgs(transportMessages_1.SshDisconnectReason.none, 'SshSession disposed', null));
        }
        if (this.requestHandler) {
            this.requestHandler(new errors_1.SshConnectionError('Connection closed.'));
        }
        this.metrics.close();
        // Dispose the connection service before other services, to ensure
        // channels are disposed before services that work with them.
        (_a = this.connectionService) === null || _a === void 0 ? void 0 : _a.dispose();
        for (let service of this.activatedServices.values()) {
            if (service !== this.connectionService) {
                service.dispose();
            }
        }
        this.activatedServices.clear();
        (_b = this.protocol) === null || _b === void 0 ? void 0 : _b.dispose();
        this.protocol = undefined;
    }
    /* @internal */
    async enableReconnect(cancellation) {
        var _a;
        try {
            // Ensure no other messages are sent in the middle of turning this on.
            await this.blockedMessagesSemaphore.wait();
            // This should not be done during a key-exchange, however that should never
            // be the case since the EnableSessionReconnectRequest is sent in response
            // to an ExtensionInfo message which is sent in response to a NewKeys message.
            // So a key exchange just finished and won't be restarted again soon.
            if ((_a = this.kexService) === null || _a === void 0 ? void 0 : _a.exchanging) {
                this.trace(trace_1.TraceLevel.Error, trace_1.SshTraceEventIds.sessionReconnectInitFailed, 'Failed to initialize session reconnect because a key-exchange was in-progress.');
            }
            else {
                // Send the message indicating reconnect message tracking is starting.
                const enableReconnectMessage = new transportMessages_1.SessionRequestMessage("enable-session-reconnect@microsoft.com" /* enableSessionReconnect */, false);
                await this.protocol.sendMessage(enableReconnectMessage, cancellation);
                // Start using the protocol extensions that include an extra field or two
                // with every sent message.
                if (this.protocol) {
                    this.protocol.outgoingMessagesHaveReconnectInfo = true;
                    this.protocol.outgoingMessagesHaveLatencyInfo = this.protocol.extensions.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionLatency);
                }
            }
            this.blockedMessagesSemaphore.release();
        }
        catch (e) {
            // This is not in a finally block because the semaphore must be released before
            // the call to close() which tries to send a message.
            this.blockedMessagesSemaphore.release();
            if (e instanceof Error) {
                await this.close(transportMessages_1.SshDisconnectReason.protocolError, undefined, e);
            }
            throw e;
        }
    }
    /* @internal */
    async createReconnectToken(previousSessionId, newSessionId) {
        // To generate the reconnect token, combine the old session ID and new (re-negotiated)
        // session ID and sign the result using the new negotiated HMAC algorithm and key. This
        // proves that the old (secret) session ID is known while not disclosing it, and also
        // prevents replay attacks.
        const reconnectToken = await this.algorithms.signer.sign(buffer_1.Buffer.concat([previousSessionId, newSessionId]));
        return reconnectToken;
    }
    /* @internal */
    async verifyReconnectToken(previousSessionId, newSessionId, reconnectToken) {
        const result = await this.algorithms.verifier.verify(buffer_1.Buffer.concat([previousSessionId, newSessionId]), reconnectToken);
        return result;
    }
    toString() {
        return this.constructor.name;
    }
}
exports.SshSession = SshSession;
SshSession.localVersion = sshVersionInfo_1.SshVersionInfo.getLocalVersion();
//# sourceMappingURL=sshSession.js.map

/***/ }),

/***/ 47462:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshSessionAlgorithms = void 0;
class SshSessionAlgorithms {
    dispose() {
        if (this.cipher)
            this.cipher.dispose();
        if (this.decipher)
            this.decipher.dispose();
        if (this.signer)
            this.signer.dispose();
        if (this.verifier)
            this.verifier.dispose();
    }
}
exports.SshSessionAlgorithms = SshSessionAlgorithms;
//# sourceMappingURL=sshSessionAlgorithms.js.map

/***/ }),

/***/ 97183:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshSessionConfiguration = exports.SshProtocolExtensionNames = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
const sshAlgorithms_1 = __webpack_require__(91605);
const keyExchangeService_1 = __webpack_require__(43210);
const connectionService_1 = __webpack_require__(47165);
const authenticationService_1 = __webpack_require__(76502);
const sshMessage_1 = __webpack_require__(285);
var SshProtocolExtensionNames;
(function (SshProtocolExtensionNames) {
    /**
     * Lists host key signature algorithms enabled by the sender.
     *
     * This is a "standard" protocol extension supported by most SSH implementations.
     */
    SshProtocolExtensionNames["serverSignatureAlgorithms"] = "server-sig-algs";
    /**
     * An optimization that enables sending an initial channel request without
     * waiting for a channel open confirmation message.
     */
    SshProtocolExtensionNames["openChannelRequest"] = "open-channel-request@microsoft.com";
    /**
     * Enables reconnecting to a session that was recently disconnected.
     */
    SshProtocolExtensionNames["sessionReconnect"] = "session-reconnect@microsoft.com";
    /**
     * Enables continual latency measurements between client and server.
     *
     * This extension requires that the reconnect extension is also enabled, because
     * it leverages some of the session history info for reconnect to compute latency.
     */
    SshProtocolExtensionNames["sessionLatency"] = "session-latency@microsoft.com";
})(SshProtocolExtensionNames = exports.SshProtocolExtensionNames || (exports.SshProtocolExtensionNames = {}));
/**
 * Specifies the sets of algorithms and other configuration for an SSH session.
 *
 * Each collection of algorithms is in order of preference. Server and client
 * negotiate the most-preferred algorithm that is supported by both.
 */
class SshSessionConfiguration {
    constructor(useSecurity = true) {
        /**
         * Gets the protocol extensions that are enabled for the session.
         */
        this.protocolExtensions = [];
        /**
         * Gets a dictionary that maps from service types to service configuration objects.
         *
         * Service types must extend the `SshService` abstract class.
         *
         * The service configuration object is passed to the service constructor upon activation.
         */
        this.services = new Map();
        /**
         * Gets a dictionary that maps from known message numbers to message types.
         *
         * Message types must extend the `SshMessage` abstract class. Message subclasses that do
         * not have a distinct message type from their base class must not be included in this map.
         */
        this.messages = new Map();
        /**
         * Gets the collection of algorithms that are enabled for key exchange.
         *
         * Client and server sides negotiate which of these algorithms will be used.
         *
         * If this collection includes `null`, and if negotiation selects it, then the session is
         * allowed to skip key exchange and connect with no security of any kind: No key exchange,
         * no authentication, no encryption, no HMAC, and no compression.
         */
        this.keyExchangeAlgorithms = [];
        /**
         * Gets the collection of algorithms that are enabled for server (host) and client
         * public-key authentication.
         *
         * Client and server sides negotiate which of these algorithms will be used.
         */
        this.publicKeyAlgorithms = [];
        /*
         * Gets the collection of algorithms that are enabled for encryption.
         *
         * Client and server sides negotiate which of these algorithms will be used.
         */
        this.encryptionAlgorithms = [];
        /**
         * Gets the collection of algorithms that are enabled for message integrity (HMAC).
         *
         * Client and server sides negotiate which of these algorithms will be used.
         */
        this.hmacAlgorithms = [];
        /**
         * Gets the collection of algorithms that are enabled for message compression.
         *
         * Client and server sides negotiate which of these algorithms will be used.
         */
        this.compressionAlgorithms = [];
        this.traceChannelDataValue = false;
        this.configurationChangedEmitter = new vscode_jsonrpc_1.Emitter();
        /* @internal */
        this.onConfigurationChanged = this.configurationChangedEmitter.event;
        /**
         * Gets or sets the number of times the server will allow a client to attempt to
         * authenticate.
         *
         * The default value is 5.
         *
         * This setting applies only to server sessions. If the client has failed to authenticate
         * after the maximum number of atttempts, the server will close the session.
         *
         * The SSH protocol allows a client to make multiple attempts to authenticate with
         * the server, e.g. to find which public key algorithm a server will support, or to
         * retry a mis-typed password. This maximum prevents unlimited retries, which would
         * make it easier to "guess" a password.
         *
         * In certain applications the server may only support a single authentication method
         * (which is not a typed password). Then it could be appropriate to set this value to 1.
         */
        this.maxClientAuthenticationAttempts = 5;
        /**
         * Gets or sets whether the client sends a key-exchange "guess" message before receiving
         * the server's key-exchange algorithm preferences, slightly reducing the time to connect.
         *
         * This setting only applies to client sessions. (The server always supports the option when
         * used by a client.)
         *
         * The "guess" mechanism is somewhat ambiguously defined in the SSH protocol spec, and as
         * a result is not implemented or incorrectly implemented by some server implementations,
         * including older versions of this library. Therefore it is disabled in the default
         * configuration, and should only be enabled when connecting to a known-good server.
         */
        this.enableKeyExchangeGuess = false;
        /* @internal */
        this.keyRotationThreshold = 512 * 1024 * 1024; // 0.5 GiB;
        this.protocolExtensions.push(SshProtocolExtensionNames.serverSignatureAlgorithms);
        this.protocolExtensions.push(SshProtocolExtensionNames.openChannelRequest);
        this.services.set(keyExchangeService_1.KeyExchangeService, null);
        this.services.set(connectionService_1.ConnectionService, null);
        this.services.set(authenticationService_1.AuthenticationService, null);
        for (let [messageNumber, messageType] of sshMessage_1.SshMessage.index) {
            this.messages.set(messageNumber, messageType);
        }
        if (useSecurity) {
            this.keyExchangeAlgorithms.push(sshAlgorithms_1.SshAlgorithms.keyExchange.ecdhNistp384Sha384);
            this.keyExchangeAlgorithms.push(sshAlgorithms_1.SshAlgorithms.keyExchange.ecdhNistp256Sha256);
            this.keyExchangeAlgorithms.push(sshAlgorithms_1.SshAlgorithms.keyExchange.dhGroup16Sha512);
            this.keyExchangeAlgorithms.push(sshAlgorithms_1.SshAlgorithms.keyExchange.dhGroup14Sha256);
            this.publicKeyAlgorithms.push(sshAlgorithms_1.SshAlgorithms.publicKey.rsaWithSha512);
            this.publicKeyAlgorithms.push(sshAlgorithms_1.SshAlgorithms.publicKey.rsaWithSha256);
            this.publicKeyAlgorithms.push(sshAlgorithms_1.SshAlgorithms.publicKey.ecdsaSha2Nistp384);
            this.publicKeyAlgorithms.push(sshAlgorithms_1.SshAlgorithms.publicKey.ecdsaSha2Nistp256);
            ////this.encryptionAlgorithms.push(SshAlgorithms.encryption.aes256Cbc);
            this.encryptionAlgorithms.push(sshAlgorithms_1.SshAlgorithms.encryption.aes256Gcm);
            this.encryptionAlgorithms.push(sshAlgorithms_1.SshAlgorithms.encryption.aes256Ctr);
            this.hmacAlgorithms.push(sshAlgorithms_1.SshAlgorithms.hmac.hmacSha512Etm);
            this.hmacAlgorithms.push(sshAlgorithms_1.SshAlgorithms.hmac.hmacSha256Etm);
            this.hmacAlgorithms.push(sshAlgorithms_1.SshAlgorithms.hmac.hmacSha512);
            this.hmacAlgorithms.push(sshAlgorithms_1.SshAlgorithms.hmac.hmacSha256);
        }
        else {
            this.keyExchangeAlgorithms.push(sshAlgorithms_1.SshAlgorithms.keyExchange.none);
            this.publicKeyAlgorithms.push(sshAlgorithms_1.SshAlgorithms.publicKey.none);
            this.encryptionAlgorithms.push(sshAlgorithms_1.SshAlgorithms.encryption.none);
            this.hmacAlgorithms.push(sshAlgorithms_1.SshAlgorithms.hmac.none);
        }
        this.compressionAlgorithms.push(sshAlgorithms_1.SshAlgorithms.compression.none);
    }
    /**
     * Adds a service to the configuration.
     */
    addService(serviceType, serviceConfig) {
        if (this.services.has(serviceType)) {
            throw new Error('Duplicate service entry.');
        }
        this.services.set(serviceType, serviceConfig);
    }
    getKeyExchangeAlgorithm(name) {
        return this.getAlgorithm(name, this.keyExchangeAlgorithms);
    }
    getPublicKeyAlgorithm(name) {
        return this.getAlgorithm(name, this.publicKeyAlgorithms);
    }
    getEncryptionAlgorithm(name) {
        return this.getAlgorithm(name, this.encryptionAlgorithms);
    }
    getHmacAlgorithm(name) {
        return this.getAlgorithm(name, this.hmacAlgorithms);
    }
    getCompressionAlgorithm(name) {
        return this.getAlgorithm(name, this.compressionAlgorithms);
    }
    getAlgorithm(name, collection) {
        const algorithm = collection.find((a) => (a ? a.name === name : false));
        if (!algorithm) {
            if (name === 'none') {
                return null;
            }
            throw new Error('Algorithm not found: ' + name);
        }
        return algorithm;
    }
    get traceChannelData() {
        return this.traceChannelDataValue;
    }
    /**
     * Enables tracing of all channel data messages.
     *
     * Unlike other configuration, this option may be adjusted any time while the session
     * is active. Channel data tracing produces a large volume of trace events, so it is
     * primarily meant only for debugging.
     */
    set traceChannelData(value) {
        if (value !== this.traceChannelDataValue) {
            this.traceChannelDataValue = value;
            this.configurationChangedEmitter.fire();
        }
    }
}
exports.SshSessionConfiguration = SshSessionConfiguration;
//# sourceMappingURL=sshSessionConfiguration.js.map

/***/ }),

/***/ 2656:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshStream = void 0;
const promiseCompletionSource_1 = __webpack_require__(93708);
const stream_1 = __webpack_require__(83424);
/**
 * Adapts an SshChannel as a Readable+Writable stream.
 */
class SshStream extends stream_1.Duplex {
    constructor(channel) {
        let readPaused = null;
        super({
            async write(chunk, encoding, cb) {
                let error;
                try {
                    let buffer;
                    if (typeof chunk === 'string') {
                        buffer = Buffer.from(chunk, encoding);
                    }
                    else if (chunk instanceof Buffer) {
                        buffer = chunk;
                    }
                    else {
                        throw new Error('Unsupported chunk type: ' + typeof chunk);
                    }
                    await channel.send(buffer);
                }
                catch (e) {
                    if (!(e instanceof Error))
                        throw e;
                    error = e;
                }
                if (cb) {
                    cb(error);
                }
            },
            async writev(chunks, cb) {
                let error;
                try {
                    if (chunks.length === 1) {
                        return this.write(chunks[0].chunk, chunks[0].encoding, cb);
                    }
                    else {
                        function BufferReduce(accumulator, chunk) {
                            if (chunk.chunk instanceof Buffer) {
                                return accumulator + chunk.chunk.length;
                            }
                            else {
                                throw new Error('Unsupported chunk type: ' + typeof chunk.chunk);
                            }
                        }
                        const totalLength = chunks.reduce(BufferReduce, 0);
                        const singleBuffer = Buffer.alloc(totalLength);
                        let singleBufferIndex = 0;
                        for (let i = 0; i < chunks.length; i++) {
                            chunks[i].chunk.copy(singleBuffer, singleBufferIndex);
                            singleBufferIndex += chunks[i].chunk.length;
                        }
                        await channel.send(singleBuffer);
                    }
                }
                catch (e) {
                    if (!(e instanceof Error))
                        throw e;
                    error = e;
                }
                if (cb) {
                    cb(error);
                }
            },
            async final(cb) {
                let error;
                try {
                    await channel.close();
                }
                catch (e) {
                    if (!(e instanceof Error))
                        throw e;
                    error = e;
                }
                if (cb) {
                    cb(error);
                }
            },
            read() {
                if (readPaused) {
                    readPaused.resolve();
                    readPaused = null;
                }
            },
        });
        const self = this;
        channel.onDataReceived(async (data) => {
            const buffer = Buffer.alloc(data.length);
            data.copy(buffer);
            const result = self.push(buffer);
            // Our flow control isn't great. Once we hit the highWaterMark,
            // we stop adjusting the SSH window until our own reader has caught up,
            // and then *all* the data received and buffered in the interim suddenly
            // gets 'adjusted' so that we tend to be somewhat choppy about adjusting the window.
            // Improving this would require that we know when the data we push gets passed to
            // the Duplex reader, and I don't think there's a way to get that notification.
            // So I suspect we'd have to dump Duplex and implement the stream ourselves.
            if (!result) {
                if (!readPaused) {
                    readPaused = new promiseCompletionSource_1.PromiseCompletionSource();
                }
                await readPaused.promise;
            }
            // Notify the channel that the data has been consumed and more data may be sent.
            channel.adjustWindow(buffer.length);
        });
        channel.onClosed(() => {
            self.push(null);
        });
        this.channel = channel;
    }
    /**
     * Destroys the stream and closes the underlying SSH channel.
     */
    destroy() {
        this.channel.close().catch();
        super.destroy();
    }
    toString() {
        return `SshStream(Channel Type: ${this.channel.channelType}, Id: ${this.channel.channelId}, RemoteId: ${this.channel.remoteChannelId})`;
    }
}
exports.SshStream = SshStream;
//# sourceMappingURL=sshStream.js.map

/***/ }),

/***/ 87505:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshVersionInfo = void 0;
const packageJson = __webpack_require__(33121);
const packageName = packageJson.name.replace(/^@\w+\//, ''); // Strip scope from name.
const packageVersion = packageJson.version;
/**
 * Parses the SSH software name and version from the version string exchanged via the
 * initial packets sent between client and server.
 */
class SshVersionInfo {
    constructor(versionString, protocolVersion, name, version) {
        this.versionString = versionString;
        this.protocolVersion = protocolVersion;
        this.name = name;
        this.version = version;
    }
    /**
     * Attempts to parse an SSH version string into a version info object.
     */
    static tryParse(versionString) {
        if (!versionString) {
            throw new TypeError('Version string expected.');
        }
        if (!versionString.startsWith('SSH-')) {
            return null;
        }
        const firstDashIndex = 3;
        const secondDashIndex = versionString.indexOf('-', firstDashIndex + 1);
        if (secondDashIndex <= 0) {
            return null;
        }
        const protocolVersion = versionString.substring(firstDashIndex + 1, secondDashIndex);
        if (!/^\d+\.\d+$/.test(protocolVersion)) {
            return null;
        }
        let name;
        let version;
        const nameAndVersion = versionString.substring(secondDashIndex + 1);
        const spaceIndex = nameAndVersion.indexOf(' ');
        const lastUnderscoreBeforeSpace = nameAndVersion.lastIndexOf('_', spaceIndex >= 0 ? spaceIndex : nameAndVersion.length - 1);
        if (lastUnderscoreBeforeSpace >= 0) {
            name = nameAndVersion.substring(0, lastUnderscoreBeforeSpace).replace(/_/g, ' ');
            // Ignore any non-digit characters after the version.
            version = nameAndVersion.substring(lastUnderscoreBeforeSpace + 1);
            for (let i = 0; i < version.length; i++) {
                const c = version[i];
                if (!(c >= '0' && c <= '9') && c !== '.') {
                    version = version.substring(0, i);
                    break;
                }
            }
            if (!/^\d+(\.\d+)*$/.test(version)) {
                version = null;
            }
        }
        else {
            name = nameAndVersion;
            version = null;
        }
        return new SshVersionInfo(versionString, protocolVersion, name, version);
    }
    /**
     * Gets the version info for the current SSH library.
     */
    static getLocalVersion() {
        const protocolVersion = '2.0';
        const versionString = `SSH-${protocolVersion}-${packageName}_${packageVersion}`;
        return new SshVersionInfo(versionString, protocolVersion, packageName, packageVersion);
    }
    /** Returns the original SSH version string that was parsed. */
    toString() {
        return this.versionString;
    }
    /**
     * Gets a value indicating whether this version info represents some version of
     * this library.
     */
    get isVsSsh() {
        return this.isVsSshCS || this.isVsSshTS;
    }
    get isVsSshCS() {
        return this.name === 'Microsoft.VisualStudio.Ssh';
    }
    get isVsSshTS() {
        return this.name === 'vs-ssh';
    }
}
exports.SshVersionInfo = SshVersionInfo;
//# sourceMappingURL=sshVersionInfo.js.map

/***/ }),

/***/ 569:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebSocketStream = exports.NodeStream = exports.BaseStream = void 0;
const buffer_1 = __webpack_require__(30816);
const vscode_jsonrpc_1 = __webpack_require__(83730);
const cancellation_1 = __webpack_require__(97437);
const errors_1 = __webpack_require__(72917);
function handleCancellation(reject, cancellation) {
    if (cancellation) {
        if (cancellation.isCancellationRequested) {
            reject(new cancellation_1.CancellationError());
        }
        else {
            cancellation.onCancellationRequested(() => {
                reject(new cancellation_1.CancellationError());
            });
        }
    }
}
/**
 * Base class for stream adapters.
 */
class BaseStream {
    constructor() {
        this.incomingData = [];
        this.pendingReads = [];
        this.error = null;
        this.disposed = false;
        this.closedEmitter = new vscode_jsonrpc_1.Emitter();
        this.closed = this.closedEmitter.event;
    }
    onData(data) {
        while (this.pendingReads.length > 0) {
            const read = this.pendingReads.shift();
            if (read.count >= data.length) {
                // This read operation consumes all of the incoming data.
                read.resolve(data);
                return;
            }
            else {
                // This read operation consumes part of the incoming data.
                const readData = data.slice(0, read.count);
                data = data.slice(read.count);
                read.resolve(readData);
            }
        }
        this.incomingData.push(data);
    }
    onEnd() {
        while (this.pendingReads.length > 0) {
            const read = this.pendingReads.shift();
            read.resolve(null);
        }
        this.incomingData.push(buffer_1.Buffer.alloc(0));
    }
    onError(error) {
        if (!this.error) {
            this.error = error;
        }
        while (this.pendingReads.length > 0) {
            const read = this.pendingReads.shift();
            read.reject(error);
        }
    }
    async read(count, cancellation) {
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if (this.incomingData.length > 0) {
            // Consume data that has already arrived.
            let data = this.incomingData[0];
            if (data.length === 0) {
                // Reached the end of the stream.
                return null;
            }
            else if (count >= data.length) {
                // Consuming the whole chunk.
                this.incomingData.shift();
            }
            else {
                // Consuming part of the chunk.
                this.incomingData[0] = data.slice(count);
                data = data.slice(0, count);
            }
            return data;
        }
        else if (this.error) {
            throw this.error;
        }
        else {
            // Wait for more data to arrive.
            return await new Promise((resolve, reject) => {
                if (cancellation) {
                    if (cancellation.isCancellationRequested) {
                        reject(new cancellation_1.CancellationError());
                        return;
                    }
                    cancellation.onCancellationRequested(() => {
                        // Discard any pending reads that use this cancellation token.
                        for (let i = 0; i < this.pendingReads.length; i++) {
                            if (Object.is(cancellation, this.pendingReads[i].cancellation)) {
                                const read = this.pendingReads.splice(i--, 1)[0];
                                read.reject(new cancellation_1.CancellationError());
                            }
                        }
                    });
                }
                this.pendingReads.push({ count, resolve, reject, cancellation });
            });
        }
    }
    dispose() {
        if (!this.disposed) {
            this.disposed = true;
            const error = new errors_1.ObjectDisposedError(this);
            this.onError(error);
            this.fireOnClose(error);
        }
    }
    fireOnClose(error) {
        this.closedEmitter.fire({ error });
    }
    get isDisposed() {
        return this.disposed;
    }
}
exports.BaseStream = BaseStream;
/**
 * Stream adapter for a Node.js Socket, Duplex stream, or Readable/Writable stream pair.
 */
class NodeStream extends BaseStream {
    constructor(duplexOrReadStream, writeStream) {
        super();
        if (!duplexOrReadStream)
            throw new TypeError('Duplex or Readable/Writable stream are required.');
        this.readStream = duplexOrReadStream;
        this.writeStream = writeStream || duplexOrReadStream;
        this.readStream.on('data', this.onData.bind(this));
        this.readStream.on('end', this.onEnd.bind(this));
        this.readStream.on('error', this.onError.bind(this));
        this.readStream.on('close', () => {
            this.onEnd();
            this.fireOnClose();
        });
    }
    async write(data, cancellation) {
        if (!data)
            throw new TypeError('Data is required.');
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        return new Promise((resolve, reject) => {
            handleCancellation(reject, cancellation);
            this.writeStream.write(data, (err) => {
                if (!err) {
                    resolve();
                }
                else {
                    reject(err);
                }
            });
        });
    }
    async close(error, cancellation) {
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        await new Promise((resolve, reject) => {
            handleCancellation(reject, cancellation);
            this.writeStream.end(resolve);
        });
        this.disposed = true;
        this.onError(error || new errors_1.ObjectDisposedError(this));
        this.closedEmitter.fire({ error });
    }
    dispose() {
        if (!this.disposed) {
            const error = new errors_1.ObjectDisposedError(this);
            this.readStream.destroy(error);
            this.writeStream.destroy(error);
        }
        super.dispose();
    }
}
exports.NodeStream = NodeStream;
/**
 * Stream adapter for a browser websocket.
 */
class WebSocketStream extends BaseStream {
    constructor(websocket) {
        super();
        this.websocket = websocket;
        if (!websocket)
            throw new TypeError('WebSocket is required.');
        if (typeof websocket.binaryType === 'string' &&
            websocket.binaryType !== 'arraybuffer') {
            throw new Error('WebSocket must use arraybuffer binary type.');
        }
        websocket.onmessage = (e) => {
            this.onData(buffer_1.Buffer.from(e.data));
        };
        websocket.onclose = (e) => {
            if (e.wasClean) {
                this.onEnd();
            }
            else {
                const error = new Error(e.reason);
                error.code = e.code;
                this.onError(error);
            }
        };
    }
    async write(data, cancellation) {
        if (!data)
            throw new TypeError('Data is required.');
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if ('readyState' in this.websocket) {
            if (this.websocket.readyState === 2 /* Closing */ ||
                this.websocket.readyState === 3 /* Closed */) {
                throw new DOMException('WebSocket is already in CLOSING or CLOSED state.', 'InvalidStateError');
            }
        }
        this.websocket.send(data);
    }
    async close(error, cancellation) {
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if (!error) {
            this.websocket.close();
        }
        else {
            const code = typeof error.code === 'number' ? error.code : undefined;
            this.websocket.close(code, error.message);
        }
        this.disposed = true;
        this.closedEmitter.fire({ error });
        this.onError(error || new Error('Stream closed.'));
    }
    dispose() {
        if (!this.disposed) {
            this.websocket.close();
        }
        super.dispose();
    }
}
exports.WebSocketStream = WebSocketStream;
//# sourceMappingURL=streams.js.map

/***/ }),

/***/ 43776:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SshTraceEventIds = exports.TraceLevel = void 0;
/**
 * SSH trace event level.
 */
var TraceLevel;
(function (TraceLevel) {
    TraceLevel["Error"] = "error";
    TraceLevel["Warning"] = "warning";
    TraceLevel["Info"] = "info";
    TraceLevel["Verbose"] = "verbose";
})(TraceLevel = exports.TraceLevel || (exports.TraceLevel = {}));
// Events defined below should stay in sync with those in C#.
const baseEventId = 9000;
class SshTraceEventIds {
}
exports.SshTraceEventIds = SshTraceEventIds;
// Error / Warning events
SshTraceEventIds.unknownError = baseEventId + 0;
SshTraceEventIds.streamReadError = baseEventId + 1;
SshTraceEventIds.streamWriteError = baseEventId + 2;
SshTraceEventIds.streamCloseError = baseEventId + 3;
SshTraceEventIds.sendMessageFailed = baseEventId + 4;
SshTraceEventIds.receiveMessageFailed = baseEventId + 5;
SshTraceEventIds.handleMessageFailed = baseEventId + 6;
SshTraceEventIds.serverAuthenticationFailed = baseEventId + 7;
SshTraceEventIds.clientAuthenticationFailed = baseEventId + 8;
SshTraceEventIds.authenticationError = baseEventId + 9;
SshTraceEventIds.channelWindowAdjustFailed = baseEventId + 10;
SshTraceEventIds.channelWaitForWindowAdjust = baseEventId + 11;
SshTraceEventIds.sessionReconnectInitFailed = baseEventId + 20;
SshTraceEventIds.serverSessionReconnectFailed = baseEventId + 21;
SshTraceEventIds.clientSessionReconnectFailed = baseEventId + 22;
SshTraceEventIds.sessionRequestFailed = baseEventId + 23;
SshTraceEventIds.channelRequestFailed = baseEventId + 24;
SshTraceEventIds.serverListenFailed = baseEventId + 50;
SshTraceEventIds.portForwardServerListenFailed = baseEventId + 51;
SshTraceEventIds.portForwardRequestInvalid = baseEventId + 52;
SshTraceEventIds.portForwardChannelInvalid = baseEventId + 53;
SshTraceEventIds.portForwardChannelOpenFailed = baseEventId + 54;
SshTraceEventIds.portForwardConnectionFailed = baseEventId + 55;
// Info / Verbose events
SshTraceEventIds.protocolVersion = baseEventId + 100;
SshTraceEventIds.sendingMessage = baseEventId + 101;
SshTraceEventIds.receivingMessage = baseEventId + 102;
SshTraceEventIds.sendingChannelData = baseEventId + 103;
SshTraceEventIds.receivingChannelData = baseEventId + 104;
SshTraceEventIds.sessionEncrypted = baseEventId + 110;
SshTraceEventIds.sessionAuthenticating = baseEventId + 111;
SshTraceEventIds.sessionAuthenticated = baseEventId + 112;
SshTraceEventIds.sessionClosing = baseEventId + 113;
SshTraceEventIds.sessionConnecting = baseEventId + 114;
SshTraceEventIds.channelOpened = baseEventId + 120;
SshTraceEventIds.channelOpenFailed = baseEventId + 121;
SshTraceEventIds.channelEofReceived = baseEventId + 122;
SshTraceEventIds.channelClosed = baseEventId + 123;
SshTraceEventIds.serverListening = baseEventId + 150;
SshTraceEventIds.serverClientConnected = baseEventId + 151;
SshTraceEventIds.portForwardServerListening = baseEventId + 152;
SshTraceEventIds.portForwardConnectionAccepted = baseEventId + 153;
SshTraceEventIds.portForwardChannelOpened = baseEventId + 154;
SshTraceEventIds.portForwardChannelClosed = baseEventId + 155;
SshTraceEventIds.portForwardConnectionOpened = baseEventId + 156;
SshTraceEventIds.portForwardConnectionClosed = baseEventId + 157;
SshTraceEventIds.sessionDisconnected = baseEventId + 160;
SshTraceEventIds.clientSessionReconnecting = baseEventId + 161;
SshTraceEventIds.serverSessionReconnecting = baseEventId + 162;
SshTraceEventIds.clientSessionStartReconnecting = baseEventId + 163;
SshTraceEventIds.algorithmNegotiation = baseEventId + 170;
SshTraceEventIds.debugMessage = baseEventId + 200;
//# sourceMappingURL=trace.js.map

/***/ }),

/***/ 97437:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.withCancellation = exports.CancellationError = exports.CancellationTokenSource = exports.CancellationToken = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
Object.defineProperty(exports, "CancellationToken", ({ enumerable: true, get: function () { return vscode_jsonrpc_1.CancellationToken; } }));
Object.defineProperty(exports, "CancellationTokenSource", ({ enumerable: true, get: function () { return vscode_jsonrpc_1.CancellationTokenSource; } }));
/**
 * Error thrown when an operation is cancelled via a CancellationToken.
 */
class CancellationError extends Error {
    constructor(message) {
        super(message || 'Operation cancelled.');
    }
}
exports.CancellationError = CancellationError;
function withCancellation(promise, cancellation) {
    if (!cancellation) {
        return promise;
    }
    return Promise.race([
        promise,
        new Promise((resolve, reject) => {
            if (cancellation.isCancellationRequested) {
                reject(new CancellationError());
            }
            else {
                cancellation.onCancellationRequested(() => {
                    reject(new CancellationError());
                });
            }
        }),
    ]);
}
exports.withCancellation = withCancellation;
//# sourceMappingURL=cancellation.js.map

/***/ }),

/***/ 93708:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PromiseCompletionSource = void 0;
class PromiseCompletionSource {
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    resolve(result) { }
    reject(e) { }
}
exports.PromiseCompletionSource = PromiseCompletionSource;
//# sourceMappingURL=promiseCompletionSource.js.map

/***/ }),

/***/ 28776:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Queue = void 0;
/**
 * Generic iterable queue implementation using an auto-expanding circular array buffer.
 * Designed to be more efficient for high-volume use compared to a simpler JS queue using
 * `Array.shift()` (which would cause a lot of allocations).
 */
class Queue {
    constructor() {
        this.array = new Array();
        this.first = 0;
        this.count = 0;
        /**
         * The version is incremented upon any changes to the queue, so that any iterators can detect the
         * change and become invalid. `MAX_SAFE_INTEGER` is 2^53-1 so this isn't likely to ever overflow.
         */
        this.version = 0;
    }
    /**
     * Gets the current size of the queue.
     */
    get size() {
        return this.count;
    }
    /**
     * Adds an item to the end of the queue.
     */
    enqueue(item) {
        if (this.count === this.array.length) {
            const newArray = new Array(Math.max(16, this.count * 2));
            for (let i = 0; i < this.count; i++) {
                newArray[i] = this.array[(this.first + i) % this.count];
            }
            this.array = newArray;
            this.first = 0;
        }
        this.array[(this.first + this.count) % this.array.length] = item;
        this.count++;
        this.version++;
    }
    /**
     * Removes an item from the front of the queue.
     * @returns The removed item, or `undefined` if the queue is empty.
     */
    dequeue() {
        if (this.count === 0)
            return undefined;
        const item = this.array[this.first];
        this.array[this.first] = undefined; // Allow the item to be GC'd.
        this.first = (this.first + 1) % this.array.length;
        this.count--;
        this.version++;
        return item;
    }
    /**
     * Gets the item at the front of the queue without removing it.
     * @returns The front item, or `undefined` if the queue is empty.
     */
    peek() {
        if (this.count === 0)
            return undefined;
        const item = this.array[this.first];
        return item;
    }
    /**
     * Clears the queue.
     */
    clear() {
        this.first = 0;
        this.count = 0;
        this.array.fill(undefined); // Allow items to be GC'd.
        this.version++;
    }
    /**
     * Creates an iterator over the items in the queue.
     * (Any changes to the queue will invalidate the iterator.)
     */
    *[Symbol.iterator]() {
        const iteratorVersion = this.version;
        for (let i = 0; i < this.count; i++) {
            const item = this.array[(this.first + i) % this.array.length];
            yield item;
            if (this.version !== iteratorVersion) {
                throw new Error('Iterator is invalid due to changes in the collection.');
            }
        }
    }
}
exports.Queue = Queue;
//# sourceMappingURL=queue.js.map

/***/ }),

/***/ 24564:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Semaphore = void 0;
const promiseCompletionSource_1 = __webpack_require__(93708);
const cancellation_1 = __webpack_require__(97437);
const errors_1 = __webpack_require__(72917);
/**
 * Semaphore-like object that allows multiple awaiters to coordinate exclusive access to a resource.
 */
class Semaphore {
    /**
     * Creates a new semaphore instance.
     * @param initialCount Optional initial count. Defaults to 0.
     */
    constructor(initialCount = 0) {
        this.completions = [];
        this.disposed = false;
        this.count = initialCount;
    }
    /**
     * Gets the current available count of the semaphore.
     */
    get currentCount() {
        return this.count;
    }
    /**
     * Releases the semaphore, increasing the available count or unblicking one or more awaiters.
     * @param releaseCount Optional specified count to release. Defaults to 1.
     * @returns The previous count (before release).
     */
    release(releaseCount = 1) {
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        const previousCount = this.count;
        for (; releaseCount > 0; releaseCount--) {
            if (this.completions.length > 0) {
                // Something is waiting on the semaphore.
                // Remove and complete the wait without incrementing the count.
                const completion = this.completions.shift();
                completion.resolve(true);
            }
            else {
                // Nothing is currently waiting on the semaphore. Increment the available count.
                this.count++;
            }
        }
        return previousCount;
    }
    /**
     * Releases the semaphore, but does not throw an `ObjectDisposedError` if it is already disposed.
     */
    tryRelease() {
        try {
            this.release();
        }
        catch (e) {
            if (!(e instanceof errors_1.ObjectDisposedError)) {
                throw e;
            }
        }
    }
    async wait(timeoutOrCancellation, cancellation) {
        const millisecondsTimeout = typeof timeoutOrCancellation === 'number' ? timeoutOrCancellation : undefined;
        if (typeof cancellation === 'undefined' && typeof timeoutOrCancellation === 'object') {
            cancellation = timeoutOrCancellation;
        }
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if (cancellation === null || cancellation === void 0 ? void 0 : cancellation.isCancellationRequested)
            throw new cancellation_1.CancellationError();
        if (this.count > 0) {
            // The semaphore is available now.
            this.count--;
            return true;
        }
        else if (millisecondsTimeout === 0) {
            // The semaphore is not available and the caller doesn't want to wait.
            return false;
        }
        else {
            const completion = new promiseCompletionSource_1.PromiseCompletionSource();
            this.completions.push(completion);
            // Start with a promise that completes with `true` when the wait succeeds.
            const promises = [completion.promise];
            if (millisecondsTimeout) {
                // Race against a promise that completes with `false` when the timeout expires.
                promises.push(new Promise((resolve) => setTimeout(() => resolve(false), millisecondsTimeout)));
            }
            if (cancellation) {
                // Race against a promise that throws when the cancellation token is cancelled.
                const cancellationCompletion = new promiseCompletionSource_1.PromiseCompletionSource();
                cancellation.onCancellationRequested(() => {
                    cancellationCompletion.reject(new cancellation_1.CancellationError());
                });
                promises.push(cancellationCompletion.promise);
            }
            if (await Promise.race(promises)) {
                // The wait succeeded.
                return true;
            }
            else {
                // The wait timed out. Remove the (not-completed) completion from the array.
                const completionIndex = this.completions.indexOf(completion);
                if (completionIndex >= 0)
                    this.completions.splice(completionIndex, 1);
                return false;
            }
        }
    }
    /**
     * Disposes the semaphore and throws a diposed error to any awaiters.
     */
    dispose() {
        if (this.disposed)
            return;
        this.disposed = true;
        for (let completion of this.completions) {
            completion.reject(new errors_1.ObjectDisposedError(this));
        }
        this.completions.splice(0, this.completions.length);
        this.count = 0;
    }
}
exports.Semaphore = Semaphore;
//# sourceMappingURL=semaphore.js.map

/***/ }),

/***/ 34263:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ go)
/* harmony export */ });
/* harmony import */ var vscode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89496);
/* harmony import */ var vscode__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode__WEBPACK_IMPORTED_MODULE_0__);
var So=Object.defineProperty;var xo=Object.getOwnPropertySymbols;var Sc=Object.prototype.hasOwnProperty,Ic=Object.prototype.propertyIsEnumerable;var yo=(t,e,r)=>e in t?So(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,at=(t,e)=>{for(var r in e||(e={}))Sc.call(e,r)&&yo(t,r,e[r]);if(xo)for(var r of xo(e))Ic.call(e,r)&&yo(t,r,e[r]);return t};var I=(t,e)=>()=>(t&&(e=t(t=0)),e);var Cc=(t,e)=>{for(var r in e)So(t,r,{get:e[r],enumerable:!0})};var Hr=(t,e,r)=>new Promise((n,i)=>{var a=s=>{try{u(r.next(s))}catch(c){i(c)}},o=s=>{try{u(r.throw(s))}catch(c){i(c)}},u=s=>s.done?n(s.value):Promise.resolve(s.value).then(a,o);u((r=r.apply(t,e)).next())});var Io,Co=I(()=>{Io={Unknown:0,NonRetryableStatus:1,InvalidEvent:2,SizeLimitExceeded:3,KillSwitch:4,QueueFull:5}});var mt,Xe,Oe,Ce,qr,vt,Ir,Cr,zn,Bn,rr,Hn=I(()=>{mt="function",Xe="object",Oe="undefined",Ce="prototype",qr="hasOwnProperty",vt=Object,Ir=vt[Ce],Cr=vt.assign,zn=vt.create,Bn=vt.defineProperty,rr=Ir[qr]});function ot(){return typeof globalThis!==Oe&&globalThis?globalThis:typeof self!==Oe&&self?self:typeof window!==Oe&&window?window:typeof __webpack_require__.g!==Oe&&__webpack_require__.g?__webpack_require__.g:null}function Tr(t){throw new TypeError(t)}function At(t){var e=zn;if(e)return e(t);if(t==null)return{};var r=typeof t;r!==Xe&&r!==mt&&Tr("Object prototype may only be an Object:"+t);function n(){}return n[Ce]=t,new n}var Fi=I(()=>{Hn()});function z(t,e){typeof e!==mt&&e!==null&&Tr("Class extends value "+String(e)+" is not a constructor or null"),Ri(t,e);function r(){this.constructor=t}t[Ce]=e===null?At(e):(r[Ce]=e[Ce],new r)}var Bl,Hl,wc,yt,Ri,To=I(()=>{Hn();Fi();Bl=(ot()||{}).Symbol,Hl=(ot()||{}).Reflect,wc=function(t){for(var e,r=1,n=arguments.length;r<n;r++){e=arguments[r];for(var i in e)Ir[qr].call(e,i)&&(t[i]=e[i])}return t},yt=Cr||wc,Ri=function(t,e){return Ri=vt.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,n){r.__proto__=n}||function(r,n){for(var i in n)n[qr](i)&&(r[i]=n[i])},Ri(t,e)}});var Eo=I(()=>{});var ne=I(()=>{Hn();Fi();To();Eo()});function Bt(t,e){return t&&Wn[Nt].hasOwnProperty.call(t,e)}function No(t){return t&&(t===Wn[Nt]||t===Array[Nt])}function Oi(t){return No(t)||t===Function[Nt]}function nr(t){if(t){if(Gr)return Gr(t);var e=t[Pc]||t[Nt]||(t[Vn]?t[Vn][Nt]:null);if(e)return e}return null}function Gn(t,e){var r=[],n=Wn.getOwnPropertyNames;if(n)r=n(t);else for(var i in t)typeof i=="string"&&Bt(t,i)&&r.push(i);if(r&&r.length>0)for(var a=0;a<r.length;a++)e(r[a])}function zi(t,e,r){return e!==Vn&&typeof t[e]===qn&&(r||Bt(t,e))}function Kn(t){throw new TypeError("DynamicProto: "+t)}function Ac(t){var e={};return Gn(t,function(r){!e[r]&&zi(t,r,!1)&&(e[r]=t[r])}),e}function Bi(t,e){for(var r=t.length-1;r>=0;r--)if(t[r]===e)return!0;return!1}function Nc(t,e,r,n){function i(s,c,l){var f=c[l];if(f[_i]&&n){var m=s[jn]||{};m[jr]!==!1&&(f=(m[c[Er]]||{})[l]||f)}return function(){return f.apply(s,arguments)}}var a={};Gn(r,function(s){a[s]=i(e,r,s)});for(var o=nr(t),u=[];o&&!Oi(o)&&!Bi(u,o);)Gn(o,function(s){!a[s]&&zi(o,s,!Gr)&&(a[s]=i(e,o,s))}),u.push(o),o=nr(o);return a}function Dc(t,e,r,n){var i=null;if(t&&Bt(r,Er)){var a=t[jn]||{};if(i=(a[r[Er]]||{})[e],i||Kn("Missing ["+e+"] "+qn),!i[Ui]&&a[jr]!==!1){for(var o=!Bt(t,e),u=nr(t),s=[];o&&u&&!Oi(u)&&!Bi(s,u);){var c=u[e];if(c){o=c===n;break}s.push(u),u=nr(u)}try{o&&(t[e]=i),i[Ui]=1}catch(l){a[jr]=!1}}}return i}function kc(t,e,r){var n=e[t];return n===r&&(n=nr(e)[t]),typeof n!==qn&&Kn("["+t+"] is not a "+qn),n}function Fc(t,e,r,n,i){function a(s,c){var l=function(){var f=Dc(this,c,s,l)||kc(c,s,l);return f.apply(this,arguments)};return l[_i]=1,l}if(!No(t)){var o=r[jn]=r[jn]||{},u=o[e]=o[e]||{};o[jr]!==!1&&(o[jr]=!!i),Gn(r,function(s){zi(r,s,!1)&&r[s]!==n[s]&&(u[s]=r[s],delete r[s],(!Bt(t,s)||t[s]&&!t[s][_i])&&(t[s]=a(t,s)))})}}function Rc(t,e){if(Gr)for(var r=[],n=nr(e);n&&!Oi(n)&&!Bi(r,n);){if(n===t)return!0;r.push(n),n=nr(n)}return!1}function Li(t,e){return Bt(t,Nt)?t.name||e||wo:((t||{})[Vn]||{}).name||e||wo}function Hi(t,e,r,n){Bt(t,Nt)||Kn("theClass is an invalid class definition.");var i=t[Nt];Rc(i,e)||Kn("["+Li(t)+"] is not in class hierarchy of ["+Li(e)+"]");var a=null;Bt(i,Er)?a=i[Er]:(a=bc+Li(t,"_")+"$"+Po,Po++,i[Er]=a);var o=Hi[Ao],u=!!o[Mi];u&&n&&n[Mi]!==void 0&&(u=!!n[Mi]);var s=Ac(e),c=Nc(i,e,s,u);r(e,c);var l=!!Gr&&!!o[bo];l&&n&&(l=!!n[bo]),Fc(i,a,e,s,l!==!1)}var Vn,Nt,qn,jn,_i,Er,bc,Ui,jr,Ao,wo,Pc,Mi,bo,Wn,Gr,Po,Mc,W,Te=I(()=>{Vn="constructor",Nt="prototype",qn="function",jn="_dynInstFuncs",_i="_isDynProxy",Er="_dynClass",bc="_dynCls$",Ui="_dynInstChk",jr=Ui,Ao="_dfOpts",wo="_unknown_",Pc="__proto__",Mi="useBaseInst",bo="setInstFuncs",Wn=Object,Gr=Wn.getPrototypeOf,Po=0;Mc={setInstFuncs:!0,useBaseInst:!0};Hi[Ao]=Mc;W=Hi});var S,h,Kr=I(()=>{(function(t){t[t.CRITICAL=1]="CRITICAL",t[t.WARNING=2]="WARNING"})(S||(S={}));h={BrowserDoesNotSupportLocalStorage:0,BrowserCannotReadLocalStorage:1,BrowserCannotReadSessionStorage:2,BrowserCannotWriteLocalStorage:3,BrowserCannotWriteSessionStorage:4,BrowserFailedRemovalFromLocalStorage:5,BrowserFailedRemovalFromSessionStorage:6,CannotSendEmptyTelemetry:7,ClientPerformanceMathError:8,ErrorParsingAISessionCookie:9,ErrorPVCalc:10,ExceptionWhileLoggingError:11,FailedAddingTelemetryToBuffer:12,FailedMonitorAjaxAbort:13,FailedMonitorAjaxDur:14,FailedMonitorAjaxOpen:15,FailedMonitorAjaxRSC:16,FailedMonitorAjaxSend:17,FailedMonitorAjaxGetCorrelationHeader:18,FailedToAddHandlerForOnBeforeUnload:19,FailedToSendQueuedTelemetry:20,FailedToReportDataLoss:21,FlushFailed:22,MessageLimitPerPVExceeded:23,MissingRequiredFieldSpecification:24,NavigationTimingNotSupported:25,OnError:26,SessionRenewalDateIsZero:27,SenderNotInitialized:28,StartTrackEventFailed:29,StopTrackEventFailed:30,StartTrackFailed:31,StopTrackFailed:32,TelemetrySampledAndNotSent:33,TrackEventFailed:34,TrackExceptionFailed:35,TrackMetricFailed:36,TrackPVFailed:37,TrackPVFailedCalc:38,TrackTraceFailed:39,TransmissionFailed:40,FailedToSetStorageBuffer:41,FailedToRestoreStorageBuffer:42,InvalidBackendResponse:43,FailedToFixDepricatedValues:44,InvalidDurationValue:45,TelemetryEnvelopeInvalid:46,CreateEnvelopeError:47,CannotSerializeObject:48,CannotSerializeObjectNonSerializable:49,CircularReferenceDetected:50,ClearAuthContextFailed:51,ExceptionTruncated:52,IllegalCharsInName:53,ItemNotInArray:54,MaxAjaxPerPVExceeded:55,MessageTruncated:56,NameTooLong:57,SampleRateOutOfRange:58,SetAuthContextFailed:59,SetAuthContextFailedAccountName:60,StringValueTooLong:61,StartCalledMoreThanOnce:62,StopCalledWithoutStart:63,TelemetryInitializerFailed:64,TrackArgumentsNotSpecified:65,UrlTooLong:66,SessionStorageBufferFull:67,CannotAccessCookie:68,IdTooLong:69,InvalidEvent:70,FailedMonitorAjaxSetRequestHeader:71,SendBrowserInfoOnUserInit:72,PluginException:73,NotificationException:74,SnippetScriptLoadFailure:99,InvalidInstrumentationKey:100,CannotParseAiBlobValue:101,InvalidContentBlob:102,TrackPageActionEventFailed:103}});function qi(t){return Ir.toString.call(t)}function ji(t,e){return typeof t===e}function pe(t){return t===void 0||typeof t===Oe}function x(t){return t===null||pe(t)}function Gi(t){return!x(t)}function wr(t,e){return t&&rr.call(t,e)}function st(t){return typeof t===Xe}function B(t){return typeof t===mt}function Ht(t,e,r,n){n===void 0&&(n=!1);var i=!1;if(!x(t))try{x(t[ko])?x(t[Do])||(t[Do](Lo+e,r),i=!0):(t[ko](e,r,n),i=!0)}catch(a){}return i}function Xn(t,e,r,n){if(n===void 0&&(n=!1),!x(t))try{x(t[Ro])?x(t[Fo])||t[Fo](Lo+e,r):t[Ro](e,r,n)}catch(i){}}function Ki(t){var e=t,r=/([^\w\d_$])/g;return r.test(t)&&(e=t.replace(r,"_")),e}function $(t,e){if(t)for(var r in t)rr.call(t,r)&&e.call(t,r,t[r])}function Wi(t,e){if(t&&e){var r=e.length,n=t.length;if(t===e)return!0;if(n>=r){for(var i=n-1,a=r-1;a>=0;a--){if(t[i]!=e[a])return!1;i--}return!0}}return!1}function Ee(t,e){return t&&e?t.indexOf(e)!==-1:!1}function br(t){return qi(t)==="[object Date]"}function Re(t){return qi(t)==="[object Array]"}function Vt(t){return qi(t)==="[object Error]"}function U(t){return typeof t=="string"}function ir(t){return typeof t=="number"}function Wr(t){return typeof t=="boolean"}function Me(t){if(br(t)){var e=function(r){var n=String(r);return n.length===1&&(n="0"+n),n};return t.getUTCFullYear()+"-"+e(t.getUTCMonth()+1)+"-"+e(t.getUTCDate())+"T"+e(t.getUTCHours())+":"+e(t.getUTCMinutes())+":"+e(t.getUTCSeconds())+"."+String((t.getUTCMilliseconds()/1e3).toFixed(3)).slice(2,5)+"Z"}}function R(t,e,r){for(var n=t.length,i=0;i<n&&!(i in t&&e.call(r||t,t[i],i,t)===-1);i++);}function Dt(t,e,r){for(var n=t.length,i=r||0,a=Math.max(i>=0?i:n-Math.abs(i),0);a<n;a++)if(a in t&&t[a]===e)return a;return-1}function qt(t,e,r){for(var n=t.length,i=r||t,a=new Array(n),o=0;o<n;o++)o in t&&(a[o]=e.call(i,t[o],t));return a}function Xr(t,e,r){var n=t.length,i=0,a;if(arguments.length>=3)a=arguments[2];else{for(;i<n&&!(i in t);)i++;a=t[i++]}for(;i<n;)i in t&&(a=e(a,t[i],i,t)),i++;return a}function se(t){return typeof t!="string"?t:t.replace(/^\s+|\s+$/g,"")}function Ye(t){var e=typeof t;e!==mt&&(e!==Xe||t===null)&&Tr("objKeys called on non-object");var r=[];for(var n in t)t&&rr.call(t,n)&&r.push(n);if(Lc)for(var i=Vi.length,a=0;a<i;a++)t&&rr.call(t,Vi[a])&&r.push(Vi[a]);return r}function St(t,e,r,n){if(Mo)try{var i={enumerable:!0,configurable:!0};return r&&(i.get=r),n&&(i.set=n),Mo(t,e,i),!0}catch(a){}return!1}function de(){var t=Date;return t.now?t.now():new t().getTime()}function G(t){return Vt(t)?t.name:""}function K(t,e,r,n,i){var a=r;return t&&(a=t[e],a!==r&&(!i||i(a))&&(!n||n(r))&&(a=r,t[e]=a)),a}function ve(t,e,r){var n;return t?(n=t[e],!n&&x(n)&&(n=pe(r)?{}:r,t[e]=n)):n=pe(r)?{}:r,n}function Jn(t){return!t}function Pr(t){return!!t}function Ne(t){throw new Error(t)}function Jr(t,e,r){if(t&&e&&t!==e&&st(t)&&st(e)){var n=function(a){if(U(a)){var o=e[a];B(o)?(!r||r(a,!0,e,t))&&(t[a]=function(u){return function(){var s=arguments;return e[u].apply(e,s)}}(a)):(!r||r(a,!1,e,t))&&(wr(t,a)&&delete t[a],St(t,a,function(){return e[a]},function(u){e[a]=u})||(t[a]=o))}};for(var i in e)n(i)}return t}function Xi(t){return function(){function e(){var r=this;t&&$(t,function(n,i){r[n]=i})}return e}()}function Qn(t){return t&&(t=vt(Cr?Cr({},t):t)),t}var Lo,Do,ko,Fo,Ro,Mo,df,mf,Lc,Vi,Le=I(()=>{ne();Lo="on",Do="attachEvent",ko="addEventListener",Fo="detachEvent",Ro="removeEventListener",Mo=Bn,df=vt.freeze,mf=vt.seal;Lc=!{toString:null}.propertyIsEnumerable("toString"),Vi=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]});function we(t){var e=ot();return e&&e[t]?e[t]:t===_o&&ar()?window:null}function ar(){return Boolean(typeof window===Xe&&window)}function It(){return ar()?window:we(_o)}function Zn(){return Boolean(typeof document===Xe&&document)}function De(){return Zn()?document:we(_c)}function Oo(){return Boolean(typeof navigator===Xe&&navigator)}function _e(){return Oo()?navigator:we(Uc)}function zo(){return Boolean(typeof history===Xe&&history)}function $i(){return zo()?history:we(Oc)}function $e(t){if(t&&Gc){var e=we("__mockLocation");if(e)return e}return typeof location===Xe&&location?location:we(zc)}function ea(){return typeof console!==Oe?console:we(Bc)}function Je(){return we(Hc)}function gt(){return Boolean(typeof JSON===Xe&&JSON||we(Uo)!==null)}function be(){return gt()?JSON||we(Uo):null}function ta(){return we(Vc)}function ra(){return we(qc)}function na(){var t=_e();return t&&t.product?t.product===jc:!1}function jt(){var t=_e();if(t&&(t.userAgent!==Qi||Ji===null)){Qi=t.userAgent;var e=(Qi||"").toLowerCase();Ji=Ee(e,Zi)||Ee(e,Yi)}return Ji}function or(t){if(t===void 0&&(t=null),!t){var e=_e()||{};t=e?(e.userAgent||"").toLowerCase():""}var r=(t||"").toLowerCase();if(Ee(r,Zi))return parseInt(r.split(Zi)[1]);if(Ee(r,Yi)){var n=parseInt(r.split(Yi)[1]);if(n)return n+4}return null}function O(t){var e=Object[Ce].toString.call(t),r="";return e==="[object Error]"?r="{ stack: '"+t.stack+"', message: '"+t.message+"', name: '"+t.name+"'":gt()&&(r=be().stringify(t)),e+r}var _o,_c,Uc,Oc,zc,Bc,Hc,Uo,Vc,qc,jc,Zi,Yi,Ji,Qi,Gc,Ar=I(()=>{"use strict";ne();Le();_o="window",_c="document",Uc="navigator",Oc="history",zc="location",Bc="console",Hc="performance",Uo="JSON",Vc="crypto",qc="msCrypto",jc="ReactNative",Zi="msie",Yi="trident/",Ji=null,Qi=null,Gc=!1});function Bo(t){return t?'"'+t.replace(/\"/g,"")+'"':""}function Ft(t,e){return(t||{}).logger||new Yn(e)}var Kc,Wc,Xc,kt,Yn,$n=I(()=>{"use strict";Kr();Ar();Te();Le();Kc="AI (Internal): ",Wc="AI: ",Xc="AITR_";kt=function(){function t(e,r,n,i){n===void 0&&(n=!1);var a=this;a.messageId=e,a.message=(n?Wc:Kc)+e;var o="";gt()&&(o=be().stringify(i));var u=(r?" message:"+Bo(r):"")+(i?" props:"+Bo(o):"");a.message+=u}return t.dataType="MessageData",t}();Yn=function(){function t(e){this.identifier="DiagnosticLogger",this.queue=[];var r=0,n={};W(t,this,function(i){x(e)&&(e={}),i.consoleLoggingLevel=function(){return a("loggingLevelConsole",0)},i.telemetryLoggingLevel=function(){return a("loggingLevelTelemetry",1)},i.maxInternalMessageLimit=function(){return a("maxMessageLimit",25)},i.enableDebugExceptions=function(){return a("enableDebugExceptions",!1)},i.throwInternal=function(u,s,c,l,f){f===void 0&&(f=!1);var m=new kt(s,c,f,l);if(i.enableDebugExceptions())throw m;if(!pe(m.message)){var C=i.consoleLoggingLevel();if(f){var E=+m.messageId;!n[E]&&C>=S.WARNING&&(i.warnToConsole(m.message),n[E]=!0)}else C>=S.WARNING&&i.warnToConsole(m.message);i.logInternalMessage(u,m)}},i.warnToConsole=function(u){var s=ea();if(s){var c="log";s.warn&&(c="warn"),B(s[c])&&s[c](u)}},i.resetInternalMessageCount=function(){r=0,n={}},i.logInternalMessage=function(u,s){if(!o()){var c=!0,l=Xc+s.messageId;if(n[l]?c=!1:n[l]=!0,c&&(u<=i.telemetryLoggingLevel()&&(i.queue.push(s),r++),r===i.maxInternalMessageLimit())){var f="Internal events throttle limit per PageView reached for this app.",m=new kt(h.MessageLimitPerPVExceeded,f,!1);i.queue.push(m),i.warnToConsole(f)}}};function a(u,s){var c=e[u];return x(c)?s:c}function o(){return r>=i.maxInternalMessageLimit()}})}return t}()});function ut(t,e,r,n,i){if(t){var a=t;if(B(a.getPerfMgr)&&(a=a.getPerfMgr()),a){var o=void 0,u=a.getCtx(ia);try{if(o=a.create(e(),n,i),o){if(u&&o.setCtx&&(o.setCtx(sr.ParentContextKey,u),u.getCtx&&u.setCtx)){var s=u.getCtx(sr.ChildrenContextKey);s||(s=[],u.setCtx(sr.ChildrenContextKey,s)),s.push(o)}return a.setCtx(ia,o),r(o)}}catch(c){o&&o.setCtx&&o.setCtx("exception",c)}finally{o&&a.fire(o),a.setCtx(ia,u)}}}return r()}var Nr,sr,Qr,ia,Zr=I(()=>{Te();Le();Nr="ctx",sr=function(){function t(e,r,n){var i=this,a=!1;if(i.start=de(),i.name=e,i.isAsync=n,i.isChildEvt=function(){return!1},B(r)){var o;a=St(i,"payload",function(){return!o&&B(r)&&(o=r(),r=null),o})}i.getCtx=function(u){return u?u===t.ParentContextKey||u===t.ChildrenContextKey?i[u]:(i[Nr]||{})[u]:null},i.setCtx=function(u,s){if(u)if(u===t.ParentContextKey)i[u]||(i.isChildEvt=function(){return!0}),i[u]=s;else if(u===t.ChildrenContextKey)i[u]=s;else{var c=i[Nr]=i[Nr]||{};c[u]=s}},i.complete=function(){var u=0,s=i.getCtx(t.ChildrenContextKey);if(Re(s))for(var c=0;c<s.length;c++){var l=s[c];l&&(u+=l.time)}i.time=de()-i.start,i.exTime=i.time-u,i.complete=function(){},!a&&B(r)&&(i.payload=r())}}return t.ParentContextKey="parent",t.ChildrenContextKey="childEvts",t}(),Qr=function(){function t(e){this.ctx={},W(t,this,function(r){r.create=function(n,i,a){return new sr(n,i,a)},r.fire=function(n){n&&(n.complete(),e&&e.perfEvent(n))},r.setCtx=function(n,i){if(n){var a=r[Nr]=r[Nr]||{};a[n]=i}},r.getCtx=function(n){return(r[Nr]||{})[n]}})}return t}(),ia="CoreUtils.doPerf"});var Ho,Vo=I(()=>{"use strict";Zr();Kr();Le();Ho=function(){function t(e,r){var n=this,i=null,a=B(e.processTelemetry),o=B(e.setNextPlugin);n._hasRun=!1,n.getPlugin=function(){return e},n.getNext=function(){return i},n.setNext=function(u){i=u},n.processTelemetry=function(u,s){s||(s=r);var c=e?e.identifier:"TelemetryPluginChain";ut(s?s.core():null,function(){return c+":processTelemetry"},function(){if(e&&a){n._hasRun=!0;try{s.setNext(i),o&&e.setNextPlugin(i),i&&(i._hasRun=!1),e.processTelemetry(u,s)}catch(f){var l=i&&i._hasRun;(!i||!l)&&s.diagLog().throwInternal(S.CRITICAL,h.PluginException,"Plugin ["+e.identifier+"] failed during processTelemetry - "+f),i&&!l&&i.processTelemetry(u,s)}}else i&&(n._hasRun=!0,i.processTelemetry(u,s))},function(){return{item:u}},!u.sync)}}return t}()});function aa(t,e){var r=[];if(t&&t.length>0)for(var n=null,i=0;i<t.length;i++){var a=t[i];if(a&&B(a.processTelemetry)){var o=new Ho(a,e);r.push(o),n&&n.setNext(o),n=o}}return r.length>0?r[0]:null}function Jc(t,e,r){var n=[],i=!r;if(t)for(;t;){var a=t.getPlugin();(i||a===r)&&(i=!0,n.push(a)),t=t.getNext()}return i||n.push(r),aa(n,e)}function Qc(t,e,r){var n=t,i=!1;return r&&t&&(n=[],R(t,function(a){(i||a===r)&&(i=!0,n.push(a))})),r&&!i&&(n||(n=[]),n.push(r)),aa(n,e)}var Rt,ei=I(()=>{"use strict";$n();Vo();Le();Rt=function(){function t(e,r,n,i){var a=this,o=null;i!==null&&(e&&B(e.getPlugin)?o=Jc(e,a,i||e.getPlugin()):i?o=Qc(e,a,i):pe(i)&&(o=aa(e,a))),a.core=function(){return n},a.diagLog=function(){return Ft(n,r)},a.getCfg=function(){return r},a.getExtCfg=function(u,s){s===void 0&&(s={});var c;if(r){var l=r.extensionConfig;l&&u&&(c=l[u])}return c||s},a.getConfig=function(u,s,c){c===void 0&&(c=!1);var l,f=a.getExtCfg(u,null);return f&&!x(f[s])?l=f[s]:r&&!x(r[s])&&(l=r[s]),x(l)?c:l},a.hasNext=function(){return o!=null},a.getNext=function(){return o},a.setNext=function(u){o=u},a.processNext=function(u){var s=o;s&&(o=s.getNext(),s.processTelemetry(u,a))},a.createNew=function(u,s){return u===void 0&&(u=null),new t(u||o,r,n,s)}}return t}()});var qo,ti,oa=I(()=>{qo="iKey",ti="extensionConfig"});var ri,et,sa=I(()=>{"use strict";ei();Le();oa();ri="getPlugin",et=function(){function t(){var e=this,r=!1,n=null,i=null;e.core=null,e.diagLog=function(a){return e._getTelCtx(a).diagLog()},e.isInitialized=function(){return r},e.setInitialized=function(a){r=a},e.setNextPlugin=function(a){i=a},e.processNext=function(a,o){o?o.processNext(a):i&&B(i.processTelemetry)&&i.processTelemetry(a,null)},e._getTelCtx=function(a){a===void 0&&(a=null);var o=a;if(!o){var u=n||new Rt(null,{},e.core);i&&i[ri]?o=u.createNew(null,i[ri]):o=u.createNew(null,i)}return o},e._baseTelInit=function(a,o,u,s){a&&K(a,ti,[],null,x),!s&&o&&(s=o.getProcessTelContext().getNext());var c=i;i&&i[ri]&&(c=i[ri]()),e.core=o,n=new Rt(s,a,o,c),r=!0}}return t.prototype.initialize=function(e,r,n,i){this._baseTelInit(e,r,n,i)},t}()});function Yr(t,e){for(var r=[],n=null,i=t.getNext();i;){var a=i.getPlugin();a&&(n&&B(n[Go])&&B(a[ua])&&n[Go](a),(!B(a[Ko])||!a[Ko]())&&r.push(a),n=a,i=i.getNext())}R(r,function(o){o.initialize(t.getCfg(),t.core(),e,t.getNext())})}function ca(t){return t.sort(function(e,r){var n=0,i=B(r[ua]);return B(e[ua])?n=i?e[jo]-r[jo]:1:i&&(n=-1),n})}var ua,jo,Go,Ko,la=I(()=>{"use strict";Le();ua="processTelemetry",jo="priority",Go="setNextPlugin",Ko="isInitialized"});var fa,Zc,Wo,Xo=I(()=>{"use strict";ne();Te();sa();ei();la();Le();fa=500,Zc="Channel has invalid priority",Wo=function(t){z(e,t);function e(){var r=t.call(this)||this;r.identifier="ChannelControllerPlugin",r.priority=fa;var n;W(e,r,function(u,s){u.setNextPlugin=function(c){},u.processTelemetry=function(c,l){n&&R(n,function(f){if(f.length>0){var m=r._getTelCtx(l).createNew(f);m.processNext(c)}})},u.getChannelControls=function(){return n},u.initialize=function(c,l,f){u.isInitialized()||(s.initialize(c,l,f),o((c||{}).channels,f),R(n,function(m){return Yr(new Rt(m,c,l),f)}))}});function i(u){R(u,function(s){s.priority<fa&&Ne(Zc+s.identifier)})}function a(u){u&&u.length>0&&(u=u.sort(function(s,c){return s.priority-c.priority}),i(u),n.push(u))}function o(u,s){if(n=[],u&&R(u,function(l){return a(l)}),s){var c=[];R(s,function(l){l.priority>fa&&c.push(l)}),a(c)}}return r}return e._staticInit=function(){var r=e.prototype;St(r,"ChannelControls",r.getChannelControls),St(r,"channelQueue",r.getChannelControls)}(),e}(et)});function ha(t,e){var r=ur[Gt]||ai[Gt];return r||(r=ur[Gt]=ur(t,e),ai[Gt]=r),r}function ii(t){return t?t.isEnabled():!0}function Yc(t){var e=t.cookieCfg=t.cookieCfg||{};if(K(e,"domain",t.cookieDomain,Gi,x),K(e,"path",t.cookiePath||"/",null,x),x(e[ma])){var r=void 0;pe(t[Zo])||(r=!t[Zo]),pe(t[Yo])||(r=!t[Yo]),e[ma]=r}return e}function cr(t,e){var r;if(t)r=t.getCookieMgr();else if(e){var n=e.cookieCfg;n[Gt]?r=n[Gt]:r=ur(e)}return r||(r=ha(e,(t||{}).logger)),r}function ur(t,e){var r=Yc(t||ai),n=r.path||"/",i=r.domain,a=r[ma]!==!1,o={isEnabled:function(){var u=a&&va(e),s=ai[Gt];return u&&s&&o!==s&&(u=ii(s)),u},setEnabled:function(u){a=u!==!1},set:function(u,s,c,l,f){if(ii(o)){var m={},C=se(s||ht),E=C.indexOf(";");if(E!==-1&&(C=se(s.substring(0,E)),m=is(s.substring(E+1))),K(m,"domain",l||i,Pr,pe),!x(c)){var P=jt();if(pe(m[pa])){var p=de(),g=p+c*1e3;if(g>0){var y=new Date;y.setTime(g),K(m,pa,ts(y,P?Jo:Qo)||ts(y,P?Jo:Qo)||ht,Pr)}}P||K(m,"max-age",ht+c,null,pe)}var w=$e();w&&w.protocol==="https:"&&(K(m,"secure",null,null,pe),da===null&&(da=!oi((_e()||{}).userAgent)),da&&K(m,"SameSite","None",null,pe)),K(m,"path",f||n,null,pe);var L=r.setCookie||ns;L(u,rs(C,m))}},get:function(u){var s=ht;return ii(o)&&(s=(r.getCookie||$c)(u)),s},del:function(u,s){ii(o)&&o.purge(u,s)},purge:function(u,s){if(va(e)){var c=(f={},f.path=s||"/",f[pa]="Thu, 01 Jan 1970 00:00:01 GMT",f);jt()||(c["max-age"]="0");var l=r.delCookie||ns;l(u,rs(ht,c))}var f}};return o[Gt]=o,o}function va(t){if(ni===null){ni=!1;try{var e=$r||{};ni=e[ga]!==void 0}catch(r){t&&t.throwInternal(S.WARNING,h.CannotAccessCookie,"Cannot access document.cookie - "+G(r),{exception:O(r)})}}return ni}function is(t){var e={};if(t&&t.length){var r=se(t).split(";");R(r,function(n){if(n=se(n||ht),n){var i=n.indexOf("=");i===-1?e[n]=null:e[se(n.substring(0,i))]=se(n.substring(i+1))}})}return e}function ts(t,e){return B(t[e])?t[e]():null}function rs(t,e){var r=t||ht;return $(e,function(n,i){r+="; "+n+(x(i)?ht:"="+i)}),r}function $c(t){var e=ht;if($r){var r=$r[ga]||ht;$o!==r&&(es=is(r),$o=r),e=se(es[t]||ht)}return e}function ns(t,e){$r&&($r[ga]=t+"="+e)}function oi(t){return U(t)?!!(Ee(t,"CPU iPhone OS 12")||Ee(t,"iPad; CPU OS 12")||Ee(t,"Macintosh; Intel Mac OS X 10_14")&&Ee(t,"Version/")&&Ee(t,"Safari")||Ee(t,"Macintosh; Intel Mac OS X 10_14")&&Wi(t,"AppleWebKit/605.1.15 (KHTML, like Gecko)")||Ee(t,"Chrome/5")||Ee(t,"Chrome/6")||Ee(t,"UnrealEngine")&&!Ee(t,"Chrome")||Ee(t,"UCBrowser/12")||Ee(t,"UCBrowser/11")):!1}var Jo,Qo,ga,pa,ma,Zo,Yo,Gt,ht,ni,da,$o,$r,es,ai,si=I(()=>{Kr();Ar();Le();Jo="toGMTString",Qo="toUTCString",ga="cookie",pa="expires",ma="enabled",Zo="isCookieUseDisabled",Yo="disableCookiesUsage",Gt="_ckMgr",ht="",ni=null,da=null,$o=null,$r=De(),es={},ai={}});var el,as,en,xa=I(()=>{"use strict";ne();Te();Xo();ei();la();Zr();si();Le();oa();el="Extensions must provide callback to initialize",as="_notificationManager",en=function(){function t(){var e=!1,r,n,i,a,o;W(t,this,function(u){u._extensions=new Array,n=new Wo,u.logger=At({throwInternal:function(s,c,l,f,m){m===void 0&&(m=!1)},warnToConsole:function(s){},resetInternalMessageCount:function(){}}),r=[],u.isInitialized=function(){return e},u.initialize=function(s,c,l,f){u.isInitialized()&&Ne("Core should not be initialized more than once"),(!s||x(s.instrumentationKey))&&Ne("Please provide instrumentation key"),i=f,u[as]=f,u.config=s||{},s.extensions=x(s.extensions)?[]:s.extensions;var m=ve(s,ti);m.NotificationManager=f,l&&(u.logger=l);var C=[];C.push.apply(C,c.concat(s.extensions)),C=ca(C);var E=[],P=[],p={};R(C,function(g){(x(g)||x(g.initialize))&&Ne(el);var y=g.priority,w=g.identifier;g&&y&&(x(p[y])?p[y]=w:l.warnToConsole("Two extensions have same priority #"+y+" - "+p[y]+", "+w)),!y||y<n.priority?E.push(g):P.push(g)}),C.push(n),E.push(n),C=ca(C),u._extensions=C,Yr(new Rt([n],s,u),C),Yr(new Rt(E,s,u),C),u._extensions=E,u.getTransmissionControls().length===0&&Ne("No channels available"),e=!0,u.releaseQueue()},u.getTransmissionControls=function(){return n.getChannelControls()},u.track=function(s){K(s,qo,u.config.instrumentationKey,null,Jn),K(s,"time",Me(new Date),null,Jn),K(s,"ver","4.0",null,x),u.isInitialized()?u.getProcessTelContext().processNext(s):r.push(s)},u.getProcessTelContext=function(){var s=u._extensions,c=s;return(!s||s.length===0)&&(c=[n]),new Rt(c,u.config,u)},u.getNotifyMgr=function(){return i||(i=At({addNotificationListener:function(s){},removeNotificationListener:function(s){},eventsSent:function(s){},eventsDiscarded:function(s,c){},eventsSendRequest:function(s,c){}}),u[as]=i),i},u.getCookieMgr=function(){return o||(o=ur(u.config,u.logger)),o},u.setCookieMgr=function(s){o=s},u.getPerfMgr=function(){return a||u.config&&u.config.enablePerfMgr&&(a=new Qr(u.getNotifyMgr())),a},u.setPerfMgr=function(s){a=s},u.eventCnt=function(){return r.length},u.releaseQueue=function(){r.length>0&&(R(r,function(s){u.getProcessTelContext().processNext(s)}),r=[])}})}return t}()});var tn,ya=I(()=>{Te();Le();tn=function(){function t(e){this.listeners=[];var r=!!(e||{}).perfEvtsSendAll;W(t,this,function(n){n.addNotificationListener=function(i){n.listeners.push(i)},n.removeNotificationListener=function(i){for(var a=Dt(n.listeners,i);a>-1;)n.listeners.splice(a,1),a=Dt(n.listeners,i)},n.eventsSent=function(i){R(n.listeners,function(a){a&&a.eventsSent&&setTimeout(function(){return a.eventsSent(i)},0)})},n.eventsDiscarded=function(i,a){R(n.listeners,function(o){o&&o.eventsDiscarded&&setTimeout(function(){return o.eventsDiscarded(i,a)},0)})},n.eventsSendRequest=function(i,a){R(n.listeners,function(o){if(o&&o.eventsSendRequest)if(a)setTimeout(function(){return o.eventsSendRequest(i,a)},0);else try{o.eventsSendRequest(i,a)}catch(u){}})},n.perfEvent=function(i){i&&(r||!i.isChildEvt())&&R(n.listeners,function(a){if(a&&a.perfEvent)if(i.isAsync)setTimeout(function(){return a.perfEvent(i)},0);else try{a.perfEvent(i)}catch(o){}})}})}return t}()});var rn,os=I(()=>{ne();xa();Co();ya();Zr();$n();Te();Le();rn=function(t){z(e,t);function e(){var r=t.call(this)||this;return W(e,r,function(n,i){n.initialize=function(u,s,c,l){i.initialize(u,s,c||new Yn(u),l||new tn(u))},n.track=function(u){ut(n.getPerfMgr(),function(){return"AppInsightsCore:track"},function(){u===null&&(o(u),Ne("Invalid telemetry item")),a(u),i.track(u)},function(){return{item:u}},!u.sync)},n.addNotificationListener=function(u){var s=n.getNotifyMgr();s&&s.addNotificationListener(u)},n.removeNotificationListener=function(u){var s=n.getNotifyMgr();s&&s.removeNotificationListener(u)},n.pollInternalLogs=function(u){var s=n.config.diagnosticLogInterval;return(!s||!(s>0))&&(s=1e4),setInterval(function(){var c=n.logger?n.logger.queue:[];R(c,function(l){var f={name:u||"InternalMessageId: "+l.messageId,iKey:n.config.instrumentationKey,time:Me(new Date),baseType:kt.dataType,baseData:{message:l.message}};n.track(f)}),c.length=0},s)};function a(u){if(x(u.name))throw o(u),Error("telemetry name required")}function o(u){var s=n.getNotifyMgr();s&&s.eventsDiscarded([u],Io.InvalidEvent)}}),r}return e}(en)});function cs(t){t<0&&(t>>>=0),nn=123456789+t&Kt,an=987654321-t&Kt,us=!0}function ls(){try{var t=de()&2147483647;cs((Math.random()*ss^t)+t)}catch(e){}}function ui(t){return t>0?Math.floor(Ct()/Kt*(t+1))>>>0:0}function Ct(t){var e,r=ta()||ra();return r&&r.getRandomValues?e=r.getRandomValues(new Uint32Array(1))[0]&Kt:jt()?(us||ls(),e=ci()&Kt):e=Math.floor(ss*Math.random()|0),t||(e>>>=0),e}function Sa(t){t?cs(t):ls()}function ci(t){an=36969*(an&65535)+(an>>16)&Kt,nn=18e3*(nn&65535)+(nn>>16)&Kt;var e=(an<<16)+(nn&65535)>>>0&Kt|0;return t||(e>>>=0),e}var ss,Kt,us,nn,an,Ia=I(()=>{Ar();Le();ss=4294967296,Kt=4294967295,us=!1,nn=123456789,an=987654321});function Mt(t,e){var r=!1,n=It();n&&(r=Ht(n,t,e),r=Ht(n.body,t,e)||r);var i=De();return i&&(r=Xt.Attach(i,t,e)||r),r}function fs(){function t(){return ui(15)}return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(tl,function(e){var r=t()|0,n=e==="x"?r:r&3|8;return n.toString(16)})}function ps(){var t=Je();return t&&t.now?t.now():de()}function Wt(t){t===void 0&&(t=22);for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=Ct()>>>0,n=0,i="";i.length<t;)n++,i+=e.charAt(r&63),r>>>=6,n===5&&(r=(Ct()<<2&4294967295|r&3)>>>0,n=0);return i}function ze(){for(var t=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],e="",r,n=0;n<4;n++)r=Ct(),e+=t[r&15]+t[r>>4&15]+t[r>>8&15]+t[r>>12&15]+t[r>>16&15]+t[r>>20&15]+t[r>>24&15]+t[r>>28&15];var i=t[8+(Ct()&3)|0];return e.substr(0,8)+e.substr(9,4)+"4"+e.substr(13,3)+i+e.substr(16,3)+e.substr(19,12)}function Jt(t,e){var r=ha(t,e),n=un._canUseCookies;return on===null&&(on=[],sn=n,St(un,"_canUseCookies",function(){return sn},function(i){sn=i,R(on,function(a){a.setEnabled(i)})})),Dt(on,r)===-1&&on.push(r),Wr(n)&&r.setEnabled(n),Wr(sn)&&r.setEnabled(sn),r}function li(){Jt().setEnabled(!1)}function Ca(t){return Jt(null,t).isEnabled()}function Ta(t,e){return Jt(null,t).get(e)}function Ea(t,e,r,n){Jt(null,t).set(e,r,null,n)}function wa(t,e){return Jt(null,t).del(e)}var on,sn,un,tl,Xt,ds=I(()=>{"use strict";ne();si();Ar();Le();Ia();on=null;un={_canUseCookies:void 0,isTypeof:ji,isUndefined:pe,isNullOrUndefined:x,hasOwnProperty:wr,isFunction:B,isObject:st,isDate:br,isArray:Re,isError:Vt,isString:U,isNumber:ir,isBoolean:Wr,toISOString:Me,arrForEach:R,arrIndexOf:Dt,arrMap:qt,arrReduce:Xr,strTrim:se,objCreate:At,objKeys:Ye,objDefineAccessors:St,addEventHandler:Mt,dateNow:de,isIE:jt,disableCookies:li,newGuid:fs,perfNow:ps,newId:Wt,randomValue:ui,random32:Ct,mwcRandomSeed:Sa,mwcRandom32:ci,generateW3CId:ze},tl=/[xy]/g,Xt={Attach:Ht,AttachEvent:Ht,Detach:Xn,DetachEvent:Xn}});function Pa(t,e){if(t)for(var r=0;r<t.length&&!e(t[r],r);r++);}function ba(t,e,r,n,i){i>=0&&i<=2&&Pa(t,function(a,o){var u=a.cbks,s=u[vs[i]];if(s){e.ctx=function(){var f=n[o]=n[o]||{};return f};try{s.apply(e.inst,r)}catch(f){var c=e.err;try{var l=u[vs[2]];l&&(e.err=f,l.apply(e.inst,r))}catch(m){}finally{e.err=c}}}})}function il(t){return function(){var e=this,r=arguments,n=t.h,i={name:t.n,inst:e,ctx:null,set:s},a=[],o=u([i],r);function u(l,f){return Pa(f,function(m){l.push(m)}),l}function s(l,f){r=u([],r),r[l]=f,o=u([i],r)}ba(n,i,o,a,0);var c=t.f;try{i.rslt=c.apply(e,r)}catch(l){throw i.err=l,ba(n,i,o,a,3),l}return ba(n,i,o,a,1),i.rslt}}function al(t){if(t){if(gs)return gs(t);var e=t[rl]||t[Ce]||t[nl];if(e)return e}return null}function hs(t,e,r){var n=null;return t&&(wr(t,e)?n=t:r&&(n=hs(al(t),e,!1))),n}function Aa(t,e,r){return t?cn(t[Ce],e,r,!1):null}function cn(t,e,r,n){if(n===void 0&&(n=!0),t&&e&&r){var i=hs(t,e,n);if(i){var a=i[e];if(typeof a===mt){var o=a[ms];if(!o){o={i:0,n:e,f:a,h:[]};var u=il(o);u[ms]=o,i[e]=u}var s={id:o.i,cbks:r,rm:function(){var c=this.id;Pa(o.h,function(l,f){if(l.id===c)return o.h.splice(f,1),1})}};return o.i++,o.h.push(s),s}}}return null}var ms,vs,rl,nl,gs,xs=I(()=>{ne();Le();ms="_aiHooks",vs=["req","rsp","hkErr","fnErr"],rl="__proto__",nl="constructor";gs=Object.getPrototypeOf});var X=I(()=>{os();xa();sa();Ia();ds();Le();Ar();ne();ya();Zr();$n();Kr();xs();si()});var te,Na=I(()=>{te={requestContextHeader:"Request-Context",requestContextTargetKey:"appId",requestContextAppIdFormat:"appId=cid-v1:",requestIdHeader:"Request-Id",traceParentHeader:"traceparent",traceStateHeader:"tracestate",sdkContextHeader:"Sdk-Context",sdkContextHeaderAppIdRequest:"appId",requestContextHeaderLowerCase:"request-context"}});function fi(t,e,r){var n=e.length,i=Da(t,e);if(i.length!==n){for(var a=0,o=i;r[o]!==void 0;)a++,o=i.substring(0,150-3)+ka(a);i=o}return i}function Da(t,e){var r;return e&&(e=se(e.toString()),e.length>150&&(r=e.substring(0,150),t.throwInternal(S.WARNING,h.NameTooLong,"name is too long.  It has been truncated to "+150+" characters.",{name:e},!0))),r||e}function oe(t,e,r){r===void 0&&(r=1024);var n;return e&&(r=r||1024,e=se(e),e.toString().length>r&&(n=e.toString().substring(0,r),t.throwInternal(S.WARNING,h.StringValueTooLong,"string value is too long. It has been truncated to "+r+" characters.",{value:e},!0))),n||e}function Tt(t,e){return mi(t,e,2048,h.UrlTooLong)}function Dr(t,e){var r;return e&&e.length>32768&&(r=e.substring(0,32768),t.throwInternal(S.WARNING,h.MessageTruncated,"message is too long, it has been truncated to "+32768+" characters.",{message:e},!0)),r||e}function pi(t,e){var r;if(e){var n=""+e;n.length>32768&&(r=n.substring(0,32768),t.throwInternal(S.WARNING,h.ExceptionTruncated,"exception is too long, it has been truncated to "+32768+" characters.",{exception:e},!0))}return r||e}function Be(t,e){if(e){var r={};$(e,function(n,i){if(st(i)&&gt())try{i=be().stringify(i)}catch(a){t.throwInternal(S.WARNING,h.CannotSerializeObjectNonSerializable,"custom property is not valid",{exception:a},!0)}i=oe(t,i,8192),n=fi(t,n,r),r[n]=i}),e=r}return e}function He(t,e){if(e){var r={};$(e,function(n,i){n=fi(t,n,r),r[n]=i}),e=r}return e}function di(t,e){return e&&mi(t,e,128,h.IdTooLong).toString()}function mi(t,e,r,n){var i;return e&&(e=se(e),e.length>r&&(i=e.substring(0,r),t.throwInternal(S.WARNING,n,"input is too long, it has been truncated to "+r+" characters.",{data:e},!0))),i||e}function ka(t){var e="00"+t;return e.substr(e.length-3)}var Fa,ct=I(()=>{X();Fa={MAX_NAME_LENGTH:150,MAX_ID_LENGTH:128,MAX_PROPERTY_LENGTH:8192,MAX_STRING_LENGTH:1024,MAX_URL_LENGTH:2048,MAX_MESSAGE_LENGTH:32768,MAX_EXCEPTION_LENGTH:32768,sanitizeKeyAndAddUniqueness:fi,sanitizeKey:Da,sanitizeString:oe,sanitizeUrl:Tt,sanitizeMessage:Dr,sanitizeException:pi,sanitizeProperties:Be,sanitizeMeasurements:He,sanitizeId:di,sanitizeInput:mi,padNumber:ka,trim:se}});function Lt(t){var e=null;if(B(Event))e=new Event(t);else{var r=De();r&&r.createEvent&&(e=r.createEvent("Event"),e.initEvent(t,!0,!0))}return e}var Ra=I(()=>{X()});function ee(t,e){return e===void 0&&(e=!1),t==null?e:t.toString().toLowerCase()==="true"}function Ge(t){(isNaN(t)||t<0)&&(t=0),t=Math.round(t);var e=""+t%1e3,r=""+Math.floor(t/1e3)%60,n=""+Math.floor(t/(1e3*60))%60,i=""+Math.floor(t/(1e3*60*60))%24,a=Math.floor(t/(1e3*60*60*24));return e=e.length===1?"00"+e:e.length===2?"0"+e:e,r=r.length<2?"0"+r:r,n=n.length<2?"0"+n:n,i=i.length<2?"0"+i:i,(a>0?a+".":"")+i+":"+n+":"+r+"."+e}function kr(){var t=_e();return"sendBeacon"in t&&t.sendBeacon}function ln(t,e){var r=null;return R(t,function(n){if(n.identifier===e)return r=n,-1}),r}function fn(t,e,r,n,i){return!i&&U(t)&&(t==="Script error."||t==="Script error")}var pn=I(()=>{X()});var Et,lr,_t,Fr,dn,le,lt=I(()=>{Et="Microsoft_ApplicationInsights_BypassAjaxInstrumentation",lr="sampleRate",_t="ProcessLegacy",Fr="http.method",dn="https://dc.services.visualstudio.com",le="not_specified"});var Qt,Ke,Ma=I(()=>{(function(t){t[t.LocalStorage=0]="LocalStorage",t[t.SessionStorage=1]="SessionStorage"})(Qt||(Qt={}));(function(t){t[t.AI=0]="AI",t[t.AI_AND_W3C=1]="AI_AND_W3C",t[t.W3C=2]="W3C"})(Ke||(Ke={}))});function La(){return Rr()?vi(Qt.LocalStorage):null}function vi(t){try{if(x(ot()))return null;var e=new Date,r=we(t===Qt.LocalStorage?"localStorage":"sessionStorage");r.setItem(e.toString(),e.toString());var n=r.getItem(e.toString())!==e.toString();if(r.removeItem(e.toString()),!n)return r}catch(i){}return null}function _a(){return wt()?vi(Qt.SessionStorage):null}function mn(){fr=!1,pr=!1}function Rr(){return fr===void 0&&(fr=!!vi(Qt.LocalStorage)),fr}function vn(t,e){var r=La();if(r!==null)try{return r.getItem(e)}catch(n){fr=!1,t.throwInternal(S.WARNING,h.BrowserCannotReadLocalStorage,"Browser failed read of local storage. "+G(n),{exception:O(n)})}return null}function gn(t,e,r){var n=La();if(n!==null)try{return n.setItem(e,r),!0}catch(i){fr=!1,t.throwInternal(S.WARNING,h.BrowserCannotWriteLocalStorage,"Browser failed write to local storage. "+G(i),{exception:O(i)})}return!1}function hn(t,e){var r=La();if(r!==null)try{return r.removeItem(e),!0}catch(n){fr=!1,t.throwInternal(S.WARNING,h.BrowserFailedRemovalFromLocalStorage,"Browser failed removal of local storage item. "+G(n),{exception:O(n)})}return!1}function wt(){return pr===void 0&&(pr=!!vi(Qt.SessionStorage)),pr}function Ua(){var t=[];return wt()&&$(we("sessionStorage"),function(e){t.push(e)}),t}function Zt(t,e){var r=_a();if(r!==null)try{return r.getItem(e)}catch(n){pr=!1,t.throwInternal(S.WARNING,h.BrowserCannotReadSessionStorage,"Browser failed read of session storage. "+G(n),{exception:O(n)})}return null}function Yt(t,e,r){var n=_a();if(n!==null)try{return n.setItem(e,r),!0}catch(i){pr=!1,t.throwInternal(S.WARNING,h.BrowserCannotWriteSessionStorage,"Browser failed write to session storage. "+G(i),{exception:O(i)})}return!1}function xn(t,e){var r=_a();if(r!==null)try{return r.removeItem(e),!0}catch(n){pr=!1,t.throwInternal(S.WARNING,h.BrowserFailedRemovalFromSessionStorage,"Browser failed removal of session storage item. "+G(n),{exception:O(n)})}return!1}var fr,pr,Oa=I(()=>{X();Ma();fr=void 0,pr=void 0});function dr(t){var e=Ss,r=ol,n=r[e];return ys.createElement?r[e]||(n=r[e]=ys.createElement("a")):n={host:gi(t,!0)},n.href=t,e++,e>=r.length&&(e=0),Ss=e,n}function yn(t){var e,r=dr(t);return r&&(e=r.href),e}function za(t){var e,r=dr(t);return r&&(e=r.pathname),e}function Sn(t,e){return t?t.toUpperCase()+" "+e:e}function gi(t,e){var r=In(t,e)||"";if(r){var n=r.match(/(www[0-9]?\.)?(.[^/:]+)(\:[\d]+)?/i);if(n!=null&&n.length>3&&U(n[2])&&n[2].length>0)return n[2]+(n[3]||"")}return r}function In(t,e){var r=null;if(t){var n=t.match(/(\w*):\/\/(.[^/:]+)(\:[\d]+)?/i);if(n!=null&&n.length>2&&U(n[2])&&n[2].length>0&&(r=n[2]||"",e&&n.length>2)){var i=(n[1]||"").toLowerCase(),a=n[3]||"";(i==="http"&&a===":80"||i==="https"&&a===":443")&&(a=""),r+=a}}return r}var ys,Ss,ol,Ba=I(()=>{X();ys=De()||{},Ss=0,ol=[null,null,null,null,null]});function Mr(t){return sl.indexOf(t.toLowerCase())!==-1}function Is(t,e,r,n){var i,a=n,o=n;if(e&&e.length>0){var u=dr(e);if(i=u.host,!a)if(u.pathname!=null){var s=u.pathname.length===0?"/":u.pathname;s.charAt(0)!=="/"&&(s="/"+s),o=u.pathname,a=oe(t,r?r+" "+s:s)}else a=oe(t,e)}else i=n,a=n;return{target:i,name:a,data:o}}function mr(){var t=Je();if(t&&t.now&&t.timing){var e=t.now()+t.timing.navigationStart;if(e>0)return e}return de()}function ge(t,e){var r=null;return t!==0&&e!==0&&!x(t)&&!x(e)&&(r=e-t),r}var sl,Cn,Ha,bt,Va,qa=I(()=>{X();Na();ct();Ra();pn();lt();Oa();Ba();sl=["https://dc.services.visualstudio.com/v2/track","https://breeze.aimon.applicationinsights.io/v2/track","https://dc-int.services.visualstudio.com/v2/track"];Cn={NotSpecified:le,createDomEvent:Lt,disableStorage:mn,isInternalApplicationInsightsEndpoint:Mr,canUseLocalStorage:Rr,getStorage:vn,setStorage:gn,removeStorage:hn,canUseSessionStorage:wt,getSessionStorageKeys:Ua,getSessionStorage:Zt,setSessionStorage:Yt,removeSessionStorage:xn,disableCookies:li,canUseCookies:Ca,disallowsSameSiteNone:oi,setCookie:Ea,stringToBoolOrDefault:ee,getCookie:Ta,deleteCookie:wa,trim:se,newId:Wt,random32:function(){return Ct(!0)},generateW3CId:ze,isArray:Re,isError:Vt,isDate:br,toISOStringForIE8:Me,getIEVersion:or,msToTimeSpan:Ge,isCrossOriginError:fn,dump:O,getExceptionName:G,addEventHandler:Ht,IsBeaconApiSupported:kr,getExtension:ln},Ha={parseUrl:dr,getAbsoluteUrl:yn,getPathName:za,getCompleteUrl:Sn,parseHost:gi,parseFullHost:In},bt={correlationIdPrefix:"cid-v1:",canIncludeCorrelationHeader:function(t,e,r){if(!e||t&&t.disableCorrelationHeaders)return!1;if(t&&t.correlationHeaderExcludePatterns){for(var n=0;n<t.correlationHeaderExcludePatterns.length;n++)if(t.correlationHeaderExcludePatterns[n].test(e))return!1}var i=dr(e).host.toLowerCase();if(i&&(i.indexOf(":443")!==-1||i.indexOf(":80")!==-1)&&(i=(In(e,!0)||"").toLowerCase()),(!t||!t.enableCorsCorrelation)&&i&&i!==r)return!1;var a=t&&t.correlationHeaderDomains;if(a){var o;if(R(a,function(c){var l=new RegExp(c.toLowerCase().replace(/\\/g,"\\\\").replace(/\./g,"\\.").replace(/\*/g,".*"));o=o||l.test(i)}),!o)return!1}var u=t&&t.correlationHeaderExcludedDomains;if(!u||u.length===0)return!0;for(var n=0;n<u.length;n++){var s=new RegExp(u[n].toLowerCase().replace(/\\/g,"\\\\").replace(/\./g,"\\.").replace(/\*/g,".*"));if(s.test(i))return!1}return i&&i.length>0},getCorrelationContext:function(t){if(t){var e=bt.getCorrelationContextValue(t,te.requestContextTargetKey);if(e&&e!==bt.correlationIdPrefix)return e}},getCorrelationContextValue:function(t,e){if(t)for(var r=t.split(","),n=0;n<r.length;++n){var i=r[n].split("=");if(i.length===2&&i[0]===e)return i[1]}}};Va={Now:mr,GetDuration:ge}});function hi(t){if(!t)return{};var e=t.split(ul),r=Xr(e,function(i,a){var o=a.split(cl);if(o.length===2){var u=o[0].toLowerCase(),s=o[1];i[u]=s}return i},{});if(Ye(r).length>0){if(r.endpointsuffix){var n=r.location?r.location+".":"";r.ingestionendpoint=r.ingestionendpoint||"https://"+n+"dc."+r.endpointsuffix}r.ingestionendpoint=r.ingestionendpoint||dn}return r}var ul,cl,ja,Cs=I(()=>{lt();X();ul=";",cl="=";ja={parse:hi}});var Tn,Ga=I(()=>{Tn=function(){function t(){}return t}()});var En,Ka=I(()=>{ne();Ga();En=function(t){z(e,t);function e(){return t.call(this)||this}return e}(Tn)});var Ts,Es=I(()=>{Ts=function(){function t(){this.ver=1,this.sampleRate=100,this.tags={}}return t}()});var wn,ws=I(()=>{ne();Es();ct();X();lt();wn=function(t){z(e,t);function e(r,n,i){var a=t.call(this)||this;return a.name=oe(r,i)||le,a.data=n,a.time=Me(new Date),a.aiDataContract={time:1,iKey:1,name:1,sampleRate:function(){return a.sampleRate===100?4:1},tags:1,data:1},a}return e}(Ts)});var xi,Wa=I(()=>{xi=function(){function t(){this.ver=2,this.properties={},this.measurements={}}return t}()});var Ve,bs=I(()=>{ne();Wa();ct();lt();Ve=function(t){z(e,t);function e(r,n,i,a){var o=t.call(this)||this;return o.aiDataContract={ver:1,name:1,properties:0,measurements:0},o.name=oe(r,n)||le,o.properties=Be(r,i),o.measurements=He(r,a),o}return e.envelopeType="Microsoft.ApplicationInsights.{0}.Event",e.dataType="EventData",e}(xi)});var Ps,As=I(()=>{Ps=function(){function t(){}return t}()});var Ns,Ds=I(()=>{Ns=function(){function t(){this.ver=2,this.exceptions=[],this.properties={},this.measurements={}}return t}()});var ks,Fs=I(()=>{ks=function(){function t(){this.hasFullStack=!0,this.parsedStack=[]}return t}()});function Za(t,e){var r=t;return r&&!U(r)&&(JSON&&JSON.stringify?(r=JSON.stringify(t),e&&(!r||r==="{}")&&(B(t.toString)?r=t.toString():r=""+t)):r=""+t+" - (Missing JSON.stringify)"),r||""}function Us(t,e){var r=t;return t&&(r=t[Qa]||t[_s]||"",r&&!U(r)&&(r=Za(r,!0)),t.filename&&(r=r+" @"+(t.filename||"")+":"+(t.lineno||"?")+":"+(t.colno||"?"))),e&&e!=="String"&&e!=="Object"&&e!=="Error"&&(r||"").indexOf(e)===-1&&(r=e+": "+r),r||""}function fl(t){return st(t)?"hasFullStack"in t&&"typeName"in t:!1}function pl(t){return st(t)?"ver"in t&&"exceptions"in t&&"properties"in t:!1}function Ms(t){return t&&t.src&&U(t.src)&&t.obj&&Re(t.obj)}function Lr(t){var e=t||"";U(e)||(U(e[ft])?e=e[ft]:e=""+e);var r=e.split(`
`);return{src:e,obj:r}}function dl(t){for(var e=[],r=t.split(`
`),n=0;n<r.length;n++){var i=r[n];r[n+1]&&(i+="@"+r[n+1],n++),e.push(i)}return{src:t,obj:e}}function Os(t){var e=null;if(t)try{if(t[ft])e=Lr(t[ft]);else if(t[_r]&&t[_r][ft])e=Lr(t[_r][ft]);else if(t.exception&&t.exception[ft])e=Lr(t.exception[ft]);else if(Ms(t))e=t;else if(Ms(t[Ja]))e=t[Ja];else if(window.opera&&t[Qa])e=dl(t.message);else if(U(t))e=Lr(t);else{var r=t[Qa]||t[_s]||"";U(t[Rs])&&(r&&(r+=`
`),r+=" from "+t[Rs]),r&&(e=Lr(r))}}catch(n){e=Lr(n)}return e||{src:"",obj:null}}function ml(t){var e="";return t&&(t.obj?R(t.obj,function(r){e+=r+`
`}):e=t.src||""),e}function vl(t){var e,r=t.obj;if(r&&r.length>0){e=[];var n=0,i=0;R(r,function(E){var P=E.toString();if(Ya.regex.test(P)){var p=new Ya(P,n++);i+=p.sizeInBytes,e.push(p)}});var a=32*1024;if(i>a)for(var o=0,u=e.length-1,s=0,c=o,l=u;o<u;){var f=e[o].sizeInBytes,m=e[u].sizeInBytes;if(s+=f+m,s>a){var C=l-c+1;e.splice(c,C);break}c=o,l=u,o++,u--}}return e}function yi(t){var e="";if(t&&(e=t.typeName||t.name||"",!e))try{var r=/function (.{1,200})\(/,n=r.exec(t.constructor.toString());e=n&&n.length>1?n[1]:""}catch(i){}return e}function Xa(t){if(t)try{if(!U(t)){var e=yi(t),r=Za(t,!1);return(!r||r==="{}")&&(t[_r]&&(t=t[_r],e=yi(t)),r=Za(t,!0)),r.indexOf(e)!==0&&e!=="String"?e+":"+r:r}}catch(n){}return""+(t||"")}var ll,_r,ft,Ja,Rs,Qa,_s,he,Ls,Ya,zs=I(()=>{ne();As();Ds();Fs();ct();X();lt();ll="<no_method>",_r="error",ft="stack",Ja="stackDetails",Rs="errorSrc",Qa="message",_s="description";he=function(t){z(e,t);function e(r,n,i,a,o,u){var s=t.call(this)||this;return s.aiDataContract={ver:1,exceptions:1,severityLevel:0,properties:0,measurements:0},pl(n)?(s.exceptions=n.exceptions,s.properties=n.properties,s.measurements=n.measurements,n.severityLevel&&(s.severityLevel=n.severityLevel),n.id&&(s.id=n.id),n.problemGroup&&(s.problemGroup=n.problemGroup),s.ver=2,x(n.isManual)||(s.isManual=n.isManual)):(i||(i={}),s.exceptions=[new Ls(r,n,i)],s.properties=Be(r,i),s.measurements=He(r,a),o&&(s.severityLevel=o),u&&(s.id=u)),s}return e.CreateAutoException=function(r,n,i,a,o,u,s,c){var l=yi(o||u||r);return{message:Us(r,l),url:n,lineNumber:i,columnNumber:a,error:Xa(o||u||r),evt:Xa(u||r),typeName:l,stackDetails:Os(s||o||u),errorSrc:c}},e.CreateFromInterface=function(r,n,i,a){var o=n.exceptions&&qt(n.exceptions,function(s){return Ls.CreateFromInterface(r,s)}),u=new e(r,yt({},n,{exceptions:o}),i,a);return u},e.prototype.toInterface=function(){var r=this,n=r.exceptions,i=r.properties,a=r.measurements,o=r.severityLevel,u=r.ver,s=r.problemGroup,c=r.id,l=r.isManual,f=n instanceof Array&&qt(n,function(m){return m.toInterface()})||void 0;return{ver:"4.0",exceptions:f,severityLevel:o,properties:i,measurements:a,problemGroup:s,id:c,isManual:l}},e.CreateSimpleException=function(r,n,i,a,o,u){return{exceptions:[{hasFullStack:!0,message:r,stack:o,typeName:n}]}},e.envelopeType="Microsoft.ApplicationInsights.{0}.Exception",e.dataType="ExceptionData",e.formatError=Xa,e}(Ns),Ls=function(t){z(e,t);function e(r,n,i){var a=t.call(this)||this;if(a.aiDataContract={id:0,outerId:0,typeName:1,message:1,hasFullStack:0,stack:0,parsedStack:2},fl(n))a.typeName=n.typeName,a.message=n.message,a[ft]=n[ft],a.parsedStack=n.parsedStack,a.hasFullStack=n.hasFullStack;else{var o=n,u=o&&o.evt;Vt(o)||(o=o[_r]||u||o),a.typeName=oe(r,yi(o))||le,a.message=Dr(r,Us(n||o,a.typeName))||le;var s=n[Ja]||Os(n);a.parsedStack=vl(s),a[ft]=pi(r,ml(s)),a.hasFullStack=Re(a.parsedStack)&&a.parsedStack.length>0,i&&(i.typeName=i.typeName||a.typeName)}return a}return e.prototype.toInterface=function(){var r=this.parsedStack instanceof Array&&qt(this.parsedStack,function(i){return i.toInterface()}),n={id:this.id,outerId:this.outerId,typeName:this.typeName,message:this.message,hasFullStack:this.hasFullStack,stack:this[ft],parsedStack:r||void 0};return n},e.CreateFromInterface=function(r,n){var i=n.parsedStack instanceof Array&&qt(n.parsedStack,function(o){return Ya.CreateFromInterface(o)})||n.parsedStack,a=new e(r,yt({},n,{parsedStack:i}));return a},e}(ks),Ya=function(t){z(e,t);function e(r,n){var i=t.call(this)||this;if(i.sizeInBytes=0,i.aiDataContract={level:1,method:1,assembly:0,fileName:0,line:0},typeof r=="string"){var a=r;i.level=n,i.method=ll,i.assembly=se(a),i.fileName="",i.line=0;var o=a.match(e.regex);o&&o.length>=5&&(i.method=se(o[2])||i.method,i.fileName=se(o[4]),i.line=parseInt(o[5])||0)}else i.level=r.level,i.method=r.method,i.assembly=r.assembly,i.fileName=r.fileName,i.line=r.line,i.sizeInBytes=0;return i.sizeInBytes+=i.method.length,i.sizeInBytes+=i.fileName.length,i.sizeInBytes+=i.assembly.length,i.sizeInBytes+=e.baseSize,i.sizeInBytes+=i.level.toString().length,i.sizeInBytes+=i.line.toString().length,i}return e.CreateFromInterface=function(r){return new e(r,null)},e.prototype.toInterface=function(){return{level:this.level,method:this.method,assembly:this.assembly,fileName:this.fileName,line:this.line}},e.regex=/^([\s]+at)?[\s]{0,50}([^\@\()]+?)[\s]{0,50}(\@|\()([^\(\n]+):([0-9]+):([0-9]+)(\)?)$/,e.baseSize=58,e}(Ps)});var Bs,Hs=I(()=>{Bs=function(){function t(){this.ver=2,this.metrics=[],this.properties={},this.measurements={}}return t}()});var Si,Vs=I(()=>{(function(t){t[t.Measurement=0]="Measurement",t[t.Aggregation=1]="Aggregation"})(Si||(Si={}))});var qs,js=I(()=>{Vs();qs=function(){function t(){this.kind=Si.Measurement}return t}()});var Gs,Ks=I(()=>{ne();js();Gs=function(t){z(e,t);function e(){var r=t!==null&&t.apply(this,arguments)||this;return r.aiDataContract={name:1,kind:0,value:1,count:0,min:0,max:0,stdDev:0},r}return e}(qs)});var qe,Ws=I(()=>{ne();Hs();ct();Ks();lt();qe=function(t){z(e,t);function e(r,n,i,a,o,u,s,c){var l=t.call(this)||this;l.aiDataContract={ver:1,metrics:1,properties:0};var f=new Gs;return f.count=a>0?a:void 0,f.max=isNaN(u)||u===null?void 0:u,f.min=isNaN(o)||o===null?void 0:o,f.name=oe(r,n)||le,f.value=i,l.metrics=[f],l.properties=Be(r,s),l.measurements=He(r,c),l}return e.envelopeType="Microsoft.ApplicationInsights.{0}.Metric",e.dataType="MetricData",e}(Bs)});var vr,Ii=I(()=>{ne();Wa();vr=function(t){z(e,t);function e(){var r=t.call(this)||this;return r.ver=2,r.properties={},r.measurements={},r}return e}(xi)});var ke,Xs=I(()=>{ne();Ii();ct();pn();lt();ke=function(t){z(e,t);function e(r,n,i,a,o,u,s){var c=t.call(this)||this;return c.aiDataContract={ver:1,name:0,url:0,duration:0,properties:0,measurements:0,id:0},c.id=di(r,s),c.url=Tt(r,i),c.name=oe(r,n)||le,isNaN(a)||(c.duration=Ge(a)),c.properties=Be(r,o),c.measurements=He(r,u),c}return e.envelopeType="Microsoft.ApplicationInsights.{0}.Pageview",e.dataType="PageviewData",e}(vr)});var Js,Qs=I(()=>{Js=function(){function t(){this.ver=2,this.success=!0,this.properties={},this.measurements={}}return t}()});var je,Zs=I(()=>{ne();ct();qa();Qs();pn();je=function(t){z(e,t);function e(r,n,i,a,o,u,s,c,l,f,m,C){l===void 0&&(l="Ajax");var E=t.call(this)||this;E.aiDataContract={id:1,ver:1,name:0,resultCode:0,duration:0,success:0,data:0,target:0,type:0,properties:0,measurements:0,kind:0,value:0,count:0,min:0,max:0,stdDev:0,dependencyKind:0,dependencySource:0,commandName:0,dependencyTypeName:0},E.id=n,E.duration=Ge(o),E.success=u,E.resultCode=s+"",E.type=oe(r,l);var P=Is(r,i,c,a);return E.data=Tt(r,a)||P.data,E.target=oe(r,P.target),f&&(E.target=E.target+" | "+f),E.name=oe(r,P.name),E.properties=Be(r,m),E.measurements=He(r,C),E}return e.envelopeType="Microsoft.ApplicationInsights.{0}.RemoteDependency",e.dataType="RemoteDependencyData",e}(Js)});var Ys,$s=I(()=>{Ys=function(){function t(){this.ver=2,this.properties={},this.measurements={}}return t}()});var Qe,eu=I(()=>{ne();$s();ct();lt();Qe=function(t){z(e,t);function e(r,n,i,a,o){var u=t.call(this)||this;return u.aiDataContract={ver:1,message:1,severityLevel:0,properties:0},n=n||le,u.message=Dr(r,n),u.properties=Be(r,a),u.measurements=He(r,o),i&&(u.severityLevel=i),u}return e.envelopeType="Microsoft.ApplicationInsights.{0}.Message",e.dataType="MessageData",e}(Ys)});var tu,ru=I(()=>{ne();Ii();tu=function(t){z(e,t);function e(){var r=t.call(this)||this;return r.ver=2,r.properties={},r.measurements={},r}return e}(vr)});var Ze,nu=I(()=>{ne();ru();ct();lt();Ze=function(t){z(e,t);function e(r,n,i,a,o,u,s){var c=t.call(this)||this;return c.aiDataContract={ver:1,name:0,url:0,duration:0,perfTotal:0,networkConnect:0,sentRequest:0,receivedResponse:0,domProcessing:0,properties:0,measurements:0},c.url=Tt(r,i),c.name=oe(r,n)||le,c.properties=Be(r,o),c.measurements=He(r,u),s&&(c.domProcessing=s.domProcessing,c.duration=s.duration,c.networkConnect=s.networkConnect,c.perfTotal=s.perfTotal,c.receivedResponse=s.receivedResponse,c.sentRequest=s.sentRequest),c}return e.envelopeType="Microsoft.ApplicationInsights.{0}.PageviewPerformance",e.dataType="PageviewPerformanceData",e}(tu)});var xt,iu=I(()=>{ne();Ka();xt=function(t){z(e,t);function e(r,n){var i=t.call(this)||this;return i.aiDataContract={baseType:1,baseData:1},i.baseType=r,i.baseData=n,i}return e}(En)});var Ut,au=I(()=>{(function(t){t[t.Verbose=0]="Verbose",t[t.Information=1]="Information",t[t.Warning=2]="Warning",t[t.Error=3]="Error",t[t.Critical=4]="Critical"})(Ut||(Ut={}))});var $a,ou=I(()=>{X();$a=function(){function t(){}return t.getConfig=function(e,r,n,i){i===void 0&&(i=!1);var a;return n&&e.extensionConfig&&e.extensionConfig[n]&&!x(e.extensionConfig[n][r])?a=e.extensionConfig[n][r]:a=e[r],x(a)?i:a},t}()});function er(t){var e="ai."+t+".";return function(r){return e+r}}var bn,Pe,Ci,Ur,eo,$t,gr,Pn,hr,to=I(()=>{ne();X();bn=er("application"),Pe=er("device"),Ci=er("location"),Ur=er("operation"),eo=er("session"),$t=er("user"),gr=er("cloud"),Pn=er("internal"),hr=function(t){z(e,t);function e(){return t.call(this)||this}return e}(Xi({applicationVersion:bn("ver"),applicationBuild:bn("build"),applicationTypeId:bn("typeId"),applicationId:bn("applicationId"),applicationLayer:bn("layer"),deviceId:Pe("id"),deviceIp:Pe("ip"),deviceLanguage:Pe("language"),deviceLocale:Pe("locale"),deviceModel:Pe("model"),deviceFriendlyName:Pe("friendlyName"),deviceNetwork:Pe("network"),deviceNetworkName:Pe("networkName"),deviceOEMName:Pe("oemName"),deviceOS:Pe("os"),deviceOSVersion:Pe("osVersion"),deviceRoleInstance:Pe("roleInstance"),deviceRoleName:Pe("roleName"),deviceScreenResolution:Pe("screenResolution"),deviceType:Pe("type"),deviceMachineName:Pe("machineName"),deviceVMName:Pe("vmName"),deviceBrowser:Pe("browser"),deviceBrowserVersion:Pe("browserVersion"),locationIp:Ci("ip"),locationCountry:Ci("country"),locationProvince:Ci("province"),locationCity:Ci("city"),operationId:Ur("id"),operationName:Ur("name"),operationParentId:Ur("parentId"),operationRootId:Ur("rootId"),operationSyntheticSource:Ur("syntheticSource"),operationCorrelationVector:Ur("correlationVector"),sessionId:eo("id"),sessionIsFirst:eo("isFirst"),sessionIsNew:eo("isNew"),userAccountAcquisitionDate:$t("accountAcquisitionDate"),userAccountId:$t("accountId"),userAgent:$t("userAgent"),userId:$t("id"),userStoreRegion:$t("storeRegion"),userAuthUserId:$t("authUserId"),userAnonymousUserAcquisitionDate:$t("anonUserAcquisitionDate"),userAuthenticatedUserAcquisitionDate:$t("authUserAcquisitionDate"),cloudName:gr("name"),cloudRole:gr("role"),cloudRoleVer:gr("roleVer"),cloudRoleInstance:gr("roleInstance"),cloudEnvironment:gr("environment"),cloudLocation:gr("location"),cloudDeploymentUnit:gr("deploymentUnit"),internalNodeName:Pn("nodeName"),internalSdkVersion:Pn("sdkVersion"),internalAgentVersion:Pn("agentVersion"),internalSnippet:Pn("snippet"),internalSdkSrc:Pn("sdkSrc")}))});var tt,su=I(()=>{ct();X();lt();tt=function(){function t(){}return t.create=function(e,r,n,i,a,o){if(n=oe(i,n)||le,x(e)||x(r)||x(n))throw Error("Input doesn't contain all required fields");var u={name:n,time:Me(new Date),iKey:"",ext:o||{},tags:[],data:{},baseType:r,baseData:e};return x(a)||$(a,function(s,c){u.data[s]=c}),u},t}()});var Ue,re,uu=I(()=>{to();Ue={UserExt:"user",DeviceExt:"device",TraceExt:"trace",WebExt:"web",AppExt:"app",OSExt:"os",SessionExt:"ses",SDKExt:"sdk"},re=new hr});var Ot,Or,Ti,xe=I(()=>{qa();Cs();Na();lt();Ka();Ga();ws();bs();zs();Ws();Xs();Ii();Zs();eu();nu();iu();au();ou();to();ct();su();uu();Ma();pn();Ra();Oa();Ba();Ot="AppInsightsPropertiesPlugin",Or="AppInsightsChannelPlugin",Ti="ApplicationInsightsAnalytics"});var cu,lu=I(()=>{xe();X();Te();cu=function(){function t(e,r,n,i){W(t,this,function(a){var o=null,u=[],s=!1,c;n&&(c=n.logger);function l(){n&&R(n.getTransmissionControls(),function(m){R(m,function(C){return C.flush(!0)})})}function f(m){u.push(m),o||(o=setInterval(function(){var C=u.slice(0),E=!1;u=[],R(C,function(P){P()?E=!0:u.push(P)}),u.length===0&&(clearInterval(o),o=null),E&&l()},100))}a.trackPageView=function(m,C){var E=m.name;if(x(E)||typeof E!="string"){var P=De();E=m.name=P&&P.title||""}var p=m.uri;if(x(p)||typeof p!="string"){var g=$e();p=m.uri=g&&g.href||""}if(!i.isPerformanceTimingSupported()){e.sendPageViewInternal(m,C),l(),c.throwInternal(S.WARNING,h.NavigationTimingNotSupported,"trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.");return}var y=!1,w,L=i.getPerformanceTiming().navigationStart;L>0&&(w=ge(L,+new Date),i.shouldCollectDuration(w)||(w=void 0));var k;!x(C)&&!x(C.duration)&&(k=C.duration),(r||!isNaN(k))&&(isNaN(k)&&(C||(C={}),C.duration=w),e.sendPageViewInternal(m,C),l(),y=!0);var Q=6e4;C||(C={}),f(function(){var Se=!1;try{if(i.isPerformanceTimingDataReady()){Se=!0;var J={name:E,uri:p};i.populatePageViewPerformanceEvent(J),!J.isValid&&!y?(C.duration=w,e.sendPageViewInternal(m,C)):(y||(C.duration=J.durationMs,e.sendPageViewInternal(m,C)),s||(e.sendPageViewPerformanceInternal(J,C),s=!0))}else L>0&&ge(L,+new Date)>Q&&(Se=!0,y||(C.duration=Q,e.sendPageViewInternal(m,C)))}catch(me){c.throwInternal(S.CRITICAL,h.TrackPVFailedCalc,"trackPageView failed on page load calculation: "+G(me),{exception:O(me)})}return Se})}})}return t}()});var fu,gl,pu=I(()=>{xe();X();fu=function(){function t(e,r){this.prevPageVisitDataKeyName="prevPageVisitData",this.pageVisitTimeTrackingHandler=r,this._logger=e}return t.prototype.trackPreviousPageVisit=function(e,r){try{var n=this.restartPageVisitTimer(e,r);n&&this.pageVisitTimeTrackingHandler(n.pageName,n.pageUrl,n.pageVisitTime)}catch(i){this._logger.warnToConsole("Auto track page visit time failed, metric will not be collected: "+O(i))}},t.prototype.restartPageVisitTimer=function(e,r){try{var n=this.stopPageVisitTimer();return this.startPageVisitTimer(e,r),n}catch(i){return this._logger.warnToConsole("Call to restart failed: "+O(i)),null}},t.prototype.startPageVisitTimer=function(e,r){try{if(wt()){Zt(this._logger,this.prevPageVisitDataKeyName)!=null&&Ne("Cannot call startPageVisit consecutively without first calling stopPageVisit");var n=new gl(e,r),i=be().stringify(n);Yt(this._logger,this.prevPageVisitDataKeyName,i)}}catch(a){this._logger.warnToConsole("Call to start failed: "+O(a))}},t.prototype.stopPageVisitTimer=function(){try{if(wt()){var e=de(),r=Zt(this._logger,this.prevPageVisitDataKeyName);if(r&&gt()){var n=be().parse(r);return n.pageVisitTime=e-n.pageVisitStartTime,xn(this._logger,this.prevPageVisitDataKeyName),n}else return null}return null}catch(i){return this._logger.warnToConsole("Stop page visit timer failed: "+O(i)),null}},t}(),gl=function(){function t(e,r){this.pageVisitStartTime=de(),this.pageName=e,this.pageUrl=r}return t}()});var du,mu=I(()=>{xe();X();du=function(){function t(e){this.MAX_DURATION_ALLOWED=36e5,e&&(this._logger=e.logger)}return t.prototype.populatePageViewPerformanceEvent=function(e){e.isValid=!1;var r=this.getPerformanceNavigationTiming(),n=this.getPerformanceTiming(),i=0,a=0,o=0,u=0,s=0;(r||n)&&(r?(i=r.duration,a=r.startTime===0?r.connectEnd:ge(r.startTime,r.connectEnd),o=ge(r.requestStart,r.responseStart),u=ge(r.responseStart,r.responseEnd),s=ge(r.responseEnd,r.loadEventEnd)):(i=ge(n.navigationStart,n.loadEventEnd),a=ge(n.navigationStart,n.connectEnd),o=ge(n.requestStart,n.responseStart),u=ge(n.responseStart,n.responseEnd),s=ge(n.responseEnd,n.loadEventEnd)),i===0?this._logger.throwInternal(S.WARNING,h.ErrorPVCalc,"error calculating page view performance.",{total:i,network:a,request:o,response:u,dom:s}):this.shouldCollectDuration(i,a,o,u,s)?i<Math.floor(a)+Math.floor(o)+Math.floor(u)+Math.floor(s)?this._logger.throwInternal(S.WARNING,h.ClientPerformanceMathError,"client performance math error.",{total:i,network:a,request:o,response:u,dom:s}):(e.durationMs=i,e.perfTotal=e.duration=Ge(i),e.networkConnect=Ge(a),e.sentRequest=Ge(o),e.receivedResponse=Ge(u),e.domProcessing=Ge(s),e.isValid=!0):this._logger.throwInternal(S.WARNING,h.InvalidDurationValue,"Invalid page load duration value. Browser perf data won't be sent.",{total:i,network:a,request:o,response:u,dom:s}))},t.prototype.getPerformanceTiming=function(){return this.isPerformanceTimingSupported()?Je().timing:null},t.prototype.getPerformanceNavigationTiming=function(){return this.isPerformanceNavigationTimingSupported()?Je().getEntriesByType("navigation")[0]:null},t.prototype.isPerformanceNavigationTimingSupported=function(){var e=Je();return e&&e.getEntriesByType&&e.getEntriesByType("navigation").length>0},t.prototype.isPerformanceTimingSupported=function(){var e=Je();return e&&e.timing},t.prototype.isPerformanceTimingDataReady=function(){var e=Je(),r=e?e.timing:0;return r&&r.domainLookupStart>0&&r.navigationStart>0&&r.responseStart>0&&r.requestStart>0&&r.loadEventEnd>0&&r.responseEnd>0&&r.connectEnd>0&&r.domLoading>0},t.prototype.shouldCollectDuration=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var n=_e()||{},i=["googlebot","adsbot-google","apis-google","mediapartners-google"],a=n.userAgent,o=!1;if(a)for(var u=0;u<i.length;u++)o=o||a.toLowerCase().indexOf(i[u])!==-1;if(o)return!1;for(var u=0;u<e.length;u++)if(e[u]<0||e[u]>=this.MAX_DURATION_ALLOWED)return!1;return!0},t}()});function An(t,e){t&&t.dispatchEvent&&e&&t.dispatchEvent(e)}var vu,ro,Nn,gu,hu=I(()=>{ne();xe();X();lu();pu();mu();Te();vu="duration",ro="event";Nn=function(t){z(e,t);function e(){var r=t.call(this)||this;r.identifier=Ti,r.priority=180,r.autoRoutePVDelay=500;var n,i,a,o=0,u,s;return W(e,r,function(c,l){var f=$e(!0);u=f&&f.href||"",c.getCookieMgr=function(){return cr(c.core)},c.processTelemetry=function(p,g){ut(c.core,function(){return c.identifier+":processTelemetry"},function(){var y=!1,w=c._telemetryInitializers.length;g=c._getTelCtx(g);for(var L=0;L<w;++L){var k=c._telemetryInitializers[L];if(k)try{if(k.apply(null,[p])===!1){y=!0;break}}catch(Q){g.diagLog().throwInternal(S.CRITICAL,h.TelemetryInitializerFailed,"One of telemetry initializers failed, telemetry item will not be sent: "+G(Q),{exception:O(Q)},!0)}}y||c.processNext(p,g)},function(){return{item:p}},!p.sync)},c.trackEvent=function(p,g){try{var y=tt.create(p,Ve.dataType,Ve.envelopeType,c.diagLog(),g);c.core.track(y)}catch(w){c.diagLog().throwInternal(S.WARNING,h.TrackTraceFailed,"trackTrace failed, trace will not be collected: "+G(w),{exception:O(w)})}},c.startTrackEvent=function(p){try{n.start(p)}catch(g){c.diagLog().throwInternal(S.CRITICAL,h.StartTrackEventFailed,"startTrackEvent failed, event will not be collected: "+G(g),{exception:O(g)})}},c.stopTrackEvent=function(p,g,y){try{n.stop(p,void 0,g)}catch(w){c.diagLog().throwInternal(S.CRITICAL,h.StopTrackEventFailed,"stopTrackEvent failed, event will not be collected: "+G(w),{exception:O(w)})}},c.trackTrace=function(p,g){try{var y=tt.create(p,Qe.dataType,Qe.envelopeType,c.diagLog(),g);c.core.track(y)}catch(w){c.diagLog().throwInternal(S.WARNING,h.TrackTraceFailed,"trackTrace failed, trace will not be collected: "+G(w),{exception:O(w)})}},c.trackMetric=function(p,g){try{var y=tt.create(p,qe.dataType,qe.envelopeType,c.diagLog(),g);c.core.track(y)}catch(w){c.diagLog().throwInternal(S.CRITICAL,h.TrackMetricFailed,"trackMetric failed, metric will not be collected: "+G(w),{exception:O(w)})}},c.trackPageView=function(p,g){try{var y=p||{};c._pageViewManager.trackPageView(y,yt({},y.properties,y.measurements,g)),c.config.autoTrackPageVisitTime&&c._pageVisitTimeManager.trackPreviousPageVisit(y.name,y.uri)}catch(w){c.diagLog().throwInternal(S.CRITICAL,h.TrackPVFailed,"trackPageView failed, page view will not be collected: "+G(w),{exception:O(w)})}},c.sendPageViewInternal=function(p,g,y){var w=De();w&&(p.refUri=p.refUri===void 0?w.referrer:p.refUri);var L=tt.create(p,ke.dataType,ke.envelopeType,c.diagLog(),g,y);c.core.track(L),o=0},c.sendPageViewPerformanceInternal=function(p,g,y){var w=tt.create(p,Ze.dataType,Ze.envelopeType,c.diagLog(),g,y);c.core.track(w)},c.trackPageViewPerformance=function(p,g){try{c._pageViewPerformanceManager.populatePageViewPerformanceEvent(p),c.sendPageViewPerformanceInternal(p,g)}catch(y){c.diagLog().throwInternal(S.CRITICAL,h.TrackPVFailed,"trackPageViewPerformance failed, page view will not be collected: "+G(y),{exception:O(y)})}},c.startTrackPage=function(p){try{if(typeof p!="string"){var g=De();p=g&&g.title||""}i.start(p)}catch(y){c.diagLog().throwInternal(S.CRITICAL,h.StartTrackFailed,"startTrackPage failed, page view may not be collected: "+G(y),{exception:O(y)})}},c.stopTrackPage=function(p,g,y,w){try{if(typeof p!="string"){var L=De();p=L&&L.title||""}if(typeof g!="string"){var k=$e();g=k&&k.href||""}i.stop(p,g,y,w),c.config.autoTrackPageVisitTime&&c._pageVisitTimeManager.trackPreviousPageVisit(p,g)}catch(Q){c.diagLog().throwInternal(S.CRITICAL,h.StopTrackFailed,"stopTrackPage failed, page view will not be collected: "+G(Q),{exception:O(Q)})}},c.sendExceptionInternal=function(p,g,y){var w=p.exception||p.error||new Error(le),L=new he(c.diagLog(),w,p.properties||g,p.measurements,p.severityLevel,p.id).toInterface(),k=tt.create(L,he.dataType,he.envelopeType,c.diagLog(),g,y);c.core.track(k)},c.trackException=function(p,g){try{c.sendExceptionInternal(p,g)}catch(y){c.diagLog().throwInternal(S.CRITICAL,h.TrackExceptionFailed,"trackException failed, exception will not be collected: "+G(y),{exception:O(y)})}},c._onerror=function(p){var g=p&&p.error,y=p&&p.evt;try{if(!y){var w=It();w&&(y=w[ro])}var L=p&&p.url||(De()||{}).URL,k=p.errorSrc||"window.onerror@"+L+":"+(p.lineNumber||0)+":"+(p.columnNumber||0),Q={errorSrc:k,url:L,lineNumber:p.lineNumber||0,columnNumber:p.columnNumber||0,message:p.message};fn(p.message,p.url,p.lineNumber,p.columnNumber,p.error)?P(he.CreateAutoException("Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.",L,p.lineNumber||0,p.columnNumber||0,g,y,null,k),Q):(p.errorSrc||(p.errorSrc=k),c.trackException({exception:p,severityLevel:Ut.Error},Q))}catch(J){var Se=g?g.name+", "+g.message:"null";c.diagLog().throwInternal(S.CRITICAL,h.ExceptionWhileLoggingError,"_onError threw exception while logging error, error will not be collected: "+G(J),{exception:O(J),errorString:Se})}},c.addTelemetryInitializer=function(p){c._telemetryInitializers.push(p)},c.initialize=function(p,g,y,w){if(!c.isInitialized()){if(x(g))throw Error("Error initializing");l.initialize(p,g,y,w),c.setInitialized(!1);var L=c._getTelCtx(),k=c.identifier;c.config=L.getExtCfg(k);var Q=e.getDefaultConfig(p);Q!==void 0&&$(Q,function(A,H){c.config[A]=L.getConfig(k,A,H),c.config[A]===void 0&&(c.config[A]=H)}),c.config.isStorageUseDisabled&&mn();var Se={instrumentationKey:function(){return p.instrumentationKey},accountId:function(){return c.config.accountId||p.accountId},sessionRenewalMs:function(){return c.config.sessionRenewalMs||p.sessionRenewalMs},sessionExpirationMs:function(){return c.config.sessionExpirationMs||p.sessionExpirationMs},sampleRate:function(){return c.config.samplingPercentage||p.samplingPercentage},sdkExtension:function(){return c.config.sdkExtension||p.sdkExtension},isBrowserLinkTrackingEnabled:function(){return c.config.isBrowserLinkTrackingEnabled||p.isBrowserLinkTrackingEnabled},appId:function(){return c.config.appId||p.appId}};c._pageViewPerformanceManager=new du(c.core),c._pageViewManager=new cu(r,c.config.overridePageViewDuration,c.core,c._pageViewPerformanceManager),c._pageVisitTimeManager=new fu(c.diagLog(),function(A,H,_){return m(A,H,_)}),c._telemetryInitializers=c._telemetryInitializers||[],C(Se),n=new gu(c.diagLog(),"trackEvent"),n.action=function(A,H,_,j){j||(j={}),j[vu]=_.toString(),c.trackEvent({name:A,properties:j})},i=new gu(c.diagLog(),"trackPageView"),i.action=function(A,H,_,j,Z){x(j)&&(j={}),j[vu]=_.toString();var ie={name:A,uri:H,properties:j,measurements:Z};c.sendPageViewInternal(ie,j)};var J=It(),me=$i(),Ae=$e(!0),pt=r;if(c.config.disableExceptionTracking===!1&&!c.config.autoExceptionInstrumented&&J){var it="onerror",dt=J[it];J.onerror=function(A,H,_,j,Z){var ie=J[ro],zt=dt&&dt(A,H,_,j,Z);return zt!==!0&&pt._onerror(he.CreateAutoException(A,H,_,j,Z,ie)),zt},c.config.autoExceptionInstrumented=!0}if(c.config.disableExceptionTracking===!1&&c.config.enableUnhandledPromiseRejectionTracking===!0&&!c.config.autoUnhandledPromiseInstrumented&&J){var d="onunhandledrejection",T=J[d];J[d]=function(A){var H=J[ro],_=T&&T.call(J,A);return _!==!0&&pt._onerror(he.CreateAutoException(A.reason.toString(),Ae?Ae.href:"",0,0,A,H)),_},c.config.autoUnhandledPromiseInstrumented=!0}if(c.config.enableAutoRouteTracking===!0&&me&&B(me.pushState)&&B(me.replaceState)&&J&&typeof Event!="undefined"){var N=r;R(y,function(A){A.identifier===Ot&&(a=A)}),me.pushState=function(A){return function(){var _=A.apply(this,arguments);return An(J,Lt(N.config.namePrefix+"pushState")),An(J,Lt(N.config.namePrefix+"locationchange")),_}}(me.pushState),me.replaceState=function(A){return function(){var _=A.apply(this,arguments);return An(J,Lt(N.config.namePrefix+"replaceState")),An(J,Lt(N.config.namePrefix+"locationchange")),_}}(me.replaceState),J.addEventListener&&(J.addEventListener(N.config.namePrefix+"popstate",function(){An(J,Lt(N.config.namePrefix+"locationchange"))}),J.addEventListener(N.config.namePrefix+"locationchange",function(){if(a&&a.context&&a.context.telemetryTrace){a.context.telemetryTrace.traceID=ze();var A="_unknown_";Ae&&Ae.pathname&&(A=Ae.pathname+(Ae.hash||"")),a.context.telemetryTrace.name=A}s&&(u=s),s=Ae&&Ae.href||"",setTimeout(function(H){N.trackPageView({refUri:H,properties:{duration:0}})}.bind(r,u),N.autoRoutePVDelay)}))}c.setInitialized(!0)}};function m(p,g,y){var w={PageName:p,PageUrl:g};c.trackMetric({name:"PageVisitTime",average:y,max:y,min:y,sampleCount:1},w)}function C(p){if(!p.isBrowserLinkTrackingEnabled()){var g=["/browserLinkSignalR/","/__browserLink/"],y=function(w){if(w.baseType===je.dataType){var L=w.baseData;if(L){for(var k=0;k<g.length;k++)if(L.target&&L.target.indexOf(g[k])>=0)return!1}}return!0};E(y)}}function E(p){c._telemetryInitializers.push(p)}function P(p,g){var y=tt.create(p,he.dataType,he.envelopeType,c.diagLog(),g);c.core.track(y)}}),r}return e.getDefaultConfig=function(r){return r||(r={}),r.sessionRenewalMs=30*60*1e3,r.sessionExpirationMs=24*60*60*1e3,r.disableExceptionTracking=ee(r.disableExceptionTracking),r.autoTrackPageVisitTime=ee(r.autoTrackPageVisitTime),r.overridePageViewDuration=ee(r.overridePageViewDuration),r.enableUnhandledPromiseRejectionTracking=ee(r.enableUnhandledPromiseRejectionTracking),(isNaN(r.samplingPercentage)||r.samplingPercentage<=0||r.samplingPercentage>=100)&&(r.samplingPercentage=100),r.isStorageUseDisabled=ee(r.isStorageUseDisabled),r.isBrowserLinkTrackingEnabled=ee(r.isBrowserLinkTrackingEnabled),r.enableAutoRouteTracking=ee(r.enableAutoRouteTracking),r.namePrefix=r.namePrefix||"",r.enableDebug=ee(r.enableDebug),r.disableFlushOnBeforeUnload=ee(r.disableFlushOnBeforeUnload),r.disableFlushOnUnload=ee(r.disableFlushOnUnload,r.disableFlushOnBeforeUnload),r},e.Version="2.6.4",e}(et),gu=function(){function t(e,r){var n=this,i={};n.start=function(a){typeof i[a]!="undefined"&&e.throwInternal(S.WARNING,h.StartCalledMoreThanOnce,"start was called more than once for this event without calling stop.",{name:a,key:a},!0),i[a]=+new Date},n.stop=function(a,o,u,s){var c=i[a];if(isNaN(c))e.throwInternal(S.WARNING,h.StopCalledWithoutStart,"stop was called without a corresponding start.",{name:a,key:a},!0);else{var l=+new Date,f=ge(c,l);n.action(a,o,f,u,s)}delete i[a],i[a]=void 0}}return t}()});var no=I(()=>{hu()});var xu,yu,Su=I(()=>{xe();X();Te();xu=function(){function t(e){var r=[];W(t,this,function(n){n.enqueue=function(i){r.push(i)},n.count=function(){return r.length},n.clear=function(){r.length=0},n.getItems=function(){return r.slice(0)},n.batchPayloads=function(i){if(i&&i.length>0){var a=e.emitLineDelimitedJson()?i.join(`
`):"["+i.join(",")+"]";return a}return null},n.markAsSent=function(i){n.clear()},n.clearSent=function(i){}})}return t}(),yu=function(){function t(e,r){var n=!1,i;W(t,this,function(a){var o=c(t.BUFFER_KEY),u=c(t.SENT_BUFFER_KEY);i=o.concat(u),i.length>t.MAX_BUFFER_SIZE&&(i.length=t.MAX_BUFFER_SIZE),l(t.SENT_BUFFER_KEY,[]),l(t.BUFFER_KEY,i),a.enqueue=function(f){if(i.length>=t.MAX_BUFFER_SIZE){n||(e.throwInternal(S.WARNING,h.SessionStorageBufferFull,"Maximum buffer size reached: "+i.length,!0),n=!0);return}i.push(f),l(t.BUFFER_KEY,i)},a.count=function(){return i.length},a.clear=function(){i=[],l(t.BUFFER_KEY,[]),l(t.SENT_BUFFER_KEY,[]),n=!1},a.getItems=function(){return i.slice(0)},a.batchPayloads=function(f){if(f&&f.length>0){var m=r.emitLineDelimitedJson()?f.join(`
`):"["+f.join(",")+"]";return m}return null},a.markAsSent=function(f){i=s(f,i),l(t.BUFFER_KEY,i);var m=c(t.SENT_BUFFER_KEY);m instanceof Array&&f instanceof Array&&(m=m.concat(f),m.length>t.MAX_BUFFER_SIZE&&(e.throwInternal(S.CRITICAL,h.SessionStorageBufferFull,"Sent buffer reached its maximum size: "+m.length,!0),m.length=t.MAX_BUFFER_SIZE),l(t.SENT_BUFFER_KEY,m))},a.clearSent=function(f){var m=c(t.SENT_BUFFER_KEY);m=s(f,m),l(t.SENT_BUFFER_KEY,m)};function s(f,m){var C=[];return R(m,function(E){!B(E)&&Dt(f,E)===-1&&C.push(E)}),C}function c(f){var m=f;try{m=r.namePrefix&&r.namePrefix()?r.namePrefix()+"_"+m:m;var C=Zt(e,m);if(C){var E=be().parse(C);if(U(E)&&(E=be().parse(E)),E&&Re(E))return E}}catch(P){e.throwInternal(S.CRITICAL,h.FailedToRestoreStorageBuffer," storage key: "+m+", "+G(P),{exception:O(P)})}return[]}function l(f,m){var C=f;try{C=r.namePrefix&&r.namePrefix()?r.namePrefix()+"_"+C:C;var E=JSON.stringify(m);Yt(e,C,E)}catch(P){Yt(e,C,JSON.stringify([])),e.throwInternal(S.WARNING,h.FailedToSetStorageBuffer," storage key: "+C+", "+G(P)+". Buffer cleared",{exception:O(P)})}}})}return t.BUFFER_KEY="AI_buffer",t.SENT_BUFFER_KEY="AI_sentBuffer",t.MAX_BUFFER_SIZE=2e3,t}()});function ye(t,e,r){return K(t,e,r,Pr)}var io,ue,Fe,Iu,fe,Cu,ao,Tu,Eu,wu,bu,Pu,Au=I(()=>{ne();xe();X();io="baseType",ue="baseData",Fe="properties",Iu="true";fe=function(){function t(){}return t.extractPropsAndMeasurements=function(e,r,n){x(e)||$(e,function(i,a){ir(a)?n[i]=a:U(a)?r[i]=a:gt()&&(r[i]=be().stringify(a))})},t.createEnvelope=function(e,r,n,i){var a=new wn(e,i,r);ye(a,"sampleRate",n[lr]),(n[ue]||{}).startTime&&(a.time=Me(n[ue].startTime)),a.iKey=n.iKey;var o=n.iKey.replace(/-/g,"");return a.name=a.name.replace("{0}",o),t.extractPartAExtensions(n,a),n.tags=n.tags||[],Qn(a)},t.extractPartAExtensions=function(e,r){var n=r.tags=r.tags||{},i=e.ext=e.ext||{},a=e.tags=e.tags||[],o=i.user;o&&(ye(n,re.userAuthUserId,o.authId),ye(n,re.userId,o.id||o.localId));var u=i.app;u&&ye(n,re.sessionId,u.sesId);var s=i.device;s&&(ye(n,re.deviceId,s.id||s.localId),ye(n,re.deviceType,s.deviceClass),ye(n,re.deviceIp,s.ip),ye(n,re.deviceModel,s.model),ye(n,re.deviceType,s.deviceType));var c=e.ext.web;if(c){ye(n,re.deviceLanguage,c.browserLang),ye(n,re.deviceBrowserVersion,c.browserVer),ye(n,re.deviceBrowser,c.browser);var l=r.data=r.data||{},f=l[ue]=l[ue]||{},m=f[Fe]=f[Fe]||{};ye(m,"domain",c.domain),ye(m,"isManual",c.isManual?Iu:null),ye(m,"screenRes",c.screenRes),ye(m,"userConsent",c.userConsent?Iu:null)}var C=i.os;C&&ye(n,re.deviceOS,C.name);var E=i.trace;E&&(ye(n,re.operationParentId,E.parentID),ye(n,re.operationName,E.name),ye(n,re.operationId,E.traceID));for(var P={},p=a.length-1;p>=0;p--){var g=a[p];$(g,function(w,L){P[w]=L}),a.splice(p,1)}$(a,function(w,L){P[w]=L});var y=yt({},n,P);y[re.internalSdkVersion]||(y[re.internalSdkVersion]="javascript:"+t.Version),r.tags=Qn(y)},t.prototype.Init=function(e,r){this._logger=e,x(r[ue])&&this._logger.throwInternal(S.CRITICAL,h.TelemetryEnvelopeInvalid,"telemetryItem.baseData cannot be null.")},t.Version="2.6.4",t}(),Cu=function(t){z(e,t);function e(){return t!==null&&t.apply(this,arguments)||this}return e.prototype.Create=function(r,n){t.prototype.Init.call(this,r,n);var i=n[ue].measurements||{},a=n[ue][Fe]||{};fe.extractPropsAndMeasurements(n.data,a,i);var o=n[ue];if(x(o))return r.warnToConsole("Invalid input for dependency data"),null;var u=o[Fe]&&o[Fe][Fr]?o[Fe][Fr]:"GET",s=new je(r,o.id,o.target,o.name,o.duration,o.success,o.responseCode,u,o.type,o.correlationContext,a,i),c=new xt(je.dataType,s);return fe.createEnvelope(r,je.envelopeType,n,c)},e.DependencyEnvelopeCreator=new e,e}(fe),ao=function(t){z(e,t);function e(){return t!==null&&t.apply(this,arguments)||this}return e.prototype.Create=function(r,n){t.prototype.Init.call(this,r,n);var i={},a={};n[io]!==Ve.dataType&&(i.baseTypeSource=n[io]),n[io]===Ve.dataType?(i=n[ue][Fe]||{},a=n[ue].measurements||{}):n[ue]&&fe.extractPropsAndMeasurements(n[ue],i,a),fe.extractPropsAndMeasurements(n.data,i,a);var o=n[ue].name,u=new Ve(r,o,i,a),s=new xt(Ve.dataType,u);return fe.createEnvelope(r,Ve.envelopeType,n,s)},e.EventEnvelopeCreator=new e,e}(fe),Tu=function(t){z(e,t);function e(){return t!==null&&t.apply(this,arguments)||this}return e.prototype.Create=function(r,n){t.prototype.Init.call(this,r,n);var i=n[ue].measurements||{},a=n[ue][Fe]||{};fe.extractPropsAndMeasurements(n.data,a,i);var o=n[ue],u=he.CreateFromInterface(r,o,a,i),s=new xt(he.dataType,u);return fe.createEnvelope(r,he.envelopeType,n,s)},e.ExceptionEnvelopeCreator=new e,e}(fe),Eu=function(t){z(e,t);function e(){return t!==null&&t.apply(this,arguments)||this}return e.prototype.Create=function(r,n){t.prototype.Init.call(this,r,n);var i=n[ue],a=i[Fe]||{},o=i.measurements||{};fe.extractPropsAndMeasurements(n.data,a,o);var u=new qe(r,i.name,i.average,i.sampleCount,i.min,i.max,a,o),s=new xt(qe.dataType,u);return fe.createEnvelope(r,qe.envelopeType,n,s)},e.MetricEnvelopeCreator=new e,e}(fe),wu=function(t){z(e,t);function e(){return t!==null&&t.apply(this,arguments)||this}return e.prototype.Create=function(r,n){t.prototype.Init.call(this,r,n);var i="duration",a,o=n[ue];!x(o)&&!x(o[Fe])&&!x(o[Fe][i])?(a=o[Fe][i],delete o[Fe][i]):!x(n.data)&&!x(n.data[i])&&(a=n.data[i],delete n.data[i]);var u=n[ue],s;((n.ext||{}).trace||{}).traceID&&(s=n.ext.trace.traceID);var c=u.id||s,l=u.name,f=u.uri,m=u[Fe]||{},C=u.measurements||{};if(x(u.refUri)||(m.refUri=u.refUri),x(u.pageType)||(m.pageType=u.pageType),x(u.isLoggedIn)||(m.isLoggedIn=u.isLoggedIn.toString()),!x(u[Fe])){var E=u[Fe];$(E,function(g,y){m[g]=y})}fe.extractPropsAndMeasurements(n.data,m,C);var P=new ke(r,l,f,a,m,C,c),p=new xt(ke.dataType,P);return fe.createEnvelope(r,ke.envelopeType,n,p)},e.PageViewEnvelopeCreator=new e,e}(fe),bu=function(t){z(e,t);function e(){return t!==null&&t.apply(this,arguments)||this}return e.prototype.Create=function(r,n){t.prototype.Init.call(this,r,n);var i=n[ue],a=i.name,o=i.uri||i.url,u=i[Fe]||{},s=i.measurements||{};fe.extractPropsAndMeasurements(n.data,u,s);var c=new Ze(r,a,o,void 0,u,s,i),l=new xt(Ze.dataType,c);return fe.createEnvelope(r,Ze.envelopeType,n,l)},e.PageViewPerformanceEnvelopeCreator=new e,e}(fe),Pu=function(t){z(e,t);function e(){return t!==null&&t.apply(this,arguments)||this}return e.prototype.Create=function(r,n){t.prototype.Init.call(this,r,n);var i=n[ue].message,a=n[ue].severityLevel,o=n[ue][Fe]||{},u=n[ue].measurements||{};fe.extractPropsAndMeasurements(n.data,o,u);var s=new Qe(r,i,a,o,u),c=new xt(Qe.dataType,s);return fe.createEnvelope(r,Qe.envelopeType,n,c)},e.TraceEnvelopeCreator=new e,e}(fe)});var Nu,Du=I(()=>{X();Te();Nu=function(){function t(e){W(t,this,function(r){r.serialize=function(o){var u=n(o,"root");try{return be().stringify(u)}catch(s){e.throwInternal(S.CRITICAL,h.CannotSerializeObject,s&&B(s.toString)?s.toString():"Error serializing object",null,!0)}};function n(o,u){var s="__aiCircularRefCheck",c={};if(!o)return e.throwInternal(S.CRITICAL,h.CannotSerializeObject,"cannot serialize object because it is null or undefined",{name:u},!0),c;if(o[s])return e.throwInternal(S.WARNING,h.CircularReferenceDetected,"Circular reference detected while serializing object",{name:u},!0),c;if(!o.aiDataContract){if(u==="measurements")c=a(o,"number",u);else if(u==="properties")c=a(o,"string",u);else if(u==="tags")c=a(o,"string",u);else if(Re(o))c=i(o,u);else{e.throwInternal(S.WARNING,h.CannotSerializeObjectNonSerializable,"Attempting to serialize an object which does not implement ISerializable",{name:u},!0);try{be().stringify(o),c=o}catch(l){e.throwInternal(S.CRITICAL,h.CannotSerializeObject,l&&B(l.toString)?l.toString():"Error serializing object",null,!0)}}return c}return o[s]=!0,$(o.aiDataContract,function(l,f){var m=B(f)?f()&1:f&1,C=B(f)?f()&4:f&4,E=f&2,P=o[l]!==void 0,p=st(o[l])&&o[l]!==null;if(m&&!P&&!E)e.throwInternal(S.CRITICAL,h.MissingRequiredFieldSpecification,"Missing required field specification. The field is required but not present on source",{field:l,name:u});else if(!C){var g=void 0;p?E?g=i(o[l],l):g=n(o[l],l):g=o[l],g!==void 0&&(c[l]=g)}}),delete o[s],c}function i(o,u){var s;if(o)if(!Re(o))e.throwInternal(S.CRITICAL,h.ItemNotInArray,`This field was specified as an array in the contract but the item is not an array.\r
`,{name:u},!0);else{s=[];for(var c=0;c<o.length;c++){var l=o[c],f=n(l,u+"["+c+"]");s.push(f)}}return s}function a(o,u,s){var c;return o&&(c={},$(o,function(l,f){if(u==="string")f===void 0?c[l]="undefined":f===null?c[l]="null":f.toString?c[l]=f.toString():c[l]="invalid field: toString() is not defined.";else if(u==="number")if(f===void 0)c[l]="undefined";else if(f===null)c[l]="null";else{var m=parseFloat(f);isNaN(m)?c[l]="NaN":c[l]=m}else c[l]="invalid field: "+s+" is of unknown type.",e.throwInternal(S.CRITICAL,c[l],null,!0)})),c}})}return t}()});var hl,oo,ku=I(()=>{X();Te();hl=function(){function t(){var e=It(),r=De(),n=!1,i=!0;W(t,this,function(a){try{if(e&&Xt.Attach(e,"online",s)&&(Xt.Attach(e,"offline",c),n=!0),r){var o=r.body||r;pe(o.ononline)||(o.ononline=s,o.onoffline=c,n=!0)}if(n){var u=_e();u&&!x(u.onLine)&&(i=u.onLine)}}catch(l){n=!1}a.isListening=n,a.isOnline=function(){var l=!0,f=_e();return n?l=i:f&&!x(f.onLine)&&(l=f.onLine),l},a.isOffline=function(){return!a.isOnline()};function s(){i=!0}function c(){i=!1}})}return t.Offline=new t,t}(),oo=hl.Offline});var Fu,Ru=I(()=>{Fu=function(){function t(){}return t.prototype.getHashCodeScore=function(e){var r=this.getHashCode(e)/t.INT_MAX_VALUE;return r*100},t.prototype.getHashCode=function(e){if(e==="")return 0;for(;e.length<t.MIN_INPUT_LENGTH;)e=e.concat(e);for(var r=5381,n=0;n<e.length;++n)r=(r<<5)+r+e.charCodeAt(n),r=r&r;return Math.abs(r)},t.INT_MAX_VALUE=2147483647,t.MIN_INPUT_LENGTH=8,t}()});var Mu,Lu=I(()=>{Ru();xe();Mu=function(){function t(){this.hashCodeGeneragor=new Fu,this.keys=new hr}return t.prototype.getSamplingScore=function(e){var r=0;return e.tags&&e.tags[this.keys.userId]?r=this.hashCodeGeneragor.getHashCodeScore(e.tags[this.keys.userId]):e.ext&&e.ext.user&&e.ext.user.id?r=this.hashCodeGeneragor.getHashCodeScore(e.ext.user.id):e.tags&&e.tags[this.keys.operationId]?r=this.hashCodeGeneragor.getHashCodeScore(e.tags[this.keys.operationId]):e.ext&&e.ext.telemetryTrace&&e.ext.telemetryTrace.traceID?r=this.hashCodeGeneragor.getHashCodeScore(e.ext.telemetryTrace.traceID):r=Math.random()*100,r},t}()});var _u,Uu=I(()=>{Lu();xe();X();_u=function(){function t(e,r){this.INT_MAX_VALUE=2147483647,this._logger=r||Ft(null),(e>100||e<0)&&(this._logger.throwInternal(S.WARNING,h.SampleRateOutOfRange,"Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.",{samplingRate:e},!0),e=100),this.sampleRate=e,this.samplingScoreGenerator=new Mu}return t.prototype.isSampledIn=function(e){var r=this.sampleRate,n=!1;return r==null||r>=100||e.baseType===qe.dataType?!0:(n=this.samplingScoreGenerator.getSamplingScore(e)<r,n)},t}()});function Ei(t){try{return t.responseText}catch(e){}return null}var Dn,Ou=I(()=>{ne();Su();Au();Du();xe();X();ku();Uu();Te();Dn=function(t){z(e,t);function e(){var r=t.call(this)||this;r.priority=1001,r.identifier=Or,r._XMLHttpRequestSupported=!1;var n,i,a,o,u,s,c={};return W(e,r,function(l,f){function m(){Ne("Method not implemented.")}l.pause=m,l.resume=m,l.flush=function(){try{l.triggerSend(!0,null,1)}catch(d){l.diagLog().throwInternal(S.CRITICAL,h.FlushFailed,"flush failed, telemetry will not be collected: "+G(d),{exception:O(d)})}},l.onunloadFlush=function(){if((l._senderConfig.onunloadDisableBeacon()===!1||l._senderConfig.isBeaconApiDisabled()===!1)&&kr())try{l.triggerSend(!0,p,2)}catch(d){l.diagLog().throwInternal(S.CRITICAL,h.FailedToSendQueuedTelemetry,"failed to flush with beacon sender on page unload, telemetry will not be collected: "+G(d),{exception:O(d)})}else l.flush()},l.teardown=m,l.addHeader=function(d,T){c[d]=T},l.initialize=function(d,T,N,A){f.initialize(d,T,N,A);var H=l._getTelCtx(),_=l.identifier;u=new Nu(T.logger),n=0,i=null,a=0,l._sender=null,s=0;var j=e._getDefaultAppInsightsChannelConfig();if(l._senderConfig=e._getEmptyAppInsightsChannelConfig(),$(j,function(v,b){l._senderConfig[v]=function(){return H.getConfig(_,v,b())}}),l._buffer=l._senderConfig.enableSessionStorageBuffer()&&wt()?new yu(l.diagLog(),l._senderConfig):new xu(l._senderConfig),l._sample=new _u(l._senderConfig.samplingPercentage(),l.diagLog()),dt(d)||l.diagLog().throwInternal(S.CRITICAL,h.InvalidInstrumentationKey,"Invalid Instrumentation key "+d.instrumentationKey),!Mr(l._senderConfig.endpointUrl())&&l._senderConfig.customHeaders()&&l._senderConfig.customHeaders().length>0&&R(l._senderConfig.customHeaders(),function(v){r.addHeader(v.header,v.value)}),!l._senderConfig.isBeaconApiDisabled()&&kr())l._sender=p;else{var Z=we("XMLHttpRequest");if(Z){var ie=new Z;"withCredentials"in ie?(l._sender=g,l._XMLHttpRequestSupported=!0):typeof XDomainRequest!==Oe&&(l._sender=me)}else{var zt=we("fetch");zt&&(l._sender=y)}}},l.processTelemetry=function(d,T){T=l._getTelCtx(T);try{if(l._senderConfig.disableTelemetry())return;if(!d){T.diagLog().throwInternal(S.CRITICAL,h.CannotSendEmptyTelemetry,"Cannot send empty telemetry");return}if(d.baseData&&!d.baseType){T.diagLog().throwInternal(S.CRITICAL,h.InvalidEvent,"Cannot send telemetry without baseData and baseType");return}if(d.baseType||(d.baseType="EventData"),!l._sender){T.diagLog().throwInternal(S.CRITICAL,h.SenderNotInitialized,"Sender was not initialized");return}if(C(d))d[lr]=l._sample.sampleRate;else{T.diagLog().throwInternal(S.WARNING,h.TelemetrySampledAndNotSent,"Telemetry item was sampled out and not sent",{SampleRate:l._sample.sampleRate});return}var N=e.constructEnvelope(d,l._senderConfig.instrumentationKey(),T.diagLog());if(!N){T.diagLog().throwInternal(S.CRITICAL,h.CreateEnvelopeError,"Unable to create an AppInsights envelope");return}var A=!1;if(d.tags&&d.tags[_t]&&(R(d.tags[_t],function(Z){try{Z&&Z(N)===!1&&(A=!0,T.diagLog().warnToConsole("Telemetry processor check returns false"))}catch(ie){T.diagLog().throwInternal(S.CRITICAL,h.TelemetryInitializerFailed,"One of telemetry initializers failed, telemetry item will not be sent: "+G(ie),{exception:O(ie)},!0)}}),delete d.tags[_t]),A)return;var H=u.serialize(N),_=l._buffer.getItems(),j=l._buffer.batchPayloads(_);j&&j.length+H.length>l._senderConfig.maxBatchSizeInBytes()&&l.triggerSend(!0,null,10),l._buffer.enqueue(H),Q()}catch(Z){T.diagLog().throwInternal(S.WARNING,h.FailedAddingTelemetryToBuffer,"Failed adding telemetry to the sender's buffer, some telemetry will be lost: "+G(Z),{exception:O(Z)})}l.processNext(d,T)},l._xhrReadyStateChange=function(d,T,N){d.readyState===4&&E(d.status,T,d.responseURL,N,J(d),Ei(d)||d.response)},l.triggerSend=function(d,T,N){d===void 0&&(d=!0);try{if(l._senderConfig.disableTelemetry())l._buffer.clear();else{if(l._buffer.count()>0){var A=l._buffer.getItems();it(N||0,d),T?T.call(r,A,d):l._sender(A,d)}a=+new Date}clearTimeout(o),o=null,i=null}catch(_){var H=or();(!H||H>9)&&l.diagLog().throwInternal(S.CRITICAL,h.TransmissionFailed,"Telemetry transmission failed, some telemetry will be lost: "+G(_),{exception:O(_)})}},l._onError=function(d,T,N){l.diagLog().throwInternal(S.WARNING,h.OnError,"Failed to send telemetry.",{message:T}),l._buffer.clearSent(d)},l._onPartialSuccess=function(d,T){for(var N=[],A=[],H=T.errors.reverse(),_=0,j=H;_<j.length;_++){var Z=j[_],ie=d.splice(Z.index,1)[0];Se(Z.statusCode)?A.push(ie):N.push(ie)}d.length>0&&l._onSuccess(d,T.itemsAccepted),N.length>0&&l._onError(N,J(null,["partial success",T.itemsAccepted,"of",T.itemsReceived].join(" "))),A.length>0&&(L(A),l.diagLog().throwInternal(S.WARNING,h.TransmissionFailed,"Partial success. Delivered: "+d.length+", Failed: "+N.length+". Will retry to send "+A.length+" our of "+T.itemsReceived+" items"))},l._onSuccess=function(d,T){l._buffer.clearSent(d)},l._xdrOnLoad=function(d,T){var N=Ei(d);if(d&&(N+""=="200"||N===""))n=0,l._onSuccess(T,0);else{var A=w(N);A&&A.itemsReceived&&A.itemsReceived>A.itemsAccepted&&!l._senderConfig.isRetryDisabled()?l._onPartialSuccess(T,A):l._onError(T,Ae(d))}};function C(d){return l._sample.isSampledIn(d)}function E(d,T,N,A,H,_){var j=null;if(l._appId||(j=w(_),j&&j.appId&&(l._appId=j.appId)),(d<200||d>=300)&&d!==0){if((d===301||d===307||d===308)&&!P(N)){l._onError(T,H);return}!l._senderConfig.isRetryDisabled()&&Se(d)?(L(T),l.diagLog().throwInternal(S.WARNING,h.TransmissionFailed,". Response code "+d+". Will retry to send "+T.length+" items.")):l._onError(T,H)}else if(oo.isOffline()){if(!l._senderConfig.isRetryDisabled()){var Z=10;L(T,Z),l.diagLog().throwInternal(S.WARNING,h.TransmissionFailed,". Offline - Response Code: "+d+". Offline status: "+oo.isOffline()+". Will retry to send "+T.length+" items.")}}else P(N),d===206?(j||(j=w(_)),j&&!l._senderConfig.isRetryDisabled()?l._onPartialSuccess(T,j):l._onError(T,H)):(n=0,l._onSuccess(T,A))}function P(d){return s>=10?!1:!x(d)&&d!==""&&d!==l._senderConfig.endpointUrl()?(l._senderConfig.endpointUrl=function(){return d},++s,!0):!1}function p(d,T){var N=l._senderConfig.endpointUrl(),A=l._buffer.batchPayloads(d),H=new Blob([A],{type:"text/plain;charset=UTF-8"}),_=_e().sendBeacon(N,H);_?(l._buffer.markAsSent(d),l._onSuccess(d,d.length)):(g(d,!0),l.diagLog().throwInternal(S.WARNING,h.TransmissionFailed,". Failed to send telemetry with Beacon API, retried with xhrSender."))}function g(d,T){var N=new XMLHttpRequest,A=l._senderConfig.endpointUrl();try{N[Et]=!0}catch(_){}N.open("POST",A,T),N.setRequestHeader("Content-type","application/json"),Mr(A)&&N.setRequestHeader(te.sdkContextHeader,te.sdkContextHeaderAppIdRequest),R(Ye(c),function(_){N.setRequestHeader(_,c[_])}),N.onreadystatechange=function(){return l._xhrReadyStateChange(N,d,d.length)},N.onerror=function(_){return l._onError(d,J(N),_)};var H=l._buffer.batchPayloads(d);N.send(H),l._buffer.markAsSent(d)}function y(d,T){var N=l._senderConfig.endpointUrl(),A=l._buffer.batchPayloads(d),H=new Blob([A],{type:"text/plain;charset=UTF-8"}),_=new Headers;Mr(N)&&_.append(te.sdkContextHeader,te.sdkContextHeaderAppIdRequest),R(Ye(c),function(ie){_.append(ie,c[ie])});var j={method:"POST",headers:_,body:H},Z=new Request(N,j);fetch(Z).then(function(ie){if(ie.ok)ie.text().then(function(zt){E(ie.status,d,ie.url,d.length,ie.statusText,zt)}),l._buffer.markAsSent(d);else throw Error(ie.statusText)}).catch(function(ie){l._onError(d,ie.message)})}function w(d){try{if(d&&d!==""){var T=be().parse(d);if(T&&T.itemsReceived&&T.itemsReceived>=T.itemsAccepted&&T.itemsReceived-T.itemsAccepted===T.errors.length)return T}}catch(N){l.diagLog().throwInternal(S.CRITICAL,h.InvalidBackendResponse,"Cannot parse the response. "+G(N),{response:d})}return null}function L(d,T){if(T===void 0&&(T=1),!(!d||d.length===0)){l._buffer.clearSent(d),n++;for(var N=0,A=d;N<A.length;N++){var H=A[N];l._buffer.enqueue(H)}k(T),Q()}}function k(d){var T=10,N;if(n<=1)N=T;else{var A=(Math.pow(2,n)-1)/2,H=Math.floor(Math.random()*A*T)+1;H=d*H,N=Math.max(Math.min(H,3600),T)}var _=de()+N*1e3;i=_}function Q(){if(!o){var d=i?Math.max(0,i-de()):0,T=Math.max(l._senderConfig.maxBatchInterval(),d);o=setTimeout(function(){l.triggerSend(!0,null,1)},T)}}function Se(d){return d===408||d===429||d===500||d===503}function J(d,T){return d?"XMLHttpRequest,Status:"+d.status+",Response:"+Ei(d)||0||0:T}function me(d,T){var N=It(),A=new XDomainRequest;A.onload=function(){return l._xdrOnLoad(A,d)},A.onerror=function(Z){return l._onError(d,Ae(A),Z)};var H=N&&N.location&&N.location.protocol||"";if(l._senderConfig.endpointUrl().lastIndexOf(H,0)!==0){l.diagLog().throwInternal(S.WARNING,h.TransmissionFailed,". Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol."),l._buffer.clear();return}var _=l._senderConfig.endpointUrl().replace(/^(https?:)/,"");A.open("POST",_);var j=l._buffer.batchPayloads(d);A.send(j),l._buffer.markAsSent(d)}function Ae(d,T){return d?"XDomainRequest,Response:"+Ei(d)||0:T}function pt(){var d="getNotifyMgr";return l.core[d]?l.core[d]():l.core._notificationManager}function it(d,T){var N=pt();if(N&&N.eventsSendRequest)try{N.eventsSendRequest(d,T)}catch(A){l.diagLog().throwInternal(S.CRITICAL,h.NotificationException,"send request notification failed: "+G(A),{exception:O(A)})}}function dt(d){var T=x(d.disableInstrumentationKeyValidation)?!1:d.disableInstrumentationKeyValidation;if(T)return!0;var N="^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",A=new RegExp(N);return A.test(d.instrumentationKey)}}),r}return e.constructEnvelope=function(r,n,i){var a;switch(n!==r.iKey&&!x(n)?a=yt({},r,{iKey:n}):a=r,a.baseType){case Ve.dataType:return ao.EventEnvelopeCreator.Create(i,a);case Qe.dataType:return Pu.TraceEnvelopeCreator.Create(i,a);case ke.dataType:return wu.PageViewEnvelopeCreator.Create(i,a);case Ze.dataType:return bu.PageViewPerformanceEnvelopeCreator.Create(i,a);case he.dataType:return Tu.ExceptionEnvelopeCreator.Create(i,a);case qe.dataType:return Eu.MetricEnvelopeCreator.Create(i,a);case je.dataType:return Cu.DependencyEnvelopeCreator.Create(i,a);default:return ao.EventEnvelopeCreator.Create(i,a)}},e._getDefaultAppInsightsChannelConfig=function(){return{endpointUrl:function(){return"https://dc.services.visualstudio.com/v2/track"},emitLineDelimitedJson:function(){return!1},maxBatchInterval:function(){return 15e3},maxBatchSizeInBytes:function(){return 102400},disableTelemetry:function(){return!1},enableSessionStorageBuffer:function(){return!0},isRetryDisabled:function(){return!1},isBeaconApiDisabled:function(){return!0},onunloadDisableBeacon:function(){return!1},instrumentationKey:function(){},namePrefix:function(){},samplingPercentage:function(){return 100},customHeaders:function(){}}},e._getEmptyAppInsightsChannelConfig=function(){return{endpointUrl:void 0,emitLineDelimitedJson:void 0,maxBatchInterval:void 0,maxBatchSizeInBytes:void 0,disableTelemetry:void 0,enableSessionStorageBuffer:void 0,isRetryDisabled:void 0,isBeaconApiDisabled:void 0,onunloadDisableBeacon:void 0,instrumentationKey:void 0,namePrefix:void 0,samplingPercentage:void 0,customHeaders:void 0}},e}(et)});var so=I(()=>{Ou()});var xl,uo,zu,Bu=I(()=>{Te();xe();X();xl="ai_session",uo=function(){function t(){}return t}(),zu=function(){function t(e,r){var n=this,i,a,o=Ft(r),u=cr(r);W(t,n,function(s){e||(e={}),B(e.sessionExpirationMs)||(e.sessionExpirationMs=function(){return t.acquisitionSpan}),B(e.sessionRenewalMs)||(e.sessionRenewalMs=function(){return t.renewalSpan}),s.config=e;var c=s.config.sessionCookiePostfix&&s.config.sessionCookiePostfix()?s.config.sessionCookiePostfix():s.config.namePrefix&&s.config.namePrefix()?s.config.namePrefix():"";i=function(){return xl+c},s.automaticSession=new uo,s.update=function(){var P=de(),p=!1,g=s.automaticSession;g.id||(p=!l(g,P));var y=s.config.sessionExpirationMs();if(!p&&y>0){var w=s.config.sessionRenewalMs(),L=P-g.acquisitionDate,k=P-g.renewalDate;p=L<0||k<0,p=p||L>y,p=p||k>w}p?m(P):(!a||P-a>t.cookieUpdateInterval)&&C(g,P)},s.backup=function(){var P=s.automaticSession;E(P.id,P.acquisitionDate,P.renewalDate)};function l(P,p){var g=!1,y=u.get(i());if(y&&B(y.split))g=f(P,y);else{var w=vn(o,i());w&&(g=f(P,w))}return g||!!P.id}function f(P,p){var g=!1,y=", session will be reset",w=p.split("|");if(w.length>=2)try{var L=+w[1]||0,k=+w[2]||0;isNaN(L)||L<=0?o.throwInternal(S.WARNING,h.SessionRenewalDateIsZero,"AI session acquisition date is 0"+y):isNaN(k)||k<=0?o.throwInternal(S.WARNING,h.SessionRenewalDateIsZero,"AI session renewal date is 0"+y):w[0]&&(P.id=w[0],P.acquisitionDate=L,P.renewalDate=k,g=!0)}catch(Q){o.throwInternal(S.CRITICAL,h.ErrorParsingAISessionCookie,"Error parsing ai_session value ["+(p||"")+"]"+y+" - "+G(Q),{exception:O(Q)})}return g}function m(P){var p=s.config||{},g=(p.getNewId?p.getNewId():null)||Wt;s.automaticSession.id=g(p.idLength?p.idLength():22),s.automaticSession.acquisitionDate=P,C(s.automaticSession,P),Rr()||o.throwInternal(S.WARNING,h.BrowserDoesNotSupportLocalStorage,"Browser does not support local storage. Session durations will be inaccurate.")}function C(P,p){var g=P.acquisitionDate;P.renewalDate=p;var y=s.config,w=y.sessionRenewalMs(),L=g+y.sessionExpirationMs()-p,k=[P.id,g,p],Q=0;L<w?Q=L/1e3:Q=w/1e3;var Se=y.cookieDomain?y.cookieDomain():null;u.set(i(),k.join("|"),y.sessionExpirationMs()>0?Q:null,Se),a=p}function E(P,p,g){gn(o,i(),[P,p,g].join("|"))}})}return t.acquisitionSpan=864e5,t.renewalSpan=18e5,t.cookieUpdateInterval=6e4,t}()});var Hu,Vu=I(()=>{Hu=function(){function t(){}return t}()});var qu,ju=I(()=>{qu=function(){function t(){this.id="browser",this.deviceClass="Browser"}return t}()});var yl,Gu,Ku=I(()=>{yl="2.6.4",Gu=function(){function t(e){this.sdkVersion=(e.sdkExtension&&e.sdkExtension()?e.sdkExtension()+"_":"")+"javascript:"+yl}return t}()});function Wu(t){return!(typeof t!="string"||!t||t.match(/,|;|=| |\|/))}var Xu,Ju=I(()=>{Te();xe();X();Xu=function(){function t(e,r){this.isNewUser=!1;var n=Ft(r),i=cr(r),a;W(t,this,function(o){o.config=e;var u=o.config.userCookiePostfix&&o.config.userCookiePostfix()?o.config.userCookiePostfix():"";a=function(){return t.userCookieName+u};var s=i.get(a());if(s){o.isNewUser=!1;var c=s.split(t.cookieSeparator);c.length>0&&(o.id=c[0])}if(!o.id){var l=e||{},f=(l.getNewId?l.getNewId():null)||Wt;o.id=f(l.idLength?e.idLength():22);var m=31536e3,C=Me(new Date);o.accountAcquisitionDate=C,o.isNewUser=!0;var E=[o.id,C];i.set(a(),E.join(t.cookieSeparator),m);var P=e.namePrefix&&e.namePrefix()?e.namePrefix()+"ai_session":"ai_session";hn(n,P)}o.accountId=e.accountId?e.accountId():void 0;var p=i.get(t.authUserCookieName);if(p){p=decodeURI(p);var g=p.split(t.cookieSeparator);g[0]&&(o.authenticatedId=g[0]),g.length>1&&g[1]&&(o.accountId=g[1])}o.setAuthenticatedUserContext=function(y,w,L){L===void 0&&(L=!1);var k=!Wu(y)||w&&!Wu(w);if(k){n.throwInternal(S.WARNING,h.SetAuthContextFailedAccountName,"Setting auth user context failed. User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.",!0);return}o.authenticatedId=y;var Q=o.authenticatedId;w&&(o.accountId=w,Q=[o.authenticatedId,o.accountId].join(t.cookieSeparator)),L&&i.set(t.authUserCookieName,encodeURI(Q))},o.clearAuthenticatedUserContext=function(){o.authenticatedId=null,o.accountId=null,i.del(t.authUserCookieName)}})}return t.cookieSeparator="|",t.userCookieName="ai_user",t.authUserCookieName="ai_authUser",t}()});var Qu,Zu=I(()=>{Qu=function(){function t(){}return t}()});var Yu,$u=I(()=>{xe();X();Yu=function(){function t(e,r,n,i){var a=this;a.traceID=e||ze(),a.parentID=r,a.name=n;var o=$e();!n&&o&&o.pathname&&(a.name=o.pathname),a.name=oe(i,a.name)}return t}()});function zr(t,e){t&&t[e]&&Ye(t[e]).length===0&&delete t[e]}var wi,bi,ec,tc=I(()=>{Te();X();Bu();xe();Vu();ju();Ku();Ju();Zu();$u();wi="ext",bi="tags";ec=function(){function t(e,r){var n=this,i=e.logger;this.appId=function(){return null},W(t,this,function(a){a.application=new Hu,a.internal=new Gu(r),ar()&&(a.sessionManager=new zu(r,e),a.device=new qu,a.location=new Qu,a.user=new Xu(r,e),a.telemetryTrace=new Yu(void 0,void 0,void 0,i),a.session=new uo),a.applySessionContext=function(o,u){var s=a.session,c=a.sessionManager;s&&U(s.id)?K(ve(o.ext,Ue.AppExt),"sesId",s.id):c&&c.automaticSession&&K(ve(o.ext,Ue.AppExt),"sesId",c.automaticSession.id,U)},a.applyOperatingSystemContxt=function(o,u){K(o.ext,Ue.OSExt,a.os)},a.applyApplicationContext=function(o,u){var s=a.application;if(s){var c=ve(o,bi);K(c,re.applicationVersion,s.ver,U),K(c,re.applicationBuild,s.build,U)}},a.applyDeviceContext=function(o,u){var s=a.device;if(s){var c=ve(ve(o,wi),Ue.DeviceExt);K(c,"localId",s.id,U),K(c,"ip",s.ip,U),K(c,"model",s.model,U),K(c,"deviceClass",s.deviceClass,U)}},a.applyInternalContext=function(o,u){var s=a.internal;if(s){var c=ve(o,bi);K(c,re.internalAgentVersion,s.agentVersion,U),K(c,re.internalSdkVersion,s.sdkVersion,U),(o.baseType===kt.dataType||o.baseType===ke.dataType)&&(K(c,re.internalSnippet,s.snippetVer,U),K(c,re.internalSdkSrc,s.sdkSrc,U))}},a.applyLocationContext=function(o,u){var s=n.location;s&&K(ve(o,bi,[]),re.locationIp,s.ip,U)},a.applyOperationContext=function(o,u){var s=a.telemetryTrace;if(s){var c=ve(ve(o,wi),Ue.TraceExt,{traceID:void 0,parentID:void 0});K(c,"traceID",s.traceID,U),K(c,"name",s.name,U),K(c,"parentID",s.parentID,U)}},a.applyWebContext=function(o,u){var s=n.web;s&&K(ve(o,wi),Ue.WebExt,s)},a.applyUserContext=function(o,u){var s=a.user;if(s){var c=ve(o,bi,[]);K(c,re.userAccountId,s.accountId,U);var l=ve(ve(o,wi),Ue.UserExt);K(l,"id",s.id,U),K(l,"authId",s.authenticatedId,U)}},a.cleanUp=function(o,u){var s=o.ext;s&&(zr(s,Ue.DeviceExt),zr(s,Ue.UserExt),zr(s,Ue.WebExt),zr(s,Ue.OSExt),zr(s,Ue.AppExt),zr(s,Ue.TraceExt))}})}return t}()});var Sl,kn,rc=I(()=>{ne();Te();X();tc();xe();Sl=function(t){z(e,t);function e(){var r=t.call(this)||this;r.priority=110,r.identifier=Ot;var n,i;return W(e,r,function(a,o){a.initialize=function(s,c,l,f){o.initialize(s,c,l,f);var m=a._getTelCtx(),C=a.identifier,E=e.getDefaultConfig();i=i||{},$(E,function(P,p){i[P]=function(){return m.getConfig(C,P,p())}}),a.context=new ec(c,i),n=ln(l,Or),a.context.appId=function(){return n?n._appId:null},a._extConfig=i},a.processTelemetry=function(s,c){if(!x(s)){c=a._getTelCtx(c),s.name===ke.envelopeType&&c.diagLog().resetInternalMessageCount();var l=a.context||{};if(l.session&&typeof a.context.session.id!="string"&&l.sessionManager&&l.sessionManager.update(),u(s,c),l.user&&l.user.isNewUser){l.user.isNewUser=!1;var f=new kt(h.SendBrowserInfoOnUserInit,(_e()||{}).userAgent||"");c.diagLog().logInternalMessage(S.CRITICAL,f)}a.processNext(s,c)}};function u(s,c){ve(s,"tags",[]),ve(s,"ext",{});var l=a.context;l.applySessionContext(s,c),l.applyApplicationContext(s,c),l.applyDeviceContext(s,c),l.applyOperationContext(s,c),l.applyUserContext(s,c),l.applyOperatingSystemContxt(s,c),l.applyWebContext(s,c),l.applyLocationContext(s,c),l.applyInternalContext(s,c),l.cleanUp(s,c)}}),r}return e.getDefaultConfig=function(){var r={instrumentationKey:function(){},accountId:function(){return null},sessionRenewalMs:function(){return 18e5},samplingPercentage:function(){return 100},sessionExpirationMs:function(){return 864e5},cookieDomain:function(){return null},sdkExtension:function(){return null},isBrowserLinkTrackingEnabled:function(){return!1},appId:function(){return null},namePrefix:function(){},sessionCookiePostfix:function(){},userCookiePostfix:function(){},idLength:function(){return 22},getNewId:function(){return null}};return r},e}(et),kn=Sl});var co=I(()=>{rc()});function nc(t,e,r){var n=0,i=t[e],a=t[r];return i&&a&&(n=ge(i,a)),n}function xr(t,e,r,n,i){var a=0,o=nc(r,n,i);return o&&(a=tr(t,e,Ge(o))),a}function tr(t,e,r){var n="ajaxPerf",i=0;if(t&&e&&r){var a=t[n]=t[n]||{};a[e]=r,i=1}return i}function Il(t,e){var r=t.perfTiming,n=e[rt]||{},i=0,a="name",o="Start",u="End",s="domainLookup",c="connect",l="redirect",f="request",m="response",C="duration",E="startTime",P=s+o,p=s+u,g=c+o,y=c+u,w=f+o,L=f+u,k=m+o,Q=m+u,Se=l+o,J=l=u,me="transferSize",Ae="encodedBodySize",pt="decodedBodySize",it="serverTiming";if(r){i|=xr(n,l,r,Se,J),i|=xr(n,s,r,P,p),i|=xr(n,c,r,g,y),i|=xr(n,f,r,w,L),i|=xr(n,m,r,k,Q),i|=xr(n,"networkConnect",r,E,y),i|=xr(n,"sentRequest",r,w,Q);var dt=r[C];dt||(dt=nc(r,E,Q)||0),i|=tr(n,C,dt),i|=tr(n,"perfTotal",dt);var d=r[it];if(d){var T={};R(d,function(N,A){var H=Ki(N[a]||""+A),_=T[H]||{};$(N,function(j,Z){(j!==a&&U(Z)||ir(Z))&&(_[j]&&(Z=_[j]+";"+Z),(Z||!U(Z))&&(_[j]=Z))}),T[H]=_}),i|=tr(n,it,T)}i|=tr(n,me,r[me]),i|=tr(n,Ae,r[Ae]),i|=tr(n,pt,r[pt])}else t.perfMark&&(i|=tr(n,"missing",t.perfAttempts));i&&(e[rt]=n)}var rt,Cl,lo,ic=I(()=>{xe();X();Te();rt="properties";Cl=function(){function t(){var e=this;e.openDone=!1,e.setRequestHeaderDone=!1,e.sendDone=!1,e.abortDone=!1,e.stateChangeAttached=!1}return t}(),lo=function(){function t(e,r,n){var i=this,a=n,o="responseText";i.perfMark=null,i.completed=!1,i.requestHeadersSize=null,i.requestHeaders=null,i.responseReceivingDuration=null,i.callbackDuration=null,i.ajaxTotalDuration=null,i.aborted=0,i.pageUrl=null,i.requestUrl=null,i.requestSize=0,i.method=null,i.status=null,i.requestSentTime=null,i.responseStartedTime=null,i.responseFinishedTime=null,i.callbackFinishedTime=null,i.endTime=null,i.xhrMonitoringState=new Cl,i.clientFailure=0,i.traceID=e,i.spanID=r,W(t,i,function(u){u.getAbsoluteUrl=function(){return u.requestUrl?yn(u.requestUrl):null},u.getPathName=function(){return u.requestUrl?Tt(a,Sn(u.method,u.requestUrl)):null},u.CreateTrackItem=function(s,c,l){if(u.ajaxTotalDuration=Math.round(ge(u.requestSentTime,u.responseFinishedTime)*1e3)/1e3,u.ajaxTotalDuration<0)return null;var f=(P={id:"|"+u.traceID+"."+u.spanID,target:u.getAbsoluteUrl(),name:u.getPathName(),type:s,startTime:null,duration:u.ajaxTotalDuration,success:+u.status>=200&&+u.status<400,responseCode:+u.status,method:u.method},P[rt]={HttpMethod:u.method},P);if(u.requestSentTime&&(f.startTime=new Date,f.startTime.setTime(u.requestSentTime)),Il(u,f),c&&Ye(u.requestHeaders).length>0&&(f[rt]=f[rt]||{},f[rt].requestHeaders=u.requestHeaders),l){var m=l();if(m){var C=m.correlationContext;if(C&&(f.correlationContext=C),m.headerMap&&Ye(m.headerMap).length>0&&(f[rt]=f[rt]||{},f[rt].responseHeaders=m.headerMap),u.status>=400){var E=m.type;f[rt]=f[rt]||{},(E===""||E==="text")&&(f[rt][o]=m[o]?m.statusText+" - "+m[o]:m.statusText),E==="json"&&(f[rt][o]=m.response?m.statusText+" - "+JSON.stringify(m.response):m.statusText)}}}return f;var P}})}return t}()});var Ih,ac=I(()=>{X();X();Ih=function(){function t(){}return t.GetLength=function(e){var r=0;if(!x(e)){var n="";try{n=e.toString()}catch(i){}r=n.length,r=isNaN(r)?0:r}return r},t}()});var fo,oc=I(()=>{X();fo=function(){function t(e,r){var n=this;n.traceFlag=t.DEFAULT_TRACE_FLAG,n.version=t.DEFAULT_VERSION,e&&t.isValidTraceId(e)?n.traceId=e:n.traceId=ze(),r&&t.isValidSpanId(r)?n.spanId=r:n.spanId=ze().substr(0,16)}return t.isValidTraceId=function(e){return e.match(/^[0-9a-f]{32}$/)&&e!=="00000000000000000000000000000000"},t.isValidSpanId=function(e){return e.match(/^[0-9a-f]{16}$/)&&e!=="0000000000000000"},t.prototype.toString=function(){var e=this;return e.version+"-"+e.traceId+"-"+e.spanId+"-"+e.traceFlag},t.DEFAULT_TRACE_FLAG="01",t.DEFAULT_VERSION="00",t}()});function Tl(){var t=ot();return!t||x(t.Request)||x(t.Request[Ce])||x(t[Mn])?null:t[Mn]}function El(t){var e=!1;if(typeof XMLHttpRequest!==Oe&&!x(XMLHttpRequest)){var r=XMLHttpRequest[Ce];e=!x(r)&&!x(r.open)&&!x(r.send)&&!x(r.abort)}var n=or();if(n&&n<9&&(e=!1),e)try{var i=new XMLHttpRequest;i[nt]={};var a=XMLHttpRequest[Ce].open;XMLHttpRequest[Ce].open=a}catch(o){e=!1,Ln(t,h.FailedMonitorAjaxOpen,"Failed to enable XMLHttpRequest monitoring, extension is not supported",{exception:O(o)})}return e}function Ai(t){var e="";try{!x(t)&&!x(t[nt])&&!x(t[nt].requestUrl)&&(e+="(url: '"+t[nt].requestUrl+"')")}catch(r){}return e}function Ln(t,e,r,n,i){t[Rn]()[cc](S.CRITICAL,e,r,n,i)}function Pi(t,e,r,n,i){t[Rn]()[cc](S.WARNING,e,r,n,i)}function Fn(t,e,r){return function(n){Ln(t,e,r,{ajaxDiagnosticsMessage:Ai(n.inst),exception:O(n.err)})}}function Br(t,e){return t&&e?t.indexOf(e):-1}var sc,Rn,nt,cc,Mn,uc,_n,lc=I(()=>{ne();xe();X();ic();ac();oc();Te();sc="ai.ajxmn.",Rn="diagLog",nt="ajaxData",cc="throwInternal",Mn="fetch",uc=0;_n=function(t){z(e,t);function e(){var r=t.call(this)||this;r.identifier=e.identifier,r.priority=120;var n="trackDependencyDataInternal",i=$e(),a=!1,o=!1,u=i&&i.host&&i.host.toLowerCase(),s=e.getEmptyConfig(),c=!1,l=0,f,m,C,E,P=!1,p=0,g=!1,y=[],w={},L;return W(e,r,function(k,Q){k.initialize=function(v,b,D,F){if(!k.isInitialized()){Q.initialize(v,b,D,F);var M=k._getTelCtx(),q=e.getDefaultConfig();$(q,function(We,yr){s[We]=M.getConfig(e.identifier,We,yr)});var V=s.distributedTracingMode;if(c=s.enableRequestHeaderTracking,P=s.enableAjaxPerfTracking,p=s.maxAjaxCallsPerView,g=s.enableResponseHeaderTracking,L=s.excludeRequestFromAutoTrackingPatterns,C=V===Ke.AI||V===Ke.AI_AND_W3C,m=V===Ke.AI_AND_W3C||V===Ke.W3C,P){var Y=v.instrumentationKey||"unkwn";Y.length>5?E=sc+Y.substring(Y.length-5)+".":E=sc+Y+"."}if(s.disableAjaxTracking===!1&&Ae(),J(),D.length>0&&D){for(var ce=void 0,Ie=0;!ce&&Ie<D.length;)D[Ie]&&D[Ie].identifier===Ot&&(ce=D[Ie]),Ie++;ce&&(f=ce.context)}}},k.teardown=function(){R(y,function(v){v.rm()}),y=[],a=!1,o=!1,k.setInitialized(!1)},k.trackDependencyData=function(v,b){k[n](v,b)},k.includeCorrelationHeaders=function(v,b,D,F){var M=k._currentWindowHost||u;if(b){if(bt.canIncludeCorrelationHeader(s,v.getAbsoluteUrl(),M)){if(D||(D={}),D.headers=new Headers(D.headers||(b instanceof Request?b.headers||{}:{})),C){var q="|"+v.traceID+"."+v.spanID;D.headers.set(te.requestIdHeader,q),c&&(v.requestHeaders[te.requestIdHeader]=q)}var V=s.appId||f&&f.appId();if(V&&(D.headers.set(te.requestContextHeader,te.requestContextAppIdFormat+V),c&&(v.requestHeaders[te.requestContextHeader]=te.requestContextAppIdFormat+V)),m){var Y=new fo(v.traceID,v.spanID);D.headers.set(te.traceParentHeader,Y.toString()),c&&(v.requestHeaders[te.traceParentHeader]=Y.toString())}}return D}else if(F){if(bt.canIncludeCorrelationHeader(s,v.getAbsoluteUrl(),M)){if(C){var q="|"+v.traceID+"."+v.spanID;F.setRequestHeader(te.requestIdHeader,q),c&&(v.requestHeaders[te.requestIdHeader]=q)}var V=s.appId||f&&f.appId();if(V&&(F.setRequestHeader(te.requestContextHeader,te.requestContextAppIdFormat+V),c&&(v.requestHeaders[te.requestContextHeader]=te.requestContextAppIdFormat+V)),m){var Y=new fo(v.traceID,v.spanID);F.setRequestHeader(te.traceParentHeader,Y.toString()),c&&(v.requestHeaders[te.traceParentHeader]=Y.toString())}}return F}},k[n]=function(v,b,D){if(p===-1||l<p){(s.distributedTracingMode===Ke.W3C||s.distributedTracingMode===Ke.AI_AND_W3C)&&typeof v.id=="string"&&v.id[v.id.length-1]!=="."&&(v.id+="."),x(v.startTime)&&(v.startTime=new Date);var F=tt.create(v,je.dataType,je.envelopeType,k[Rn](),b,D);k.core.track(F)}else l===p&&Ln(k,h.MaxAjaxPerPVExceeded,"Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.",!0);++l};function Se(v){var b=!0;return(v||s.ignoreHeaders)&&R(s.ignoreHeaders,function(D){if(D.toLowerCase()===v.toLowerCase())return b=!1,-1}),b}function J(){var v=Tl();if(!!v){var b=ot(),D=v.polyfill;s.disableFetchTracking===!1?(y.push(cn(b,Mn,{req:function(F,M,q){var V;if(a&&!pt(null,M,q)&&!(D&&o)){var Y=F.ctx();V=j(M,q);var ce=k.includeCorrelationHeaders(V,M,q);ce!==q&&F.set(1,ce),Y.data=V}},rsp:function(F,M){var q=F.ctx().data;q&&(F.rslt=F.rslt.then(function(V){return ie(F,(V||{}).status,V,q,function(){var Y={statusText:V.statusText,headerMap:null,correlationContext:zt(V)};if(g){var ce={};V.headers.forEach(function(Ie,We){Se(We)&&(ce[We]=Ie)}),Y.headerMap=ce}return Y}),V}).catch(function(V){throw ie(F,0,M,q,null,{error:V.message}),V}))},hkErr:Fn(k,h.FailedMonitorAjaxOpen,"Failed to monitor Window.fetch, monitoring data for this fetch call may be incorrect.")})),a=!0):D&&y.push(cn(b,Mn,{req:function(F,M,q){pt(null,M,q)}})),D&&(b[Mn].polyfill=D)}}function me(v,b,D){y.push(Aa(v,b,D))}function Ae(){El(k)&&!o&&(me(XMLHttpRequest,"open",{req:function(v,b,D,F){var M=v.inst,q=M[nt];!pt(M,D)&&it(M,!0)&&(!q||!q.xhrMonitoringState.openDone)&&dt(M,b,D,F)},hkErr:Fn(k,h.FailedMonitorAjaxOpen,"Failed to monitor XMLHttpRequest.open, monitoring data for this ajax call may be incorrect.")}),me(XMLHttpRequest,"send",{req:function(v,b){var D=v.inst,F=D[nt];it(D)&&!F.xhrMonitoringState.sendDone&&(H("xhr",F),F.requestSentTime=mr(),k.includeCorrelationHeaders(F,void 0,void 0,D),F.xhrMonitoringState.sendDone=!0)},hkErr:Fn(k,h.FailedMonitorAjaxSend,"Failed to monitor XMLHttpRequest, monitoring data for this ajax call may be incorrect.")}),me(XMLHttpRequest,"abort",{req:function(v){var b=v.inst,D=b[nt];it(b)&&!D.xhrMonitoringState.abortDone&&(D.aborted=1,D.xhrMonitoringState.abortDone=!0)},hkErr:Fn(k,h.FailedMonitorAjaxAbort,"Failed to monitor XMLHttpRequest.abort, monitoring data for this ajax call may be incorrect.")}),c&&me(XMLHttpRequest,"setRequestHeader",{req:function(v,b,D){var F=v.inst;it(F)&&Se(b)&&(F[nt].requestHeaders[b]=D)},hkErr:Fn(k,h.FailedMonitorAjaxSetRequestHeader,"Failed to monitor XMLHttpRequest.setRequestHeader, monitoring data for this ajax call may be incorrect.")}),o=!0)}function pt(v,b,D){var F=!1,M=((U(b)?b:(b||{}).url||"")||"").toLowerCase();if(R(L,function(Y){var ce=Y;U(Y)&&(ce=new RegExp(Y)),F||(F=ce.test(M))}),F)return F;var q=Br(M,"?"),V=Br(M,"#");return(q===-1||V!==-1&&V<q)&&(q=V),q!==-1&&(M=M.substring(0,q)),x(v)?x(b)||(F=(typeof b=="object"?b[Et]===!0:!1)||(D?D[Et]===!0:!1)):F=v[Et]===!0||M[Et]===!0,F?w[M]||(w[M]=1):w[M]&&(F=!0),F}function it(v,b){var D=!0,F=o;return x(v)||(D=b===!0||!x(v[nt])),F&&D}function dt(v,b,D,F){var M=f&&f.telemetryTrace&&f.telemetryTrace.traceID||ze(),q=ze().substr(0,16),V=new lo(M,q,k[Rn]());V.method=b,V.requestUrl=D,V.xhrMonitoringState.openDone=!0,V.requestHeaders={},V.async=F,v[nt]=V,d(v)}function d(v){v[nt].xhrMonitoringState.stateChangeAttached=Xt.Attach(v,"readystatechange",function(){try{v&&v.readyState===4&&it(v)&&N(v)}catch(D){var b=O(D);(!b||Br(b.toLowerCase(),"c00c023f")===-1)&&Ln(k,h.FailedMonitorAjaxRSC,"Failed to monitor XMLHttpRequest 'readystatechange' event handler, monitoring data for this ajax call may be incorrect.",{ajaxDiagnosticsMessage:Ai(v),exception:b})}})}function T(v){try{var b=v.responseType;if(b===""||b==="text")return v.responseText}catch(D){}return null}function N(v){var b=v[nt];b.responseFinishedTime=mr(),b.status=v.status;function D(F,M){var q=M||{};q.ajaxDiagnosticsMessage=Ai(v),F&&(q.exception=O(F)),Pi(k,h.FailedMonitorAjaxDur,"Failed to calculate the duration of the ajax call, monitoring data for this ajax call won't be sent.",q)}_("xmlhttprequest",b,function(){try{var F=b.CreateTrackItem("Ajax",c,function(){var M={statusText:v.statusText,headerMap:null,correlationContext:A(v),type:v.responseType,responseText:T(v),response:v.response};if(g){var q=v.getAllResponseHeaders();if(q){var V=se(q).split(/[\r\n]+/),Y={};R(V,function(ce){var Ie=ce.split(": "),We=Ie.shift(),yr=Ie.join(": ");Se(We)&&(Y[We]=yr)}),M.headerMap=Y}}return M});F?k[n](F):D(null,{requestSentTime:b.requestSentTime,responseFinishedTime:b.responseFinishedTime})}finally{try{v[nt]=null}catch(M){}}},function(F){D(F,null)})}function A(v){try{var b=v.getAllResponseHeaders();if(b!==null){var D=Br(b.toLowerCase(),te.requestContextHeaderLowerCase);if(D!==-1){var F=v.getResponseHeader(te.requestContextHeader);return bt.getCorrelationContext(F)}}}catch(M){Pi(k,h.FailedMonitorAjaxGetCorrelationHeader,"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.",{ajaxDiagnosticsMessage:Ai(v),exception:O(M)})}}function H(v,b){if(b.requestUrl&&E&&P){var D=Je();if(D&&B(D.mark)){uc++;var F=E+v+"#"+uc;D.mark(F);var M=D.getEntriesByName(F);M&&M.length===1&&(b.perfMark=M[0])}}}function _(v,b,D,F){var M=b.perfMark,q=Je(),V=s.maxAjaxPerfLookupAttempts,Y=s.ajaxPerfLookupDelay,ce=b.requestUrl,Ie=0;(function We(){try{if(q&&M){Ie++;for(var yr=null,ho=q.getEntries(),Di=ho.length-1;Di>=0;Di--){var Pt=ho[Di];if(Pt){if(Pt.entryType==="resource")Pt.initiatorType===v&&(Br(Pt.name,ce)!==-1||Br(ce,Pt.name)!==-1)&&(yr=Pt);else if(Pt.entryType==="mark"&&Pt.name===M.name){b.perfTiming=yr;break}if(Pt.startTime<M.startTime-1e3)break}}}!M||b.perfTiming||Ie>=V||b.async===!1?(M&&B(q.clearMarks)&&q.clearMarks(M.name),b.perfAttempts=Ie,D()):setTimeout(We,Y)}catch(yc){F(yc)}})()}function j(v,b){var D=f&&f.telemetryTrace&&f.telemetryTrace.traceID||ze(),F=ze().substr(0,16),M=new lo(D,F,k[Rn]());M.requestSentTime=mr(),v instanceof Request?M.requestUrl=v?v.url:"":M.requestUrl=v;var q="GET";b&&b.method?q=b.method:v&&v instanceof Request&&(q=v.method),M.method=q;var V={};if(c){var Y=new Headers((b?b.headers:0)||(v instanceof Request?v.headers||{}:{}));Y.forEach(function(ce,Ie){Se(Ie)&&(V[Ie]=ce)})}return M.requestHeaders=V,H("fetch",M),M}function Z(v){var b="";try{x(v)||(typeof v=="string"?b+="(url: '"+v+"')":b+="(url: '"+v.url+"')")}catch(D){Ln(k,h.FailedMonitorAjaxOpen,"Failed to grab failed fetch diagnostics message",{exception:O(D)})}return b}function ie(v,b,D,F,M,q){if(!F)return;function V(Y,ce,Ie){var We=Ie||{};We.fetchDiagnosticsMessage=Z(D),ce&&(We.exception=O(ce)),Pi(k,Y,"Failed to calculate the duration of the fetch call, monitoring data for this fetch call won't be sent.",We)}F.responseFinishedTime=mr(),F.status=b,_("fetch",F,function(){var Y=F.CreateTrackItem("Fetch",c,M);Y?k[n](Y):V(h.FailedMonitorAjaxDur,null,{requestSentTime:F.requestSentTime,responseFinishedTime:F.responseFinishedTime})},function(Y){V(h.FailedMonitorAjaxGetCorrelationHeader,Y,null)})}function zt(v){if(v&&v.headers)try{var b=v.headers.get(te.requestContextHeader);return bt.getCorrelationContext(b)}catch(D){Pi(k,h.FailedMonitorAjaxGetCorrelationHeader,"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.",{fetchDiagnosticsMessage:Z(v),exception:O(D)})}}}),r}return e.getDefaultConfig=function(){var r={maxAjaxCallsPerView:500,disableAjaxTracking:!1,disableFetchTracking:!0,excludeRequestFromAutoTrackingPatterns:void 0,disableCorrelationHeaders:!1,distributedTracingMode:Ke.AI_AND_W3C,correlationHeaderExcludedDomains:["*.blob.core.windows.net","*.blob.core.chinacloudapi.cn","*.blob.core.cloudapi.de","*.blob.core.usgovcloudapi.net"],correlationHeaderDomains:void 0,correlationHeaderExcludePatterns:void 0,appId:void 0,enableCorsCorrelation:!1,enableRequestHeaderTracking:!1,enableResponseHeaderTracking:!1,enableAjaxErrorStatusText:!1,enableAjaxPerfTracking:!1,maxAjaxPerfLookupAttempts:3,ajaxPerfLookupDelay:25,ignoreHeaders:["Authorization","X-API-Key","WWW-Authenticate"]};return r},e.getEmptyConfig=function(){var r=this.getDefaultConfig();return $(r,function(n){r[n]=void 0}),r},e.prototype.processTelemetry=function(r,n){this.processNext(r,n)},e.identifier="AjaxDependencyPlugin",e}(et)});var po=I(()=>{lc()});var mo,fc,wl,pc,Ni,vo=I(()=>{X();no();so();co();po();xe();fc=["snippet","dependencies","properties","_snippetVersion","appInsightsNew","getSKUDefaults"],wl={Default:0,Required:1,Array:2,Hidden:4},pc={__proto__:null,PropertiesPluginIdentifier:Ot,BreezeChannelIdentifier:Or,AnalyticsPluginIdentifier:Ti,Util:Cn,CorrelationIdHelper:bt,UrlHelper:Ha,DateTimeUtils:Va,ConnectionStringParser:ja,FieldType:wl,RequestHeaders:te,DisabledPropertyName:Et,ProcessLegacy:_t,SampleRate:lr,HttpMethod:Fr,DEFAULT_BREEZE_ENDPOINT:dn,AIData:En,AIBase:Tn,Envelope:wn,Event:Ve,Exception:he,Metric:qe,PageView:ke,PageViewData:vr,RemoteDependencyData:je,Trace:Qe,PageViewPerformance:Ze,Data:xt,SeverityLevel:Ut,ConfigurationManager:$a,ContextTagKeys:hr,DataSanitizer:Fa,TelemetryItemCreator:tt,CtxTagKeys:re,Extensions:Ue,DistributedTracingModes:Ke},Ni=function(){function t(e){var r=this;r._snippetVersion=""+(e.sv||e.version||""),e.queue=e.queue||[],e.version=e.version||2;var n=e.config||{};if(n.connectionString){var i=hi(n.connectionString),a=i.ingestionendpoint;n.endpointUrl=a?a+"/v2/track":n.endpointUrl,n.instrumentationKey=i.instrumentationkey||n.instrumentationKey}r.appInsights=new Nn,r.properties=new kn,r.dependencies=new _n,r.core=new rn,r._sender=new Dn,r.snippet=e,r.config=n,r.getSKUDefaults()}return t.prototype.getCookieMgr=function(){return this.appInsights.getCookieMgr()},t.prototype.trackEvent=function(e,r){this.appInsights.trackEvent(e,r)},t.prototype.trackPageView=function(e){var r=e||{};this.appInsights.trackPageView(r)},t.prototype.trackPageViewPerformance=function(e){var r=e||{};this.appInsights.trackPageViewPerformance(r)},t.prototype.trackException=function(e){e&&!e.exception&&e.error&&(e.exception=e.error),this.appInsights.trackException(e)},t.prototype._onerror=function(e){this.appInsights._onerror(e)},t.prototype.trackTrace=function(e,r){this.appInsights.trackTrace(e,r)},t.prototype.trackMetric=function(e,r){this.appInsights.trackMetric(e,r)},t.prototype.startTrackPage=function(e){this.appInsights.startTrackPage(e)},t.prototype.stopTrackPage=function(e,r,n,i){this.appInsights.stopTrackPage(e,r,n,i)},t.prototype.startTrackEvent=function(e){this.appInsights.startTrackEvent(e)},t.prototype.stopTrackEvent=function(e,r,n){this.appInsights.stopTrackEvent(e,r,n)},t.prototype.addTelemetryInitializer=function(e){return this.appInsights.addTelemetryInitializer(e)},t.prototype.setAuthenticatedUserContext=function(e,r,n){n===void 0&&(n=!1),this.properties.context.user.setAuthenticatedUserContext(e,r,n)},t.prototype.clearAuthenticatedUserContext=function(){this.properties.context.user.clearAuthenticatedUserContext()},t.prototype.trackDependencyData=function(e){this.dependencies.trackDependencyData(e)},t.prototype.flush=function(e){var r=this;e===void 0&&(e=!0),ut(this.core,function(){return"AISKU.flush"},function(){R(r.core.getTransmissionControls(),function(n){R(n,function(i){i.flush(e)})})},null,e)},t.prototype.onunloadFlush=function(e){e===void 0&&(e=!0),R(this.core.getTransmissionControls(),function(r){R(r,function(n){n.onunloadFlush?n.onunloadFlush():n.flush(e)})})},t.prototype.loadAppInsights=function(e,r,n){var i=this;e===void 0&&(e=!1);var a=this;function o(u){if(u){var s="";x(a._snippetVersion)||(s+=a._snippetVersion),e&&(s+=".lg"),a.context&&a.context.internal&&(a.context.internal.snippetVer=s||"-"),$(a,function(c,l){U(c)&&!B(l)&&c&&c[0]!=="_"&&fc.indexOf(c)===-1&&(u[c]=l)})}}return e&&a.config.extensions&&a.config.extensions.length>0&&Ne("Extensions not allowed in legacy mode"),ut(a.core,function(){return"AISKU.loadAppInsights"},function(){var u=[];u.push(a._sender),u.push(a.properties),u.push(a.dependencies),u.push(a.appInsights),a.core.initialize(a.config,u,r,n),a.context=a.properties.context,mo&&a.context&&(a.context.internal.sdkSrc=mo),o(a.snippet),a.emptyQueue(),a.pollInternalLogs(),a.addHousekeepingBeforeUnload(i)}),a},t.prototype.updateSnippetDefinitions=function(e){Jr(e,this,function(r){return r&&fc.indexOf(r)===-1})},t.prototype.emptyQueue=function(){var e=this;try{if(Re(e.snippet.queue)){for(var r=e.snippet.queue.length,n=0;n<r;n++){var i=e.snippet.queue[n];i()}e.snippet.queue=void 0,delete e.snippet.queue}}catch(o){var a={};o&&B(o.toString)&&(a.exception=o.toString())}},t.prototype.pollInternalLogs=function(){this.core.pollInternalLogs()},t.prototype.addHousekeepingBeforeUnload=function(e){if(ar()||Zn()){var r=function(){e.onunloadFlush(!1),R(e.appInsights.core._extensions,function(i){if(i.identifier===Ot)return i&&i.context&&i.context._sessionManager&&i.context._sessionManager.backup(),-1})};if(!e.appInsights.config.disableFlushOnBeforeUnload){var n=Mt("beforeunload",r);n=Mt("unload",r)||n,n=Mt("pagehide",r)||n,n=Mt("visibilitychange",r)||n,!n&&!na()&&e.appInsights.core.logger.throwInternal(S.CRITICAL,h.FailedToAddHandlerForOnBeforeUnload,"Could not add handler for beforeunload and pagehide")}e.appInsights.config.disableFlushOnUnload||(Mt("pagehide",r),Mt("visibilitychange",r))}},t.prototype.getSender=function(){return this._sender},t.prototype.getSKUDefaults=function(){var e=this;e.config.diagnosticLogInterval=e.config.diagnosticLogInterval&&e.config.diagnosticLogInterval>0?e.config.diagnosticLogInterval:1e4},t}();(function(){var t=null,e=!1,r=["://js.monitor.azure.com/","://az416426.vo.msecnd.net/"];try{var n=(document||{}).currentScript;n&&(t=n.src)}catch(u){}if(t)try{var i=t.toLowerCase();if(i){for(var a="",o=0;o<r.length;o++)if(i.indexOf(r[o])!==-1){a="cdn"+(o+1),i.indexOf("/scripts/")===-1&&(i.indexOf("/next/")!==-1?a+="-next":i.indexOf("/beta/")!==-1&&(a+="-beta")),mo=a+(e?".mod":"");break}}}catch(u){}})()});var bl,dc,mc=I(()=>{xe();X();bl=["snippet","getDefaultConfig","_hasLegacyInitializers","_queue","_processLegacyInitializers"],dc=function(){function t(e,r){this._hasLegacyInitializers=!1,this._queue=[],this.config=t.getDefaultConfig(e.config),this.appInsightsNew=r,this.context={addTelemetryInitializer:this.addTelemetryInitializers.bind(this)}}return t.getDefaultConfig=function(e){return e||(e={}),e.endpointUrl=e.endpointUrl||"https://dc.services.visualstudio.com/v2/track",e.sessionRenewalMs=30*60*1e3,e.sessionExpirationMs=24*60*60*1e3,e.maxBatchSizeInBytes=e.maxBatchSizeInBytes>0?e.maxBatchSizeInBytes:102400,e.maxBatchInterval=isNaN(e.maxBatchInterval)?15e3:e.maxBatchInterval,e.enableDebug=ee(e.enableDebug),e.disableExceptionTracking=ee(e.disableExceptionTracking),e.disableTelemetry=ee(e.disableTelemetry),e.verboseLogging=ee(e.verboseLogging),e.emitLineDelimitedJson=ee(e.emitLineDelimitedJson),e.diagnosticLogInterval=e.diagnosticLogInterval||1e4,e.autoTrackPageVisitTime=ee(e.autoTrackPageVisitTime),(isNaN(e.samplingPercentage)||e.samplingPercentage<=0||e.samplingPercentage>=100)&&(e.samplingPercentage=100),e.disableAjaxTracking=ee(e.disableAjaxTracking),e.maxAjaxCallsPerView=isNaN(e.maxAjaxCallsPerView)?500:e.maxAjaxCallsPerView,e.isBeaconApiDisabled=ee(e.isBeaconApiDisabled,!0),e.disableCorrelationHeaders=ee(e.disableCorrelationHeaders),e.correlationHeaderExcludedDomains=e.correlationHeaderExcludedDomains||["*.blob.core.windows.net","*.blob.core.chinacloudapi.cn","*.blob.core.cloudapi.de","*.blob.core.usgovcloudapi.net"],e.disableFlushOnBeforeUnload=ee(e.disableFlushOnBeforeUnload),e.disableFlushOnUnload=ee(e.disableFlushOnUnload,e.disableFlushOnBeforeUnload),e.enableSessionStorageBuffer=ee(e.enableSessionStorageBuffer,!0),e.isRetryDisabled=ee(e.isRetryDisabled),e.isCookieUseDisabled=ee(e.isCookieUseDisabled),e.isStorageUseDisabled=ee(e.isStorageUseDisabled),e.isBrowserLinkTrackingEnabled=ee(e.isBrowserLinkTrackingEnabled),e.enableCorsCorrelation=ee(e.enableCorsCorrelation),e},t.prototype.addTelemetryInitializers=function(e){var r=this;this._hasLegacyInitializers||(this.appInsightsNew.addTelemetryInitializer(function(n){r._processLegacyInitializers(n)}),this._hasLegacyInitializers=!0),this._queue.push(e)},t.prototype.getCookieMgr=function(){return this.appInsightsNew.getCookieMgr()},t.prototype.startTrackPage=function(e){this.appInsightsNew.startTrackPage(e)},t.prototype.stopTrackPage=function(e,r,n,i){this.appInsightsNew.stopTrackPage(e,r,n)},t.prototype.trackPageView=function(e,r,n,i,a){var o={name:e,uri:r,properties:n,measurements:i};this.appInsightsNew.trackPageView(o)},t.prototype.trackEvent=function(e,r,n){this.appInsightsNew.trackEvent({name:e})},t.prototype.trackDependency=function(e,r,n,i,a,o,u){this.appInsightsNew.trackDependencyData({id:e,target:n,type:i,duration:a,properties:{HttpMethod:r},success:o,responseCode:u})},t.prototype.trackException=function(e,r,n,i,a){this.appInsightsNew.trackException({exception:e})},t.prototype.trackMetric=function(e,r,n,i,a,o){this.appInsightsNew.trackMetric({name:e,average:r,sampleCount:n,min:i,max:a})},t.prototype.trackTrace=function(e,r,n){this.appInsightsNew.trackTrace({message:e,severityLevel:n})},t.prototype.flush=function(e){this.appInsightsNew.flush(e)},t.prototype.setAuthenticatedUserContext=function(e,r,n){this.appInsightsNew.context.user.setAuthenticatedUserContext(e,r,n)},t.prototype.clearAuthenticatedUserContext=function(){this.appInsightsNew.context.user.clearAuthenticatedUserContext()},t.prototype._onerror=function(e,r,n,i,a){this.appInsightsNew._onerror({message:e,url:r,lineNumber:n,columnNumber:i,error:a})},t.prototype.startTrackEvent=function(e){this.appInsightsNew.startTrackEvent(e)},t.prototype.stopTrackEvent=function(e,r,n){this.appInsightsNew.stopTrackEvent(e,r,n)},t.prototype.downloadAndSetup=function(e){Ne("downloadAndSetup not implemented in web SKU")},t.prototype.updateSnippetDefinitions=function(e){Jr(e,this,function(r){return r&&bl.indexOf(r)===-1})},t.prototype.loadAppInsights=function(){var e=this;if(this.config.iKey){var r=this.trackPageView;this.trackPageView=function(a,o,u){r.apply(e,[null,a,o,u])}}var n="logPageView";typeof this.snippet[n]=="function"&&(this[n]=function(a,o,u){e.trackPageView(null,a,o,u)});var i="logEvent";return typeof this.snippet[i]=="function"&&(this[i]=function(a,o,u){e.trackEvent(a,o,u)}),this},t.prototype._processLegacyInitializers=function(e){return e.tags[_t]=this._queue,e},t}()});var vc,gc=I(()=>{mc();vo();X();vc=function(){function t(){}return t.getAppInsights=function(e,r){var n=new Ni(e),i=r!==2;if(Jt(),r===2)return n.updateSnippetDefinitions(e),n.loadAppInsights(i),n;var a=new dc(e,n);return a.updateSnippetDefinitions(e),n.loadAppInsights(i),a},t}()});var hc={};Cc(hc,{AppInsightsCore:()=>rn,ApplicationAnalytics:()=>Nn,ApplicationInsights:()=>Ni,ApplicationInsightsContainer:()=>vc,BaseCore:()=>en,BaseTelemetryPlugin:()=>et,CoreUtils:()=>un,DependenciesPlugin:()=>_n,DistributedTracingModes:()=>Ke,Event:()=>Ve,Exception:()=>he,LoggingSeverity:()=>S,Metric:()=>qe,NotificationManager:()=>tn,PageView:()=>ke,PageViewPerformance:()=>Ze,PerfEvent:()=>sr,PerfManager:()=>Qr,PropertiesPlugin:()=>kn,RemoteDependencyData:()=>je,Sender:()=>Dn,SeverityLevel:()=>Ut,Telemetry:()=>pc,Trace:()=>Qe,Util:()=>Cn,_InternalMessageId:()=>h,doPerf:()=>ut});var xc=I(()=>{vo();gc();X();xe();so();no();co();po()});function Vr(){let t="telemetry",e="enableTelemetry";try{let r=vscode__WEBPACK_IMPORTED_MODULE_0__.env.telemetryConfiguration;return r.isUsageEnabled&&r.isErrorsEnabled&&r.isCrashEnabled?"on":r.isErrorsEnabled&&r.isCrashEnabled?"error":"off"}catch(r){return vscode__WEBPACK_IMPORTED_MODULE_0__.env.isTelemetryEnabled!==void 0?vscode__WEBPACK_IMPORTED_MODULE_0__.env.isTelemetryEnabled?"on":"off":vscode__WEBPACK_IMPORTED_MODULE_0__.workspace.getConfiguration(t).get(e)?"on":"off"}}function ki(t,e){for(let r of Object.keys(t))for(let n of e)n.lookup.test(r)&&(n.replacementString!==void 0?t[r]=n.replacementString:delete t[r])}var Un=class{constructor(e,r){this._instantiationStatus=0;this._eventQueue=[];this._exceptionQueue=[];this._clientFactory=r,this._key=e,Vr()!=="off"&&this.instantiateAppender()}logEvent(e,r){if(!this._telemetryClient){this._instantiationStatus!==2&&this._eventQueue.push({eventName:e,data:r});return}this._telemetryClient.logEvent(e,r)}logException(e,r){if(!this._telemetryClient){this._instantiationStatus!==2&&this._exceptionQueue.push({exception:e,data:r});return}this._telemetryClient.logException(e,r)}flush(){return Hr(this,null,function*(){this._telemetryClient&&(yield this._telemetryClient.flush(),this._telemetryClient=void 0)})}_flushQueues(){this._eventQueue.forEach(({eventName:e,data:r})=>this.logEvent(e,r)),this._eventQueue=[],this._exceptionQueue.forEach(({exception:e,data:r})=>this.logException(e,r)),this._exceptionQueue=[]}instantiateAppender(){this._instantiationStatus===0&&(this._instantiationStatus=1,this._clientFactory(this._key).then(e=>{this._telemetryClient=e,this._instantiationStatus=2,this._flushQueues()}).catch(e=>{console.error(e),this._instantiationStatus=2}))}};var On=class{constructor(e,r,n,i,a){this.extensionId=e;this.extensionVersion=r;this.telemetryAppender=n;this.osShim=i;this.firstParty=!1;this.userOptIn=!1;this.errorOptIn=!1;this.disposables=[];this.firstParty=!!a,this.updateUserOptStatus(),vscode__WEBPACK_IMPORTED_MODULE_0__.env.onDidChangeTelemetryEnabled!==void 0?(this.disposables.push(vscode__WEBPACK_IMPORTED_MODULE_0__.env.onDidChangeTelemetryEnabled(()=>this.updateUserOptStatus())),this.disposables.push(vscode__WEBPACK_IMPORTED_MODULE_0__.workspace.onDidChangeConfiguration(()=>this.updateUserOptStatus()))):this.disposables.push(vscode__WEBPACK_IMPORTED_MODULE_0__.workspace.onDidChangeConfiguration(()=>this.updateUserOptStatus()))}updateUserOptStatus(){let e=Vr();this.userOptIn=e==="on",this.errorOptIn=e==="error"||this.userOptIn,(this.userOptIn||this.errorOptIn)&&this.telemetryAppender.instantiateAppender()}cleanRemoteName(e){if(!e)return"none";let r="other";return["ssh-remote","dev-container","attached-container","wsl","codespaces"].forEach(n=>{e.indexOf(`${n}`)===0&&(r=n)}),r}get extension(){return this._extension===void 0&&(this._extension=vscode__WEBPACK_IMPORTED_MODULE_0__.extensions.getExtension(this.extensionId)),this._extension}cloneAndChange(e,r){if(e===null||typeof e!="object"||typeof r!="function")return e;let n={};for(let i in e)n[i]=r(i,e[i]);return n}shouldSendErrorTelemetry(){return this.errorOptIn===!1?!1:this.firstParty?!(vscode__WEBPACK_IMPORTED_MODULE_0__.env.remoteName&&this.cleanRemoteName(vscode__WEBPACK_IMPORTED_MODULE_0__.env.remoteName)==="other"):!0}getCommonProperties(){let e=Object.create(null);if(e["common.os"]=this.osShim.platform,e["common.nodeArch"]=this.osShim.architecture,e["common.platformversion"]=(this.osShim.release||"").replace(/^(\d+)(\.\d+)?(\.\d+)?(.*)/,"$1$2$3"),e["common.extname"]=this.extensionId,e["common.extversion"]=this.extensionVersion,vscode__WEBPACK_IMPORTED_MODULE_0__&&vscode__WEBPACK_IMPORTED_MODULE_0__.env){switch(e["common.vscodemachineid"]=vscode__WEBPACK_IMPORTED_MODULE_0__.env.machineId,e["common.vscodesessionid"]=vscode__WEBPACK_IMPORTED_MODULE_0__.env.sessionId,e["common.vscodeversion"]=vscode__WEBPACK_IMPORTED_MODULE_0__.version,e["common.isnewappinstall"]=vscode__WEBPACK_IMPORTED_MODULE_0__.env.isNewAppInstall?vscode__WEBPACK_IMPORTED_MODULE_0__.env.isNewAppInstall.toString():"false",e["common.product"]=vscode__WEBPACK_IMPORTED_MODULE_0__.env.appHost,vscode__WEBPACK_IMPORTED_MODULE_0__.env.uiKind){case vscode__WEBPACK_IMPORTED_MODULE_0__.UIKind.Web:e["common.uikind"]="web";break;case vscode__WEBPACK_IMPORTED_MODULE_0__.UIKind.Desktop:e["common.uikind"]="desktop";break;default:e["common.uikind"]="unknown"}e["common.remotename"]=this.cleanRemoteName(vscode__WEBPACK_IMPORTED_MODULE_0__.env.remoteName)}return e}anonymizeFilePaths(e,r){let n;if(e==null)return"";let i=[];vscode__WEBPACK_IMPORTED_MODULE_0__.env.appRoot!==""&&i.push(new RegExp(vscode__WEBPACK_IMPORTED_MODULE_0__.env.appRoot.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"gi")),this.extension&&i.push(new RegExp(this.extension.extensionPath.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"gi"));let a=e;if(r){let o=[];for(let l of i)for(;(n=l.exec(e))&&n;)o.push([n.index,l.lastIndex]);let u=/^[\\/]?(node_modules|node_modules\.asar)[\\/]/,s=/(file:\/\/)?([a-zA-Z]:(\\\\|\\|\/)|(\\\\|\\|\/))?([\w-._]+(\\\\|\\|\/))+[\w-._]*/g,c=0;for(a="";(n=s.exec(e))&&n;)n[0]&&!u.test(n[0])&&o.every(([l,f])=>n.index<l||n.index>=f)&&(a+=e.substring(c,n.index)+"<REDACTED: user-file-path>",c=s.lastIndex);c<e.length&&(a+=e.substr(c))}for(let o of i)a=a.replace(o,"");return a}removePropertiesWithPossibleUserInfo(e){if(typeof e!="object")return;let r=Object.create(null);for(let n of Object.keys(e)){let i=e[n];if(!i)continue;let a=/@[a-zA-Z0-9-.]+/,o=/(key|token|sig|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/,u=/xox[pbaors]-[a-zA-Z0-9]+-[a-zA-Z0-9-]+?/;o.test(i.toLowerCase())?r[n]="<REDACTED: secret>":a.test(i)?r[n]="<REDACTED: email>":u.test(i)?r[n]="<REDACTED: token>":r[n]=i}return r}get telemetryLevel(){switch(Vr()){case"on":return"all";case"error":return"error";case"off":return"off"}}internalSendTelemetryEvent(e,r,n,i,a){if((this.userOptIn||a)&&e!==""){if(r=at(at({},r),this.getCommonProperties()),i){let o=this.cloneAndChange(r,(u,s)=>this.anonymizeFilePaths(s,this.firstParty));r=this.removePropertiesWithPossibleUserInfo(o)}e=`${this.extensionId}/${e}`,this.telemetryAppender.logEvent(e,{properties:r,measurements:n})}}sendTelemetryEvent(e,r,n){this.internalSendTelemetryEvent(e,r,n,!0,!1)}sendRawTelemetryEvent(e,r,n){this.internalSendTelemetryEvent(e,r,n,!1,!1)}sendDangerousTelemetryEvent(e,r,n,i=!0){this.telemetryAppender.instantiateAppender(),this.internalSendTelemetryEvent(e,r,n,i,!0)}internalSendTelemetryErrorEvent(e,r,n,i,a,o){if((this.shouldSendErrorTelemetry()||o)&&e!==""){if(r=at(at({},r),this.getCommonProperties()),a){let u=this.cloneAndChange(r,(s,c)=>i===void 0||i.indexOf(s)!==-1?"REDACTED":this.anonymizeFilePaths(c,this.firstParty));r=this.removePropertiesWithPossibleUserInfo(u)}this.telemetryAppender.logEvent(e,{properties:r,measurements:n})}}sendTelemetryErrorEvent(e,r,n,i){this.internalSendTelemetryErrorEvent(e,r,n,i,!0,!1)}sendDangerousTelemetryErrorEvent(e,r,n,i,a=!0){this.telemetryAppender.instantiateAppender(),this.internalSendTelemetryErrorEvent(e,r,n,i,a,!0)}internalSendTelemetryException(e,r,n,i,a){if((this.shouldSendErrorTelemetry()||a)&&e){if(r=at(at({},r),this.getCommonProperties()),i){let o=this.cloneAndChange(r,(u,s)=>this.anonymizeFilePaths(s,this.firstParty));e.stack&&(e.stack=this.anonymizeFilePaths(e.stack,this.firstParty)),r=this.removePropertiesWithPossibleUserInfo(o)}this.telemetryAppender.logException(e,{properties:r,measurements:n})}}sendTelemetryException(e,r,n){this.internalSendTelemetryException(e,r,n,!0,!1)}sendDangerousTelemetryException(e,r,n,i=!0){this.telemetryAppender.instantiateAppender(),this.internalSendTelemetryException(e,r,n,i,!0)}dispose(){return this.telemetryAppender.flush(),Promise.all(this.disposables.map(e=>e.dispose()))}};var Pl=(t,e)=>Hr(void 0,null,function*(){let r;try{let i=yield Promise.resolve().then(()=>(xc(),hc)),a;t&&t.indexOf("AIF-")===0&&(a="https://vortex.data.microsoft.com/collect/v1"),r=new i.ApplicationInsights({config:{instrumentationKey:t,endpointUrl:a,disableAjaxTracking:!0,disableExceptionTracking:!0,disableFetchTracking:!0,disableCorrelationHeaders:!0,disableCookiesUsage:!0,autoTrackPageVisitTime:!1,emitLineDelimitedJson:!0,disableInstrumentationKeyValidation:!0}}),r.loadAppInsights(),a&&fetch(a).catch(()=>r=void 0)}catch(i){return Promise.reject(i)}return{logEvent:(i,a)=>{let o=at(at({},a==null?void 0:a.properties),a==null?void 0:a.measurements);e!=null&&e.length&&ki(o,e),r==null||r.trackEvent({name:i},o)},logException:(i,a)=>{let o=at(at({},a==null?void 0:a.properties),a==null?void 0:a.measurements);e!=null&&e.length&&ki(o,e),r==null||r.trackException({exception:i,properties:o})},flush:()=>Hr(void 0,null,function*(){r==null||r.flush()})}}),go=class extends On{constructor(e,r,n,i,a){let o=new Un(n,u=>Pl(u,a));n&&n.indexOf("AIF-")===0&&(i=!0),super(e,r,o,{release:navigator.appVersion,platform:"web",architecture:"web"},i)}};
/*!
 * Microsoft Dynamic Proto Utility, 1.1.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/***/ }),

/***/ 30473:
/***/ ((module) => {

"use strict";
/*globals self, window */


/*eslint-disable @mysticatea/prettier */
const { AbortController, AbortSignal } =
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window :
    /* otherwise */ undefined
/*eslint-enable @mysticatea/prettier */

module.exports = AbortController
module.exports.AbortSignal = AbortSignal
module.exports["default"] = AbortController


/***/ }),

/***/ 18594:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);


const isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);
const identity = val => val;

/* eslint-disable no-control-regex */
// this is a modified version of https://github.com/chalk/ansi-regex (MIT License)
const ANSI_REGEX = /[\u001b\u009b][[\]#;?()]*(?:(?:(?:[^\W_]*;?[^\W_]*)\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g;

const create = () => {
  const colors = { enabled: true, visible: true, styles: {}, keys: {} };

  if ('FORCE_COLOR' in process.env) {
    colors.enabled = process.env.FORCE_COLOR !== '0';
  }

  const ansi = style => {
    let open = style.open = `\u001b[${style.codes[0]}m`;
    let close = style.close = `\u001b[${style.codes[1]}m`;
    let regex = style.regex = new RegExp(`\\u001b\\[${style.codes[1]}m`, 'g');
    style.wrap = (input, newline) => {
      if (input.includes(close)) input = input.replace(regex, close + open);
      let output = open + input + close;
      // see https://github.com/chalk/chalk/pull/92, thanks to the
      // chalk contributors for this fix. However, we've confirmed that
      // this issue is also present in Windows terminals
      return newline ? output.replace(/\r*\n/g, `${close}$&${open}`) : output;
    };
    return style;
  };

  const wrap = (style, input, newline) => {
    return typeof style === 'function' ? style(input) : style.wrap(input, newline);
  };

  const style = (input, stack) => {
    if (input === '' || input == null) return '';
    if (colors.enabled === false) return input;
    if (colors.visible === false) return '';
    let str = '' + input;
    let nl = str.includes('\n');
    let n = stack.length;
    if (n > 0 && stack.includes('unstyle')) {
      stack = [...new Set(['unstyle', ...stack])].reverse();
    }
    while (n-- > 0) str = wrap(colors.styles[stack[n]], str, nl);
    return str;
  };

  const define = (name, codes, type) => {
    colors.styles[name] = ansi({ name, codes });
    let keys = colors.keys[type] || (colors.keys[type] = []);
    keys.push(name);

    Reflect.defineProperty(colors, name, {
      configurable: true,
      enumerable: true,
      set(value) {
        colors.alias(name, value);
      },
      get() {
        let color = input => style(input, color.stack);
        Reflect.setPrototypeOf(color, colors);
        color.stack = this.stack ? this.stack.concat(name) : [name];
        return color;
      }
    });
  };

  define('reset', [0, 0], 'modifier');
  define('bold', [1, 22], 'modifier');
  define('dim', [2, 22], 'modifier');
  define('italic', [3, 23], 'modifier');
  define('underline', [4, 24], 'modifier');
  define('inverse', [7, 27], 'modifier');
  define('hidden', [8, 28], 'modifier');
  define('strikethrough', [9, 29], 'modifier');

  define('black', [30, 39], 'color');
  define('red', [31, 39], 'color');
  define('green', [32, 39], 'color');
  define('yellow', [33, 39], 'color');
  define('blue', [34, 39], 'color');
  define('magenta', [35, 39], 'color');
  define('cyan', [36, 39], 'color');
  define('white', [37, 39], 'color');
  define('gray', [90, 39], 'color');
  define('grey', [90, 39], 'color');

  define('bgBlack', [40, 49], 'bg');
  define('bgRed', [41, 49], 'bg');
  define('bgGreen', [42, 49], 'bg');
  define('bgYellow', [43, 49], 'bg');
  define('bgBlue', [44, 49], 'bg');
  define('bgMagenta', [45, 49], 'bg');
  define('bgCyan', [46, 49], 'bg');
  define('bgWhite', [47, 49], 'bg');

  define('blackBright', [90, 39], 'bright');
  define('redBright', [91, 39], 'bright');
  define('greenBright', [92, 39], 'bright');
  define('yellowBright', [93, 39], 'bright');
  define('blueBright', [94, 39], 'bright');
  define('magentaBright', [95, 39], 'bright');
  define('cyanBright', [96, 39], 'bright');
  define('whiteBright', [97, 39], 'bright');

  define('bgBlackBright', [100, 49], 'bgBright');
  define('bgRedBright', [101, 49], 'bgBright');
  define('bgGreenBright', [102, 49], 'bgBright');
  define('bgYellowBright', [103, 49], 'bgBright');
  define('bgBlueBright', [104, 49], 'bgBright');
  define('bgMagentaBright', [105, 49], 'bgBright');
  define('bgCyanBright', [106, 49], 'bgBright');
  define('bgWhiteBright', [107, 49], 'bgBright');

  colors.ansiRegex = ANSI_REGEX;
  colors.hasColor = colors.hasAnsi = str => {
    colors.ansiRegex.lastIndex = 0;
    return typeof str === 'string' && str !== '' && colors.ansiRegex.test(str);
  };

  colors.alias = (name, color) => {
    let fn = typeof color === 'string' ? colors[color] : color;

    if (typeof fn !== 'function') {
      throw new TypeError('Expected alias to be the name of an existing color (string) or a function');
    }

    if (!fn.stack) {
      Reflect.defineProperty(fn, 'name', { value: name });
      colors.styles[name] = fn;
      fn.stack = [name];
    }

    Reflect.defineProperty(colors, name, {
      configurable: true,
      enumerable: true,
      set(value) {
        colors.alias(name, value);
      },
      get() {
        let color = input => style(input, color.stack);
        Reflect.setPrototypeOf(color, colors);
        color.stack = this.stack ? this.stack.concat(fn.stack) : fn.stack;
        return color;
      }
    });
  };

  colors.theme = custom => {
    if (!isObject(custom)) throw new TypeError('Expected theme to be an object');
    for (let name of Object.keys(custom)) {
      colors.alias(name, custom[name]);
    }
    return colors;
  };

  colors.alias('unstyle', str => {
    if (typeof str === 'string' && str !== '') {
      colors.ansiRegex.lastIndex = 0;
      return str.replace(colors.ansiRegex, '');
    }
    return '';
  });

  colors.alias('noop', str => str);
  colors.none = colors.clear = colors.noop;

  colors.stripColor = colors.unstyle;
  colors.symbols = __webpack_require__(56544);
  colors.define = define;
  return colors;
};

module.exports = create();
module.exports.create = create;


/***/ }),

/***/ 56544:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);


const isHyper = process.env.TERM_PROGRAM === 'Hyper';
const isWindows = process.platform === 'win32';
const isLinux = process.platform === 'linux';

const common = {
  ballotDisabled: '☒',
  ballotOff: '☐',
  ballotOn: '☑',
  bullet: '•',
  bulletWhite: '◦',
  fullBlock: '█',
  heart: '❤',
  identicalTo: '≡',
  line: '─',
  mark: '※',
  middot: '·',
  minus: '－',
  multiplication: '×',
  obelus: '÷',
  pencilDownRight: '✎',
  pencilRight: '✏',
  pencilUpRight: '✐',
  percent: '%',
  pilcrow2: '❡',
  pilcrow: '¶',
  plusMinus: '±',
  section: '§',
  starsOff: '☆',
  starsOn: '★',
  upDownArrow: '↕'
};

const windows = Object.assign({}, common, {
  check: '√',
  cross: '×',
  ellipsisLarge: '...',
  ellipsis: '...',
  info: 'i',
  question: '?',
  questionSmall: '?',
  pointer: '>',
  pointerSmall: '»',
  radioOff: '( )',
  radioOn: '(*)',
  warning: '‼'
});

const other = Object.assign({}, common, {
  ballotCross: '✘',
  check: '✔',
  cross: '✖',
  ellipsisLarge: '⋯',
  ellipsis: '…',
  info: 'ℹ',
  question: '?',
  questionFull: '？',
  questionSmall: '﹖',
  pointer: isLinux ? '▸' : '❯',
  pointerSmall: isLinux ? '‣' : '›',
  radioOff: '◯',
  radioOn: '◉',
  warning: '⚠'
});

module.exports = (isWindows && !isHyper) ? windows : other;
Reflect.defineProperty(module.exports, 'common', { enumerable: false, value: common });
Reflect.defineProperty(module.exports, 'windows', { enumerable: false, value: windows });
Reflect.defineProperty(module.exports, 'other', { enumerable: false, value: other });


/***/ }),

/***/ 95518:
/***/ ((module) => {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


module.exports = {

  newInvalidAsn1Error: function (msg) {
    var e = new Error();
    e.name = 'InvalidAsn1Error';
    e.message = msg || '';
    return e;
  }

};


/***/ }),

/***/ 42697:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

var errors = __webpack_require__(95518);
var types = __webpack_require__(45805);

var Reader = __webpack_require__(99194);
var Writer = __webpack_require__(45766);


// --- Exports

module.exports = {

  Reader: Reader,

  Writer: Writer

};

for (var t in types) {
  if (types.hasOwnProperty(t))
    module.exports[t] = types[t];
}
for (var e in errors) {
  if (errors.hasOwnProperty(e))
    module.exports[e] = errors[e];
}


/***/ }),

/***/ 99194:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

var assert = __webpack_require__(39619);
var Buffer = (__webpack_require__(21788).Buffer);

var ASN1 = __webpack_require__(45805);
var errors = __webpack_require__(95518);


// --- Globals

var newInvalidAsn1Error = errors.newInvalidAsn1Error;



// --- API

function Reader(data) {
  if (!data || !Buffer.isBuffer(data))
    throw new TypeError('data must be a node Buffer');

  this._buf = data;
  this._size = data.length;

  // These hold the "current" state
  this._len = 0;
  this._offset = 0;
}

Object.defineProperty(Reader.prototype, 'length', {
  enumerable: true,
  get: function () { return (this._len); }
});

Object.defineProperty(Reader.prototype, 'offset', {
  enumerable: true,
  get: function () { return (this._offset); }
});

Object.defineProperty(Reader.prototype, 'remain', {
  get: function () { return (this._size - this._offset); }
});

Object.defineProperty(Reader.prototype, 'buffer', {
  get: function () { return (this._buf.slice(this._offset)); }
});


/**
 * Reads a single byte and advances offset; you can pass in `true` to make this
 * a "peek" operation (i.e., get the byte, but don't advance the offset).
 *
 * @param {Boolean} peek true means don't move offset.
 * @return {Number} the next byte, null if not enough data.
 */
Reader.prototype.readByte = function (peek) {
  if (this._size - this._offset < 1)
    return null;

  var b = this._buf[this._offset] & 0xff;

  if (!peek)
    this._offset += 1;

  return b;
};


Reader.prototype.peek = function () {
  return this.readByte(true);
};


/**
 * Reads a (potentially) variable length off the BER buffer.  This call is
 * not really meant to be called directly, as callers have to manipulate
 * the internal buffer afterwards.
 *
 * As a result of this call, you can call `Reader.length`, until the
 * next thing called that does a readLength.
 *
 * @return {Number} the amount of offset to advance the buffer.
 * @throws {InvalidAsn1Error} on bad ASN.1
 */
Reader.prototype.readLength = function (offset) {
  if (offset === undefined)
    offset = this._offset;

  if (offset >= this._size)
    return null;

  var lenB = this._buf[offset++] & 0xff;
  if (lenB === null)
    return null;

  if ((lenB & 0x80) === 0x80) {
    lenB &= 0x7f;

    if (lenB === 0)
      throw newInvalidAsn1Error('Indefinite length not supported');

    if (lenB > 4)
      throw newInvalidAsn1Error('encoding too long');

    if (this._size - offset < lenB)
      return null;

    this._len = 0;
    for (var i = 0; i < lenB; i++)
      this._len = (this._len << 8) + (this._buf[offset++] & 0xff);

  } else {
    // Wasn't a variable length
    this._len = lenB;
  }

  return offset;
};


/**
 * Parses the next sequence in this BER buffer.
 *
 * To get the length of the sequence, call `Reader.length`.
 *
 * @return {Number} the sequence's tag.
 */
Reader.prototype.readSequence = function (tag) {
  var seq = this.peek();
  if (seq === null)
    return null;
  if (tag !== undefined && tag !== seq)
    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                              ': got 0x' + seq.toString(16));

  var o = this.readLength(this._offset + 1); // stored in `length`
  if (o === null)
    return null;

  this._offset = o;
  return seq;
};


Reader.prototype.readInt = function () {
  return this._readTag(ASN1.Integer);
};


Reader.prototype.readBoolean = function () {
  return (this._readTag(ASN1.Boolean) === 0 ? false : true);
};


Reader.prototype.readEnumeration = function () {
  return this._readTag(ASN1.Enumeration);
};


Reader.prototype.readString = function (tag, retbuf) {
  if (!tag)
    tag = ASN1.OctetString;

  var b = this.peek();
  if (b === null)
    return null;

  if (b !== tag)
    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                              ': got 0x' + b.toString(16));

  var o = this.readLength(this._offset + 1); // stored in `length`

  if (o === null)
    return null;

  if (this.length > this._size - o)
    return null;

  this._offset = o;

  if (this.length === 0)
    return retbuf ? Buffer.alloc(0) : '';

  var str = this._buf.slice(this._offset, this._offset + this.length);
  this._offset += this.length;

  return retbuf ? str : str.toString('utf8');
};

Reader.prototype.readOID = function (tag) {
  if (!tag)
    tag = ASN1.OID;

  var b = this.readString(tag, true);
  if (b === null)
    return null;

  var values = [];
  var value = 0;

  for (var i = 0; i < b.length; i++) {
    var byte = b[i] & 0xff;

    value <<= 7;
    value += byte & 0x7f;
    if ((byte & 0x80) === 0) {
      values.push(value);
      value = 0;
    }
  }

  value = values.shift();
  values.unshift(value % 40);
  values.unshift((value / 40) >> 0);

  return values.join('.');
};


Reader.prototype._readTag = function (tag) {
  assert.ok(tag !== undefined);

  var b = this.peek();

  if (b === null)
    return null;

  if (b !== tag)
    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                              ': got 0x' + b.toString(16));

  var o = this.readLength(this._offset + 1); // stored in `length`
  if (o === null)
    return null;

  if (this.length > 4)
    throw newInvalidAsn1Error('Integer too long: ' + this.length);

  if (this.length > this._size - o)
    return null;
  this._offset = o;

  var fb = this._buf[this._offset];
  var value = 0;

  for (var i = 0; i < this.length; i++) {
    value <<= 8;
    value |= (this._buf[this._offset++] & 0xff);
  }

  if ((fb & 0x80) === 0x80 && i !== 4)
    value -= (1 << (i * 8));

  return value >> 0;
};



// --- Exported API

module.exports = Reader;


/***/ }),

/***/ 45805:
/***/ ((module) => {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


module.exports = {
  EOC: 0,
  Boolean: 1,
  Integer: 2,
  BitString: 3,
  OctetString: 4,
  Null: 5,
  OID: 6,
  ObjectDescriptor: 7,
  External: 8,
  Real: 9, // float
  Enumeration: 10,
  PDV: 11,
  Utf8String: 12,
  RelativeOID: 13,
  Sequence: 16,
  Set: 17,
  NumericString: 18,
  PrintableString: 19,
  T61String: 20,
  VideotexString: 21,
  IA5String: 22,
  UTCTime: 23,
  GeneralizedTime: 24,
  GraphicString: 25,
  VisibleString: 26,
  GeneralString: 28,
  UniversalString: 29,
  CharacterString: 30,
  BMPString: 31,
  Constructor: 32,
  Context: 128
};


/***/ }),

/***/ 45766:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

var assert = __webpack_require__(39619);
var Buffer = (__webpack_require__(21788).Buffer);
var ASN1 = __webpack_require__(45805);
var errors = __webpack_require__(95518);


// --- Globals

var newInvalidAsn1Error = errors.newInvalidAsn1Error;

var DEFAULT_OPTS = {
  size: 1024,
  growthFactor: 8
};


// --- Helpers

function merge(from, to) {
  assert.ok(from);
  assert.equal(typeof (from), 'object');
  assert.ok(to);
  assert.equal(typeof (to), 'object');

  var keys = Object.getOwnPropertyNames(from);
  keys.forEach(function (key) {
    if (to[key])
      return;

    var value = Object.getOwnPropertyDescriptor(from, key);
    Object.defineProperty(to, key, value);
  });

  return to;
}



// --- API

function Writer(options) {
  options = merge(DEFAULT_OPTS, options || {});

  this._buf = Buffer.alloc(options.size || 1024);
  this._size = this._buf.length;
  this._offset = 0;
  this._options = options;

  // A list of offsets in the buffer where we need to insert
  // sequence tag/len pairs.
  this._seq = [];
}

Object.defineProperty(Writer.prototype, 'buffer', {
  get: function () {
    if (this._seq.length)
      throw newInvalidAsn1Error(this._seq.length + ' unended sequence(s)');

    return (this._buf.slice(0, this._offset));
  }
});

Writer.prototype.writeByte = function (b) {
  if (typeof (b) !== 'number')
    throw new TypeError('argument must be a Number');

  this._ensure(1);
  this._buf[this._offset++] = b;
};


Writer.prototype.writeInt = function (i, tag) {
  if (typeof (i) !== 'number')
    throw new TypeError('argument must be a Number');
  if (typeof (tag) !== 'number')
    tag = ASN1.Integer;

  var sz = 4;

  while ((((i & 0xff800000) === 0) || ((i & 0xff800000) === 0xff800000 >> 0)) &&
        (sz > 1)) {
    sz--;
    i <<= 8;
  }

  if (sz > 4)
    throw newInvalidAsn1Error('BER ints cannot be > 0xffffffff');

  this._ensure(2 + sz);
  this._buf[this._offset++] = tag;
  this._buf[this._offset++] = sz;

  while (sz-- > 0) {
    this._buf[this._offset++] = ((i & 0xff000000) >>> 24);
    i <<= 8;
  }

};


Writer.prototype.writeNull = function () {
  this.writeByte(ASN1.Null);
  this.writeByte(0x00);
};


Writer.prototype.writeEnumeration = function (i, tag) {
  if (typeof (i) !== 'number')
    throw new TypeError('argument must be a Number');
  if (typeof (tag) !== 'number')
    tag = ASN1.Enumeration;

  return this.writeInt(i, tag);
};


Writer.prototype.writeBoolean = function (b, tag) {
  if (typeof (b) !== 'boolean')
    throw new TypeError('argument must be a Boolean');
  if (typeof (tag) !== 'number')
    tag = ASN1.Boolean;

  this._ensure(3);
  this._buf[this._offset++] = tag;
  this._buf[this._offset++] = 0x01;
  this._buf[this._offset++] = b ? 0xff : 0x00;
};


Writer.prototype.writeString = function (s, tag) {
  if (typeof (s) !== 'string')
    throw new TypeError('argument must be a string (was: ' + typeof (s) + ')');
  if (typeof (tag) !== 'number')
    tag = ASN1.OctetString;

  var len = Buffer.byteLength(s);
  this.writeByte(tag);
  this.writeLength(len);
  if (len) {
    this._ensure(len);
    this._buf.write(s, this._offset);
    this._offset += len;
  }
};


Writer.prototype.writeBuffer = function (buf, tag) {
  if (typeof (tag) !== 'number')
    throw new TypeError('tag must be a number');
  if (!Buffer.isBuffer(buf))
    throw new TypeError('argument must be a buffer');

  this.writeByte(tag);
  this.writeLength(buf.length);
  this._ensure(buf.length);
  buf.copy(this._buf, this._offset, 0, buf.length);
  this._offset += buf.length;
};


Writer.prototype.writeStringArray = function (strings) {
  if ((!strings instanceof Array))
    throw new TypeError('argument must be an Array[String]');

  var self = this;
  strings.forEach(function (s) {
    self.writeString(s);
  });
};

// This is really to solve DER cases, but whatever for now
Writer.prototype.writeOID = function (s, tag) {
  if (typeof (s) !== 'string')
    throw new TypeError('argument must be a string');
  if (typeof (tag) !== 'number')
    tag = ASN1.OID;

  if (!/^([0-9]+\.){3,}[0-9]+$/.test(s))
    throw new Error('argument is not a valid OID string');

  function encodeOctet(bytes, octet) {
    if (octet < 128) {
        bytes.push(octet);
    } else if (octet < 16384) {
        bytes.push((octet >>> 7) | 0x80);
        bytes.push(octet & 0x7F);
    } else if (octet < 2097152) {
      bytes.push((octet >>> 14) | 0x80);
      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
      bytes.push(octet & 0x7F);
    } else if (octet < 268435456) {
      bytes.push((octet >>> 21) | 0x80);
      bytes.push(((octet >>> 14) | 0x80) & 0xFF);
      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
      bytes.push(octet & 0x7F);
    } else {
      bytes.push(((octet >>> 28) | 0x80) & 0xFF);
      bytes.push(((octet >>> 21) | 0x80) & 0xFF);
      bytes.push(((octet >>> 14) | 0x80) & 0xFF);
      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
      bytes.push(octet & 0x7F);
    }
  }

  var tmp = s.split('.');
  var bytes = [];
  bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));
  tmp.slice(2).forEach(function (b) {
    encodeOctet(bytes, parseInt(b, 10));
  });

  var self = this;
  this._ensure(2 + bytes.length);
  this.writeByte(tag);
  this.writeLength(bytes.length);
  bytes.forEach(function (b) {
    self.writeByte(b);
  });
};


Writer.prototype.writeLength = function (len) {
  if (typeof (len) !== 'number')
    throw new TypeError('argument must be a Number');

  this._ensure(4);

  if (len <= 0x7f) {
    this._buf[this._offset++] = len;
  } else if (len <= 0xff) {
    this._buf[this._offset++] = 0x81;
    this._buf[this._offset++] = len;
  } else if (len <= 0xffff) {
    this._buf[this._offset++] = 0x82;
    this._buf[this._offset++] = len >> 8;
    this._buf[this._offset++] = len;
  } else if (len <= 0xffffff) {
    this._buf[this._offset++] = 0x83;
    this._buf[this._offset++] = len >> 16;
    this._buf[this._offset++] = len >> 8;
    this._buf[this._offset++] = len;
  } else {
    throw newInvalidAsn1Error('Length too long (> 4 bytes)');
  }
};

Writer.prototype.startSequence = function (tag) {
  if (typeof (tag) !== 'number')
    tag = ASN1.Sequence | ASN1.Constructor;

  this.writeByte(tag);
  this._seq.push(this._offset);
  this._ensure(3);
  this._offset += 3;
};


Writer.prototype.endSequence = function () {
  var seq = this._seq.pop();
  var start = seq + 3;
  var len = this._offset - start;

  if (len <= 0x7f) {
    this._shift(start, len, -2);
    this._buf[seq] = len;
  } else if (len <= 0xff) {
    this._shift(start, len, -1);
    this._buf[seq] = 0x81;
    this._buf[seq + 1] = len;
  } else if (len <= 0xffff) {
    this._buf[seq] = 0x82;
    this._buf[seq + 1] = len >> 8;
    this._buf[seq + 2] = len;
  } else if (len <= 0xffffff) {
    this._shift(start, len, 1);
    this._buf[seq] = 0x83;
    this._buf[seq + 1] = len >> 16;
    this._buf[seq + 2] = len >> 8;
    this._buf[seq + 3] = len;
  } else {
    throw newInvalidAsn1Error('Sequence too long');
  }
};


Writer.prototype._shift = function (start, len, shift) {
  assert.ok(start !== undefined);
  assert.ok(len !== undefined);
  assert.ok(shift);

  this._buf.copy(this._buf, start + shift, start, start + len);
  this._offset += shift;
};

Writer.prototype._ensure = function (len) {
  assert.ok(len);

  if (this._size - this._offset < len) {
    var sz = this._size * this._options.growthFactor;
    if (sz - this._offset < len)
      sz += len;

    var buf = Buffer.alloc(sz);

    this._buf.copy(buf, 0, 0, this._offset);
    this._buf = buf;
    this._size = sz;
  }
};



// --- Exported API

module.exports = Writer;


/***/ }),

/***/ 22803:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

// If you have no idea what ASN.1 or BER is, see this:
// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc

var Ber = __webpack_require__(42697);



// --- Exported API

module.exports = {

  Ber: Ber,

  BerReader: Ber.Reader,

  BerWriter: Ber.Writer

};


/***/ }),

/***/ 39619:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(51404),
    _require$codes = _require.codes,
    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;

var AssertionError = __webpack_require__(87366);

var _require2 = __webpack_require__(71323),
    inspect = _require2.inspect;

var _require$types = (__webpack_require__(71323).types),
    isPromise = _require$types.isPromise,
    isRegExp = _require$types.isRegExp;

var objectAssign = Object.assign ? Object.assign : (__webpack_require__(42098).assign);
var objectIs = Object.is ? Object.is : __webpack_require__(83822);
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;

function lazyLoadComparison() {
  var comparison = __webpack_require__(40118);

  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex


var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = (/* unused pure expression or super */ null && (["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"]));

var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};

var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}

function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;

  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }

    if (argsLen === 2) operator = '!=';
  }

  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };

  if (message !== undefined) {
    errArgs.message = message;
  }

  var err = new AssertionError(errArgs);

  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }

  throw err;
}

assert.fail = fail; // The AssertionError is defined in internal/error.

assert.AssertionError = AssertionError;

function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;

    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }

    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.


function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  innerOk.apply(void 0, [ok, args.length].concat(args));
}

assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

/* eslint-disable no-restricted-properties */

assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.


assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
}; // The equivalence assertion tests a deep equality relation.


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
}; // The non-equivalence assertion tests for any deep inequality.


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */


assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};

var Comparison = function Comparison(obj, keys, actual) {
  var _this = this;

  _classCallCheck(this, Comparison);

  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
};

function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }

    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}

function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    } // Handle primitives properly.


    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }

    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
    // as well.

    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }

    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
        return;
      }

      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  } // Guard instanceof against arrow functions as they don't have a prototype.


  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }

  try {
    fn();
  } catch (e) {
    return e;
  }

  return NO_EXCEPTION_SENTINEL;
}

function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.
  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.
  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}

function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;

    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn(); // Fail in case no promise is returned.

      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }

    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}

function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }

    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }

    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }

  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';

    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }

    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }

  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}

function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;

  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }

  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }

  throw actual;
}

assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};

assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};

assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};

assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};

assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';

    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }

    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    }); // Make sure we actually have a stack trace!

    var origStack = err.stack;

    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift(); // Filter all frames existing in err.stack.

      var tmp1 = newErr.stack.split('\n');

      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);

        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }

      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }

    throw newErr;
  }
}; // Expose a strict only variant of assert


function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  innerOk.apply(void 0, [strict, args.length].concat(args));
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

/***/ }),

/***/ 87366:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c


function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = __webpack_require__(71323),
    inspect = _require.inspect;

var _require2 = __webpack_require__(51404),
    ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));

  while (count) {
    str += str;
    count--;
  }

  str += str.substring(0, maxCount - str.length);
  return str;
}

var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
}; // Comparing short primitives should just show === / !== instead of using the
// diff.

var kMaxShortLength = 10;

function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}

function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}

function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.

  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  } // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.


  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.

    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;

      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        } // Ignore the first characters.


        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  } // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).


  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];

  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }

    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }

  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.


    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);

      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }

    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }

  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }

  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }

  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");

  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;

    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the expected line to the cache.

      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++; // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the actual line to the result.

      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++; // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.

      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //

      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }

      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }

          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        } // Mark the current line as the last diverging one.


        lastPos = i; // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.

        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2; // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = ''; // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.

        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    } // Inspected object to big (Show ~20 rows max)


    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }

  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}

var AssertionError =
/*#__PURE__*/
function (_Error) {
  _inherits(AssertionError, _Error);

  function AssertionError(options) {
    var _this;

    _classCallCheck(this, AssertionError);

    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }

    var message = options.message,
        operator = options.operator,
        stackStartFn = options.stackStartFn;
    var actual = options.actual,
        expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;

    if (message != null) {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      } // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.


      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }

      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        } // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.


        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);

          while (res.length > 27) {
            res.pop();
          }
        } // Only print a single input.


        if (res.length === 1) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
        } else {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
        }
      } else {
        var _res = inspectValue(actual);

        var other = '';
        var knownOperators = kReadableOperator[operator];

        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));

          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }

          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }

          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }

        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
      }
    }

    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;

    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    } // Create error message including the error code in the name.


    _this.stack; // Reset the name.

    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }

  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: inspect.custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread({}, ctx, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);

  return AssertionError;
}(_wrapNativeSuper(Error));

module.exports = AssertionError;

/***/ }),

/***/ 51404:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */

/* eslint node-core/alphabetize-errors: "error" */

/* eslint node-core/prefer-util-format-errors: "error" */
 // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var codes = {}; // Lazy loaded

var assert;
var util;

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inherits(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      var _this;

      _classCallCheck(this, NodeError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
      _this.code = code;
      return _this;
    }

    return NodeError;
  }(Base);

  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__(39619);
  assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } // TODO(BridgeAR): Improve the output by showing `null` and similar.


  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__(71323);
  var inspected = util.inspect(value);

  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }

  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;

  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }

  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (assert === undefined) assert = __webpack_require__(39619);
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });

  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;

    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;

    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }

  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

/***/ }),

/***/ 40118:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var regexFlagsSupported = /a/g.flags !== undefined;

var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};

var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};

var objectIs = Object.is ? Object.is : __webpack_require__(83822);
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(74866);

function uncurryThis(f) {
  return f.call.bind(f);
}

var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);

var _require$types = (__webpack_require__(71323).types),
    isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
    isArrayBufferView = _require$types.isArrayBufferView,
    isDate = _require$types.isDate,
    isMap = _require$types.isMap,
    isRegExp = _require$types.isRegExp,
    isSet = _require$types.isSet,
    isNativeError = _require$types.isNativeError,
    isBoxedPrimitive = _require$types.isBoxedPrimitive,
    isNumberObject = _require$types.isNumberObject,
    isStringObject = _require$types.isStringObject,
    isBooleanObject = _require$types.isBooleanObject,
    isBigIntObject = _require$types.isBigIntObject,
    isSymbolObject = _require$types.isSymbolObject,
    isFloat32Array = _require$types.isFloat32Array,
    isFloat64Array = _require$types.isFloat64Array;

function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;

  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  } // The maximum size for an array is 2 ** 32 -1.


  return key.length === 10 && key >= Math.pow(2, 32);
}

function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags

function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}

function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }

  return true;
}

function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}

function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}

function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }

  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }

  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }

  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }

  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.


function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  } // Check more closely if val1 and val2 are equal.


  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }

    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }

    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }

      return false;
    }

    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }

  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);

  if (val1Tag !== val2Tag) {
    return false;
  }

  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }

    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (keys1.length !== keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.


  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }

  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    } // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.


    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);

    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (_keys.length !== _keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }

  return keyCheck(val1, val2, strict, memos, kNoIterator);
}

function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}

function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

    if (aKeys.length !== bKeys.length) {
      return false;
    }
  } // Cheap key test


  var i = 0;

  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }

  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);

    if (symbolKeysA.length !== 0) {
      var count = 0;

      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];

        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }

          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }

      var symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }

  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  } // Use memos to handle cycles.


  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);

    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);

      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }

    memos.position++;
  }

  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}

function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];

    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }

  return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').


function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;

    case 'object':
      // Only pass in null as object!
      return undefined;

    case 'symbol':
      return false;

    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through

    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }

  }

  return true;
}

function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}

function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null) {
    return altValue;
  }

  var curB = b.get(altValue);

  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }

  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}

function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);

  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.

    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      } // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.


      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }

      if (set === null) {
        set = new Set();
      }

      set.add(val);
    }
  }

  if (set !== null) {
    var bValues = arrayFromSet(b);

    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i]; // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.

      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];

    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }

  return false;
}

function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);

  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
        key = _aEntries$i[0],
        item1 = _aEntries$i[1];

    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }

      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);

      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
        // keys.

        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

        if (set === null) {
          set = new Set();
        }

        set.add(key);
      }
    }
  }

  if (set !== null) {
    var bEntries = arrayFromMap(b);

    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
          key = _bEntries$_i[0],
          item = _bEntries$_i[1];

      if (_typeof(key) === 'object' && key !== null) {
        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;

  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);

        for (; i < keysA.length; i++) {
          var key = keysA[i];

          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }

        if (keysA.length !== Object.keys(b).length) {
          return false;
        }

        return true;
      }
    }
  } // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:


  for (i = 0; i < keys.length; i++) {
    var _key = keys[i];

    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
      return false;
    }
  }

  return true;
}

function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}

function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}

module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

/***/ }),

/***/ 72045:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);

class Semaphore {
    constructor(count) {
        this.tasks = [];
        this.count = count;
    }
    sched() {
        if (this.count > 0 && this.tasks.length > 0) {
            this.count--;
            let next = this.tasks.shift();
            if (next === undefined) {
                throw "Unexpected undefined value in tasks list";
            }
            next();
        }
    }
    acquire() {
        return new Promise((res, rej) => {
            var task = () => {
                var released = false;
                res(() => {
                    if (!released) {
                        released = true;
                        this.count++;
                        this.sched();
                    }
                });
            };
            this.tasks.push(task);
            if (process && process.nextTick) {
                process.nextTick(this.sched.bind(this));
            }
            else {
                setImmediate(this.sched.bind(this));
            }
        });
    }
    use(f) {
        return this.acquire()
            .then(release => {
            return f()
                .then((res) => {
                release();
                return res;
            })
                .catch((err) => {
                release();
                throw err;
            });
        });
    }
}
exports.Semaphore = Semaphore;
class Mutex extends Semaphore {
    constructor() {
        super(1);
    }
}
exports.Mutex = Mutex;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 79:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const axiosRetry = (__webpack_require__(24386)/* ["default"] */ .ZP);

module.exports = axiosRetry;
module.exports["default"] = axiosRetry;


/***/ }),

/***/ 14206:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(8057);

/***/ }),

/***/ 14387:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);
var settle = __webpack_require__(94570);
var cookies = __webpack_require__(12940);
var buildURL = __webpack_require__(60581);
var buildFullPath = __webpack_require__(30574);
var parseHeaders = __webpack_require__(53845);
var isURLSameOrigin = __webpack_require__(38338);
var transitionalDefaults = __webpack_require__(74832);
var AxiosError = __webpack_require__(37354);
var CanceledError = __webpack_require__(28870);
var parseProtocol = __webpack_require__(14906);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);

    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new CanceledError() : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    var protocol = parseProtocol(fullPath);

    if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {
      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ 8057:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);
var bind = __webpack_require__(875);
var Axios = __webpack_require__(25029);
var mergeConfig = __webpack_require__(44941);
var defaults = __webpack_require__(98396);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.CanceledError = __webpack_require__(28870);
axios.CancelToken = __webpack_require__(34603);
axios.isCancel = __webpack_require__(21475);
axios.VERSION = (__webpack_require__(73345).version);
axios.toFormData = __webpack_require__(91020);

// Expose AxiosError class
axios.AxiosError = __webpack_require__(37354);

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(35739);

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(35835);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ 34603:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var CanceledError = __webpack_require__(28870);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new CanceledError(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `CanceledError` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ 28870:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var AxiosError = __webpack_require__(37354);
var utils = __webpack_require__(67485);

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function CanceledError(message) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED);
  this.name = 'CanceledError';
}

utils.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});

module.exports = CanceledError;


/***/ }),

/***/ 21475:
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ 25029:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);
var buildURL = __webpack_require__(60581);
var InterceptorManager = __webpack_require__(68096);
var dispatchRequest = __webpack_require__(55009);
var mergeConfig = __webpack_require__(44941);
var buildFullPath = __webpack_require__(30574);
var validator = __webpack_require__(36144);

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  var fullPath = buildFullPath(config.baseURL, config.url);
  return buildURL(fullPath, config.params, config.paramsSerializer);
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method: method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url: url,
        data: data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

module.exports = Axios;


/***/ }),

/***/ 37354:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

var prototype = AxiosError.prototype;
var descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED'
// eslint-disable-next-line func-names
].forEach(function(code) {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = function(error, code, config, request, response, customProps) {
  var axiosError = Object.create(prototype);

  utils.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

module.exports = AxiosError;


/***/ }),

/***/ 68096:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ 30574:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(32642);
var combineURLs = __webpack_require__(72288);

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ 55009:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);
var transformData = __webpack_require__(9212);
var isCancel = __webpack_require__(21475);
var defaults = __webpack_require__(98396);
var CanceledError = __webpack_require__(28870);

/**
 * Throws a `CanceledError` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ 44941:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'beforeRedirect': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};


/***/ }),

/***/ 94570:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var AxiosError = __webpack_require__(37354);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError(
      'Request failed with status code ' + response.status,
      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ 9212:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);
var defaults = __webpack_require__(98396);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ 98396:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);


var utils = __webpack_require__(67485);
var normalizeHeaderName = __webpack_require__(51446);
var AxiosError = __webpack_require__(37354);
var transitionalDefaults = __webpack_require__(74832);
var toFormData = __webpack_require__(91020);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(14387);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(14387);
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: transitionalDefaults,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    var isObjectPayload = utils.isObject(data);
    var contentType = headers && headers['Content-Type'];

    var isFileList;

    if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {
      var _FormData = this.env && this.env.FormData;
      return toFormData(isFileList ? {'files[]': data} : data, _FormData && new _FormData());
    } else if (isObjectPayload || contentType === 'application/json') {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: __webpack_require__(88750)
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ 74832:
/***/ ((module) => {

"use strict";


module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};


/***/ }),

/***/ 73345:
/***/ ((module) => {

module.exports = {
  "version": "0.27.2"
};

/***/ }),

/***/ 875:
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ 60581:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ 72288:
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ 12940:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ 32642:
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ 35835:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};


/***/ }),

/***/ 38338:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ 51446:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ 88750:
/***/ ((module) => {

// eslint-disable-next-line strict
module.exports = null;


/***/ }),

/***/ 53845:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(67485);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ 14906:
/***/ ((module) => {

"use strict";


module.exports = function parseProtocol(url) {
  var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
};


/***/ }),

/***/ 35739:
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ 91020:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];


var utils = __webpack_require__(67485);

/**
 * Convert a data object to FormData
 * @param {Object} obj
 * @param {?Object} [formData]
 * @returns {Object}
 **/

function toFormData(obj, formData) {
  // eslint-disable-next-line no-param-reassign
  formData = formData || new FormData();

  var stack = [];

  function convertValue(value) {
    if (value === null) return '';

    if (utils.isDate(value)) {
      return value.toISOString();
    }

    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
      return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  function build(data, parentKey) {
    if (utils.isPlainObject(data) || utils.isArray(data)) {
      if (stack.indexOf(data) !== -1) {
        throw Error('Circular reference detected in ' + parentKey);
      }

      stack.push(data);

      utils.forEach(data, function each(value, key) {
        if (utils.isUndefined(value)) return;
        var fullKey = parentKey ? parentKey + '.' + key : key;
        var arr;

        if (value && !parentKey && typeof value === 'object') {
          if (utils.endsWith(key, '{}')) {
            // eslint-disable-next-line no-param-reassign
            value = JSON.stringify(value);
          } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
            // eslint-disable-next-line func-names
            arr.forEach(function(el) {
              !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
            });
            return;
          }
        }

        build(value, fullKey);
      });

      stack.pop();
    } else {
      formData.append(parentKey, convertValue(data));
    }
  }

  build(obj);

  return formData;
}

module.exports = toFormData;


/***/ }),

/***/ 36144:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var VERSION = (__webpack_require__(73345).version);
var AxiosError = __webpack_require__(37354);

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ 67485:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(875);

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

// eslint-disable-next-line func-names
var kindOf = (function(cache) {
  // eslint-disable-next-line func-names
  return function(thing) {
    var str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  };
})(Object.create(null));

function kindOfTest(type) {
  type = type.toLowerCase();
  return function isKindOf(thing) {
    return kindOf(thing) === type;
  };
}

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
var isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (kindOf(val) !== 'object') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
var isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
var isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
var isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
var isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} thing The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(thing) {
  var pattern = '[object FormData]';
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) ||
    toString.call(thing) === pattern ||
    (isFunction(thing.toString) && thing.toString() === pattern)
  );
}

/**
 * Determine if a value is a URLSearchParams object
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
var isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 */

function inherits(constructor, superConstructor, props, descriptors) {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function} [filter]
 * @returns {Object}
 */

function toFlatObject(sourceObj, destObj, filter) {
  var props;
  var i;
  var prop;
  var merged = {};

  destObj = destObj || {};

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if (!merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = Object.getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/*
 * determines whether a string ends with the characters of a specified string
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 * @returns {boolean}
 */
function endsWith(str, searchString, position) {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  var lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object
 * @param {*} [thing]
 * @returns {Array}
 */
function toArray(thing) {
  if (!thing) return null;
  var i = thing.length;
  if (isUndefined(i)) return null;
  var arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

// eslint-disable-next-line func-names
var isTypedArray = (function(TypedArray) {
  // eslint-disable-next-line func-names
  return function(thing) {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM,
  inherits: inherits,
  toFlatObject: toFlatObject,
  kindOf: kindOf,
  kindOfTest: kindOfTest,
  endsWith: endsWith,
  toArray: toArray,
  isTypedArray: isTypedArray,
  isFileList: isFileList
};


/***/ }),

/***/ 24782:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ 3031:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var register = __webpack_require__(86965)
var addHook = __webpack_require__(43786)
var removeHook = __webpack_require__(30509)

// bind with array of arguments: https://stackoverflow.com/a/21792913
var bind = Function.bind
var bindable = bind.bind(bind)

function bindApi (hook, state, name) {
  var removeHookRef = bindable(removeHook, null).apply(null, name ? [state, name] : [state])
  hook.api = { remove: removeHookRef }
  hook.remove = removeHookRef

  ;['before', 'error', 'after', 'wrap'].forEach(function (kind) {
    var args = name ? [state, kind, name] : [state, kind]
    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args)
  })
}

function HookSingular () {
  var singularHookName = 'h'
  var singularHookState = {
    registry: {}
  }
  var singularHook = register.bind(null, singularHookState, singularHookName)
  bindApi(singularHook, singularHookState, singularHookName)
  return singularHook
}

function HookCollection () {
  var state = {
    registry: {}
  }

  var hook = register.bind(null, state)
  bindApi(hook, state)

  return hook
}

var collectionHookDeprecationMessageDisplayed = false
function Hook () {
  if (!collectionHookDeprecationMessageDisplayed) {
    console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4')
    collectionHookDeprecationMessageDisplayed = true
  }
  return HookCollection()
}

Hook.Singular = HookSingular.bind()
Hook.Collection = HookCollection.bind()

module.exports = Hook
// expose constructors as a named property for TypeScript
module.exports.Hook = Hook
module.exports.Singular = Hook.Singular
module.exports.Collection = Hook.Collection


/***/ }),

/***/ 43786:
/***/ ((module) => {

module.exports = addHook;

function addHook(state, kind, name, hook) {
  var orig = hook;
  if (!state.registry[name]) {
    state.registry[name] = [];
  }

  if (kind === "before") {
    hook = function (method, options) {
      return Promise.resolve()
        .then(orig.bind(null, options))
        .then(method.bind(null, options));
    };
  }

  if (kind === "after") {
    hook = function (method, options) {
      var result;
      return Promise.resolve()
        .then(method.bind(null, options))
        .then(function (result_) {
          result = result_;
          return orig(result, options);
        })
        .then(function () {
          return result;
        });
    };
  }

  if (kind === "error") {
    hook = function (method, options) {
      return Promise.resolve()
        .then(method.bind(null, options))
        .catch(function (error) {
          return orig(error, options);
        });
    };
  }

  state.registry[name].push({
    hook: hook,
    orig: orig,
  });
}


/***/ }),

/***/ 86965:
/***/ ((module) => {

module.exports = register;

function register(state, name, method, options) {
  if (typeof method !== "function") {
    throw new Error("method for before hook must be a function");
  }

  if (!options) {
    options = {};
  }

  if (Array.isArray(name)) {
    return name.reverse().reduce(function (callback, name) {
      return register.bind(null, state, name, callback, options);
    }, method)();
  }

  return Promise.resolve().then(function () {
    if (!state.registry[name]) {
      return method(options);
    }

    return state.registry[name].reduce(function (method, registered) {
      return registered.hook.bind(null, method, options);
    }, method)();
  });
}


/***/ }),

/***/ 30509:
/***/ ((module) => {

module.exports = removeHook;

function removeHook(state, name, method) {
  if (!state.registry[name]) {
    return;
  }

  var index = state.registry[name]
    .map(function (registered) {
      return registered.orig;
    })
    .indexOf(method);

  if (index === -1) {
    return;
  }

  state.registry[name].splice(index, 1);
}


/***/ }),

/***/ 63785:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = (__webpack_require__(45545).Buffer);
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),

/***/ 59154:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(46047);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),

/***/ 47857:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Buffer = (__webpack_require__(30816).Buffer);

var CRC_TABLE = [
  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
  0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
  0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
  0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
  0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
  0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
  0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
  0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
  0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
  0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
  0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
  0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
  0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
  0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
  0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
  0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
  0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
  0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
  0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
  0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
  0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
  0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
  0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
  0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
  0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
  0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
  0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
  0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
  0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
  0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
  0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
  0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
  0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
  0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
  0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
  0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
  0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
  0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
  0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
  0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
  0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
  0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
  0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
  0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
  0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
  0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
  0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
  0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
  0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
  0x2d02ef8d
];

if (typeof Int32Array !== 'undefined') {
  CRC_TABLE = new Int32Array(CRC_TABLE);
}

function ensureBuffer(input) {
  if (Buffer.isBuffer(input)) {
    return input;
  }

  var hasNewBufferAPI =
      typeof Buffer.alloc === "function" &&
      typeof Buffer.from === "function";

  if (typeof input === "number") {
    return hasNewBufferAPI ? Buffer.alloc(input) : new Buffer(input);
  }
  else if (typeof input === "string") {
    return hasNewBufferAPI ? Buffer.from(input) : new Buffer(input);
  }
  else {
    throw new Error("input must be buffer, number, or string, received " +
                    typeof input);
  }
}

function bufferizeInt(num) {
  var tmp = ensureBuffer(4);
  tmp.writeInt32BE(num, 0);
  return tmp;
}

function _crc32(buf, previous) {
  buf = ensureBuffer(buf);
  if (Buffer.isBuffer(previous)) {
    previous = previous.readUInt32BE(0);
  }
  var crc = ~~previous ^ -1;
  for (var n = 0; n < buf.length; n++) {
    crc = CRC_TABLE[(crc ^ buf[n]) & 0xff] ^ (crc >>> 8);
  }
  return (crc ^ -1);
}

function crc32() {
  return bufferizeInt(_crc32.apply(null, arguments));
}
crc32.signed = function () {
  return _crc32.apply(null, arguments);
};
crc32.unsigned = function () {
  return _crc32.apply(null, arguments) >>> 0;
};

module.exports = crc32;


/***/ }),

/***/ 91613:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
/* eslint-disable node/no-deprecated-api */

var toString = Object.prototype.toString

var isModern = (
  typeof Buffer !== 'undefined' &&
  typeof Buffer.alloc === 'function' &&
  typeof Buffer.allocUnsafe === 'function' &&
  typeof Buffer.from === 'function'
)

function isArrayBuffer (input) {
  return toString.call(input).slice(8, -1) === 'ArrayBuffer'
}

function fromArrayBuffer (obj, byteOffset, length) {
  byteOffset >>>= 0

  var maxLength = obj.byteLength - byteOffset

  if (maxLength < 0) {
    throw new RangeError("'offset' is out of bounds")
  }

  if (length === undefined) {
    length = maxLength
  } else {
    length >>>= 0

    if (length > maxLength) {
      throw new RangeError("'length' is out of bounds")
    }
  }

  return isModern
    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))
    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  return isModern
    ? Buffer.from(string, encoding)
    : new Buffer(string, encoding)
}

function bufferFrom (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return isModern
    ? Buffer.from(value)
    : new Buffer(value)
}

module.exports = bufferFrom


/***/ }),

/***/ 30816:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(24782)
var ieee754 = __webpack_require__(78898)
var customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    var proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    var copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        Buffer.from(buf).copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (var i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = (function () {
  var alphabet = '0123456789abcdef'
  var table = new Array(256)
  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16
    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()


/***/ }),

/***/ 12737:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(68750);

var callBind = __webpack_require__(34573);

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ 34573:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(20132);
var GetIntrinsic = __webpack_require__(68750);

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ 57397:
/***/ ((module, exports, __webpack_require__) => {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj}}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj}}return _typeof(obj)}(function(global){var _arguments=arguments;var dateFormat=function(){var token=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g;var timezone=/\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;var timezoneClip=/[^-+\dA-Z]/g;return function(date,mask,utc,gmt){if(_arguments.length===1&&kindOf(date)==="string"&&!/\d/.test(date)){mask=date;date=undefined}date=date||date===0?date:new Date;if(!(date instanceof Date)){date=new Date(date)}if(isNaN(date)){throw TypeError("Invalid date")}mask=String(dateFormat.masks[mask]||mask||dateFormat.masks["default"]);var maskSlice=mask.slice(0,4);if(maskSlice==="UTC:"||maskSlice==="GMT:"){mask=mask.slice(4);utc=true;if(maskSlice==="GMT:"){gmt=true}}var _=function _(){return utc?"getUTC":"get"};var _d=function d(){return date[_()+"Date"]()};var D=function D(){return date[_()+"Day"]()};var _m=function m(){return date[_()+"Month"]()};var y=function y(){return date[_()+"FullYear"]()};var _H=function H(){return date[_()+"Hours"]()};var _M=function M(){return date[_()+"Minutes"]()};var _s=function s(){return date[_()+"Seconds"]()};var _L=function L(){return date[_()+"Milliseconds"]()};var _o=function o(){return utc?0:date.getTimezoneOffset()};var _W=function W(){return getWeek(date)};var _N=function N(){return getDayOfWeek(date)};var flags={d:function d(){return _d()},dd:function dd(){return pad(_d())},ddd:function ddd(){return dateFormat.i18n.dayNames[D()]},DDD:function DDD(){return getDayName({y:y(),m:_m(),d:_d(),_:_(),dayName:dateFormat.i18n.dayNames[D()],short:true})},dddd:function dddd(){return dateFormat.i18n.dayNames[D()+7]},DDDD:function DDDD(){return getDayName({y:y(),m:_m(),d:_d(),_:_(),dayName:dateFormat.i18n.dayNames[D()+7]})},m:function m(){return _m()+1},mm:function mm(){return pad(_m()+1)},mmm:function mmm(){return dateFormat.i18n.monthNames[_m()]},mmmm:function mmmm(){return dateFormat.i18n.monthNames[_m()+12]},yy:function yy(){return String(y()).slice(2)},yyyy:function yyyy(){return pad(y(),4)},h:function h(){return _H()%12||12},hh:function hh(){return pad(_H()%12||12)},H:function H(){return _H()},HH:function HH(){return pad(_H())},M:function M(){return _M()},MM:function MM(){return pad(_M())},s:function s(){return _s()},ss:function ss(){return pad(_s())},l:function l(){return pad(_L(),3)},L:function L(){return pad(Math.floor(_L()/10))},t:function t(){return _H()<12?dateFormat.i18n.timeNames[0]:dateFormat.i18n.timeNames[1]},tt:function tt(){return _H()<12?dateFormat.i18n.timeNames[2]:dateFormat.i18n.timeNames[3]},T:function T(){return _H()<12?dateFormat.i18n.timeNames[4]:dateFormat.i18n.timeNames[5]},TT:function TT(){return _H()<12?dateFormat.i18n.timeNames[6]:dateFormat.i18n.timeNames[7]},Z:function Z(){return gmt?"GMT":utc?"UTC":(String(date).match(timezone)||[""]).pop().replace(timezoneClip,"").replace(/GMT\+0000/g,"UTC")},o:function o(){return(_o()>0?"-":"+")+pad(Math.floor(Math.abs(_o())/60)*100+Math.abs(_o())%60,4)},p:function p(){return(_o()>0?"-":"+")+pad(Math.floor(Math.abs(_o())/60),2)+":"+pad(Math.floor(Math.abs(_o())%60),2)},S:function S(){return["th","st","nd","rd"][_d()%10>3?0:(_d()%100-_d()%10!=10)*_d()%10]},W:function W(){return _W()},WW:function WW(){return pad(_W())},N:function N(){return _N()}};return mask.replace(token,function(match){if(match in flags){return flags[match]()}return match.slice(1,match.length-1)})}}();dateFormat.masks={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"};dateFormat.i18n={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]};var pad=function pad(val,len){val=String(val);len=len||2;while(val.length<len){val="0"+val}return val};var getDayName=function getDayName(_ref){var y=_ref.y,m=_ref.m,d=_ref.d,_=_ref._,dayName=_ref.dayName,_ref$short=_ref["short"],_short=_ref$short===void 0?false:_ref$short;var today=new Date;var yesterday=new Date;yesterday.setDate(yesterday[_+"Date"]()-1);var tomorrow=new Date;tomorrow.setDate(tomorrow[_+"Date"]()+1);var today_d=function today_d(){return today[_+"Date"]()};var today_m=function today_m(){return today[_+"Month"]()};var today_y=function today_y(){return today[_+"FullYear"]()};var yesterday_d=function yesterday_d(){return yesterday[_+"Date"]()};var yesterday_m=function yesterday_m(){return yesterday[_+"Month"]()};var yesterday_y=function yesterday_y(){return yesterday[_+"FullYear"]()};var tomorrow_d=function tomorrow_d(){return tomorrow[_+"Date"]()};var tomorrow_m=function tomorrow_m(){return tomorrow[_+"Month"]()};var tomorrow_y=function tomorrow_y(){return tomorrow[_+"FullYear"]()};if(today_y()===y&&today_m()===m&&today_d()===d){return _short?"Tdy":"Today"}else if(yesterday_y()===y&&yesterday_m()===m&&yesterday_d()===d){return _short?"Ysd":"Yesterday"}else if(tomorrow_y()===y&&tomorrow_m()===m&&tomorrow_d()===d){return _short?"Tmw":"Tomorrow"}return dayName};var getWeek=function getWeek(date){var targetThursday=new Date(date.getFullYear(),date.getMonth(),date.getDate());targetThursday.setDate(targetThursday.getDate()-(targetThursday.getDay()+6)%7+3);var firstThursday=new Date(targetThursday.getFullYear(),0,4);firstThursday.setDate(firstThursday.getDate()-(firstThursday.getDay()+6)%7+3);var ds=targetThursday.getTimezoneOffset()-firstThursday.getTimezoneOffset();targetThursday.setHours(targetThursday.getHours()-ds);var weekDiff=(targetThursday-firstThursday)/(864e5*7);return 1+Math.floor(weekDiff)};var getDayOfWeek=function getDayOfWeek(date){var dow=date.getDay();if(dow===0){dow=7}return dow};var kindOf=function kindOf(val){if(val===null){return"null"}if(val===undefined){return"undefined"}if(_typeof(val)!=="object"){return _typeof(val)}if(Array.isArray(val)){return"array"}return{}.toString.call(val).slice(8,-1).toLowerCase()};if(true){!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return dateFormat}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))}else {}})(void 0);

/***/ }),

/***/ 67392:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__(44733);
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ 82834:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
var generatePrime = __webpack_require__(55174)
var primes = __webpack_require__(87064)

var DH = __webpack_require__(11554)

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman


/***/ }),

/***/ 11554:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
var BN = __webpack_require__(63785);
var MillerRabin = __webpack_require__(78773);
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(55174);
var randomBytes = __webpack_require__(52830);
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}


/***/ }),

/***/ 55174:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var randomBytes = __webpack_require__(52830);
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(63785);
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(78773);
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),

/***/ 43697:
/***/ ((module) => {

var naiveFallback = function () {
	if (typeof self === "object" && self) return self;
	if (typeof window === "object" && window) return window;
	throw new Error("Unable to resolve global `this`");
};

module.exports = (function () {
	if (this) return this;

	// Unexpected strict mode (may happen if e.g. bundled into ESM module)

	// Fallback to standard globalThis if available
	if (typeof globalThis === "object" && globalThis) return globalThis;

	// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
	// In all ES5+ engines global object inherits from Object.prototype
	// (if you approached one that doesn't please report)
	try {
		Object.defineProperty(Object.prototype, "__global__", {
			get: function () { return this; },
			configurable: true
		});
	} catch (error) {
		// Unfortunate case of updates to Object.prototype being restricted
		// via preventExtensions, seal or freeze
		return naiveFallback();
	}
	try {
		// Safari case (window.__global__ works, but __global__ does not)
		if (!__global__) return naiveFallback();
		return __global__;
	} finally {
		delete Object.prototype.__global__;
	}
})();


/***/ }),

/***/ 42098:
/***/ ((module) => {

"use strict";
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */



function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};


/***/ }),

/***/ 50343:
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ 98372:
/***/ ((module) => {


var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};



/***/ }),

/***/ 68458:
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ 20132:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(68458);

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 68750:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(40679)();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(20132);
var hasOwn = __webpack_require__(77492);
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ 40679:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(8186);

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ 8186:
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ 10698:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(8186);

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),

/***/ 77492:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(20132);

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),

/***/ 78898:
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ 70087:
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ 47740:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasToStringTag = __webpack_require__(10698)();
var callBound = __webpack_require__(12737);

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ }),

/***/ 18265:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = __webpack_require__(10698)();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};


/***/ }),

/***/ 44127:
/***/ ((module) => {

"use strict";


/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};


/***/ }),

/***/ 74866:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(34573);
var define = __webpack_require__(67392);

var implementation = __webpack_require__(44127);
var getPolyfill = __webpack_require__(40850);
var shim = __webpack_require__(88045);

var polyfill = callBind(getPolyfill(), Number);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ 40850:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(44127);

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};


/***/ }),

/***/ 88045:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(67392);
var getPolyfill = __webpack_require__(40850);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ 23329:
/***/ ((module) => {

"use strict";


const denyList = new Set([
	'ENOTFOUND',
	'ENETUNREACH',

	// SSL errors from https://github.com/nodejs/node/blob/fc8e3e2cdc521978351de257030db0076d79e0ab/src/crypto/crypto_common.cc#L301-L328
	'UNABLE_TO_GET_ISSUER_CERT',
	'UNABLE_TO_GET_CRL',
	'UNABLE_TO_DECRYPT_CERT_SIGNATURE',
	'UNABLE_TO_DECRYPT_CRL_SIGNATURE',
	'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY',
	'CERT_SIGNATURE_FAILURE',
	'CRL_SIGNATURE_FAILURE',
	'CERT_NOT_YET_VALID',
	'CERT_HAS_EXPIRED',
	'CRL_NOT_YET_VALID',
	'CRL_HAS_EXPIRED',
	'ERROR_IN_CERT_NOT_BEFORE_FIELD',
	'ERROR_IN_CERT_NOT_AFTER_FIELD',
	'ERROR_IN_CRL_LAST_UPDATE_FIELD',
	'ERROR_IN_CRL_NEXT_UPDATE_FIELD',
	'OUT_OF_MEM',
	'DEPTH_ZERO_SELF_SIGNED_CERT',
	'SELF_SIGNED_CERT_IN_CHAIN',
	'UNABLE_TO_GET_ISSUER_CERT_LOCALLY',
	'UNABLE_TO_VERIFY_LEAF_SIGNATURE',
	'CERT_CHAIN_TOO_LONG',
	'CERT_REVOKED',
	'INVALID_CA',
	'PATH_LENGTH_EXCEEDED',
	'INVALID_PURPOSE',
	'CERT_UNTRUSTED',
	'CERT_REJECTED',
	'HOSTNAME_MISMATCH'
]);

// TODO: Use `error?.code` when targeting Node.js 14
module.exports = error => !denyList.has(error && error.code);


/***/ }),

/***/ 50387:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(98372);
var availableTypedArrays = __webpack_require__(40973);
var callBound = __webpack_require__(12737);

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(10698)();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = __webpack_require__(48828);
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf(typedArrays, tag) > -1;
	}
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};


/***/ }),

/***/ 5029:
/***/ ((module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(27061);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var ERROR = 'input is invalid type';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA256_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = __webpack_require__.g;
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && "object" === 'object' && module.exports;
  var AMD =  true && __webpack_require__.amdO;
  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var EXTRA = [-2147483648, 8388608, 32768, 128];
  var SHIFT = [24, 16, 8, 0];
  var K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];
  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

  var blocks = [];

  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (outputType, is224) {
    return function (message) {
      return new Sha256(is224, true).update(message)[outputType]();
    };
  };

  var createMethod = function (is224) {
    var method = createOutputMethod('hex', is224);
    if (NODE_JS) {
      method = nodeWrap(method, is224);
    }
    method.create = function () {
      return new Sha256(is224);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(type, is224);
    }
    return method;
  };

  var nodeWrap = function (method, is224) {
    var crypto = eval("require('crypto')");
    var Buffer = eval("require('buffer').Buffer");
    var algorithm = is224 ? 'sha224' : 'sha256';
    var nodeMethod = function (message) {
      if (typeof message === 'string') {
        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');
      } else {
        if (message === null || message === undefined) {
          throw new Error(ERROR);
        } else if (message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
      }
      if (Array.isArray(message) || ArrayBuffer.isView(message) ||
        message.constructor === Buffer) {
        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');
      } else {
        return method(message);
      }
    };
    return nodeMethod;
  };

  var createHmacOutputMethod = function (outputType, is224) {
    return function (key, message) {
      return new HmacSha256(key, is224, true).update(message)[outputType]();
    };
  };

  var createHmacMethod = function (is224) {
    var method = createHmacOutputMethod('hex', is224);
    method.create = function (key) {
      return new HmacSha256(key, is224);
    };
    method.update = function (key, message) {
      return method.create(key).update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createHmacOutputMethod(type, is224);
    }
    return method;
  };

  function Sha256(is224, sharedMemory) {
    if (sharedMemory) {
      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      this.blocks = blocks;
    } else {
      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }

    if (is224) {
      this.h0 = 0xc1059ed8;
      this.h1 = 0x367cd507;
      this.h2 = 0x3070dd17;
      this.h3 = 0xf70e5939;
      this.h4 = 0xffc00b31;
      this.h5 = 0x68581511;
      this.h6 = 0x64f98fa7;
      this.h7 = 0xbefa4fa4;
    } else { // 256
      this.h0 = 0x6a09e667;
      this.h1 = 0xbb67ae85;
      this.h2 = 0x3c6ef372;
      this.h3 = 0xa54ff53a;
      this.h4 = 0x510e527f;
      this.h5 = 0x9b05688c;
      this.h6 = 0x1f83d9ab;
      this.h7 = 0x5be0cd19;
    }

    this.block = this.start = this.bytes = this.hBytes = 0;
    this.finalized = this.hashed = false;
    this.first = true;
    this.is224 = is224;
  }

  Sha256.prototype.update = function (message) {
    if (this.finalized) {
      return;
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(ERROR);
          }
        }
      } else {
        throw new Error(ERROR);
      }
      notString = true;
    }
    var code, index = 0, i, length = message.length, blocks = this.blocks;

    while (index < length) {
      if (this.hashed) {
        this.hashed = false;
        blocks[0] = this.block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
          blocks[4] = blocks[5] = blocks[6] = blocks[7] =
          blocks[8] = blocks[9] = blocks[10] = blocks[11] =
          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }

      if (notString) {
        for (i = this.start; index < length && i < 64; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < 64; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }

      this.lastByteIndex = i;
      this.bytes += i - this.start;
      if (i >= 64) {
        this.block = blocks[16];
        this.start = i - 64;
        this.hash();
        this.hashed = true;
      } else {
        this.start = i;
      }
    }
    if (this.bytes > 4294967295) {
      this.hBytes += this.bytes / 4294967296 << 0;
      this.bytes = this.bytes % 4294967296;
    }
    return this;
  };

  Sha256.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex;
    blocks[16] = this.block;
    blocks[i >> 2] |= EXTRA[i & 3];
    this.block = blocks[16];
    if (i >= 56) {
      if (!this.hashed) {
        this.hash();
      }
      blocks[0] = this.block;
      blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }
    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
    blocks[15] = this.bytes << 3;
    this.hash();
  };

  Sha256.prototype.hash = function () {
    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,
      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;

    for (j = 16; j < 64; ++j) {
      // rightrotate
      t1 = blocks[j - 15];
      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
      t1 = blocks[j - 2];
      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
    }

    bc = b & c;
    for (j = 0; j < 64; j += 4) {
      if (this.first) {
        if (this.is224) {
          ab = 300032;
          t1 = blocks[0] - 1413257819;
          h = t1 - 150054599 << 0;
          d = t1 + 24177077 << 0;
        } else {
          ab = 704751109;
          t1 = blocks[0] - 210244248;
          h = t1 - 1521486534 << 0;
          d = t1 + 143694565 << 0;
        }
        this.first = false;
      } else {
        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
        ab = a & b;
        maj = ab ^ (a & c) ^ bc;
        ch = (e & f) ^ (~e & g);
        t1 = h + s1 + ch + K[j] + blocks[j];
        t2 = s0 + maj;
        h = d + t1 << 0;
        d = t1 + t2 << 0;
      }
      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
      da = d & a;
      maj = da ^ (d & b) ^ ab;
      ch = (h & e) ^ (~h & f);
      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
      t2 = s0 + maj;
      g = c + t1 << 0;
      c = t1 + t2 << 0;
      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
      cd = c & d;
      maj = cd ^ (c & a) ^ da;
      ch = (g & h) ^ (~g & e);
      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
      t2 = s0 + maj;
      f = b + t1 << 0;
      b = t1 + t2 << 0;
      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
      bc = b & c;
      maj = bc ^ (b & d) ^ cd;
      ch = (f & g) ^ (~f & h);
      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
      t2 = s0 + maj;
      e = a + t1 << 0;
      a = t1 + t2 << 0;
    }

    this.h0 = this.h0 + a << 0;
    this.h1 = this.h1 + b << 0;
    this.h2 = this.h2 + c << 0;
    this.h3 = this.h3 + d << 0;
    this.h4 = this.h4 + e << 0;
    this.h5 = this.h5 + f << 0;
    this.h6 = this.h6 + g << 0;
    this.h7 = this.h7 + h << 0;
  };

  Sha256.prototype.hex = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
      h6 = this.h6, h7 = this.h7;

    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +
      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +
      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +
      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +
      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +
      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +
      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +
      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +
      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];
    if (!this.is224) {
      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +
        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +
        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +
        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
    }
    return hex;
  };

  Sha256.prototype.toString = Sha256.prototype.hex;

  Sha256.prototype.digest = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
      h6 = this.h6, h7 = this.h7;

    var arr = [
      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,
      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,
      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF
    ];
    if (!this.is224) {
      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);
    }
    return arr;
  };

  Sha256.prototype.array = Sha256.prototype.digest;

  Sha256.prototype.arrayBuffer = function () {
    this.finalize();

    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
    var dataView = new DataView(buffer);
    dataView.setUint32(0, this.h0);
    dataView.setUint32(4, this.h1);
    dataView.setUint32(8, this.h2);
    dataView.setUint32(12, this.h3);
    dataView.setUint32(16, this.h4);
    dataView.setUint32(20, this.h5);
    dataView.setUint32(24, this.h6);
    if (!this.is224) {
      dataView.setUint32(28, this.h7);
    }
    return buffer;
  };

  function HmacSha256(key, is224, sharedMemory) {
    var i, type = typeof key;
    if (type === 'string') {
      var bytes = [], length = key.length, index = 0, code;
      for (i = 0; i < length; ++i) {
        code = key.charCodeAt(i);
        if (code < 0x80) {
          bytes[index++] = code;
        } else if (code < 0x800) {
          bytes[index++] = (0xc0 | (code >> 6));
          bytes[index++] = (0x80 | (code & 0x3f));
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes[index++] = (0xe0 | (code >> 12));
          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
          bytes[index++] = (0x80 | (code & 0x3f));
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));
          bytes[index++] = (0xf0 | (code >> 18));
          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));
          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
          bytes[index++] = (0x80 | (code & 0x3f));
        }
      }
      key = bytes;
    } else {
      if (type === 'object') {
        if (key === null) {
          throw new Error(ERROR);
        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
          key = new Uint8Array(key);
        } else if (!Array.isArray(key)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
            throw new Error(ERROR);
          }
        }
      } else {
        throw new Error(ERROR);
      }
    }

    if (key.length > 64) {
      key = (new Sha256(is224, true)).update(key).array();
    }

    var oKeyPad = [], iKeyPad = [];
    for (i = 0; i < 64; ++i) {
      var b = key[i] || 0;
      oKeyPad[i] = 0x5c ^ b;
      iKeyPad[i] = 0x36 ^ b;
    }

    Sha256.call(this, is224, sharedMemory);

    this.update(iKeyPad);
    this.oKeyPad = oKeyPad;
    this.inner = true;
    this.sharedMemory = sharedMemory;
  }
  HmacSha256.prototype = new Sha256();

  HmacSha256.prototype.finalize = function () {
    Sha256.prototype.finalize.call(this);
    if (this.inner) {
      this.inner = false;
      var innerHash = this.array();
      Sha256.call(this, this.is224, this.sharedMemory);
      this.update(this.oKeyPad);
      this.update(innerHash);
      Sha256.prototype.finalize.call(this);
    }
  };

  var exports = createMethod();
  exports.sha256 = exports;
  exports.sha224 = createMethod(true);
  exports.sha256.hmac = createHmacMethod();
  exports.sha224.hmac = createHmacMethod(true);

  if (COMMON_JS) {
    module.exports = exports;
  } else {
    root.sha256 = exports.sha256;
    root.sha224 = exports.sha224;
    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return exports;
      }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();


/***/ }),

/***/ 50463:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// these aren't really private, but nor are they really useful to document

/**
 * @private
 */
var LuxonError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(LuxonError, _Error);

  function LuxonError() {
    return _Error.apply(this, arguments) || this;
  }

  return LuxonError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * @private
 */


var InvalidDateTimeError = /*#__PURE__*/function (_LuxonError) {
  _inheritsLoose(InvalidDateTimeError, _LuxonError);

  function InvalidDateTimeError(reason) {
    return _LuxonError.call(this, "Invalid DateTime: " + reason.toMessage()) || this;
  }

  return InvalidDateTimeError;
}(LuxonError);
/**
 * @private
 */

var InvalidIntervalError = /*#__PURE__*/function (_LuxonError2) {
  _inheritsLoose(InvalidIntervalError, _LuxonError2);

  function InvalidIntervalError(reason) {
    return _LuxonError2.call(this, "Invalid Interval: " + reason.toMessage()) || this;
  }

  return InvalidIntervalError;
}(LuxonError);
/**
 * @private
 */

var InvalidDurationError = /*#__PURE__*/function (_LuxonError3) {
  _inheritsLoose(InvalidDurationError, _LuxonError3);

  function InvalidDurationError(reason) {
    return _LuxonError3.call(this, "Invalid Duration: " + reason.toMessage()) || this;
  }

  return InvalidDurationError;
}(LuxonError);
/**
 * @private
 */

var ConflictingSpecificationError = /*#__PURE__*/function (_LuxonError4) {
  _inheritsLoose(ConflictingSpecificationError, _LuxonError4);

  function ConflictingSpecificationError() {
    return _LuxonError4.apply(this, arguments) || this;
  }

  return ConflictingSpecificationError;
}(LuxonError);
/**
 * @private
 */

var InvalidUnitError = /*#__PURE__*/function (_LuxonError5) {
  _inheritsLoose(InvalidUnitError, _LuxonError5);

  function InvalidUnitError(unit) {
    return _LuxonError5.call(this, "Invalid unit " + unit) || this;
  }

  return InvalidUnitError;
}(LuxonError);
/**
 * @private
 */

var InvalidArgumentError = /*#__PURE__*/function (_LuxonError6) {
  _inheritsLoose(InvalidArgumentError, _LuxonError6);

  function InvalidArgumentError() {
    return _LuxonError6.apply(this, arguments) || this;
  }

  return InvalidArgumentError;
}(LuxonError);
/**
 * @private
 */

var ZoneIsAbstractError = /*#__PURE__*/function (_LuxonError7) {
  _inheritsLoose(ZoneIsAbstractError, _LuxonError7);

  function ZoneIsAbstractError() {
    return _LuxonError7.call(this, "Zone is an abstract class") || this;
  }

  return ZoneIsAbstractError;
}(LuxonError);

/**
 * @private
 */
var n = "numeric",
    s = "short",
    l = "long";
var DATE_SHORT = {
  year: n,
  month: n,
  day: n
};
var DATE_MED = {
  year: n,
  month: s,
  day: n
};
var DATE_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s
};
var DATE_FULL = {
  year: n,
  month: l,
  day: n
};
var DATE_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l
};
var TIME_SIMPLE = {
  hour: n,
  minute: n
};
var TIME_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n
};
var TIME_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var TIME_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};
var TIME_24_SIMPLE = {
  hour: n,
  minute: n,
  hourCycle: "h23"
};
var TIME_24_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23"
};
var TIME_24_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: s
};
var TIME_24_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: l
};
var DATETIME_SHORT = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_SHORT_WITH_SECONDS = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_MED_WITH_SECONDS = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
  hour: n,
  minute: n
};
var DATETIME_FULL = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  timeZoneName: s
};
var DATETIME_FULL_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var DATETIME_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  timeZoneName: l
};
var DATETIME_HUGE_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};

/**
 * @private
 */
// TYPES

function isUndefined(o) {
  return typeof o === "undefined";
}
function isNumber(o) {
  return typeof o === "number";
}
function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}
function isString(o) {
  return typeof o === "string";
}
function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
} // CAPABILITIES

function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
} // OBJECTS AND ARRAYS

function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return undefined;
  }

  return arr.reduce(function (best, next) {
    var pair = [by(next), next];

    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
function pick(obj, keys) {
  return keys.reduce(function (a, k) {
    a[k] = obj[k];
    return a;
  }, {});
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
} // NUMBERS AND STRINGS

function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
} // x % n but takes the sign of n instead of x

function floorMod(x, n) {
  return x - n * Math.floor(x / n);
}
function padStart(input, n) {
  if (n === void 0) {
    n = 2;
  }

  var isNeg = input < 0;
  var padded;

  if (isNeg) {
    padded = "-" + ("" + -input).padStart(n, "0");
  } else {
    padded = ("" + input).padStart(n, "0");
  }

  return padded;
}
function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseInt(string, 10);
  }
}
function parseFloating(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseFloat(string);
  }
}
function parseMillis(fraction) {
  // Return undefined (instead of 0) in these cases, where fraction is not set
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return undefined;
  } else {
    var f = parseFloat("0." + fraction) * 1000;
    return Math.floor(f);
  }
}
function roundTo(number, digits, towardZero) {
  if (towardZero === void 0) {
    towardZero = false;
  }

  var factor = Math.pow(10, digits),
      rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
} // DATE BASICS

function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
  var modMonth = floorMod(month - 1, 12) + 1,
      modYear = year + (month - modMonth) / 12;

  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
} // covert a calendar object to a local timestamp (epoch, but with the offset baked in)

function objToLocalTS(obj) {
  var d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond); // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that

  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }

  return +d;
}
function weeksInWeekYear(weekYear) {
  var p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7,
      last = weekYear - 1,
      p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
  return p1 === 4 || p2 === 3 ? 53 : 52;
}
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else return year > 60 ? 1900 + year : 2000 + year;
} // PARSING

function parseZoneInfo(ts, offsetFormat, locale, timeZone) {
  if (timeZone === void 0) {
    timeZone = null;
  }

  var date = new Date(ts),
      intlOpts = {
    hourCycle: "h23",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };

  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }

  var modified = _extends({
    timeZoneName: offsetFormat
  }, intlOpts);

  var parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find(function (m) {
    return m.type.toLowerCase() === "timezonename";
  });
  return parsed ? parsed.value : null;
} // signedOffset('-5', '30') -> -330

function signedOffset(offHourStr, offMinuteStr) {
  var offHour = parseInt(offHourStr, 10); // don't || this because we want to preserve -0

  if (Number.isNaN(offHour)) {
    offHour = 0;
  }

  var offMin = parseInt(offMinuteStr, 10) || 0,
      offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
} // COERCION

function asNumber(value) {
  var numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue)) throw new InvalidArgumentError("Invalid unit value " + value);
  return numericValue;
}
function normalizeObject(obj, normalizer) {
  var normalized = {};

  for (var u in obj) {
    if (hasOwnProperty(obj, u)) {
      var v = obj[u];
      if (v === undefined || v === null) continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }

  return normalized;
}
function formatOffset(offset, format) {
  var hours = Math.trunc(Math.abs(offset / 60)),
      minutes = Math.trunc(Math.abs(offset % 60)),
      sign = offset >= 0 ? "+" : "-";

  switch (format) {
    case "short":
      return "" + sign + padStart(hours, 2) + ":" + padStart(minutes, 2);

    case "narrow":
      return "" + sign + hours + (minutes > 0 ? ":" + minutes : "");

    case "techie":
      return "" + sign + padStart(hours, 2) + padStart(minutes, 2);

    default:
      throw new RangeError("Value format " + format + " is out of range for property format");
  }
}
function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}
var ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;

/**
 * @private
 */


var monthsLong = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var monthsShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
function months(length) {
  switch (length) {
    case "narrow":
      return [].concat(monthsNarrow);

    case "short":
      return [].concat(monthsShort);

    case "long":
      return [].concat(monthsLong);

    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];

    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];

    default:
      return null;
  }
}
var weekdaysLong = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
var weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
function weekdays(length) {
  switch (length) {
    case "narrow":
      return [].concat(weekdaysNarrow);

    case "short":
      return [].concat(weekdaysShort);

    case "long":
      return [].concat(weekdaysLong);

    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];

    default:
      return null;
  }
}
var meridiems = ["AM", "PM"];
var erasLong = ["Before Christ", "Anno Domini"];
var erasShort = ["BC", "AD"];
var erasNarrow = ["B", "A"];
function eras(length) {
  switch (length) {
    case "narrow":
      return [].concat(erasNarrow);

    case "short":
      return [].concat(erasShort);

    case "long":
      return [].concat(erasLong);

    default:
      return null;
  }
}
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric, narrow) {
  if (numeric === void 0) {
    numeric = "always";
  }

  if (narrow === void 0) {
    narrow = false;
  }

  var units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  };
  var lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

  if (numeric === "auto" && lastable) {
    var isDay = unit === "days";

    switch (count) {
      case 1:
        return isDay ? "tomorrow" : "next " + units[unit][0];

      case -1:
        return isDay ? "yesterday" : "last " + units[unit][0];

      case 0:
        return isDay ? "today" : "this " + units[unit][0];

    }
  }

  var isInPast = Object.is(count, -0) || count < 0,
      fmtValue = Math.abs(count),
      singular = fmtValue === 1,
      lilUnits = units[unit],
      fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
  return isInPast ? fmtValue + " " + fmtUnit + " ago" : "in " + fmtValue + " " + fmtUnit;
}

function stringifyTokens(splits, tokenToString) {
  var s = "";

  for (var _iterator = _createForOfIteratorHelperLoose(splits), _step; !(_step = _iterator()).done;) {
    var token = _step.value;

    if (token.literal) {
      s += token.val;
    } else {
      s += tokenToString(token.val);
    }
  }

  return s;
}

var _macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS
};
/**
 * @private
 */

var Formatter = /*#__PURE__*/function () {
  Formatter.create = function create(locale, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return new Formatter(locale, opts);
  };

  Formatter.parseFormat = function parseFormat(fmt) {
    var current = null,
        currentFull = "",
        bracketed = false;
    var splits = [];

    for (var i = 0; i < fmt.length; i++) {
      var c = fmt.charAt(i);

      if (c === "'") {
        if (currentFull.length > 0) {
          splits.push({
            literal: bracketed,
            val: currentFull
          });
        }

        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c;
      } else if (c === current) {
        currentFull += c;
      } else {
        if (currentFull.length > 0) {
          splits.push({
            literal: false,
            val: currentFull
          });
        }

        currentFull = c;
        current = c;
      }
    }

    if (currentFull.length > 0) {
      splits.push({
        literal: bracketed,
        val: currentFull
      });
    }

    return splits;
  };

  Formatter.macroTokenToFormatOpts = function macroTokenToFormatOpts(token) {
    return _macroTokenToFormatOpts[token];
  };

  function Formatter(locale, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale;
    this.systemLoc = null;
  }

  var _proto = Formatter.prototype;

  _proto.formatWithSystemDefault = function formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }

    var df = this.systemLoc.dtFormatter(dt, _extends({}, this.opts, opts));
    return df.format();
  };

  _proto.formatDateTime = function formatDateTime(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, _extends({}, this.opts, opts));
    return df.format();
  };

  _proto.formatDateTimeParts = function formatDateTimeParts(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, _extends({}, this.opts, opts));
    return df.formatToParts();
  };

  _proto.resolvedOptions = function resolvedOptions(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, _extends({}, this.opts, opts));
    return df.resolvedOptions();
  };

  _proto.num = function num(n, p) {
    if (p === void 0) {
      p = 0;
    }

    // we get some perf out of doing this here, annoyingly
    if (this.opts.forceSimple) {
      return padStart(n, p);
    }

    var opts = _extends({}, this.opts);

    if (p > 0) {
      opts.padTo = p;
    }

    return this.loc.numberFormatter(opts).format(n);
  };

  _proto.formatDateTimeFromString = function formatDateTimeFromString(dt, fmt) {
    var _this = this;

    var knownEnglish = this.loc.listingMode() === "en",
        useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory",
        string = function string(opts, extract) {
      return _this.loc.extract(dt, opts, extract);
    },
        formatOffset = function formatOffset(opts) {
      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
        return "Z";
      }

      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
    },
        meridiem = function meridiem() {
      return knownEnglish ? meridiemForDateTime(dt) : string({
        hour: "numeric",
        hourCycle: "h12"
      }, "dayperiod");
    },
        month = function month(length, standalone) {
      return knownEnglish ? monthForDateTime(dt, length) : string(standalone ? {
        month: length
      } : {
        month: length,
        day: "numeric"
      }, "month");
    },
        weekday = function weekday(length, standalone) {
      return knownEnglish ? weekdayForDateTime(dt, length) : string(standalone ? {
        weekday: length
      } : {
        weekday: length,
        month: "long",
        day: "numeric"
      }, "weekday");
    },
        maybeMacro = function maybeMacro(token) {
      var formatOpts = Formatter.macroTokenToFormatOpts(token);

      if (formatOpts) {
        return _this.formatWithSystemDefault(dt, formatOpts);
      } else {
        return token;
      }
    },
        era = function era(length) {
      return knownEnglish ? eraForDateTime(dt, length) : string({
        era: length
      }, "era");
    },
        tokenToString = function tokenToString(token) {
      // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles
      switch (token) {
        // ms
        case "S":
          return _this.num(dt.millisecond);

        case "u": // falls through

        case "SSS":
          return _this.num(dt.millisecond, 3);
        // seconds

        case "s":
          return _this.num(dt.second);

        case "ss":
          return _this.num(dt.second, 2);
        // fractional seconds

        case "uu":
          return _this.num(Math.floor(dt.millisecond / 10), 2);

        case "uuu":
          return _this.num(Math.floor(dt.millisecond / 100));
        // minutes

        case "m":
          return _this.num(dt.minute);

        case "mm":
          return _this.num(dt.minute, 2);
        // hours

        case "h":
          return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);

        case "hh":
          return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);

        case "H":
          return _this.num(dt.hour);

        case "HH":
          return _this.num(dt.hour, 2);
        // offset

        case "Z":
          // like +6
          return formatOffset({
            format: "narrow",
            allowZ: _this.opts.allowZ
          });

        case "ZZ":
          // like +06:00
          return formatOffset({
            format: "short",
            allowZ: _this.opts.allowZ
          });

        case "ZZZ":
          // like +0600
          return formatOffset({
            format: "techie",
            allowZ: _this.opts.allowZ
          });

        case "ZZZZ":
          // like EST
          return dt.zone.offsetName(dt.ts, {
            format: "short",
            locale: _this.loc.locale
          });

        case "ZZZZZ":
          // like Eastern Standard Time
          return dt.zone.offsetName(dt.ts, {
            format: "long",
            locale: _this.loc.locale
          });
        // zone

        case "z":
          // like America/New_York
          return dt.zoneName;
        // meridiems

        case "a":
          return meridiem();
        // dates

        case "d":
          return useDateTimeFormatter ? string({
            day: "numeric"
          }, "day") : _this.num(dt.day);

        case "dd":
          return useDateTimeFormatter ? string({
            day: "2-digit"
          }, "day") : _this.num(dt.day, 2);
        // weekdays - standalone

        case "c":
          // like 1
          return _this.num(dt.weekday);

        case "ccc":
          // like 'Tues'
          return weekday("short", true);

        case "cccc":
          // like 'Tuesday'
          return weekday("long", true);

        case "ccccc":
          // like 'T'
          return weekday("narrow", true);
        // weekdays - format

        case "E":
          // like 1
          return _this.num(dt.weekday);

        case "EEE":
          // like 'Tues'
          return weekday("short", false);

        case "EEEE":
          // like 'Tuesday'
          return weekday("long", false);

        case "EEEEE":
          // like 'T'
          return weekday("narrow", false);
        // months - standalone

        case "L":
          // like 1
          return useDateTimeFormatter ? string({
            month: "numeric",
            day: "numeric"
          }, "month") : _this.num(dt.month);

        case "LL":
          // like 01, doesn't seem to work
          return useDateTimeFormatter ? string({
            month: "2-digit",
            day: "numeric"
          }, "month") : _this.num(dt.month, 2);

        case "LLL":
          // like Jan
          return month("short", true);

        case "LLLL":
          // like January
          return month("long", true);

        case "LLLLL":
          // like J
          return month("narrow", true);
        // months - format

        case "M":
          // like 1
          return useDateTimeFormatter ? string({
            month: "numeric"
          }, "month") : _this.num(dt.month);

        case "MM":
          // like 01
          return useDateTimeFormatter ? string({
            month: "2-digit"
          }, "month") : _this.num(dt.month, 2);

        case "MMM":
          // like Jan
          return month("short", false);

        case "MMMM":
          // like January
          return month("long", false);

        case "MMMMM":
          // like J
          return month("narrow", false);
        // years

        case "y":
          // like 2014
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year);

        case "yy":
          // like 14
          return useDateTimeFormatter ? string({
            year: "2-digit"
          }, "year") : _this.num(dt.year.toString().slice(-2), 2);

        case "yyyy":
          // like 0012
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year, 4);

        case "yyyyyy":
          // like 000012
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year, 6);
        // eras

        case "G":
          // like AD
          return era("short");

        case "GG":
          // like Anno Domini
          return era("long");

        case "GGGGG":
          return era("narrow");

        case "kk":
          return _this.num(dt.weekYear.toString().slice(-2), 2);

        case "kkkk":
          return _this.num(dt.weekYear, 4);

        case "W":
          return _this.num(dt.weekNumber);

        case "WW":
          return _this.num(dt.weekNumber, 2);

        case "o":
          return _this.num(dt.ordinal);

        case "ooo":
          return _this.num(dt.ordinal, 3);

        case "q":
          // like 1
          return _this.num(dt.quarter);

        case "qq":
          // like 01
          return _this.num(dt.quarter, 2);

        case "X":
          return _this.num(Math.floor(dt.ts / 1000));

        case "x":
          return _this.num(dt.ts);

        default:
          return maybeMacro(token);
      }
    };

    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
  };

  _proto.formatDurationFromString = function formatDurationFromString(dur, fmt) {
    var _this2 = this;

    var tokenToField = function tokenToField(token) {
      switch (token[0]) {
        case "S":
          return "millisecond";

        case "s":
          return "second";

        case "m":
          return "minute";

        case "h":
          return "hour";

        case "d":
          return "day";

        case "w":
          return "week";

        case "M":
          return "month";

        case "y":
          return "year";

        default:
          return null;
      }
    },
        tokenToString = function tokenToString(lildur) {
      return function (token) {
        var mapped = tokenToField(token);

        if (mapped) {
          return _this2.num(lildur.get(mapped), token.length);
        } else {
          return token;
        }
      };
    },
        tokens = Formatter.parseFormat(fmt),
        realTokens = tokens.reduce(function (found, _ref) {
      var literal = _ref.literal,
          val = _ref.val;
      return literal ? found : found.concat(val);
    }, []),
        collapsed = dur.shiftTo.apply(dur, realTokens.map(tokenToField).filter(function (t) {
      return t;
    }));

    return stringifyTokens(tokens, tokenToString(collapsed));
  };

  return Formatter;
}();

var Invalid = /*#__PURE__*/function () {
  function Invalid(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }

  var _proto = Invalid.prototype;

  _proto.toMessage = function toMessage() {
    if (this.explanation) {
      return this.reason + ": " + this.explanation;
    } else {
      return this.reason;
    }
  };

  return Invalid;
}();

/**
 * @interface
 */

var Zone = /*#__PURE__*/function () {
  function Zone() {}

  var _proto = Zone.prototype;

  /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */
  _proto.offsetName = function offsetName(ts, opts) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Returns the offset's value as a string
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  ;

  _proto.formatOffset = function formatOffset(ts, format) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */
  ;

  _proto.offset = function offset(ts) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return whether this Zone is equal to another zone
   * @abstract
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(otherZone) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return whether this Zone is valid.
   * @abstract
   * @type {boolean}
   */
  ;

  _createClass(Zone, [{
    key: "type",
    get:
    /**
     * The type of zone
     * @abstract
     * @type {string}
     */
    function get() {
      throw new ZoneIsAbstractError();
    }
    /**
     * The name of this zone.
     * @abstract
     * @type {string}
     */

  }, {
    key: "name",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }, {
    key: "ianaName",
    get: function get() {
      return this.name;
    }
    /**
     * Returns whether the offset is known to be fixed for the whole year.
     * @abstract
     * @type {boolean}
     */

  }, {
    key: "isUniversal",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }, {
    key: "isValid",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }]);

  return Zone;
}();

var singleton$1 = null;
/**
 * Represents the local zone for this JavaScript environment.
 * @implements {Zone}
 */

var SystemZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(SystemZone, _Zone);

  function SystemZone() {
    return _Zone.apply(this, arguments) || this;
  }

  var _proto = SystemZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName(ts, _ref) {
    var format = _ref.format,
        locale = _ref.locale;
    return parseZoneInfo(ts, format, locale);
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.offset(ts), format);
  }
  /** @override **/
  ;

  _proto.offset = function offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "system";
  }
  /** @override **/
  ;

  _createClass(SystemZone, [{
    key: "type",
    get:
    /** @override **/
    function get() {
      return "system";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return new Intl.DateTimeFormat().resolvedOptions().timeZone;
    }
    /** @override **/

  }, {
    key: "isUniversal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return true;
    }
  }], [{
    key: "instance",
    get:
    /**
     * Get a singleton instance of the local zone
     * @return {SystemZone}
     */
    function get() {
      if (singleton$1 === null) {
        singleton$1 = new SystemZone();
      }

      return singleton$1;
    }
  }]);

  return SystemZone;
}(Zone);

var dtfCache = {};

function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      era: "short"
    });
  }

  return dtfCache[zone];
}

var typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  era: 3,
  hour: 4,
  minute: 5,
  second: 6
};

function hackyOffset(dtf, date) {
  var formatted = dtf.format(date).replace(/\u200E/g, ""),
      parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted),
      fMonth = parsed[1],
      fDay = parsed[2],
      fYear = parsed[3],
      fadOrBc = parsed[4],
      fHour = parsed[5],
      fMinute = parsed[6],
      fSecond = parsed[7];
  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
}

function partsOffset(dtf, date) {
  var formatted = dtf.formatToParts(date);
  var filled = [];

  for (var i = 0; i < formatted.length; i++) {
    var _formatted$i = formatted[i],
        type = _formatted$i.type,
        value = _formatted$i.value;
    var pos = typeToPos[type];

    if (type === "era") {
      filled[pos] = value;
    } else if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }

  return filled;
}

var ianaZoneCache = {};
/**
 * A zone identified by an IANA identifier, like America/New_York
 * @implements {Zone}
 */

var IANAZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(IANAZone, _Zone);

  /**
   * @param {string} name - Zone name
   * @return {IANAZone}
   */
  IANAZone.create = function create(name) {
    if (!ianaZoneCache[name]) {
      ianaZoneCache[name] = new IANAZone(name);
    }

    return ianaZoneCache[name];
  }
  /**
   * Reset local caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  ;

  IANAZone.resetCache = function resetCache() {
    ianaZoneCache = {};
    dtfCache = {};
  }
  /**
   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
   * @param {string} s - The string to check validity on
   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
   * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
   * @return {boolean}
   */
  ;

  IANAZone.isValidSpecifier = function isValidSpecifier(s) {
    return this.isValidZone(s);
  }
  /**
   * Returns whether the provided string identifies a real zone
   * @param {string} zone - The string to check
   * @example IANAZone.isValidZone("America/New_York") //=> true
   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
   * @return {boolean}
   */
  ;

  IANAZone.isValidZone = function isValidZone(zone) {
    if (!zone) {
      return false;
    }

    try {
      new Intl.DateTimeFormat("en-US", {
        timeZone: zone
      }).format();
      return true;
    } catch (e) {
      return false;
    }
  };

  function IANAZone(name) {
    var _this;

    _this = _Zone.call(this) || this;
    /** @private **/

    _this.zoneName = name;
    /** @private **/

    _this.valid = IANAZone.isValidZone(name);
    return _this;
  }
  /** @override **/


  var _proto = IANAZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName(ts, _ref) {
    var format = _ref.format,
        locale = _ref.locale;
    return parseZoneInfo(ts, format, locale, this.name);
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.offset(ts), format);
  }
  /** @override **/
  ;

  _proto.offset = function offset(ts) {
    var date = new Date(ts);
    if (isNaN(date)) return NaN;
    var dtf = makeDTF(this.name);

    var _ref2 = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date),
        year = _ref2[0],
        month = _ref2[1],
        day = _ref2[2],
        adOrBc = _ref2[3],
        hour = _ref2[4],
        minute = _ref2[5],
        second = _ref2[6];

    if (adOrBc === "BC") {
      year = -Math.abs(year) + 1;
    } // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat


    var adjustedHour = hour === 24 ? 0 : hour;
    var asUTC = objToLocalTS({
      year: year,
      month: month,
      day: day,
      hour: adjustedHour,
      minute: minute,
      second: second,
      millisecond: 0
    });
    var asTS = +date;
    var over = asTS % 1000;
    asTS -= over >= 0 ? over : 1000 + over;
    return (asUTC - asTS) / (60 * 1000);
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }
  /** @override **/
  ;

  _createClass(IANAZone, [{
    key: "type",
    get: function get() {
      return "iana";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.zoneName;
    }
    /** @override **/

  }, {
    key: "isUniversal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return this.valid;
    }
  }]);

  return IANAZone;
}(Zone);

var singleton = null;
/**
 * A zone with a fixed offset (meaning no DST)
 * @implements {Zone}
 */

var FixedOffsetZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(FixedOffsetZone, _Zone);

  /**
   * Get an instance with a specified offset
   * @param {number} offset - The offset in minutes
   * @return {FixedOffsetZone}
   */
  FixedOffsetZone.instance = function instance(offset) {
    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
  }
  /**
   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
   * @param {string} s - The offset string to parse
   * @example FixedOffsetZone.parseSpecifier("UTC+6")
   * @example FixedOffsetZone.parseSpecifier("UTC+06")
   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
   * @return {FixedOffsetZone}
   */
  ;

  FixedOffsetZone.parseSpecifier = function parseSpecifier(s) {
    if (s) {
      var r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);

      if (r) {
        return new FixedOffsetZone(signedOffset(r[1], r[2]));
      }
    }

    return null;
  };

  function FixedOffsetZone(offset) {
    var _this;

    _this = _Zone.call(this) || this;
    /** @private **/

    _this.fixed = offset;
    return _this;
  }
  /** @override **/


  var _proto = FixedOffsetZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName() {
    return this.name;
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.fixed, format);
  }
  /** @override **/
  ;

  /** @override **/
  _proto.offset = function offset() {
    return this.fixed;
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }
  /** @override **/
  ;

  _createClass(FixedOffsetZone, [{
    key: "type",
    get: function get() {
      return "fixed";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.fixed === 0 ? "UTC" : "UTC" + formatOffset(this.fixed, "narrow");
    }
  }, {
    key: "ianaName",
    get: function get() {
      if (this.fixed === 0) {
        return "Etc/UTC";
      } else {
        return "Etc/GMT" + formatOffset(-this.fixed, "narrow");
      }
    }
  }, {
    key: "isUniversal",
    get: function get() {
      return true;
    }
  }, {
    key: "isValid",
    get: function get() {
      return true;
    }
  }], [{
    key: "utcInstance",
    get:
    /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */
    function get() {
      if (singleton === null) {
        singleton = new FixedOffsetZone(0);
      }

      return singleton;
    }
  }]);

  return FixedOffsetZone;
}(Zone);

/**
 * A zone that failed to parse. You should never need to instantiate this.
 * @implements {Zone}
 */

var InvalidZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(InvalidZone, _Zone);

  function InvalidZone(zoneName) {
    var _this;

    _this = _Zone.call(this) || this;
    /**  @private */

    _this.zoneName = zoneName;
    return _this;
  }
  /** @override **/


  var _proto = InvalidZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName() {
    return null;
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset() {
    return "";
  }
  /** @override **/
  ;

  _proto.offset = function offset() {
    return NaN;
  }
  /** @override **/
  ;

  _proto.equals = function equals() {
    return false;
  }
  /** @override **/
  ;

  _createClass(InvalidZone, [{
    key: "type",
    get: function get() {
      return "invalid";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.zoneName;
    }
    /** @override **/

  }, {
    key: "isUniversal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return false;
    }
  }]);

  return InvalidZone;
}(Zone);

/**
 * @private
 */
function normalizeZone(input, defaultZone) {

  if (isUndefined(input) || input === null) {
    return defaultZone;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    var lowered = input.toLowerCase();
    if (lowered === "local" || lowered === "system") return defaultZone;else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
    // This is dumb, but the instanceof check above doesn't seem to really work
    // so we're duck checking it
    return input;
  } else {
    return new InvalidZone(input);
  }
}

var now = function now() {
  return Date.now();
},
    defaultZone = "system",
    defaultLocale = null,
    defaultNumberingSystem = null,
    defaultOutputCalendar = null,
    throwOnInvalid;
/**
 * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
 */


var Settings = /*#__PURE__*/function () {
  function Settings() {}

  /**
   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  Settings.resetCaches = function resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
  };

  _createClass(Settings, null, [{
    key: "now",
    get:
    /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */
    function get() {
      return now;
    }
    /**
     * Set the callback for returning the current timestamp.
     * The function should return a number, which will be interpreted as an Epoch millisecond count
     * @type {function}
     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
     */
    ,
    set: function set(n) {
      now = n;
    }
    /**
     * Set the default time zone to create DateTimes in. Does not affect existing instances.
     * Use the value "system" to reset this value to the system's time zone.
     * @type {string}
     */

  }, {
    key: "defaultZone",
    get:
    /**
     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
     * The default value is the system's time zone (the one set on the machine that runs this code).
     * @type {Zone}
     */
    function get() {
      return normalizeZone(defaultZone, SystemZone.instance);
    }
    /**
     * Get the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(zone) {
      defaultZone = zone;
    }
  }, {
    key: "defaultLocale",
    get: function get() {
      return defaultLocale;
    }
    /**
     * Set the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(locale) {
      defaultLocale = locale;
    }
    /**
     * Get the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultNumberingSystem",
    get: function get() {
      return defaultNumberingSystem;
    }
    /**
     * Set the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(numberingSystem) {
      defaultNumberingSystem = numberingSystem;
    }
    /**
     * Get the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultOutputCalendar",
    get: function get() {
      return defaultOutputCalendar;
    }
    /**
     * Set the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(outputCalendar) {
      defaultOutputCalendar = outputCalendar;
    }
    /**
     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */

  }, {
    key: "throwOnInvalid",
    get: function get() {
      return throwOnInvalid;
    }
    /**
     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    ,
    set: function set(t) {
      throwOnInvalid = t;
    }
  }]);

  return Settings;
}();

var _excluded = ["base"],
    _excluded2 = ["padTo", "floor"];

var intlLFCache = {};

function getCachedLF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var key = JSON.stringify([locString, opts]);
  var dtf = intlLFCache[key];

  if (!dtf) {
    dtf = new Intl.ListFormat(locString, opts);
    intlLFCache[key] = dtf;
  }

  return dtf;
}

var intlDTCache = {};

function getCachedDTF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var key = JSON.stringify([locString, opts]);
  var dtf = intlDTCache[key];

  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }

  return dtf;
}

var intlNumCache = {};

function getCachedINF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var key = JSON.stringify([locString, opts]);
  var inf = intlNumCache[key];

  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }

  return inf;
}

var intlRelCache = {};

function getCachedRTF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var _opts = opts;
      _opts.base;
      var cacheKeyOpts = _objectWithoutPropertiesLoose(_opts, _excluded); // exclude `base` from the options


  var key = JSON.stringify([locString, cacheKeyOpts]);
  var inf = intlRelCache[key];

  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }

  return inf;
}

var sysLocaleCache = null;

function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else {
    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    return sysLocaleCache;
  }
}

function parseLocaleString(localeStr) {
  // I really want to avoid writing a BCP 47 parser
  // see, e.g. https://github.com/wooorm/bcp-47
  // Instead, we'll do this:
  // a) if the string has no -u extensions, just leave it alone
  // b) if it does, use Intl to resolve everything
  // c) if Intl fails, try again without the -u
  var uIndex = localeStr.indexOf("-u-");

  if (uIndex === -1) {
    return [localeStr];
  } else {
    var options;
    var smaller = localeStr.substring(0, uIndex);

    try {
      options = getCachedDTF(localeStr).resolvedOptions();
    } catch (e) {
      options = getCachedDTF(smaller).resolvedOptions();
    }

    var _options = options,
        numberingSystem = _options.numberingSystem,
        calendar = _options.calendar; // return the smaller one so that we can append the calendar and numbering overrides to it

    return [smaller, numberingSystem, calendar];
  }
}

function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (outputCalendar || numberingSystem) {
    localeStr += "-u";

    if (outputCalendar) {
      localeStr += "-ca-" + outputCalendar;
    }

    if (numberingSystem) {
      localeStr += "-nu-" + numberingSystem;
    }

    return localeStr;
  } else {
    return localeStr;
  }
}

function mapMonths(f) {
  var ms = [];

  for (var i = 1; i <= 12; i++) {
    var dt = DateTime.utc(2016, i, 1);
    ms.push(f(dt));
  }

  return ms;
}

function mapWeekdays(f) {
  var ms = [];

  for (var i = 1; i <= 7; i++) {
    var dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }

  return ms;
}

function listStuff(loc, length, defaultOK, englishFn, intlFn) {
  var mode = loc.listingMode(defaultOK);

  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}

function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
  }
}
/**
 * @private
 */


var PolyNumberFormatter = /*#__PURE__*/function () {
  function PolyNumberFormatter(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;

    opts.padTo;
        opts.floor;
        var otherOpts = _objectWithoutPropertiesLoose(opts, _excluded2);

    if (!forceSimple || Object.keys(otherOpts).length > 0) {
      var intlOpts = _extends({
        useGrouping: false
      }, opts);

      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }

  var _proto = PolyNumberFormatter.prototype;

  _proto.format = function format(i) {
    if (this.inf) {
      var fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      // to match the browser's numberformatter defaults
      var _fixed = this.floor ? Math.floor(i) : roundTo(i, 3);

      return padStart(_fixed, this.padTo);
    }
  };

  return PolyNumberFormatter;
}();
/**
 * @private
 */


var PolyDateFormatter = /*#__PURE__*/function () {
  function PolyDateFormatter(dt, intl, opts) {
    this.opts = opts;
    var z;

    if (dt.zone.isUniversal) {
      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
      // That is why fixed-offset TZ is set to that unless it is:
      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
      // 2. Unsupported by the browser:
      //    - some do not support Etc/
      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
      var gmtOffset = -1 * (dt.offset / 60);
      var offsetZ = gmtOffset >= 0 ? "Etc/GMT+" + gmtOffset : "Etc/GMT" + gmtOffset;

      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
        z = offsetZ;
        this.dt = dt;
      } else {
        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.
        // So we have to make do. Two cases:
        // 1. The format options tell us to show the zone. We can't do that, so the best
        // we can do is format the date in UTC.
        // 2. The format options don't tell us to show the zone. Then we can adjust them
        // the time and tell the formatter to show it to us in UTC, so that the time is right
        // and the bad zone doesn't show up.
        z = "UTC";

        if (opts.timeZoneName) {
          this.dt = dt;
        } else {
          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);
        }
      }
    } else if (dt.zone.type === "system") {
      this.dt = dt;
    } else {
      this.dt = dt;
      z = dt.zone.name;
    }

    var intlOpts = _extends({}, this.opts);

    if (z) {
      intlOpts.timeZone = z;
    }

    this.dtf = getCachedDTF(intl, intlOpts);
  }

  var _proto2 = PolyDateFormatter.prototype;

  _proto2.format = function format() {
    return this.dtf.format(this.dt.toJSDate());
  };

  _proto2.formatToParts = function formatToParts() {
    return this.dtf.formatToParts(this.dt.toJSDate());
  };

  _proto2.resolvedOptions = function resolvedOptions() {
    return this.dtf.resolvedOptions();
  };

  return PolyDateFormatter;
}();
/**
 * @private
 */


var PolyRelFormatter = /*#__PURE__*/function () {
  function PolyRelFormatter(intl, isEnglish, opts) {
    this.opts = _extends({
      style: "long"
    }, opts);

    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }

  var _proto3 = PolyRelFormatter.prototype;

  _proto3.format = function format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  };

  _proto3.formatToParts = function formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  };

  return PolyRelFormatter;
}();
/**
 * @private
 */


var Locale = /*#__PURE__*/function () {
  Locale.fromOpts = function fromOpts(opts) {
    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
  };

  Locale.create = function create(locale, numberingSystem, outputCalendar, defaultToEN) {
    if (defaultToEN === void 0) {
      defaultToEN = false;
    }

    var specifiedLocale = locale || Settings.defaultLocale; // the system locale is useful for human readable strings but annoying for parsing/formatting known formats

    var localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
    var numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
    var outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
  };

  Locale.resetCache = function resetCache() {
    sysLocaleCache = null;
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
  };

  Locale.fromObject = function fromObject(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        locale = _ref.locale,
        numberingSystem = _ref.numberingSystem,
        outputCalendar = _ref.outputCalendar;

    return Locale.create(locale, numberingSystem, outputCalendar);
  };

  function Locale(locale, numbering, outputCalendar, specifiedLocale) {
    var _parseLocaleString = parseLocaleString(locale),
        parsedLocale = _parseLocaleString[0],
        parsedNumberingSystem = _parseLocaleString[1],
        parsedOutputCalendar = _parseLocaleString[2];

    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
    this.weekdaysCache = {
      format: {},
      standalone: {}
    };
    this.monthsCache = {
      format: {},
      standalone: {}
    };
    this.meridiemCache = null;
    this.eraCache = {};
    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }

  var _proto4 = Locale.prototype;

  _proto4.listingMode = function listingMode() {
    var isActuallyEn = this.isEnglish();
    var hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
    return isActuallyEn && hasNoWeirdness ? "en" : "intl";
  };

  _proto4.clone = function clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);
    }
  };

  _proto4.redefaultToEN = function redefaultToEN(alts) {
    if (alts === void 0) {
      alts = {};
    }

    return this.clone(_extends({}, alts, {
      defaultToEN: true
    }));
  };

  _proto4.redefaultToSystem = function redefaultToSystem(alts) {
    if (alts === void 0) {
      alts = {};
    }

    return this.clone(_extends({}, alts, {
      defaultToEN: false
    }));
  };

  _proto4.months = function months$1(length, format, defaultOK) {
    var _this = this;

    if (format === void 0) {
      format = false;
    }

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, months, function () {
      var intl = format ? {
        month: length,
        day: "numeric"
      } : {
        month: length
      },
          formatStr = format ? "format" : "standalone";

      if (!_this.monthsCache[formatStr][length]) {
        _this.monthsCache[formatStr][length] = mapMonths(function (dt) {
          return _this.extract(dt, intl, "month");
        });
      }

      return _this.monthsCache[formatStr][length];
    });
  };

  _proto4.weekdays = function weekdays$1(length, format, defaultOK) {
    var _this2 = this;

    if (format === void 0) {
      format = false;
    }

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, weekdays, function () {
      var intl = format ? {
        weekday: length,
        year: "numeric",
        month: "long",
        day: "numeric"
      } : {
        weekday: length
      },
          formatStr = format ? "format" : "standalone";

      if (!_this2.weekdaysCache[formatStr][length]) {
        _this2.weekdaysCache[formatStr][length] = mapWeekdays(function (dt) {
          return _this2.extract(dt, intl, "weekday");
        });
      }

      return _this2.weekdaysCache[formatStr][length];
    });
  };

  _proto4.meridiems = function meridiems$1(defaultOK) {
    var _this3 = this;

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, undefined, defaultOK, function () {
      return meridiems;
    }, function () {
      // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
      // for AM and PM. This is probably wrong, but it's makes parsing way easier.
      if (!_this3.meridiemCache) {
        var intl = {
          hour: "numeric",
          hourCycle: "h12"
        };
        _this3.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(function (dt) {
          return _this3.extract(dt, intl, "dayperiod");
        });
      }

      return _this3.meridiemCache;
    });
  };

  _proto4.eras = function eras$1(length, defaultOK) {
    var _this4 = this;

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, eras, function () {
      var intl = {
        era: length
      }; // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
      // to definitely enumerate them.

      if (!_this4.eraCache[length]) {
        _this4.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(function (dt) {
          return _this4.extract(dt, intl, "era");
        });
      }

      return _this4.eraCache[length];
    });
  };

  _proto4.extract = function extract(dt, intlOpts, field) {
    var df = this.dtFormatter(dt, intlOpts),
        results = df.formatToParts(),
        matching = results.find(function (m) {
      return m.type.toLowerCase() === field;
    });
    return matching ? matching.value : null;
  };

  _proto4.numberFormatter = function numberFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }

    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
    // (in contrast, the rest of the condition is used heavily)
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  };

  _proto4.dtFormatter = function dtFormatter(dt, intlOpts) {
    if (intlOpts === void 0) {
      intlOpts = {};
    }

    return new PolyDateFormatter(dt, this.intl, intlOpts);
  };

  _proto4.relFormatter = function relFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }

    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  };

  _proto4.listFormatter = function listFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }

    return getCachedLF(this.intl, opts);
  };

  _proto4.isEnglish = function isEnglish() {
    return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
  };

  _proto4.equals = function equals(other) {
    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
  };

  _createClass(Locale, [{
    key: "fastNumbers",
    get: function get() {
      if (this.fastNumbersCached == null) {
        this.fastNumbersCached = supportsFastNumbers(this);
      }

      return this.fastNumbersCached;
    }
  }]);

  return Locale;
}();

/*
 * This file handles parsing for well-specified formats. Here's how it works:
 * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
 * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
 * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
 * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
 * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
 * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
 */

function combineRegexes() {
  for (var _len = arguments.length, regexes = new Array(_len), _key = 0; _key < _len; _key++) {
    regexes[_key] = arguments[_key];
  }

  var full = regexes.reduce(function (f, r) {
    return f + r.source;
  }, "");
  return RegExp("^" + full + "$");
}

function combineExtractors() {
  for (var _len2 = arguments.length, extractors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    extractors[_key2] = arguments[_key2];
  }

  return function (m) {
    return extractors.reduce(function (_ref, ex) {
      var mergedVals = _ref[0],
          mergedZone = _ref[1],
          cursor = _ref[2];

      var _ex = ex(m, cursor),
          val = _ex[0],
          zone = _ex[1],
          next = _ex[2];

      return [_extends({}, mergedVals, val), zone || mergedZone, next];
    }, [{}, null, 1]).slice(0, 2);
  };
}

function parse(s) {
  if (s == null) {
    return [null, null];
  }

  for (var _len3 = arguments.length, patterns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    patterns[_key3 - 1] = arguments[_key3];
  }

  for (var _i = 0, _patterns = patterns; _i < _patterns.length; _i++) {
    var _patterns$_i = _patterns[_i],
        regex = _patterns$_i[0],
        extractor = _patterns$_i[1];
    var m = regex.exec(s);

    if (m) {
      return extractor(m);
    }
  }

  return [null, null];
}

function simpleParse() {
  for (var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    keys[_key4] = arguments[_key4];
  }

  return function (match, cursor) {
    var ret = {};
    var i;

    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match[cursor + i]);
    }

    return [ret, null, cursor + i];
  };
} // ISO and SQL parsing


var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
var isoExtendedZone = "(?:" + offsetRegex.source + "?(?:\\[(" + ianaRegex.source + ")\\])?)?";
var isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
var isoTimeRegex = RegExp("" + isoTimeBaseRegex.source + isoExtendedZone);
var isoTimeExtensionRegex = RegExp("(?:T" + isoTimeRegex.source + ")?");
var isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
var isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
var isoOrdinalRegex = /(\d{4})-?(\d{3})/;
var extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
var extractISOOrdinalData = simpleParse("year", "ordinal");
var sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one

var sqlTimeRegex = RegExp(isoTimeBaseRegex.source + " ?(?:" + offsetRegex.source + "|(" + ianaRegex.source + "))?");
var sqlTimeExtensionRegex = RegExp("(?: " + sqlTimeRegex.source + ")?");

function int(match, pos, fallback) {
  var m = match[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}

function extractISOYmd(match, cursor) {
  var item = {
    year: int(match, cursor),
    month: int(match, cursor + 1, 1),
    day: int(match, cursor + 2, 1)
  };
  return [item, null, cursor + 3];
}

function extractISOTime(match, cursor) {
  var item = {
    hours: int(match, cursor, 0),
    minutes: int(match, cursor + 1, 0),
    seconds: int(match, cursor + 2, 0),
    milliseconds: parseMillis(match[cursor + 3])
  };
  return [item, null, cursor + 4];
}

function extractISOOffset(match, cursor) {
  var local = !match[cursor] && !match[cursor + 1],
      fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
      zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}

function extractIANAZone(match, cursor) {
  var zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
  return [{}, zone, cursor + 1];
} // ISO time parsing


var isoTimeOnly = RegExp("^T?" + isoTimeBaseRegex.source + "$"); // ISO duration parsing

var isoDuration = /^-?P(?:(?:(-?\d{1,9}(?:\.\d{1,9})?)Y)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,9}(?:\.\d{1,9})?)W)?(?:(-?\d{1,9}(?:\.\d{1,9})?)D)?(?:T(?:(-?\d{1,9}(?:\.\d{1,9})?)H)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,9}))?S)?)?)$/;

function extractISODuration(match) {
  var s = match[0],
      yearStr = match[1],
      monthStr = match[2],
      weekStr = match[3],
      dayStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      millisecondsStr = match[8];
  var hasNegativePrefix = s[0] === "-";
  var negativeSeconds = secondStr && secondStr[0] === "-";

  var maybeNegate = function maybeNegate(num, force) {
    if (force === void 0) {
      force = false;
    }

    return num !== undefined && (force || num && hasNegativePrefix) ? -num : num;
  };

  return [{
    years: maybeNegate(parseFloating(yearStr)),
    months: maybeNegate(parseFloating(monthStr)),
    weeks: maybeNegate(parseFloating(weekStr)),
    days: maybeNegate(parseFloating(dayStr)),
    hours: maybeNegate(parseFloating(hourStr)),
    minutes: maybeNegate(parseFloating(minuteStr)),
    seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
    milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
  }];
} // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
// and not just that we're in -240 *right now*. But since I don't think these are used that often
// I'm just going to ignore that


var obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};

function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr) result.second = parseInteger(secondStr);

  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }

  return result;
} // RFC 2822/5322


var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

function extractRFC2822(match) {
  var weekdayStr = match[1],
      dayStr = match[2],
      monthStr = match[3],
      yearStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      obsOffset = match[8],
      milOffset = match[9],
      offHourStr = match[10],
      offMinuteStr = match[11],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  var offset;

  if (obsOffset) {
    offset = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset = 0;
  } else {
    offset = signedOffset(offHourStr, offMinuteStr);
  }

  return [result, new FixedOffsetZone(offset)];
}

function preprocessRFC2822(s) {
  // Remove comments and folding whitespace and replace multiple-spaces with a single space
  return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
} // http date


var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
    rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
    ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

function extractRFC1123Or850(match) {
  var weekdayStr = match[1],
      dayStr = match[2],
      monthStr = match[3],
      yearStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

function extractASCII(match) {
  var weekdayStr = match[1],
      monthStr = match[2],
      dayStr = match[3],
      hourStr = match[4],
      minuteStr = match[5],
      secondStr = match[6],
      yearStr = match[7],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
var extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOOrdinalDateAndTime = combineExtractors(extractISOOrdinalData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
/*
 * @private
 */

function parseISODate(s) {
  return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);
}
function parseRFC2822Date(s) {
  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
}
function parseHTTPDate(s) {
  return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);
}
function parseISODuration(s) {
  return parse(s, [isoDuration, extractISODuration]);
}
var extractISOTimeOnly = combineExtractors(extractISOTime);
function parseISOTimeOnly(s) {
  return parse(s, [isoTimeOnly, extractISOTimeOnly]);
}
var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
var extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseSQL(s) {
  return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);
}

var INVALID$2 = "Invalid Duration"; // unit conversion constants

var lowOrderMatrix = {
  weeks: {
    days: 7,
    hours: 7 * 24,
    minutes: 7 * 24 * 60,
    seconds: 7 * 24 * 60 * 60,
    milliseconds: 7 * 24 * 60 * 60 * 1000
  },
  days: {
    hours: 24,
    minutes: 24 * 60,
    seconds: 24 * 60 * 60,
    milliseconds: 24 * 60 * 60 * 1000
  },
  hours: {
    minutes: 60,
    seconds: 60 * 60,
    milliseconds: 60 * 60 * 1000
  },
  minutes: {
    seconds: 60,
    milliseconds: 60 * 1000
  },
  seconds: {
    milliseconds: 1000
  }
},
    casualMatrix = _extends({
  years: {
    quarters: 4,
    months: 12,
    weeks: 52,
    days: 365,
    hours: 365 * 24,
    minutes: 365 * 24 * 60,
    seconds: 365 * 24 * 60 * 60,
    milliseconds: 365 * 24 * 60 * 60 * 1000
  },
  quarters: {
    months: 3,
    weeks: 13,
    days: 91,
    hours: 91 * 24,
    minutes: 91 * 24 * 60,
    seconds: 91 * 24 * 60 * 60,
    milliseconds: 91 * 24 * 60 * 60 * 1000
  },
  months: {
    weeks: 4,
    days: 30,
    hours: 30 * 24,
    minutes: 30 * 24 * 60,
    seconds: 30 * 24 * 60 * 60,
    milliseconds: 30 * 24 * 60 * 60 * 1000
  }
}, lowOrderMatrix),
    daysInYearAccurate = 146097.0 / 400,
    daysInMonthAccurate = 146097.0 / 4800,
    accurateMatrix = _extends({
  years: {
    quarters: 4,
    months: 12,
    weeks: daysInYearAccurate / 7,
    days: daysInYearAccurate,
    hours: daysInYearAccurate * 24,
    minutes: daysInYearAccurate * 24 * 60,
    seconds: daysInYearAccurate * 24 * 60 * 60,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
  },
  quarters: {
    months: 3,
    weeks: daysInYearAccurate / 28,
    days: daysInYearAccurate / 4,
    hours: daysInYearAccurate * 24 / 4,
    minutes: daysInYearAccurate * 24 * 60 / 4,
    seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4
  },
  months: {
    weeks: daysInMonthAccurate / 7,
    days: daysInMonthAccurate,
    hours: daysInMonthAccurate * 24,
    minutes: daysInMonthAccurate * 24 * 60,
    seconds: daysInMonthAccurate * 24 * 60 * 60,
    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
  }
}, lowOrderMatrix); // units ordered by size

var orderedUnits$1 = ["years", "quarters", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"];
var reverseUnits = orderedUnits$1.slice(0).reverse(); // clone really means "create another instance just like this one, but with these changes"

function clone$1(dur, alts, clear) {
  if (clear === void 0) {
    clear = false;
  }

  // deep merge for vals
  var conf = {
    values: clear ? alts.values : _extends({}, dur.values, alts.values || {}),
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy
  };
  return new Duration(conf);
}

function antiTrunc(n) {
  return n < 0 ? Math.floor(n) : Math.ceil(n);
} // NB: mutates parameters


function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
  var conv = matrix[toUnit][fromUnit],
      raw = fromMap[fromUnit] / conv,
      sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),
      // ok, so this is wild, but see the matrix in the tests
  added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
  toMap[toUnit] += added;
  fromMap[fromUnit] -= added * conv;
} // NB: mutates parameters


function normalizeValues(matrix, vals) {
  reverseUnits.reduce(function (previous, current) {
    if (!isUndefined(vals[current])) {
      if (previous) {
        convert(matrix, vals, previous, vals, current);
      }

      return current;
    } else {
      return previous;
    }
  }, null);
}
/**
 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.
 *
 * Here is a brief overview of commonly used methods and getters in Duration:
 *
 * * **Creation** To create a Duration, use {@link Duration#fromMillis}, {@link Duration#fromObject}, or {@link Duration#fromISO}.
 * * **Unit values** See the {@link Duration#years}, {@link Duration.months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
 * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
 * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
 * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
 *
 * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
 */


var Duration = /*#__PURE__*/function () {
  /**
   * @private
   */
  function Duration(config) {
    var accurate = config.conversionAccuracy === "longterm" || false;
    /**
     * @access private
     */

    this.values = config.values;
    /**
     * @access private
     */

    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */

    this.conversionAccuracy = accurate ? "longterm" : "casual";
    /**
     * @access private
     */

    this.invalid = config.invalid || null;
    /**
     * @access private
     */

    this.matrix = accurate ? accurateMatrix : casualMatrix;
    /**
     * @access private
     */

    this.isLuxonDuration = true;
  }
  /**
   * Create Duration from a number of milliseconds.
   * @param {number} count of milliseconds
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */


  Duration.fromMillis = function fromMillis(count, opts) {
    return Duration.fromObject({
      milliseconds: count
    }, opts);
  }
  /**
   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
   * If this object is empty then a zero milliseconds duration is returned.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.years
   * @param {number} obj.quarters
   * @param {number} obj.months
   * @param {number} obj.weeks
   * @param {number} obj.days
   * @param {number} obj.hours
   * @param {number} obj.minutes
   * @param {number} obj.seconds
   * @param {number} obj.milliseconds
   * @param {Object} [opts=[]] - options for creating this Duration
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  ;

  Duration.fromObject = function fromObject(obj, opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError("Duration.fromObject: argument expected to be an object, got " + (obj === null ? "null" : typeof obj));
    }

    return new Duration({
      values: normalizeObject(obj, Duration.normalizeUnit),
      loc: Locale.fromObject(opts),
      conversionAccuracy: opts.conversionAccuracy
    });
  }
  /**
   * Create a Duration from DurationLike.
   *
   * @param {Object | number | Duration} durationLike
   * One of:
   * - object with keys like 'years' and 'hours'.
   * - number representing milliseconds
   * - Duration instance
   * @return {Duration}
   */
  ;

  Duration.fromDurationLike = function fromDurationLike(durationLike) {
    if (isNumber(durationLike)) {
      return Duration.fromMillis(durationLike);
    } else if (Duration.isDuration(durationLike)) {
      return durationLike;
    } else if (typeof durationLike === "object") {
      return Duration.fromObject(durationLike);
    } else {
      throw new InvalidArgumentError("Unknown duration argument " + durationLike + " of type " + typeof durationLike);
    }
  }
  /**
   * Create a Duration from an ISO 8601 duration string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
   * @return {Duration}
   */
  ;

  Duration.fromISO = function fromISO(text, opts) {
    var _parseISODuration = parseISODuration(text),
        parsed = _parseISODuration[0];

    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
    }
  }
  /**
   * Create a Duration from an ISO 8601 time string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @return {Duration}
   */
  ;

  Duration.fromISOTime = function fromISOTime(text, opts) {
    var _parseISOTimeOnly = parseISOTimeOnly(text),
        parsed = _parseISOTimeOnly[0];

    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
    }
  }
  /**
   * Create an invalid Duration.
   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Duration}
   */
  ;

  Duration.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid);
    } else {
      return new Duration({
        invalid: invalid
      });
    }
  }
  /**
   * @private
   */
  ;

  Duration.normalizeUnit = function normalizeUnit(unit) {
    var normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds"
    }[unit ? unit.toLowerCase() : unit];
    if (!normalized) throw new InvalidUnitError(unit);
    return normalized;
  }
  /**
   * Check if an object is a Duration. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  Duration.isDuration = function isDuration(o) {
    return o && o.isLuxonDuration || false;
  }
  /**
   * Get  the locale of a Duration, such 'en-GB'
   * @type {string}
   */
  ;

  var _proto = Duration.prototype;

  /**
   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
   * * `S` for milliseconds
   * * `s` for seconds
   * * `m` for minutes
   * * `h` for hours
   * * `d` for days
   * * `w` for weeks
   * * `M` for months
   * * `y` for years
   * Notes:
   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
   * @param {string} fmt - the format string
   * @param {Object} opts - options
   * @param {boolean} [opts.floor=true] - floor numerical values
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
   * @return {string}
   */
  _proto.toFormat = function toFormat(fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    // reverse-compat since 1.2; we always round down now, never up, and we do it by default
    var fmtOpts = _extends({}, opts, {
      floor: opts.round !== false && opts.floor !== false
    });

    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID$2;
  }
  /**
   * Returns a string representation of a Duration with all units included.
   * To modify its behavior use the `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat
   * @param opts - On option object to override the formatting. Accepts the same keys as the options parameter of the native `Int.NumberFormat` constructor, as well as `listStyle`.
   * @example
   * ```js
   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
   * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
   * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
   * ```
   */
  ;

  _proto.toHuman = function toHuman(opts) {
    var _this = this;

    if (opts === void 0) {
      opts = {};
    }

    var l = orderedUnits$1.map(function (unit) {
      var val = _this.values[unit];

      if (isUndefined(val)) {
        return null;
      }

      return _this.loc.numberFormatter(_extends({
        style: "unit",
        unitDisplay: "long"
      }, opts, {
        unit: unit.slice(0, -1)
      })).format(val);
    }).filter(function (n) {
      return n;
    });
    return this.loc.listFormatter(_extends({
      type: "conjunction",
      style: opts.listStyle || "narrow"
    }, opts)).format(l);
  }
  /**
   * Returns a JavaScript object with this Duration's values.
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
   * @return {Object}
   */
  ;

  _proto.toObject = function toObject() {
    if (!this.isValid) return {};
    return _extends({}, this.values);
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Duration.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
   * @return {string}
   */
  ;

  _proto.toISO = function toISO() {
    // we could use the formatter, but this is an easier way to get the minimum string
    if (!this.isValid) return null;
    var s = "P";
    if (this.years !== 0) s += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0) s += this.weeks + "W";
    if (this.days !== 0) s += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s += "T";
    if (this.hours !== 0) s += this.hours + "H";
    if (this.minutes !== 0) s += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0) // this will handle "floating point madness" by removing extra decimal places
      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
    if (s === "P") s += "T0S";
    return s;
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
   * @return {string}
   */
  ;

  _proto.toISOTime = function toISOTime(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) return null;
    var millis = this.toMillis();
    if (millis < 0 || millis >= 86400000) return null;
    opts = _extends({
      suppressMilliseconds: false,
      suppressSeconds: false,
      includePrefix: false,
      format: "extended"
    }, opts);
    var value = this.shiftTo("hours", "minutes", "seconds", "milliseconds");
    var fmt = opts.format === "basic" ? "hhmm" : "hh:mm";

    if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {
      fmt += opts.format === "basic" ? "ss" : ":ss";

      if (!opts.suppressMilliseconds || value.milliseconds !== 0) {
        fmt += ".SSS";
      }
    }

    var str = value.toFormat(fmt);

    if (opts.includePrefix) {
      str = "T" + str;
    }

    return str;
  }
  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
   * @return {string}
   */
  ;

  _proto.toJSON = function toJSON() {
    return this.toISO();
  }
  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    return this.toISO();
  }
  /**
   * Returns an milliseconds value of this Duration.
   * @return {number}
   */
  ;

  _proto.toMillis = function toMillis() {
    return this.as("milliseconds");
  }
  /**
   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
   * @return {number}
   */
  ;

  _proto.valueOf = function valueOf() {
    return this.toMillis();
  }
  /**
   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  ;

  _proto.plus = function plus(duration) {
    if (!this.isValid) return this;
    var dur = Duration.fromDurationLike(duration),
        result = {};

    for (var _iterator = _createForOfIteratorHelperLoose(orderedUnits$1), _step; !(_step = _iterator()).done;) {
      var k = _step.value;

      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
        result[k] = dur.get(k) + this.get(k);
      }
    }

    return clone$1(this, {
      values: result
    }, true);
  }
  /**
   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  ;

  _proto.minus = function minus(duration) {
    if (!this.isValid) return this;
    var dur = Duration.fromDurationLike(duration);
    return this.plus(dur.negate());
  }
  /**
   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hour" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
   * @return {Duration}
   */
  ;

  _proto.mapUnits = function mapUnits(fn) {
    if (!this.isValid) return this;
    var result = {};

    for (var _i = 0, _Object$keys = Object.keys(this.values); _i < _Object$keys.length; _i++) {
      var k = _Object$keys[_i];
      result[k] = asNumber(fn(this.values[k], k));
    }

    return clone$1(this, {
      values: result
    }, true);
  }
  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
   * @return {number}
   */
  ;

  _proto.get = function get(unit) {
    return this[Duration.normalizeUnit(unit)];
  }
  /**
   * "Set" the values of specified units. Return a newly-constructed Duration.
   * @param {Object} values - a mapping of units to numbers
   * @example dur.set({ years: 2017 })
   * @example dur.set({ hours: 8, minutes: 30 })
   * @return {Duration}
   */
  ;

  _proto.set = function set(values) {
    if (!this.isValid) return this;

    var mixed = _extends({}, this.values, normalizeObject(values, Duration.normalizeUnit));

    return clone$1(this, {
      values: mixed
    });
  }
  /**
   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
   * @example dur.reconfigure({ locale: 'en-GB' })
   * @return {Duration}
   */
  ;

  _proto.reconfigure = function reconfigure(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        locale = _ref.locale,
        numberingSystem = _ref.numberingSystem,
        conversionAccuracy = _ref.conversionAccuracy;

    var loc = this.loc.clone({
      locale: locale,
      numberingSystem: numberingSystem
    }),
        opts = {
      loc: loc
    };

    if (conversionAccuracy) {
      opts.conversionAccuracy = conversionAccuracy;
    }

    return clone$1(this, opts);
  }
  /**
   * Return the length of the duration in the specified unit.
   * @param {string} unit - a unit such as 'minutes' or 'days'
   * @example Duration.fromObject({years: 1}).as('days') //=> 365
   * @example Duration.fromObject({years: 1}).as('months') //=> 12
   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
   * @return {number}
   */
  ;

  _proto.as = function as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }
  /**
   * Reduce this Duration to its canonical representation in its current units.
   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
   * @return {Duration}
   */
  ;

  _proto.normalize = function normalize() {
    if (!this.isValid) return this;
    var vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone$1(this, {
      values: vals
    }, true);
  }
  /**
   * Convert this Duration into its representation in a different set of units.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
   * @return {Duration}
   */
  ;

  _proto.shiftTo = function shiftTo() {
    for (var _len = arguments.length, units = new Array(_len), _key = 0; _key < _len; _key++) {
      units[_key] = arguments[_key];
    }

    if (!this.isValid) return this;

    if (units.length === 0) {
      return this;
    }

    units = units.map(function (u) {
      return Duration.normalizeUnit(u);
    });
    var built = {},
        accumulated = {},
        vals = this.toObject();
    var lastUnit;

    for (var _iterator2 = _createForOfIteratorHelperLoose(orderedUnits$1), _step2; !(_step2 = _iterator2()).done;) {
      var k = _step2.value;

      if (units.indexOf(k) >= 0) {
        lastUnit = k;
        var own = 0; // anything we haven't boiled down yet should get boiled to this unit

        for (var ak in accumulated) {
          own += this.matrix[ak][k] * accumulated[ak];
          accumulated[ak] = 0;
        } // plus anything that's already in this unit


        if (isNumber(vals[k])) {
          own += vals[k];
        }

        var i = Math.trunc(own);
        built[k] = i;
        accumulated[k] = (own * 1000 - i * 1000) / 1000; // plus anything further down the chain that should be rolled up in to this

        for (var down in vals) {
          if (orderedUnits$1.indexOf(down) > orderedUnits$1.indexOf(k)) {
            convert(this.matrix, vals, down, built, k);
          }
        } // otherwise, keep it in the wings to boil it later

      } else if (isNumber(vals[k])) {
        accumulated[k] = vals[k];
      }
    } // anything leftover becomes the decimal for the last unit
    // lastUnit must be defined since units is not empty


    for (var key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }

    return clone$1(this, {
      values: built
    }, true).normalize();
  }
  /**
   * Return the negative of this Duration.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
   * @return {Duration}
   */
  ;

  _proto.negate = function negate() {
    if (!this.isValid) return this;
    var negated = {};

    for (var _i2 = 0, _Object$keys2 = Object.keys(this.values); _i2 < _Object$keys2.length; _i2++) {
      var k = _Object$keys2[_i2];
      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
    }

    return clone$1(this, {
      values: negated
    }, true);
  }
  /**
   * Get the years.
   * @type {number}
   */
  ;

  /**
   * Equality check
   * Two Durations are equal iff they have the same units and the same values for each unit.
   * @param {Duration} other
   * @return {boolean}
   */
  _proto.equals = function equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    if (!this.loc.equals(other.loc)) {
      return false;
    }

    function eq(v1, v2) {
      // Consider 0 and undefined as equal
      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;
      return v1 === v2;
    }

    for (var _iterator3 = _createForOfIteratorHelperLoose(orderedUnits$1), _step3; !(_step3 = _iterator3()).done;) {
      var u = _step3.value;

      if (!eq(this.values[u], other.values[u])) {
        return false;
      }
    }

    return true;
  };

  _createClass(Duration, [{
    key: "locale",
    get: function get() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
     *
     * @type {string}
     */

  }, {
    key: "numberingSystem",
    get: function get() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
  }, {
    key: "years",
    get: function get() {
      return this.isValid ? this.values.years || 0 : NaN;
    }
    /**
     * Get the quarters.
     * @type {number}
     */

  }, {
    key: "quarters",
    get: function get() {
      return this.isValid ? this.values.quarters || 0 : NaN;
    }
    /**
     * Get the months.
     * @type {number}
     */

  }, {
    key: "months",
    get: function get() {
      return this.isValid ? this.values.months || 0 : NaN;
    }
    /**
     * Get the weeks
     * @type {number}
     */

  }, {
    key: "weeks",
    get: function get() {
      return this.isValid ? this.values.weeks || 0 : NaN;
    }
    /**
     * Get the days.
     * @type {number}
     */

  }, {
    key: "days",
    get: function get() {
      return this.isValid ? this.values.days || 0 : NaN;
    }
    /**
     * Get the hours.
     * @type {number}
     */

  }, {
    key: "hours",
    get: function get() {
      return this.isValid ? this.values.hours || 0 : NaN;
    }
    /**
     * Get the minutes.
     * @type {number}
     */

  }, {
    key: "minutes",
    get: function get() {
      return this.isValid ? this.values.minutes || 0 : NaN;
    }
    /**
     * Get the seconds.
     * @return {number}
     */

  }, {
    key: "seconds",
    get: function get() {
      return this.isValid ? this.values.seconds || 0 : NaN;
    }
    /**
     * Get the milliseconds.
     * @return {number}
     */

  }, {
    key: "milliseconds",
    get: function get() {
      return this.isValid ? this.values.milliseconds || 0 : NaN;
    }
    /**
     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
     * on invalid DateTimes or Intervals.
     * @return {boolean}
     */

  }, {
    key: "isValid",
    get: function get() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this Duration became invalid, or null if the Duration is valid
     * @return {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
  }]);

  return Duration;
}();

var INVALID$1 = "Invalid Interval"; // checks if the start is equal to or before the end

function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid("end before start", "The end of an interval must be after its start, but you had start=" + start.toISO() + " and end=" + end.toISO());
  } else {
    return null;
  }
}
/**
 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
 *
 * Here is a brief overview of the most commonly used methods and getters in Interval:
 *
 * * **Creation** To create an Interval, use {@link Interval#fromDateTimes}, {@link Interval#after}, {@link Interval#before}, or {@link Interval#fromISO}.
 * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
 * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
 * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval#merge}, {@link Interval#xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
 * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
 * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
 */


var Interval = /*#__PURE__*/function () {
  /**
   * @private
   */
  function Interval(config) {
    /**
     * @access private
     */
    this.s = config.start;
    /**
     * @access private
     */

    this.e = config.end;
    /**
     * @access private
     */

    this.invalid = config.invalid || null;
    /**
     * @access private
     */

    this.isLuxonInterval = true;
  }
  /**
   * Create an invalid Interval.
   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Interval}
   */


  Interval.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid);
    } else {
      return new Interval({
        invalid: invalid
      });
    }
  }
  /**
   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
   * @param {DateTime|Date|Object} start
   * @param {DateTime|Date|Object} end
   * @return {Interval}
   */
  ;

  Interval.fromDateTimes = function fromDateTimes(start, end) {
    var builtStart = friendlyDateTime(start),
        builtEnd = friendlyDateTime(end);
    var validateError = validateStartEnd(builtStart, builtEnd);

    if (validateError == null) {
      return new Interval({
        start: builtStart,
        end: builtEnd
      });
    } else {
      return validateError;
    }
  }
  /**
   * Create an Interval from a start DateTime and a Duration to extend to.
   * @param {DateTime|Date|Object} start
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  ;

  Interval.after = function after(start, duration) {
    var dur = Duration.fromDurationLike(duration),
        dt = friendlyDateTime(start);
    return Interval.fromDateTimes(dt, dt.plus(dur));
  }
  /**
   * Create an Interval from an end DateTime and a Duration to extend backwards to.
   * @param {DateTime|Date|Object} end
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  ;

  Interval.before = function before(end, duration) {
    var dur = Duration.fromDurationLike(duration),
        dt = friendlyDateTime(end);
    return Interval.fromDateTimes(dt.minus(dur), dt);
  }
  /**
   * Create an Interval from an ISO 8601 string.
   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
   * @param {string} text - the ISO string to parse
   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {Interval}
   */
  ;

  Interval.fromISO = function fromISO(text, opts) {
    var _split = (text || "").split("/", 2),
        s = _split[0],
        e = _split[1];

    if (s && e) {
      var start, startIsValid;

      try {
        start = DateTime.fromISO(s, opts);
        startIsValid = start.isValid;
      } catch (e) {
        startIsValid = false;
      }

      var end, endIsValid;

      try {
        end = DateTime.fromISO(e, opts);
        endIsValid = end.isValid;
      } catch (e) {
        endIsValid = false;
      }

      if (startIsValid && endIsValid) {
        return Interval.fromDateTimes(start, end);
      }

      if (startIsValid) {
        var dur = Duration.fromISO(e, opts);

        if (dur.isValid) {
          return Interval.after(start, dur);
        }
      } else if (endIsValid) {
        var _dur = Duration.fromISO(s, opts);

        if (_dur.isValid) {
          return Interval.before(end, _dur);
        }
      }
    }

    return Interval.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
  }
  /**
   * Check if an object is an Interval. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  Interval.isInterval = function isInterval(o) {
    return o && o.isLuxonInterval || false;
  }
  /**
   * Returns the start of the Interval
   * @type {DateTime}
   */
  ;

  var _proto = Interval.prototype;

  /**
   * Returns the length of the Interval in the specified unit.
   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
   * @return {number}
   */
  _proto.length = function length(unit) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    return this.isValid ? this.toDuration.apply(this, [unit]).get(unit) : NaN;
  }
  /**
   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
   * @param {string} [unit='milliseconds'] - the unit of time to count.
   * @return {number}
   */
  ;

  _proto.count = function count(unit) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (!this.isValid) return NaN;
    var start = this.start.startOf(unit),
        end = this.end.startOf(unit);
    return Math.floor(end.diff(start, unit).get(unit)) + 1;
  }
  /**
   * Returns whether this Interval's start and end are both in the same unit of time
   * @param {string} unit - the unit of time to check sameness on
   * @return {boolean}
   */
  ;

  _proto.hasSame = function hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }
  /**
   * Return whether this Interval has the same start and end DateTimes.
   * @return {boolean}
   */
  ;

  _proto.isEmpty = function isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }
  /**
   * Return whether this Interval's start is after the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.isAfter = function isAfter(dateTime) {
    if (!this.isValid) return false;
    return this.s > dateTime;
  }
  /**
   * Return whether this Interval's end is before the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.isBefore = function isBefore(dateTime) {
    if (!this.isValid) return false;
    return this.e <= dateTime;
  }
  /**
   * Return whether this Interval contains the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.contains = function contains(dateTime) {
    if (!this.isValid) return false;
    return this.s <= dateTime && this.e > dateTime;
  }
  /**
   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
   * @param {Object} values - the values to set
   * @param {DateTime} values.start - the starting DateTime
   * @param {DateTime} values.end - the ending DateTime
   * @return {Interval}
   */
  ;

  _proto.set = function set(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        start = _ref.start,
        end = _ref.end;

    if (!this.isValid) return this;
    return Interval.fromDateTimes(start || this.s, end || this.e);
  }
  /**
   * Split this Interval at each of the specified DateTimes
   * @param {...DateTime} dateTimes - the unit of time to count.
   * @return {Array}
   */
  ;

  _proto.splitAt = function splitAt() {
    var _this = this;

    if (!this.isValid) return [];

    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
      dateTimes[_key] = arguments[_key];
    }

    var sorted = dateTimes.map(friendlyDateTime).filter(function (d) {
      return _this.contains(d);
    }).sort(),
        results = [];
    var s = this.s,
        i = 0;

    while (s < this.e) {
      var added = sorted[i] || this.e,
          next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      i += 1;
    }

    return results;
  }
  /**
   * Split this Interval into smaller Intervals, each of the specified length.
   * Left over time is grouped into a smaller interval
   * @param {Duration|Object|number} duration - The length of each resulting interval.
   * @return {Array}
   */
  ;

  _proto.splitBy = function splitBy(duration) {
    var dur = Duration.fromDurationLike(duration);

    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }

    var s = this.s,
        idx = 1,
        next;
    var results = [];

    while (s < this.e) {
      var added = this.start.plus(dur.mapUnits(function (x) {
        return x * idx;
      }));
      next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      idx += 1;
    }

    return results;
  }
  /**
   * Split this Interval into the specified number of smaller intervals.
   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
   * @return {Array}
   */
  ;

  _proto.divideEqually = function divideEqually(numberOfParts) {
    if (!this.isValid) return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }
  /**
   * Return whether this Interval overlaps with the specified Interval
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.overlaps = function overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }
  /**
   * Return whether this Interval's end is adjacent to the specified Interval's start.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.abutsStart = function abutsStart(other) {
    if (!this.isValid) return false;
    return +this.e === +other.s;
  }
  /**
   * Return whether this Interval's start is adjacent to the specified Interval's end.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.abutsEnd = function abutsEnd(other) {
    if (!this.isValid) return false;
    return +other.e === +this.s;
  }
  /**
   * Return whether this Interval engulfs the start and end of the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.engulfs = function engulfs(other) {
    if (!this.isValid) return false;
    return this.s <= other.s && this.e >= other.e;
  }
  /**
   * Return whether this Interval has the same start and end as the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    return this.s.equals(other.s) && this.e.equals(other.e);
  }
  /**
   * Return an Interval representing the intersection of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
   * @param {Interval} other
   * @return {Interval}
   */
  ;

  _proto.intersection = function intersection(other) {
    if (!this.isValid) return this;
    var s = this.s > other.s ? this.s : other.s,
        e = this.e < other.e ? this.e : other.e;

    if (s >= e) {
      return null;
    } else {
      return Interval.fromDateTimes(s, e);
    }
  }
  /**
   * Return an Interval representing the union of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
   * @param {Interval} other
   * @return {Interval}
   */
  ;

  _proto.union = function union(other) {
    if (!this.isValid) return this;
    var s = this.s < other.s ? this.s : other.s,
        e = this.e > other.e ? this.e : other.e;
    return Interval.fromDateTimes(s, e);
  }
  /**
   * Merge an array of Intervals into a equivalent minimal set of Intervals.
   * Combines overlapping and adjacent Intervals.
   * @param {Array} intervals
   * @return {Array}
   */
  ;

  Interval.merge = function merge(intervals) {
    var _intervals$sort$reduc = intervals.sort(function (a, b) {
      return a.s - b.s;
    }).reduce(function (_ref2, item) {
      var sofar = _ref2[0],
          current = _ref2[1];

      if (!current) {
        return [sofar, item];
      } else if (current.overlaps(item) || current.abutsStart(item)) {
        return [sofar, current.union(item)];
      } else {
        return [sofar.concat([current]), item];
      }
    }, [[], null]),
        found = _intervals$sort$reduc[0],
        final = _intervals$sort$reduc[1];

    if (final) {
      found.push(final);
    }

    return found;
  }
  /**
   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
   * @param {Array} intervals
   * @return {Array}
   */
  ;

  Interval.xor = function xor(intervals) {
    var _Array$prototype;

    var start = null,
        currentCount = 0;

    var results = [],
        ends = intervals.map(function (i) {
      return [{
        time: i.s,
        type: "s"
      }, {
        time: i.e,
        type: "e"
      }];
    }),
        flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, ends),
        arr = flattened.sort(function (a, b) {
      return a.time - b.time;
    });

    for (var _iterator = _createForOfIteratorHelperLoose(arr), _step; !(_step = _iterator()).done;) {
      var i = _step.value;
      currentCount += i.type === "s" ? 1 : -1;

      if (currentCount === 1) {
        start = i.time;
      } else {
        if (start && +start !== +i.time) {
          results.push(Interval.fromDateTimes(start, i.time));
        }

        start = null;
      }
    }

    return Interval.merge(results);
  }
  /**
   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
   * @param {...Interval} intervals
   * @return {Array}
   */
  ;

  _proto.difference = function difference() {
    var _this2 = this;

    for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      intervals[_key2] = arguments[_key2];
    }

    return Interval.xor([this].concat(intervals)).map(function (i) {
      return _this2.intersection(i);
    }).filter(function (i) {
      return i && !i.isEmpty();
    });
  }
  /**
   * Returns a string representation of this Interval appropriate for debugging.
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    if (!this.isValid) return INVALID$1;
    return "[" + this.s.toISO() + " \u2013 " + this.e.toISO() + ")";
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Interval.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */
  ;

  _proto.toISO = function toISO(opts) {
    if (!this.isValid) return INVALID$1;
    return this.s.toISO(opts) + "/" + this.e.toISO(opts);
  }
  /**
   * Returns an ISO 8601-compliant string representation of date of this Interval.
   * The time components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {string}
   */
  ;

  _proto.toISODate = function toISODate() {
    if (!this.isValid) return INVALID$1;
    return this.s.toISODate() + "/" + this.e.toISODate();
  }
  /**
   * Returns an ISO 8601-compliant string representation of time of this Interval.
   * The date components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */
  ;

  _proto.toISOTime = function toISOTime(opts) {
    if (!this.isValid) return INVALID$1;
    return this.s.toISOTime(opts) + "/" + this.e.toISOTime(opts);
  }
  /**
   * Returns a string representation of this Interval formatted according to the specified format string.
   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime#toFormat} for details.
   * @param {Object} opts - options
   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations
   * @return {string}
   */
  ;

  _proto.toFormat = function toFormat(dateFormat, _temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2,
        _ref3$separator = _ref3.separator,
        separator = _ref3$separator === void 0 ? " – " : _ref3$separator;

    if (!this.isValid) return INVALID$1;
    return "" + this.s.toFormat(dateFormat) + separator + this.e.toFormat(dateFormat);
  }
  /**
   * Return a Duration representing the time spanned by this interval.
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
   * @return {Duration}
   */
  ;

  _proto.toDuration = function toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }

    return this.e.diff(this.s, unit, opts);
  }
  /**
   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
   * @param {function} mapFn
   * @return {Interval}
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
   */
  ;

  _proto.mapEndpoints = function mapEndpoints(mapFn) {
    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  };

  _createClass(Interval, [{
    key: "start",
    get: function get() {
      return this.isValid ? this.s : null;
    }
    /**
     * Returns the end of the Interval
     * @type {DateTime}
     */

  }, {
    key: "end",
    get: function get() {
      return this.isValid ? this.e : null;
    }
    /**
     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
     * @type {boolean}
     */

  }, {
    key: "isValid",
    get: function get() {
      return this.invalidReason === null;
    }
    /**
     * Returns an error code if this Interval is invalid, or null if the Interval is valid
     * @type {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
  }]);

  return Interval;
}();

/**
 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
 */

var Info = /*#__PURE__*/function () {
  function Info() {}

  /**
   * Return whether the specified zone contains a DST.
   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
   * @return {boolean}
   */
  Info.hasDST = function hasDST(zone) {
    if (zone === void 0) {
      zone = Settings.defaultZone;
    }

    var proto = DateTime.now().setZone(zone).set({
      month: 12
    });
    return !zone.isUniversal && proto.offset !== proto.set({
      month: 6
    }).offset;
  }
  /**
   * Return whether the specified zone is a valid IANA specifier.
   * @param {string} zone - Zone to check
   * @return {boolean}
   */
  ;

  Info.isValidIANAZone = function isValidIANAZone(zone) {
    return IANAZone.isValidZone(zone);
  }
  /**
   * Converts the input into a {@link Zone} instance.
   *
   * * If `input` is already a Zone instance, it is returned unchanged.
   * * If `input` is a string containing a valid time zone name, a Zone instance
   *   with that name is returned.
   * * If `input` is a string that doesn't refer to a known time zone, a Zone
   *   instance with {@link Zone#isValid} == false is returned.
   * * If `input is a number, a Zone instance with the specified fixed offset
   *   in minutes is returned.
   * * If `input` is `null` or `undefined`, the default zone is returned.
   * @param {string|Zone|number} [input] - the value to be converted
   * @return {Zone}
   */
  ;

  Info.normalizeZone = function normalizeZone$1(input) {
    return normalizeZone(input, Settings.defaultZone);
  }
  /**
   * Return an array of standalone month names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @example Info.months()[0] //=> 'January'
   * @example Info.months('short')[0] //=> 'Jan'
   * @example Info.months('numeric')[0] //=> '1'
   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
   * @return {Array}
   */
  ;

  Info.months = function months(length, _temp) {
    if (length === void 0) {
      length = "long";
    }

    var _ref = _temp === void 0 ? {} : _temp,
        _ref$locale = _ref.locale,
        locale = _ref$locale === void 0 ? null : _ref$locale,
        _ref$numberingSystem = _ref.numberingSystem,
        numberingSystem = _ref$numberingSystem === void 0 ? null : _ref$numberingSystem,
        _ref$locObj = _ref.locObj,
        locObj = _ref$locObj === void 0 ? null : _ref$locObj,
        _ref$outputCalendar = _ref.outputCalendar,
        outputCalendar = _ref$outputCalendar === void 0 ? "gregory" : _ref$outputCalendar;

    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
  }
  /**
   * Return an array of format month names.
   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
   * changes the string.
   * See {@link Info#months}
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @return {Array}
   */
  ;

  Info.monthsFormat = function monthsFormat(length, _temp2) {
    if (length === void 0) {
      length = "long";
    }

    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        _ref2$locale = _ref2.locale,
        locale = _ref2$locale === void 0 ? null : _ref2$locale,
        _ref2$numberingSystem = _ref2.numberingSystem,
        numberingSystem = _ref2$numberingSystem === void 0 ? null : _ref2$numberingSystem,
        _ref2$locObj = _ref2.locObj,
        locObj = _ref2$locObj === void 0 ? null : _ref2$locObj,
        _ref2$outputCalendar = _ref2.outputCalendar,
        outputCalendar = _ref2$outputCalendar === void 0 ? "gregory" : _ref2$outputCalendar;

    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
  }
  /**
   * Return an array of standalone week names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @example Info.weekdays()[0] //=> 'Monday'
   * @example Info.weekdays('short')[0] //=> 'Mon'
   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
   * @return {Array}
   */
  ;

  Info.weekdays = function weekdays(length, _temp3) {
    if (length === void 0) {
      length = "long";
    }

    var _ref3 = _temp3 === void 0 ? {} : _temp3,
        _ref3$locale = _ref3.locale,
        locale = _ref3$locale === void 0 ? null : _ref3$locale,
        _ref3$numberingSystem = _ref3.numberingSystem,
        numberingSystem = _ref3$numberingSystem === void 0 ? null : _ref3$numberingSystem,
        _ref3$locObj = _ref3.locObj,
        locObj = _ref3$locObj === void 0 ? null : _ref3$locObj;

    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
  }
  /**
   * Return an array of format week names.
   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
   * changes the string.
   * See {@link Info#weekdays}
   * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale=null] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @return {Array}
   */
  ;

  Info.weekdaysFormat = function weekdaysFormat(length, _temp4) {
    if (length === void 0) {
      length = "long";
    }

    var _ref4 = _temp4 === void 0 ? {} : _temp4,
        _ref4$locale = _ref4.locale,
        locale = _ref4$locale === void 0 ? null : _ref4$locale,
        _ref4$numberingSystem = _ref4.numberingSystem,
        numberingSystem = _ref4$numberingSystem === void 0 ? null : _ref4$numberingSystem,
        _ref4$locObj = _ref4.locObj,
        locObj = _ref4$locObj === void 0 ? null : _ref4$locObj;

    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
  }
  /**
   * Return an array of meridiems.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
   * @return {Array}
   */
  ;

  Info.meridiems = function meridiems(_temp5) {
    var _ref5 = _temp5 === void 0 ? {} : _temp5,
        _ref5$locale = _ref5.locale,
        locale = _ref5$locale === void 0 ? null : _ref5$locale;

    return Locale.create(locale).meridiems();
  }
  /**
   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.eras() //=> [ 'BC', 'AD' ]
   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
   * @return {Array}
   */
  ;

  Info.eras = function eras(length, _temp6) {
    if (length === void 0) {
      length = "short";
    }

    var _ref6 = _temp6 === void 0 ? {} : _temp6,
        _ref6$locale = _ref6.locale,
        locale = _ref6$locale === void 0 ? null : _ref6$locale;

    return Locale.create(locale, null, "gregory").eras(length);
  }
  /**
   * Return the set of available features in this environment.
   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
   * Keys:
   * * `relative`: whether this environment supports relative time formatting
   * @example Info.features() //=> { relative: false }
   * @return {Object}
   */
  ;

  Info.features = function features() {
    return {
      relative: hasRelative()
    };
  };

  return Info;
}();

function dayDiff(earlier, later) {
  var utcDayStart = function utcDayStart(dt) {
    return dt.toUTC(0, {
      keepLocalTime: true
    }).startOf("day").valueOf();
  },
      ms = utcDayStart(later) - utcDayStart(earlier);

  return Math.floor(Duration.fromMillis(ms).as("days"));
}

function highOrderDiffs(cursor, later, units) {
  var differs = [["years", function (a, b) {
    return b.year - a.year;
  }], ["quarters", function (a, b) {
    return b.quarter - a.quarter;
  }], ["months", function (a, b) {
    return b.month - a.month + (b.year - a.year) * 12;
  }], ["weeks", function (a, b) {
    var days = dayDiff(a, b);
    return (days - days % 7) / 7;
  }], ["days", dayDiff]];
  var results = {};
  var lowestOrder, highWater;

  for (var _i = 0, _differs = differs; _i < _differs.length; _i++) {
    var _differs$_i = _differs[_i],
        unit = _differs$_i[0],
        differ = _differs$_i[1];

    if (units.indexOf(unit) >= 0) {
      var _cursor$plus;

      lowestOrder = unit;
      var delta = differ(cursor, later);
      highWater = cursor.plus((_cursor$plus = {}, _cursor$plus[unit] = delta, _cursor$plus));

      if (highWater > later) {
        var _cursor$plus2;

        cursor = cursor.plus((_cursor$plus2 = {}, _cursor$plus2[unit] = delta - 1, _cursor$plus2));
        delta -= 1;
      } else {
        cursor = highWater;
      }

      results[unit] = delta;
    }
  }

  return [cursor, results, highWater, lowestOrder];
}

function _diff (earlier, later, units, opts) {
  var _highOrderDiffs = highOrderDiffs(earlier, later, units),
      cursor = _highOrderDiffs[0],
      results = _highOrderDiffs[1],
      highWater = _highOrderDiffs[2],
      lowestOrder = _highOrderDiffs[3];

  var remainingMillis = later - cursor;
  var lowerOrderUnits = units.filter(function (u) {
    return ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0;
  });

  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      var _cursor$plus3;

      highWater = cursor.plus((_cursor$plus3 = {}, _cursor$plus3[lowestOrder] = 1, _cursor$plus3));
    }

    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }

  var duration = Duration.fromObject(results, opts);

  if (lowerOrderUnits.length > 0) {
    var _Duration$fromMillis;

    return (_Duration$fromMillis = Duration.fromMillis(remainingMillis, opts)).shiftTo.apply(_Duration$fromMillis, lowerOrderUnits).plus(duration);
  } else {
    return duration;
  }
}

var numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d"
};
var numberingSystemsUTF16 = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881]
};
var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str) {
  var value = parseInt(str, 10);

  if (isNaN(value)) {
    value = "";

    for (var i = 0; i < str.length; i++) {
      var code = str.charCodeAt(i);

      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (var key in numberingSystemsUTF16) {
          var _numberingSystemsUTF = numberingSystemsUTF16[key],
              min = _numberingSystemsUTF[0],
              max = _numberingSystemsUTF[1];

          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }

    return parseInt(value, 10);
  } else {
    return value;
  }
}
function digitRegex(_ref, append) {
  var numberingSystem = _ref.numberingSystem;

  if (append === void 0) {
    append = "";
  }

  return new RegExp("" + numberingSystems[numberingSystem || "latn"] + append);
}

var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

function intUnit(regex, post) {
  if (post === void 0) {
    post = function post(i) {
      return i;
    };
  }

  return {
    regex: regex,
    deser: function deser(_ref) {
      var s = _ref[0];
      return post(parseDigits(s));
    }
  };
}

var NBSP = String.fromCharCode(160);
var spaceOrNBSP = "[ " + NBSP + "]";
var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");

function fixListRegex(s) {
  // make dots optional and also make them literal
  // make space and non breakable space characters interchangeable
  return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}

function stripInsensitivities(s) {
  return s.replace(/\./g, "") // ignore dots that were made optional
  .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
  .toLowerCase();
}

function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: function deser(_ref2) {
        var s = _ref2[0];
        return strings.findIndex(function (i) {
          return stripInsensitivities(s) === stripInsensitivities(i);
        }) + startIndex;
      }
    };
  }
}

function offset(regex, groups) {
  return {
    regex: regex,
    deser: function deser(_ref3) {
      var h = _ref3[1],
          m = _ref3[2];
      return signedOffset(h, m);
    },
    groups: groups
  };
}

function simple(regex) {
  return {
    regex: regex,
    deser: function deser(_ref4) {
      var s = _ref4[0];
      return s;
    }
  };
}

function escapeToken(value) {
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}

function unitForToken(token, loc) {
  var one = digitRegex(loc),
      two = digitRegex(loc, "{2}"),
      three = digitRegex(loc, "{3}"),
      four = digitRegex(loc, "{4}"),
      six = digitRegex(loc, "{6}"),
      oneOrTwo = digitRegex(loc, "{1,2}"),
      oneToThree = digitRegex(loc, "{1,3}"),
      oneToSix = digitRegex(loc, "{1,6}"),
      oneToNine = digitRegex(loc, "{1,9}"),
      twoToFour = digitRegex(loc, "{2,4}"),
      fourToSix = digitRegex(loc, "{4,6}"),
      literal = function literal(t) {
    return {
      regex: RegExp(escapeToken(t.val)),
      deser: function deser(_ref5) {
        var s = _ref5[0];
        return s;
      },
      literal: true
    };
  },
      unitate = function unitate(t) {
    if (token.literal) {
      return literal(t);
    }

    switch (t.val) {
      // era
      case "G":
        return oneOf(loc.eras("short", false), 0);

      case "GG":
        return oneOf(loc.eras("long", false), 0);
      // years

      case "y":
        return intUnit(oneToSix);

      case "yy":
        return intUnit(twoToFour, untruncateYear);

      case "yyyy":
        return intUnit(four);

      case "yyyyy":
        return intUnit(fourToSix);

      case "yyyyyy":
        return intUnit(six);
      // months

      case "M":
        return intUnit(oneOrTwo);

      case "MM":
        return intUnit(two);

      case "MMM":
        return oneOf(loc.months("short", true, false), 1);

      case "MMMM":
        return oneOf(loc.months("long", true, false), 1);

      case "L":
        return intUnit(oneOrTwo);

      case "LL":
        return intUnit(two);

      case "LLL":
        return oneOf(loc.months("short", false, false), 1);

      case "LLLL":
        return oneOf(loc.months("long", false, false), 1);
      // dates

      case "d":
        return intUnit(oneOrTwo);

      case "dd":
        return intUnit(two);
      // ordinals

      case "o":
        return intUnit(oneToThree);

      case "ooo":
        return intUnit(three);
      // time

      case "HH":
        return intUnit(two);

      case "H":
        return intUnit(oneOrTwo);

      case "hh":
        return intUnit(two);

      case "h":
        return intUnit(oneOrTwo);

      case "mm":
        return intUnit(two);

      case "m":
        return intUnit(oneOrTwo);

      case "q":
        return intUnit(oneOrTwo);

      case "qq":
        return intUnit(two);

      case "s":
        return intUnit(oneOrTwo);

      case "ss":
        return intUnit(two);

      case "S":
        return intUnit(oneToThree);

      case "SSS":
        return intUnit(three);

      case "u":
        return simple(oneToNine);

      case "uu":
        return simple(oneOrTwo);

      case "uuu":
        return intUnit(one);
      // meridiem

      case "a":
        return oneOf(loc.meridiems(), 0);
      // weekYear (k)

      case "kkkk":
        return intUnit(four);

      case "kk":
        return intUnit(twoToFour, untruncateYear);
      // weekNumber (W)

      case "W":
        return intUnit(oneOrTwo);

      case "WW":
        return intUnit(two);
      // weekdays

      case "E":
      case "c":
        return intUnit(one);

      case "EEE":
        return oneOf(loc.weekdays("short", false, false), 1);

      case "EEEE":
        return oneOf(loc.weekdays("long", false, false), 1);

      case "ccc":
        return oneOf(loc.weekdays("short", true, false), 1);

      case "cccc":
        return oneOf(loc.weekdays("long", true, false), 1);
      // offset/zone

      case "Z":
      case "ZZ":
        return offset(new RegExp("([+-]" + oneOrTwo.source + ")(?::(" + two.source + "))?"), 2);

      case "ZZZ":
        return offset(new RegExp("([+-]" + oneOrTwo.source + ")(" + two.source + ")?"), 2);
      // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
      // because we don't have any way to figure out what they are

      case "z":
        return simple(/[a-z_+-/]{1,256}?/i);

      default:
        return literal(t);
    }
  };

  var unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
}

var partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy"
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM"
  },
  day: {
    numeric: "d",
    "2-digit": "dd"
  },
  weekday: {
    short: "EEE",
    long: "EEEE"
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour: {
    numeric: "h",
    "2-digit": "hh"
  },
  minute: {
    numeric: "m",
    "2-digit": "mm"
  },
  second: {
    numeric: "s",
    "2-digit": "ss"
  }
};

function tokenForPart(part, locale, formatOpts) {
  var type = part.type,
      value = part.value;

  if (type === "literal") {
    return {
      literal: true,
      val: value
    };
  }

  var style = formatOpts[type];
  var val = partTypeStyleToTokenVal[type];

  if (typeof val === "object") {
    val = val[style];
  }

  if (val) {
    return {
      literal: false,
      val: val
    };
  }

  return undefined;
}

function buildRegex(units) {
  var re = units.map(function (u) {
    return u.regex;
  }).reduce(function (f, r) {
    return f + "(" + r.source + ")";
  }, "");
  return ["^" + re + "$", units];
}

function match(input, regex, handlers) {
  var matches = input.match(regex);

  if (matches) {
    var all = {};
    var matchIndex = 1;

    for (var i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        var h = handlers[i],
            groups = h.groups ? h.groups + 1 : 1;

        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }

        matchIndex += groups;
      }
    }

    return [matches, all];
  } else {
    return [matches, {}];
  }
}

function dateTimeFromMatches(matches) {
  var toField = function toField(token) {
    switch (token) {
      case "S":
        return "millisecond";

      case "s":
        return "second";

      case "m":
        return "minute";

      case "h":
      case "H":
        return "hour";

      case "d":
        return "day";

      case "o":
        return "ordinal";

      case "L":
      case "M":
        return "month";

      case "y":
        return "year";

      case "E":
      case "c":
        return "weekday";

      case "W":
        return "weekNumber";

      case "k":
        return "weekYear";

      case "q":
        return "quarter";

      default:
        return null;
    }
  };

  var zone = null;
  var specificOffset;

  if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  }

  if (!isUndefined(matches.Z)) {
    if (!zone) {
      zone = new FixedOffsetZone(matches.Z);
    }

    specificOffset = matches.Z;
  }

  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }

  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }

  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }

  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }

  var vals = Object.keys(matches).reduce(function (r, k) {
    var f = toField(k);

    if (f) {
      r[f] = matches[k];
    }

    return r;
  }, {});
  return [vals, zone, specificOffset];
}

var dummyDateTimeCache = null;

function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }

  return dummyDateTimeCache;
}

function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }

  var formatOpts = Formatter.macroTokenToFormatOpts(token.val);

  if (!formatOpts) {
    return token;
  }

  var formatter = Formatter.create(locale, formatOpts);
  var parts = formatter.formatDateTimeParts(getDummyDateTime());
  var tokens = parts.map(function (p) {
    return tokenForPart(p, locale, formatOpts);
  });

  if (tokens.includes(undefined)) {
    return token;
  }

  return tokens;
}

function expandMacroTokens(tokens, locale) {
  var _Array$prototype;

  return (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, tokens.map(function (t) {
    return maybeExpandMacroToken(t, locale);
  }));
}
/**
 * @private
 */


function explainFromTokens(locale, input, format) {
  var tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
      units = tokens.map(function (t) {
    return unitForToken(t, locale);
  }),
      disqualifyingUnit = units.find(function (t) {
    return t.invalidReason;
  });

  if (disqualifyingUnit) {
    return {
      input: input,
      tokens: tokens,
      invalidReason: disqualifyingUnit.invalidReason
    };
  } else {
    var _buildRegex = buildRegex(units),
        regexString = _buildRegex[0],
        handlers = _buildRegex[1],
        regex = RegExp(regexString, "i"),
        _match = match(input, regex, handlers),
        rawMatches = _match[0],
        matches = _match[1],
        _ref6 = matches ? dateTimeFromMatches(matches) : [null, null, undefined],
        result = _ref6[0],
        zone = _ref6[1],
        specificOffset = _ref6[2];

    if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
      throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
    }

    return {
      input: input,
      tokens: tokens,
      regex: regex,
      rawMatches: rawMatches,
      matches: matches,
      result: result,
      zone: zone,
      specificOffset: specificOffset
    };
  }
}
function parseFromTokens(locale, input, format) {
  var _explainFromTokens = explainFromTokens(locale, input, format),
      result = _explainFromTokens.result,
      zone = _explainFromTokens.zone,
      specificOffset = _explainFromTokens.specificOffset,
      invalidReason = _explainFromTokens.invalidReason;

  return [result, zone, specificOffset, invalidReason];
}

var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
    leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

function unitOutOfRange(unit, value) {
  return new Invalid("unit out of range", "you specified " + value + " (of type " + typeof value + ") as a " + unit + ", which is invalid");
}

function dayOfWeek(year, month, day) {
  var d = new Date(Date.UTC(year, month - 1, day));

  if (year < 100 && year >= 0) {
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }

  var js = d.getUTCDay();
  return js === 0 ? 7 : js;
}

function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}

function uncomputeOrdinal(year, ordinal) {
  var table = isLeapYear(year) ? leapLadder : nonLeapLadder,
      month0 = table.findIndex(function (i) {
    return i < ordinal;
  }),
      day = ordinal - table[month0];
  return {
    month: month0 + 1,
    day: day
  };
}
/**
 * @private
 */


function gregorianToWeek(gregObj) {
  var year = gregObj.year,
      month = gregObj.month,
      day = gregObj.day,
      ordinal = computeOrdinal(year, month, day),
      weekday = dayOfWeek(year, month, day);
  var weekNumber = Math.floor((ordinal - weekday + 10) / 7),
      weekYear;

  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear);
  } else if (weekNumber > weeksInWeekYear(year)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }

  return _extends({
    weekYear: weekYear,
    weekNumber: weekNumber,
    weekday: weekday
  }, timeObject(gregObj));
}
function weekToGregorian(weekData) {
  var weekYear = weekData.weekYear,
      weekNumber = weekData.weekNumber,
      weekday = weekData.weekday,
      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),
      yearInDays = daysInYear(weekYear);
  var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,
      year;

  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }

  var _uncomputeOrdinal = uncomputeOrdinal(year, ordinal),
      month = _uncomputeOrdinal.month,
      day = _uncomputeOrdinal.day;

  return _extends({
    year: year,
    month: month,
    day: day
  }, timeObject(weekData));
}
function gregorianToOrdinal(gregData) {
  var year = gregData.year,
      month = gregData.month,
      day = gregData.day;
  var ordinal = computeOrdinal(year, month, day);
  return _extends({
    year: year,
    ordinal: ordinal
  }, timeObject(gregData));
}
function ordinalToGregorian(ordinalData) {
  var year = ordinalData.year,
      ordinal = ordinalData.ordinal;

  var _uncomputeOrdinal2 = uncomputeOrdinal(year, ordinal),
      month = _uncomputeOrdinal2.month,
      day = _uncomputeOrdinal2.day;

  return _extends({
    year: year,
    month: month,
    day: day
  }, timeObject(ordinalData));
}
function hasInvalidWeekData(obj) {
  var validYear = isInteger(obj.weekYear),
      validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),
      validWeekday = integerBetween(obj.weekday, 1, 7);

  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.week);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else return false;
}
function hasInvalidOrdinalData(obj) {
  var validYear = isInteger(obj.year),
      validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else return false;
}
function hasInvalidGregorianData(obj) {
  var validYear = isInteger(obj.year),
      validMonth = integerBetween(obj.month, 1, 12),
      validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else return false;
}
function hasInvalidTimeData(obj) {
  var hour = obj.hour,
      minute = obj.minute,
      second = obj.second,
      millisecond = obj.millisecond;
  var validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0,
      validMinute = integerBetween(minute, 0, 59),
      validSecond = integerBetween(second, 0, 59),
      validMillisecond = integerBetween(millisecond, 0, 999);

  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else return false;
}

var INVALID = "Invalid DateTime";
var MAX_DATE = 8.64e15;

function unsupportedZone(zone) {
  return new Invalid("unsupported zone", "the zone \"" + zone.name + "\" is not supported");
} // we cache week data on the DT object and this intermediates the cache


function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }

  return dt.weekData;
} // clone really means, "make a new object with these modifications". all "setters" really use this
// to create a new object while only changing some of the properties


function clone(inst, alts) {
  var current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime(_extends({}, current, alts, {
    old: current
  }));
} // find the right offset a given local time. The o input is our guess, which determines which
// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)


function fixOffset(localTS, o, tz) {
  // Our UTC time is just a guess because our offset is just a guess
  var utcGuess = localTS - o * 60 * 1000; // Test whether the zone matches the offset for this ts

  var o2 = tz.offset(utcGuess); // If so, offset didn't change and we're done

  if (o === o2) {
    return [utcGuess, o];
  } // If not, change the ts by the difference in the offset


  utcGuess -= (o2 - o) * 60 * 1000; // If that gives us the local time we want, we're done

  var o3 = tz.offset(utcGuess);

  if (o2 === o3) {
    return [utcGuess, o2];
  } // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time


  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
} // convert an epoch timestamp into a calendar object with the given offset


function tsToObj(ts, offset) {
  ts += offset * 60 * 1000;
  var d = new Date(ts);
  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds()
  };
} // convert a calendar object to a epoch timestamp


function objToTS(obj, offset, zone) {
  return fixOffset(objToLocalTS(obj), offset, zone);
} // create a new DT instance by adding a duration, adjusting for DSTs


function adjustTime(inst, dur) {
  var oPre = inst.o,
      year = inst.c.year + Math.trunc(dur.years),
      month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
      c = _extends({}, inst.c, {
    year: year,
    month: month,
    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
  }),
      millisToAdd = Duration.fromObject({
    years: dur.years - Math.trunc(dur.years),
    quarters: dur.quarters - Math.trunc(dur.quarters),
    months: dur.months - Math.trunc(dur.months),
    weeks: dur.weeks - Math.trunc(dur.weeks),
    days: dur.days - Math.trunc(dur.days),
    hours: dur.hours,
    minutes: dur.minutes,
    seconds: dur.seconds,
    milliseconds: dur.milliseconds
  }).as("milliseconds"),
      localTS = objToLocalTS(c);

  var _fixOffset = fixOffset(localTS, oPre, inst.zone),
      ts = _fixOffset[0],
      o = _fixOffset[1];

  if (millisToAdd !== 0) {
    ts += millisToAdd; // that could have changed the offset by going over a DST, but we want to keep the ts the same

    o = inst.zone.offset(ts);
  }

  return {
    ts: ts,
    o: o
  };
} // helper useful in turning the results of parsing into real dates
// by handling the zone options


function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
  var setZone = opts.setZone,
      zone = opts.zone;

  if (parsed && Object.keys(parsed).length !== 0) {
    var interpretationZone = parsedZone || zone,
        inst = DateTime.fromObject(parsed, _extends({}, opts, {
      zone: interpretationZone,
      specificOffset: specificOffset
    }));
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(new Invalid("unparsable", "the input \"" + text + "\" can't be parsed as " + format));
  }
} // if you want to output a technical format (e.g. RFC 2822), this helper
// helps handle the details


function toTechFormat(dt, format, allowZ) {
  if (allowZ === void 0) {
    allowZ = true;
  }

  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ: allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format) : null;
}

function _toISODate(o, extended) {
  var longFormat = o.c.year > 9999 || o.c.year < 0;
  var c = "";
  if (longFormat && o.c.year >= 0) c += "+";
  c += padStart(o.c.year, longFormat ? 6 : 4);

  if (extended) {
    c += "-";
    c += padStart(o.c.month);
    c += "-";
    c += padStart(o.c.day);
  } else {
    c += padStart(o.c.month);
    c += padStart(o.c.day);
  }

  return c;
}

function _toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
  var c = padStart(o.c.hour);

  if (extended) {
    c += ":";
    c += padStart(o.c.minute);

    if (o.c.second !== 0 || !suppressSeconds) {
      c += ":";
    }
  } else {
    c += padStart(o.c.minute);
  }

  if (o.c.second !== 0 || !suppressSeconds) {
    c += padStart(o.c.second);

    if (o.c.millisecond !== 0 || !suppressMilliseconds) {
      c += ".";
      c += padStart(o.c.millisecond, 3);
    }
  }

  if (includeOffset) {
    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
      c += "Z";
    } else if (o.o < 0) {
      c += "-";
      c += padStart(Math.trunc(-o.o / 60));
      c += ":";
      c += padStart(Math.trunc(-o.o % 60));
    } else {
      c += "+";
      c += padStart(Math.trunc(o.o / 60));
      c += ":";
      c += padStart(Math.trunc(o.o % 60));
    }
  }

  if (extendedZone) {
    c += "[" + o.zone.ianaName + "]";
  }

  return c;
} // defaults for unspecified units in the supported calendars


var defaultUnitValues = {
  month: 1,
  day: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
},
    defaultWeekUnitValues = {
  weekNumber: 1,
  weekday: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
},
    defaultOrdinalUnitValues = {
  ordinal: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
}; // Units in the supported calendars, sorted by bigness

var orderedUnits = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
    orderedWeekUnits = ["weekYear", "weekNumber", "weekday", "hour", "minute", "second", "millisecond"],
    orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"]; // standardize case and plurality in units

function normalizeUnit(unit) {
  var normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized) throw new InvalidUnitError(unit);
  return normalized;
} // this is a dumbed down version of fromObject() that runs about 60% faster
// but doesn't do any validation, makes a bunch of assumptions about what units
// are present, and so on.


function quickDT(obj, opts) {
  var zone = normalizeZone(opts.zone, Settings.defaultZone),
      loc = Locale.fromObject(opts),
      tsNow = Settings.now();
  var ts, o; // assume we have the higher-order units

  if (!isUndefined(obj.year)) {
    for (var _iterator = _createForOfIteratorHelperLoose(orderedUnits), _step; !(_step = _iterator()).done;) {
      var u = _step.value;

      if (isUndefined(obj[u])) {
        obj[u] = defaultUnitValues[u];
      }
    }

    var invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);

    if (invalid) {
      return DateTime.invalid(invalid);
    }

    var offsetProvis = zone.offset(tsNow);

    var _objToTS = objToTS(obj, offsetProvis, zone);

    ts = _objToTS[0];
    o = _objToTS[1];
  } else {
    ts = tsNow;
  }

  return new DateTime({
    ts: ts,
    zone: zone,
    loc: loc,
    o: o
  });
}

function diffRelative(start, end, opts) {
  var round = isUndefined(opts.round) ? true : opts.round,
      format = function format(c, unit) {
    c = roundTo(c, round || opts.calendary ? 0 : 2, true);
    var formatter = end.loc.clone(opts).relFormatter(opts);
    return formatter.format(c, unit);
  },
      differ = function differ(unit) {
    if (opts.calendary) {
      if (!end.hasSame(start, unit)) {
        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
      } else return 0;
    } else {
      return end.diff(start, unit).get(unit);
    }
  };

  if (opts.unit) {
    return format(differ(opts.unit), opts.unit);
  }

  for (var _iterator2 = _createForOfIteratorHelperLoose(opts.units), _step2; !(_step2 = _iterator2()).done;) {
    var unit = _step2.value;
    var count = differ(unit);

    if (Math.abs(count) >= 1) {
      return format(count, unit);
    }
  }

  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}

function lastOpts(argList) {
  var opts = {},
      args;

  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
    opts = argList[argList.length - 1];
    args = Array.from(argList).slice(0, argList.length - 1);
  } else {
    args = Array.from(argList);
  }

  return [opts, args];
}
/**
 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
 *
 * A DateTime comprises of:
 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
 * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
 *
 * Here is a brief overview of the most commonly used functionality it provides:
 *
 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime#local}, {@link DateTime#utc}, and (most flexibly) {@link DateTime#fromObject}. To create one from a standard string format, use {@link DateTime#fromISO}, {@link DateTime#fromHTTP}, and {@link DateTime#fromRFC2822}. To create one from a custom string format, use {@link DateTime#fromFormat}. To create one from a native JS date, use {@link DateTime#fromJSDate}.
 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
 * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
 * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
 * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
 * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
 *
 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
 */


var DateTime = /*#__PURE__*/function () {
  /**
   * @access private
   */
  function DateTime(config) {
    var zone = config.zone || Settings.defaultZone;
    var invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
    /**
     * @access private
     */

    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
    var c = null,
        o = null;

    if (!invalid) {
      var unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

      if (unchanged) {
        var _ref = [config.old.c, config.old.o];
        c = _ref[0];
        o = _ref[1];
      } else {
        var ot = zone.offset(this.ts);
        c = tsToObj(this.ts, ot);
        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
        c = invalid ? null : c;
        o = invalid ? null : ot;
      }
    }
    /**
     * @access private
     */


    this._zone = zone;
    /**
     * @access private
     */

    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */

    this.invalid = invalid;
    /**
     * @access private
     */

    this.weekData = null;
    /**
     * @access private
     */

    this.c = c;
    /**
     * @access private
     */

    this.o = o;
    /**
     * @access private
     */

    this.isLuxonDateTime = true;
  } // CONSTRUCT

  /**
   * Create a DateTime for the current instant, in the system's time zone.
   *
   * Use Settings to override these default values if needed.
   * @example DateTime.now().toISO() //~> now in the ISO format
   * @return {DateTime}
   */


  DateTime.now = function now() {
    return new DateTime({});
  }
  /**
   * Create a local DateTime
   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month, 1-indexed
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.local()                                  //~> now
   * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
   * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
   * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
   * @return {DateTime}
   */
  ;

  DateTime.local = function local() {
    var _lastOpts = lastOpts(arguments),
        opts = _lastOpts[0],
        args = _lastOpts[1],
        year = args[0],
        month = args[1],
        day = args[2],
        hour = args[3],
        minute = args[4],
        second = args[5],
        millisecond = args[6];

    return quickDT({
      year: year,
      month: month,
      day: day,
      hour: hour,
      minute: minute,
      second: second,
      millisecond: millisecond
    }, opts);
  }
  /**
   * Create a DateTime in UTC
   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @param {Object} options - configuration options for the DateTime
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @example DateTime.utc()                                              //~> now
   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
   * @return {DateTime}
   */
  ;

  DateTime.utc = function utc() {
    var _lastOpts2 = lastOpts(arguments),
        opts = _lastOpts2[0],
        args = _lastOpts2[1],
        year = args[0],
        month = args[1],
        day = args[2],
        hour = args[3],
        minute = args[4],
        second = args[5],
        millisecond = args[6];

    opts.zone = FixedOffsetZone.utcInstance;
    return quickDT({
      year: year,
      month: month,
      day: day,
      hour: hour,
      minute: minute,
      second: second,
      millisecond: millisecond
    }, opts);
  }
  /**
   * Create a DateTime from a JavaScript Date object. Uses the default zone.
   * @param {Date} date - a JavaScript Date object
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @return {DateTime}
   */
  ;

  DateTime.fromJSDate = function fromJSDate(date, options) {
    if (options === void 0) {
      options = {};
    }

    var ts = isDate(date) ? date.valueOf() : NaN;

    if (Number.isNaN(ts)) {
      return DateTime.invalid("invalid input");
    }

    var zoneToUse = normalizeZone(options.zone, Settings.defaultZone);

    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    return new DateTime({
      ts: ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options)
    });
  }
  /**
   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromMillis = function fromMillis(milliseconds, options) {
    if (options === void 0) {
      options = {};
    }

    if (!isNumber(milliseconds)) {
      throw new InvalidArgumentError("fromMillis requires a numerical input, but received a " + typeof milliseconds + " with value " + milliseconds);
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
      return DateTime.invalid("Timestamp out of range");
    } else {
      return new DateTime({
        ts: milliseconds,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} seconds - a number of seconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromSeconds = function fromSeconds(seconds, options) {
    if (options === void 0) {
      options = {};
    }

    if (!isNumber(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new DateTime({
        ts: seconds * 1000,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.year - a year, such as 1987
   * @param {number} obj.month - a month, 1-12
   * @param {number} obj.day - a day of the month, 1-31, depending on the month
   * @param {number} obj.ordinal - day of the year, 1-365 or 366
   * @param {number} obj.weekYear - an ISO week year
   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
   * @param {number} obj.hour - hour of the day, 0-23
   * @param {number} obj.minute - minute of the hour, 0-59
   * @param {number} obj.second - second of the minute, 0-59
   * @param {number} obj.millisecond - millisecond of the second, 0-999
   * @param {Object} opts - options for creating this DateTime
   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
   * @return {DateTime}
   */
  ;

  DateTime.fromObject = function fromObject(obj, opts) {
    if (opts === void 0) {
      opts = {};
    }

    obj = obj || {};
    var zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);

    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    var tsNow = Settings.now(),
        offsetProvis = !isUndefined(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow),
        normalized = normalizeObject(obj, normalizeUnit),
        containsOrdinal = !isUndefined(normalized.ordinal),
        containsGregorYear = !isUndefined(normalized.year),
        containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
        containsGregor = containsGregorYear || containsGregorMD,
        definiteWeekDef = normalized.weekYear || normalized.weekNumber,
        loc = Locale.fromObject(opts); // cases:
    // just a weekday -> this week's instance of that weekday, no worries
    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
    // (gregorian month or day) + ordinal -> error
    // otherwise just use weeks or ordinals or gregorian, depending on what's specified

    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }

    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }

    var useWeekData = definiteWeekDef || normalized.weekday && !containsGregor; // configure ourselves to deal with gregorian dates or week stuff

    var units,
        defaultValues,
        objNow = tsToObj(tsNow, offsetProvis);

    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = orderedUnits;
      defaultValues = defaultUnitValues;
    } // set default values for missing stuff


    var foundFirst = false;

    for (var _iterator3 = _createForOfIteratorHelperLoose(units), _step3; !(_step3 = _iterator3()).done;) {
      var u = _step3.value;
      var v = normalized[u];

      if (!isUndefined(v)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u] = defaultValues[u];
      } else {
        normalized[u] = objNow[u];
      }
    } // make sure the values we have are in range


    var higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized),
        invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

    if (invalid) {
      return DateTime.invalid(invalid);
    } // compute the actual time


    var gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized,
        _objToTS2 = objToTS(gregorian, offsetProvis, zoneToUse),
        tsFinal = _objToTS2[0],
        offsetFinal = _objToTS2[1],
        inst = new DateTime({
      ts: tsFinal,
      zone: zoneToUse,
      o: offsetFinal,
      loc: loc
    }); // gregorian data + weekday serves only to validate


    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return DateTime.invalid("mismatched weekday", "you can't specify both a weekday of " + normalized.weekday + " and a date of " + inst.toISO());
    }

    return inst;
  }
  /**
   * Create a DateTime from an ISO 8601 string
   * @param {string} text - the ISO string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
   * @example DateTime.fromISO('2016-W05-4')
   * @return {DateTime}
   */
  ;

  DateTime.fromISO = function fromISO(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseISODate = parseISODate(text),
        vals = _parseISODate[0],
        parsedZone = _parseISODate[1];

    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
  }
  /**
   * Create a DateTime from an RFC 2822 string
   * @param {string} text - the RFC 2822 string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
   * @return {DateTime}
   */
  ;

  DateTime.fromRFC2822 = function fromRFC2822(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseRFC2822Date = parseRFC2822Date(text),
        vals = _parseRFC2822Date[0],
        parsedZone = _parseRFC2822Date[1];

    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
  }
  /**
   * Create a DateTime from an HTTP header date
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @param {string} text - the HTTP header date
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
   * @return {DateTime}
   */
  ;

  DateTime.fromHTTP = function fromHTTP(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseHTTPDate = parseHTTPDate(text),
        vals = _parseHTTPDate[0],
        parsedZone = _parseHTTPDate[1];

    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }
  /**
   * Create a DateTime from an input string and format string.
   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromFormat = function fromFormat(text, fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (isUndefined(text) || isUndefined(fmt)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }

    var _opts = opts,
        _opts$locale = _opts.locale,
        locale = _opts$locale === void 0 ? null : _opts$locale,
        _opts$numberingSystem = _opts.numberingSystem,
        numberingSystem = _opts$numberingSystem === void 0 ? null : _opts$numberingSystem,
        localeToUse = Locale.fromOpts({
      locale: locale,
      numberingSystem: numberingSystem,
      defaultToEN: true
    }),
        _parseFromTokens = parseFromTokens(localeToUse, text, fmt),
        vals = _parseFromTokens[0],
        parsedZone = _parseFromTokens[1],
        specificOffset = _parseFromTokens[2],
        invalid = _parseFromTokens[3];

    if (invalid) {
      return DateTime.invalid(invalid);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, "format " + fmt, text, specificOffset);
    }
  }
  /**
   * @deprecated use fromFormat instead
   */
  ;

  DateTime.fromString = function fromString(text, fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return DateTime.fromFormat(text, fmt, opts);
  }
  /**
   * Create a DateTime from a SQL date, time, or datetime
   * Defaults to en-US if no locale has been specified, regardless of the system's locale
   * @param {string} text - the string to parse
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @example DateTime.fromSQL('2017-05-15')
   * @example DateTime.fromSQL('2017-05-15 09:12:34')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
   * @example DateTime.fromSQL('09:12:34.342')
   * @return {DateTime}
   */
  ;

  DateTime.fromSQL = function fromSQL(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseSQL = parseSQL(text),
        vals = _parseSQL[0],
        parsedZone = _parseSQL[1];

    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
  }
  /**
   * Create an invalid DateTime.
   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {DateTime}
   */
  ;

  DateTime.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid);
    } else {
      return new DateTime({
        invalid: invalid
      });
    }
  }
  /**
   * Check if an object is an instance of DateTime. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  DateTime.isDateTime = function isDateTime(o) {
    return o && o.isLuxonDateTime || false;
  } // INFO

  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
   * @return {number}
   */
  ;

  var _proto = DateTime.prototype;

  _proto.get = function get(unit) {
    return this[unit];
  }
  /**
   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
   * * The DateTime was created by an operation on another invalid date
   * @type {boolean}
   */
  ;

  /**
   * Returns the resolved Intl options for this DateTime.
   * This is useful in understanding the behavior of formatting methods
   * @param {Object} opts - the same options as toLocaleString
   * @return {Object}
   */
  _proto.resolvedLocaleOptions = function resolvedLocaleOptions(opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _Formatter$create$res = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this),
        locale = _Formatter$create$res.locale,
        numberingSystem = _Formatter$create$res.numberingSystem,
        calendar = _Formatter$create$res.calendar;

    return {
      locale: locale,
      numberingSystem: numberingSystem,
      outputCalendar: calendar
    };
  } // TRANSFORM

  /**
   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
   *
   * Equivalent to {@link DateTime#setZone}('utc')
   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
   * @param {Object} [opts={}] - options to pass to `setZone()`
   * @return {DateTime}
   */
  ;

  _proto.toUTC = function toUTC(offset, opts) {
    if (offset === void 0) {
      offset = 0;
    }

    if (opts === void 0) {
      opts = {};
    }

    return this.setZone(FixedOffsetZone.instance(offset), opts);
  }
  /**
   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
   *
   * Equivalent to `setZone('local')`
   * @return {DateTime}
   */
  ;

  _proto.toLocal = function toLocal() {
    return this.setZone(Settings.defaultZone);
  }
  /**
   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
   *
   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
   * @param {Object} opts - options
   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
   * @return {DateTime}
   */
  ;

  _proto.setZone = function setZone(zone, _temp) {
    var _ref2 = _temp === void 0 ? {} : _temp,
        _ref2$keepLocalTime = _ref2.keepLocalTime,
        keepLocalTime = _ref2$keepLocalTime === void 0 ? false : _ref2$keepLocalTime,
        _ref2$keepCalendarTim = _ref2.keepCalendarTime,
        keepCalendarTime = _ref2$keepCalendarTim === void 0 ? false : _ref2$keepCalendarTim;

    zone = normalizeZone(zone, Settings.defaultZone);

    if (zone.equals(this.zone)) {
      return this;
    } else if (!zone.isValid) {
      return DateTime.invalid(unsupportedZone(zone));
    } else {
      var newTS = this.ts;

      if (keepLocalTime || keepCalendarTime) {
        var offsetGuess = zone.offset(this.ts);
        var asObj = this.toObject();

        var _objToTS3 = objToTS(asObj, offsetGuess, zone);

        newTS = _objToTS3[0];
      }

      return clone(this, {
        ts: newTS,
        zone: zone
      });
    }
  }
  /**
   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
   * @param {Object} properties - the properties to set
   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
   * @return {DateTime}
   */
  ;

  _proto.reconfigure = function reconfigure(_temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2,
        locale = _ref3.locale,
        numberingSystem = _ref3.numberingSystem,
        outputCalendar = _ref3.outputCalendar;

    var loc = this.loc.clone({
      locale: locale,
      numberingSystem: numberingSystem,
      outputCalendar: outputCalendar
    });
    return clone(this, {
      loc: loc
    });
  }
  /**
   * "Set" the locale. Returns a newly-constructed DateTime.
   * Just a convenient alias for reconfigure({ locale })
   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
   * @return {DateTime}
   */
  ;

  _proto.setLocale = function setLocale(locale) {
    return this.reconfigure({
      locale: locale
    });
  }
  /**
   * "Set" the values of specified units. Returns a newly-constructed DateTime.
   * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
   * @param {Object} values - a mapping of units to numbers
   * @example dt.set({ year: 2017 })
   * @example dt.set({ hour: 8, minute: 30 })
   * @example dt.set({ weekday: 5 })
   * @example dt.set({ year: 2005, ordinal: 234 })
   * @return {DateTime}
   */
  ;

  _proto.set = function set(values) {
    if (!this.isValid) return this;
    var normalized = normalizeObject(values, normalizeUnit),
        settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday),
        containsOrdinal = !isUndefined(normalized.ordinal),
        containsGregorYear = !isUndefined(normalized.year),
        containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
        containsGregor = containsGregorYear || containsGregorMD,
        definiteWeekDef = normalized.weekYear || normalized.weekNumber;

    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }

    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }

    var mixed;

    if (settingWeekStuff) {
      mixed = weekToGregorian(_extends({}, gregorianToWeek(this.c), normalized));
    } else if (!isUndefined(normalized.ordinal)) {
      mixed = ordinalToGregorian(_extends({}, gregorianToOrdinal(this.c), normalized));
    } else {
      mixed = _extends({}, this.toObject(), normalized); // if we didn't set the day but we ended up on an overflow date,
      // use the last day of the right month

      if (isUndefined(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }

    var _objToTS4 = objToTS(mixed, this.o, this.zone),
        ts = _objToTS4[0],
        o = _objToTS4[1];

    return clone(this, {
      ts: ts,
      o: o
    });
  }
  /**
   * Add a period of time to this DateTime and return the resulting DateTime
   *
   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @example DateTime.now().plus(123) //~> in 123 milliseconds
   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
   * @return {DateTime}
   */
  ;

  _proto.plus = function plus(duration) {
    if (!this.isValid) return this;
    var dur = Duration.fromDurationLike(duration);
    return clone(this, adjustTime(this, dur));
  }
  /**
   * Subtract a period of time to this DateTime and return the resulting DateTime
   * See {@link DateTime#plus}
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   @return {DateTime}
   */
  ;

  _proto.minus = function minus(duration) {
    if (!this.isValid) return this;
    var dur = Duration.fromDurationLike(duration).negate();
    return clone(this, adjustTime(this, dur));
  }
  /**
   * "Set" this DateTime to the beginning of a unit of time.
   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
   * @return {DateTime}
   */
  ;

  _proto.startOf = function startOf(unit) {
    if (!this.isValid) return this;
    var o = {},
        normalizedUnit = Duration.normalizeUnit(unit);

    switch (normalizedUnit) {
      case "years":
        o.month = 1;
      // falls through

      case "quarters":
      case "months":
        o.day = 1;
      // falls through

      case "weeks":
      case "days":
        o.hour = 0;
      // falls through

      case "hours":
        o.minute = 0;
      // falls through

      case "minutes":
        o.second = 0;
      // falls through

      case "seconds":
        o.millisecond = 0;
        break;
      // no default, invalid units throw in normalizeUnit()
    }

    if (normalizedUnit === "weeks") {
      o.weekday = 1;
    }

    if (normalizedUnit === "quarters") {
      var q = Math.ceil(this.month / 3);
      o.month = (q - 1) * 3 + 1;
    }

    return this.set(o);
  }
  /**
   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
   * @return {DateTime}
   */
  ;

  _proto.endOf = function endOf(unit) {
    var _this$plus;

    return this.isValid ? this.plus((_this$plus = {}, _this$plus[unit] = 1, _this$plus)).startOf(unit).minus(1) : this;
  } // OUTPUT

  /**
   * Returns a string representation of this DateTime formatted according to the specified format string.
   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @param {string} fmt - the format string
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
   * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
   * @return {string}
   */
  ;

  _proto.toFormat = function toFormat(fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID;
  }
  /**
   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
   * of the DateTime in the assigned locale.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toLocaleString(); //=> 4/20/2017
   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
   * @example DateTime.now().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
   * @return {string}
   */
  ;

  _proto.toLocaleString = function toLocaleString(formatOpts, opts) {
    if (formatOpts === void 0) {
      formatOpts = DATE_SHORT;
    }

    if (opts === void 0) {
      opts = {};
    }

    return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID;
  }
  /**
   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
   * @example DateTime.now().toLocaleParts(); //=> [
   *                                   //=>   { type: 'day', value: '25' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'month', value: '05' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'year', value: '1982' }
   *                                   //=> ]
   */
  ;

  _proto.toLocaleParts = function toLocaleParts(opts) {
    if (opts === void 0) {
      opts = {};
    }

    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
   * @return {string}
   */
  ;

  _proto.toISO = function toISO(_temp3) {
    var _ref4 = _temp3 === void 0 ? {} : _temp3,
        _ref4$format = _ref4.format,
        format = _ref4$format === void 0 ? "extended" : _ref4$format,
        _ref4$suppressSeconds = _ref4.suppressSeconds,
        suppressSeconds = _ref4$suppressSeconds === void 0 ? false : _ref4$suppressSeconds,
        _ref4$suppressMillise = _ref4.suppressMilliseconds,
        suppressMilliseconds = _ref4$suppressMillise === void 0 ? false : _ref4$suppressMillise,
        _ref4$includeOffset = _ref4.includeOffset,
        includeOffset = _ref4$includeOffset === void 0 ? true : _ref4$includeOffset,
        _ref4$extendedZone = _ref4.extendedZone,
        extendedZone = _ref4$extendedZone === void 0 ? false : _ref4$extendedZone;

    if (!this.isValid) {
      return null;
    }

    var ext = format === "extended";

    var c = _toISODate(this, ext);

    c += "T";
    c += _toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
    return c;
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's date component
   * @param {Object} opts - options
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
   * @return {string}
   */
  ;

  _proto.toISODate = function toISODate(_temp4) {
    var _ref5 = _temp4 === void 0 ? {} : _temp4,
        _ref5$format = _ref5.format,
        format = _ref5$format === void 0 ? "extended" : _ref5$format;

    if (!this.isValid) {
      return null;
    }

    return _toISODate(this, format === "extended");
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's week date
   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
   * @return {string}
   */
  ;

  _proto.toISOWeekDate = function toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's time component
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
   * @return {string}
   */
  ;

  _proto.toISOTime = function toISOTime(_temp5) {
    var _ref6 = _temp5 === void 0 ? {} : _temp5,
        _ref6$suppressMillise = _ref6.suppressMilliseconds,
        suppressMilliseconds = _ref6$suppressMillise === void 0 ? false : _ref6$suppressMillise,
        _ref6$suppressSeconds = _ref6.suppressSeconds,
        suppressSeconds = _ref6$suppressSeconds === void 0 ? false : _ref6$suppressSeconds,
        _ref6$includeOffset = _ref6.includeOffset,
        includeOffset = _ref6$includeOffset === void 0 ? true : _ref6$includeOffset,
        _ref6$includePrefix = _ref6.includePrefix,
        includePrefix = _ref6$includePrefix === void 0 ? false : _ref6$includePrefix,
        _ref6$extendedZone = _ref6.extendedZone,
        extendedZone = _ref6$extendedZone === void 0 ? false : _ref6$extendedZone,
        _ref6$format = _ref6.format,
        format = _ref6$format === void 0 ? "extended" : _ref6$format;

    if (!this.isValid) {
      return null;
    }

    var c = includePrefix ? "T" : "";
    return c + _toISOTime(this, format === "extended", suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
  }
  /**
   * Returns an RFC 2822-compatible string representation of this DateTime
   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
   * @return {string}
   */
  ;

  _proto.toRFC2822 = function toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
   * Specifically, the string conforms to RFC 1123.
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
   * @return {string}
   */
  ;

  _proto.toHTTP = function toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Date
   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
   * @return {string}
   */
  ;

  _proto.toSQLDate = function toSQLDate() {
    if (!this.isValid) {
      return null;
    }

    return _toISODate(this, true);
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Time
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
   * @return {string}
   */
  ;

  _proto.toSQLTime = function toSQLTime(_temp6) {
    var _ref7 = _temp6 === void 0 ? {} : _temp6,
        _ref7$includeOffset = _ref7.includeOffset,
        includeOffset = _ref7$includeOffset === void 0 ? true : _ref7$includeOffset,
        _ref7$includeZone = _ref7.includeZone,
        includeZone = _ref7$includeZone === void 0 ? false : _ref7$includeZone,
        _ref7$includeOffsetSp = _ref7.includeOffsetSpace,
        includeOffsetSpace = _ref7$includeOffsetSp === void 0 ? true : _ref7$includeOffsetSp;

    var fmt = "HH:mm:ss.SSS";

    if (includeZone || includeOffset) {
      if (includeOffsetSpace) {
        fmt += " ";
      }

      if (includeZone) {
        fmt += "z";
      } else if (includeOffset) {
        fmt += "ZZ";
      }
    }

    return toTechFormat(this, fmt, true);
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
   * @return {string}
   */
  ;

  _proto.toSQL = function toSQL(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) {
      return null;
    }

    return this.toSQLDate() + " " + this.toSQLTime(opts);
  }
  /**
   * Returns a string representation of this DateTime appropriate for debugging
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    return this.isValid ? this.toISO() : INVALID;
  }
  /**
   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
   * @return {number}
   */
  ;

  _proto.valueOf = function valueOf() {
    return this.toMillis();
  }
  /**
   * Returns the epoch milliseconds of this DateTime.
   * @return {number}
   */
  ;

  _proto.toMillis = function toMillis() {
    return this.isValid ? this.ts : NaN;
  }
  /**
   * Returns the epoch seconds of this DateTime.
   * @return {number}
   */
  ;

  _proto.toSeconds = function toSeconds() {
    return this.isValid ? this.ts / 1000 : NaN;
  }
  /**
   * Returns the epoch seconds (as a whole number) of this DateTime.
   * @return {number}
   */
  ;

  _proto.toUnixInteger = function toUnixInteger() {
    return this.isValid ? Math.floor(this.ts / 1000) : NaN;
  }
  /**
   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
   * @return {string}
   */
  ;

  _proto.toJSON = function toJSON() {
    return this.toISO();
  }
  /**
   * Returns a BSON serializable equivalent to this DateTime.
   * @return {Date}
   */
  ;

  _proto.toBSON = function toBSON() {
    return this.toJSDate();
  }
  /**
   * Returns a JavaScript object with this DateTime's year, month, day, and so on.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
   * @return {Object}
   */
  ;

  _proto.toObject = function toObject(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) return {};

    var base = _extends({}, this.c);

    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }

    return base;
  }
  /**
   * Returns a JavaScript Date equivalent to this DateTime.
   * @return {Date}
   */
  ;

  _proto.toJSDate = function toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  } // COMPARE

  /**
   * Return the difference between two DateTimes as a Duration.
   * @param {DateTime} otherDateTime - the DateTime to compare this one to
   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example
   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
   *     i2 = DateTime.fromISO('1983-10-14T10:30');
   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
   * @return {Duration}
   */
  ;

  _proto.diff = function diff(otherDateTime, unit, opts) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid("created by diffing an invalid DateTime");
    }

    var durOpts = _extends({
      locale: this.locale,
      numberingSystem: this.numberingSystem
    }, opts);

    var units = maybeArray(unit).map(Duration.normalizeUnit),
        otherIsLater = otherDateTime.valueOf() > this.valueOf(),
        earlier = otherIsLater ? this : otherDateTime,
        later = otherIsLater ? otherDateTime : this,
        diffed = _diff(earlier, later, units, durOpts);

    return otherIsLater ? diffed.negate() : diffed;
  }
  /**
   * Return the difference between this DateTime and right now.
   * See {@link DateTime#diff}
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  ;

  _proto.diffNow = function diffNow(unit, opts) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (opts === void 0) {
      opts = {};
    }

    return this.diff(DateTime.now(), unit, opts);
  }
  /**
   * Return an Interval spanning between this DateTime and another DateTime
   * @param {DateTime} otherDateTime - the other end point of the Interval
   * @return {Interval}
   */
  ;

  _proto.until = function until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }
  /**
   * Return whether this DateTime is in the same unit of time as another DateTime.
   * Higher-order units must also be identical for this function to return `true`.
   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
   * @param {DateTime} otherDateTime - the other DateTime
   * @param {string} unit - the unit of time to check sameness on
   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
   * @return {boolean}
   */
  ;

  _proto.hasSame = function hasSame(otherDateTime, unit) {
    if (!this.isValid) return false;
    var inputMs = otherDateTime.valueOf();
    var adjustedToZone = this.setZone(otherDateTime.zone, {
      keepLocalTime: true
    });
    return adjustedToZone.startOf(unit) <= inputMs && inputMs <= adjustedToZone.endOf(unit);
  }
  /**
   * Equality check
   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.
   * To compare just the millisecond values, use `+dt1 === +dt2`.
   * @param {DateTime} other - the other DateTime
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(other) {
    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
  }
  /**
   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
   * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
   */
  ;

  _proto.toRelative = function toRelative(options) {
    if (options === void 0) {
      options = {};
    }

    if (!this.isValid) return null;
    var base = options.base || DateTime.fromObject({}, {
      zone: this.zone
    }),
        padding = options.padding ? this < base ? -options.padding : options.padding : 0;
    var units = ["years", "months", "days", "hours", "minutes", "seconds"];
    var unit = options.unit;

    if (Array.isArray(options.unit)) {
      units = options.unit;
      unit = undefined;
    }

    return diffRelative(base, this.plus(padding), _extends({}, options, {
      numeric: "always",
      units: units,
      unit: unit
    }));
  }
  /**
   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
   * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
   */
  ;

  _proto.toRelativeCalendar = function toRelativeCalendar(options) {
    if (options === void 0) {
      options = {};
    }

    if (!this.isValid) return null;
    return diffRelative(options.base || DateTime.fromObject({}, {
      zone: this.zone
    }), this, _extends({}, options, {
      numeric: "auto",
      units: ["years", "months", "days"],
      calendary: true
    }));
  }
  /**
   * Return the min of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
   * @return {DateTime} the min DateTime, or undefined if called with no argument
   */
  ;

  DateTime.min = function min() {
    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
      dateTimes[_key] = arguments[_key];
    }

    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }

    return bestBy(dateTimes, function (i) {
      return i.valueOf();
    }, Math.min);
  }
  /**
   * Return the max of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
   * @return {DateTime} the max DateTime, or undefined if called with no argument
   */
  ;

  DateTime.max = function max() {
    for (var _len2 = arguments.length, dateTimes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      dateTimes[_key2] = arguments[_key2];
    }

    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }

    return bestBy(dateTimes, function (i) {
      return i.valueOf();
    }, Math.max);
  } // MISC

  /**
   * Explain how a string would be parsed by fromFormat()
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see description)
   * @param {Object} options - options taken by fromFormat()
   * @return {Object}
   */
  ;

  DateTime.fromFormatExplain = function fromFormatExplain(text, fmt, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$locale = _options.locale,
        locale = _options$locale === void 0 ? null : _options$locale,
        _options$numberingSys = _options.numberingSystem,
        numberingSystem = _options$numberingSys === void 0 ? null : _options$numberingSys,
        localeToUse = Locale.fromOpts({
      locale: locale,
      numberingSystem: numberingSystem,
      defaultToEN: true
    });
    return explainFromTokens(localeToUse, text, fmt);
  }
  /**
   * @deprecated use fromFormatExplain instead
   */
  ;

  DateTime.fromStringExplain = function fromStringExplain(text, fmt, options) {
    if (options === void 0) {
      options = {};
    }

    return DateTime.fromFormatExplain(text, fmt, options);
  } // FORMAT PRESETS

  /**
   * {@link DateTime#toLocaleString} format like 10/14/1983
   * @type {Object}
   */
  ;

  _createClass(DateTime, [{
    key: "isValid",
    get: function get() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
     * @type {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "locale",
    get: function get() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "numberingSystem",
    get: function get() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "outputCalendar",
    get: function get() {
      return this.isValid ? this.loc.outputCalendar : null;
    }
    /**
     * Get the time zone associated with this DateTime.
     * @type {Zone}
     */

  }, {
    key: "zone",
    get: function get() {
      return this._zone;
    }
    /**
     * Get the name of the time zone.
     * @type {string}
     */

  }, {
    key: "zoneName",
    get: function get() {
      return this.isValid ? this.zone.name : null;
    }
    /**
     * Get the year
     * @example DateTime.local(2017, 5, 25).year //=> 2017
     * @type {number}
     */

  }, {
    key: "year",
    get: function get() {
      return this.isValid ? this.c.year : NaN;
    }
    /**
     * Get the quarter
     * @example DateTime.local(2017, 5, 25).quarter //=> 2
     * @type {number}
     */

  }, {
    key: "quarter",
    get: function get() {
      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }
    /**
     * Get the month (1-12).
     * @example DateTime.local(2017, 5, 25).month //=> 5
     * @type {number}
     */

  }, {
    key: "month",
    get: function get() {
      return this.isValid ? this.c.month : NaN;
    }
    /**
     * Get the day of the month (1-30ish).
     * @example DateTime.local(2017, 5, 25).day //=> 25
     * @type {number}
     */

  }, {
    key: "day",
    get: function get() {
      return this.isValid ? this.c.day : NaN;
    }
    /**
     * Get the hour of the day (0-23).
     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
     * @type {number}
     */

  }, {
    key: "hour",
    get: function get() {
      return this.isValid ? this.c.hour : NaN;
    }
    /**
     * Get the minute of the hour (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
     * @type {number}
     */

  }, {
    key: "minute",
    get: function get() {
      return this.isValid ? this.c.minute : NaN;
    }
    /**
     * Get the second of the minute (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
     * @type {number}
     */

  }, {
    key: "second",
    get: function get() {
      return this.isValid ? this.c.second : NaN;
    }
    /**
     * Get the millisecond of the second (0-999).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
     * @type {number}
     */

  }, {
    key: "millisecond",
    get: function get() {
      return this.isValid ? this.c.millisecond : NaN;
    }
    /**
     * Get the week year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
     * @type {number}
     */

  }, {
    key: "weekYear",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }
    /**
     * Get the week number of the week year (1-52ish).
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
     * @type {number}
     */

  }, {
    key: "weekNumber",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }
    /**
     * Get the day of the week.
     * 1 is Monday and 7 is Sunday
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekday //=> 4
     * @type {number}
     */

  }, {
    key: "weekday",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }
    /**
     * Get the ordinal (meaning the day of the year)
     * @example DateTime.local(2017, 5, 25).ordinal //=> 145
     * @type {number|DateTime}
     */

  }, {
    key: "ordinal",
    get: function get() {
      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }
    /**
     * Get the human readable short month name, such as 'Oct'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
     * @type {string}
     */

  }, {
    key: "monthShort",
    get: function get() {
      return this.isValid ? Info.months("short", {
        locObj: this.loc
      })[this.month - 1] : null;
    }
    /**
     * Get the human readable long month name, such as 'October'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthLong //=> October
     * @type {string}
     */

  }, {
    key: "monthLong",
    get: function get() {
      return this.isValid ? Info.months("long", {
        locObj: this.loc
      })[this.month - 1] : null;
    }
    /**
     * Get the human readable short weekday, such as 'Mon'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
     * @type {string}
     */

  }, {
    key: "weekdayShort",
    get: function get() {
      return this.isValid ? Info.weekdays("short", {
        locObj: this.loc
      })[this.weekday - 1] : null;
    }
    /**
     * Get the human readable long weekday, such as 'Monday'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
     * @type {string}
     */

  }, {
    key: "weekdayLong",
    get: function get() {
      return this.isValid ? Info.weekdays("long", {
        locObj: this.loc
      })[this.weekday - 1] : null;
    }
    /**
     * Get the UTC offset of this DateTime in minutes
     * @example DateTime.now().offset //=> -240
     * @example DateTime.utc().offset //=> 0
     * @type {number}
     */

  }, {
    key: "offset",
    get: function get() {
      return this.isValid ? +this.o : NaN;
    }
    /**
     * Get the short human name for the zone's current offset, for example "EST" or "EDT".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */

  }, {
    key: "offsetNameShort",
    get: function get() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "short",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */

  }, {
    key: "offsetNameLong",
    get: function get() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "long",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get whether this zone's offset ever changes, as in a DST.
     * @type {boolean}
     */

  }, {
    key: "isOffsetFixed",
    get: function get() {
      return this.isValid ? this.zone.isUniversal : null;
    }
    /**
     * Get whether the DateTime is in a DST.
     * @type {boolean}
     */

  }, {
    key: "isInDST",
    get: function get() {
      if (this.isOffsetFixed) {
        return false;
      } else {
        return this.offset > this.set({
          month: 1,
          day: 1
        }).offset || this.offset > this.set({
          month: 5
        }).offset;
      }
    }
    /**
     * Returns true if this DateTime is in a leap year, false otherwise
     * @example DateTime.local(2016).isInLeapYear //=> true
     * @example DateTime.local(2013).isInLeapYear //=> false
     * @type {boolean}
     */

  }, {
    key: "isInLeapYear",
    get: function get() {
      return isLeapYear(this.year);
    }
    /**
     * Returns the number of days in this DateTime's month
     * @example DateTime.local(2016, 2).daysInMonth //=> 29
     * @example DateTime.local(2016, 3).daysInMonth //=> 31
     * @type {number}
     */

  }, {
    key: "daysInMonth",
    get: function get() {
      return daysInMonth(this.year, this.month);
    }
    /**
     * Returns the number of days in this DateTime's year
     * @example DateTime.local(2016).daysInYear //=> 366
     * @example DateTime.local(2013).daysInYear //=> 365
     * @type {number}
     */

  }, {
    key: "daysInYear",
    get: function get() {
      return this.isValid ? daysInYear(this.year) : NaN;
    }
    /**
     * Returns the number of weeks in this DateTime's year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2004).weeksInWeekYear //=> 53
     * @example DateTime.local(2013).weeksInWeekYear //=> 52
     * @type {number}
     */

  }, {
    key: "weeksInWeekYear",
    get: function get() {
      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }
  }], [{
    key: "DATE_SHORT",
    get: function get() {
      return DATE_SHORT;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_MED",
    get: function get() {
      return DATE_MED;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_MED_WITH_WEEKDAY",
    get: function get() {
      return DATE_MED_WITH_WEEKDAY;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_FULL",
    get: function get() {
      return DATE_FULL;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_HUGE",
    get: function get() {
      return DATE_HUGE;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_SIMPLE",
    get: function get() {
      return TIME_SIMPLE;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_SECONDS",
    get: function get() {
      return TIME_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_SHORT_OFFSET",
    get: function get() {
      return TIME_WITH_SHORT_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_LONG_OFFSET",
    get: function get() {
      return TIME_WITH_LONG_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_SIMPLE",
    get: function get() {
      return TIME_24_SIMPLE;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_SECONDS",
    get: function get() {
      return TIME_24_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_SHORT_OFFSET",
    get: function get() {
      return TIME_24_WITH_SHORT_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_LONG_OFFSET",
    get: function get() {
      return TIME_24_WITH_LONG_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_SHORT",
    get: function get() {
      return DATETIME_SHORT;
    }
    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_SHORT_WITH_SECONDS",
    get: function get() {
      return DATETIME_SHORT_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED",
    get: function get() {
      return DATETIME_MED;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED_WITH_SECONDS",
    get: function get() {
      return DATETIME_MED_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED_WITH_WEEKDAY",
    get: function get() {
      return DATETIME_MED_WITH_WEEKDAY;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_FULL",
    get: function get() {
      return DATETIME_FULL;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_FULL_WITH_SECONDS",
    get: function get() {
      return DATETIME_FULL_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_HUGE",
    get: function get() {
      return DATETIME_HUGE;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_HUGE_WITH_SECONDS",
    get: function get() {
      return DATETIME_HUGE_WITH_SECONDS;
    }
  }]);

  return DateTime;
}();
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError("Unknown datetime argument: " + dateTimeish + ", of type " + typeof dateTimeish);
  }
}

var VERSION = "2.4.0";

exports.DateTime = DateTime;
exports.Duration = Duration;
exports.FixedOffsetZone = FixedOffsetZone;
exports.IANAZone = IANAZone;
exports.Info = Info;
exports.Interval = Interval;
exports.InvalidZone = InvalidZone;
exports.Settings = Settings;
exports.SystemZone = SystemZone;
exports.VERSION = VERSION;
exports.Zone = Zone;
//# sourceMappingURL=luxon.js.map


/***/ }),

/***/ 78773:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bn = __webpack_require__(63785);
var brorand = __webpack_require__(59154);

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),

/***/ 40759:
/***/ ((module, exports) => {

"use strict";


// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
if (global.fetch) {
	exports["default"] = global.fetch.bind(global);
}

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

/***/ }),

/***/ 62859:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
/*!
 * RSA library for Node.js
 *
 * Author: rzcoder
 * License MIT
 */

var constants = __webpack_require__(75952);
var rsa = __webpack_require__(64153);
var crypt = __webpack_require__(29552);
var ber = (__webpack_require__(22803).Ber);
var _ = (__webpack_require__(80222)._);
var utils = __webpack_require__(80222);
var schemes = __webpack_require__(87178);
var formats = __webpack_require__(99073);

if (typeof constants.RSA_NO_PADDING === "undefined") {
    //patch for node v0.10.x, constants do not defined
    constants.RSA_NO_PADDING = 3;
}

module.exports = (function () {
    var SUPPORTED_HASH_ALGORITHMS = {
        node10: ['md4', 'md5', 'ripemd160', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],
        node: ['md4', 'md5', 'ripemd160', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],
        iojs: ['md4', 'md5', 'ripemd160', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],
        browser: ['md5', 'ripemd160', 'sha1', 'sha256', 'sha512']
    };

    var DEFAULT_ENCRYPTION_SCHEME = 'pkcs1_oaep';
    var DEFAULT_SIGNING_SCHEME = 'pkcs1';

    var DEFAULT_EXPORT_FORMAT = 'private';
    var EXPORT_FORMAT_ALIASES = {
        'private': 'pkcs1-private-pem',
        'private-der': 'pkcs1-private-der',
        'public': 'pkcs8-public-pem',
        'public-der': 'pkcs8-public-der',
    };

    /**
     * @param key {string|buffer|object} Key in PEM format, or data for generate key {b: bits, e: exponent}
     * @constructor
     */
    function NodeRSA(key, format, options) {
        if (!(this instanceof NodeRSA)) {
            return new NodeRSA(key, format, options);
        }

        if (_.isObject(format)) {
            options = format;
            format = undefined;
        }

        this.$options = {
            signingScheme: DEFAULT_SIGNING_SCHEME,
            signingSchemeOptions: {
                hash: 'sha256',
                saltLength: null
            },
            encryptionScheme: DEFAULT_ENCRYPTION_SCHEME,
            encryptionSchemeOptions: {
                hash: 'sha1',
                label: null
            },
            environment: utils.detectEnvironment(),
            rsaUtils: this
        };
        this.keyPair = new rsa.Key();
        this.$cache = {};

        if (Buffer.isBuffer(key) || _.isString(key)) {
            this.importKey(key, format);
        } else if (_.isObject(key)) {
            this.generateKeyPair(key.b, key.e);
        }

        this.setOptions(options);
    }

    /**
     * Set and validate options for key instance
     * @param options
     */
    NodeRSA.prototype.setOptions = function (options) {
        options = options || {};
        if (options.environment) {
            this.$options.environment = options.environment;
        }

        if (options.signingScheme) {
            if (_.isString(options.signingScheme)) {
                var signingScheme = options.signingScheme.toLowerCase().split('-');
                if (signingScheme.length == 1) {
                    if (SUPPORTED_HASH_ALGORITHMS.node.indexOf(signingScheme[0]) > -1) {
                        this.$options.signingSchemeOptions = {
                            hash: signingScheme[0]
                        };
                        this.$options.signingScheme = DEFAULT_SIGNING_SCHEME;
                    } else {
                        this.$options.signingScheme = signingScheme[0];
                        this.$options.signingSchemeOptions = {
                            hash: null
                        };
                    }
                } else {
                    this.$options.signingSchemeOptions = {
                        hash: signingScheme[1]
                    };
                    this.$options.signingScheme = signingScheme[0];
                }
            } else if (_.isObject(options.signingScheme)) {
                this.$options.signingScheme = options.signingScheme.scheme || DEFAULT_SIGNING_SCHEME;
                this.$options.signingSchemeOptions = _.omit(options.signingScheme, 'scheme');
            }

            if (!schemes.isSignature(this.$options.signingScheme)) {
                throw Error('Unsupported signing scheme');
            }

            if (this.$options.signingSchemeOptions.hash &&
                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.signingSchemeOptions.hash) === -1) {
                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');
            }
        }

        if (options.encryptionScheme) {
            if (_.isString(options.encryptionScheme)) {
                this.$options.encryptionScheme = options.encryptionScheme.toLowerCase();
                this.$options.encryptionSchemeOptions = {};
            } else if (_.isObject(options.encryptionScheme)) {
                this.$options.encryptionScheme = options.encryptionScheme.scheme || DEFAULT_ENCRYPTION_SCHEME;
                this.$options.encryptionSchemeOptions = _.omit(options.encryptionScheme, 'scheme');
            }

            if (!schemes.isEncryption(this.$options.encryptionScheme)) {
                throw Error('Unsupported encryption scheme');
            }

            if (this.$options.encryptionSchemeOptions.hash &&
                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.encryptionSchemeOptions.hash) === -1) {
                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');
            }
        }

        this.keyPair.setOptions(this.$options);
    };

    /**
     * Generate private/public keys pair
     *
     * @param bits {int} length key in bits. Default 2048.
     * @param exp {int} public exponent. Default 65537.
     * @returns {NodeRSA}
     */
    NodeRSA.prototype.generateKeyPair = function (bits, exp) {
        bits = bits || 2048;
        exp = exp || 65537;

        if (bits % 8 !== 0) {
            throw Error('Key size must be a multiple of 8.');
        }

        this.keyPair.generate(bits, exp.toString(16));
        this.$cache = {};
        return this;
    };

    /**
     * Importing key
     * @param keyData {string|buffer|Object}
     * @param format {string}
     */
    NodeRSA.prototype.importKey = function (keyData, format) {
        if (!keyData) {
            throw Error("Empty key given");
        }

        if (format) {
            format = EXPORT_FORMAT_ALIASES[format] || format;
        }

        if (!formats.detectAndImport(this.keyPair, keyData, format) && format === undefined) {
            throw Error("Key format must be specified");
        }
        
        this.$cache = {};
        
        return this;
    };

    /**
     * Exporting key
     * @param [format] {string}
     */
    NodeRSA.prototype.exportKey = function (format) {
        format = format || DEFAULT_EXPORT_FORMAT;
        format = EXPORT_FORMAT_ALIASES[format] || format;

        if (!this.$cache[format]) {
            this.$cache[format] = formats.detectAndExport(this.keyPair, format);
        }

        return this.$cache[format];
    };

    /**
     * Check if key pair contains private key
     */
    NodeRSA.prototype.isPrivate = function () {
        return this.keyPair.isPrivate();
    };

    /**
     * Check if key pair contains public key
     * @param [strict] {boolean} - public key only, return false if have private exponent
     */
    NodeRSA.prototype.isPublic = function (strict) {
        return this.keyPair.isPublic(strict);
    };

    /**
     * Check if key pair doesn't contains any data
     */
    NodeRSA.prototype.isEmpty = function (strict) {
        return !(this.keyPair.n || this.keyPair.e || this.keyPair.d);
    };

    /**
     * Encrypting data method with public key
     *
     * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.
     * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.
     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.
     * @returns {string|Buffer}
     */
    NodeRSA.prototype.encrypt = function (buffer, encoding, source_encoding) {
        return this.$$encryptKey(false, buffer, encoding, source_encoding);
    };

    /**
     * Decrypting data method with private key
     *
     * @param buffer {Buffer} - buffer for decrypting
     * @param encoding - encoding for result string, can also take 'json' or 'buffer' for the automatic conversion of this type
     * @returns {Buffer|object|string}
     */
    NodeRSA.prototype.decrypt = function (buffer, encoding) {
        return this.$$decryptKey(false, buffer, encoding);
    };

    /**
     * Encrypting data method with private key
     *
     * Parameters same as `encrypt` method
     */
    NodeRSA.prototype.encryptPrivate = function (buffer, encoding, source_encoding) {
        return this.$$encryptKey(true, buffer, encoding, source_encoding);
    };

    /**
     * Decrypting data method with public key
     *
     * Parameters same as `decrypt` method
     */
    NodeRSA.prototype.decryptPublic = function (buffer, encoding) {
        return this.$$decryptKey(true, buffer, encoding);
    };

    /**
     * Encrypting data method with custom key
     */
    NodeRSA.prototype.$$encryptKey = function (usePrivate, buffer, encoding, source_encoding) {
        try {
            var res = this.keyPair.encrypt(this.$getDataForEncrypt(buffer, source_encoding), usePrivate);

            if (encoding == 'buffer' || !encoding) {
                return res;
            } else {
                return res.toString(encoding);
            }
        } catch (e) {
            throw Error('Error during encryption. Original error: ' + e);
        }
    };

    /**
     * Decrypting data method with custom key
     */
    NodeRSA.prototype.$$decryptKey = function (usePublic, buffer, encoding) {
        try {
            buffer = _.isString(buffer) ? Buffer.from(buffer, 'base64') : buffer;
            var res = this.keyPair.decrypt(buffer, usePublic);

            if (res === null) {
                throw Error('Key decrypt method returns null.');
            }

            return this.$getDecryptedData(res, encoding);
        } catch (e) {
            throw Error('Error during decryption (probably incorrect key). Original error: ' + e);
        }
    };

    /**
     *  Signing data
     *
     * @param buffer {string|number|object|array|Buffer} - data for signing. Object and array will convert to JSON string.
     * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.
     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.
     * @returns {string|Buffer}
     */
    NodeRSA.prototype.sign = function (buffer, encoding, source_encoding) {
        if (!this.isPrivate()) {
            throw Error("This is not private key");
        }

        var res = this.keyPair.sign(this.$getDataForEncrypt(buffer, source_encoding));

        if (encoding && encoding != 'buffer') {
            res = res.toString(encoding);
        }

        return res;
    };

    /**
     *  Verifying signed data
     *
     * @param buffer - signed data
     * @param signature
     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.
     * @param signature_encoding - optional. Encoding of given signature. May be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.
     * @returns {*}
     */
    NodeRSA.prototype.verify = function (buffer, signature, source_encoding, signature_encoding) {
        if (!this.isPublic()) {
            throw Error("This is not public key");
        }
        signature_encoding = (!signature_encoding || signature_encoding == 'buffer' ? null : signature_encoding);
        return this.keyPair.verify(this.$getDataForEncrypt(buffer, source_encoding), signature, signature_encoding);
    };

    /**
     * Returns key size in bits
     * @returns {int}
     */
    NodeRSA.prototype.getKeySize = function () {
        return this.keyPair.keySize;
    };

    /**
     * Returns max message length in bytes (for 1 chunk) depending on current encryption scheme
     * @returns {int}
     */
    NodeRSA.prototype.getMaxMessageSize = function () {
        return this.keyPair.maxMessageLength;
    };

    /**
     * Preparing given data for encrypting/signing. Just make new/return Buffer object.
     *
     * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.
     * @param encoding {string} - optional. Encoding for given string. Default utf8.
     * @returns {Buffer}
     */
    NodeRSA.prototype.$getDataForEncrypt = function (buffer, encoding) {
        if (_.isString(buffer) || _.isNumber(buffer)) {
            return Buffer.from('' + buffer, encoding || 'utf8');
        } else if (Buffer.isBuffer(buffer)) {
            return buffer;
        } else if (_.isObject(buffer)) {
            return Buffer.from(JSON.stringify(buffer));
        } else {
            throw Error("Unexpected data type");
        }
    };

    /**
     *
     * @param buffer {Buffer} - decrypted data.
     * @param encoding - optional. Encoding for result output. May be 'buffer', 'json' or any of Node.js Buffer supported encoding.
     * @returns {*}
     */
    NodeRSA.prototype.$getDecryptedData = function (buffer, encoding) {
        encoding = encoding || 'buffer';

        if (encoding == 'buffer') {
            return buffer;
        } else if (encoding == 'json') {
            return JSON.parse(buffer.toString());
        } else {
            return buffer.toString(encoding);
        }
    };

    return NodeRSA;
})();


/***/ }),

/***/ 42589:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var crypt = __webpack_require__(516);

module.exports = {
    getEngine: function (keyPair, options) {
        var engine = __webpack_require__(59107);
        if (options.environment === 'node') {
            if (typeof crypt.publicEncrypt === 'function' && typeof crypt.privateDecrypt === 'function') {
                if (typeof crypt.privateEncrypt === 'function' && typeof crypt.publicDecrypt === 'function') {
                    engine = __webpack_require__(86252);
                } else {
                    engine = __webpack_require__(3752);
                }
            }
        }
        return engine(keyPair, options);
    }
};

/***/ }),

/***/ 86252:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var crypto = __webpack_require__(516);
var constants = __webpack_require__(54079);
var schemes = __webpack_require__(87178);

module.exports = function (keyPair, options) {
    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);

    return {
        encrypt: function (buffer, usePrivate) {
            var padding;
            if (usePrivate) {
                padding = constants.RSA_PKCS1_PADDING;
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                    padding = options.encryptionSchemeOptions.padding;
                }
                return crypto.privateEncrypt({
                    key: options.rsaUtils.exportKey('private'),
                    padding: padding
                }, buffer);
            } else {
                padding = constants.RSA_PKCS1_OAEP_PADDING;
                if (options.encryptionScheme === 'pkcs1') {
                    padding = constants.RSA_PKCS1_PADDING;
                }
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                    padding = options.encryptionSchemeOptions.padding;
                }

                var data = buffer;
                if (padding === constants.RSA_NO_PADDING) {
                    data = pkcs1Scheme.pkcs0pad(buffer);
                }

                return crypto.publicEncrypt({
                    key: options.rsaUtils.exportKey('public'),
                    padding: padding
                }, data);
            }
        },

        decrypt: function (buffer, usePublic) {
            var padding;
            if (usePublic) {
                padding = constants.RSA_PKCS1_PADDING;
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                    padding = options.encryptionSchemeOptions.padding;
                }
                return crypto.publicDecrypt({
                    key: options.rsaUtils.exportKey('public'),
                    padding: padding
                }, buffer);
            } else {
                padding = constants.RSA_PKCS1_OAEP_PADDING;
                if (options.encryptionScheme === 'pkcs1') {
                    padding = constants.RSA_PKCS1_PADDING;
                }
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                    padding = options.encryptionSchemeOptions.padding;
                }
                var res = crypto.privateDecrypt({
                    key: options.rsaUtils.exportKey('private'),
                    padding: padding
                }, buffer);

                if (padding === constants.RSA_NO_PADDING) {
                    return pkcs1Scheme.pkcs0unpad(res);
                }
                return res;
            }
        }
    };
};

/***/ }),

/***/ 59107:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var BigInteger = __webpack_require__(88359);
var schemes = __webpack_require__(87178);

module.exports = function (keyPair, options) {
    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);

    return {
        encrypt: function (buffer, usePrivate) {
            var m, c;
            if (usePrivate) {
                /* Type 1: zeros padding for private key encrypt */
                m = new BigInteger(pkcs1Scheme.encPad(buffer, {type: 1}));
                c = keyPair.$doPrivate(m);
            } else {
                m = new BigInteger(keyPair.encryptionScheme.encPad(buffer));
                c = keyPair.$doPublic(m);
            }
            return c.toBuffer(keyPair.encryptedDataLength);
        },

        decrypt: function (buffer, usePublic) {
            var m, c = new BigInteger(buffer);

            if (usePublic) {
                m = keyPair.$doPublic(c);
                /* Type 1: zeros padding for private key decrypt */
                return pkcs1Scheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength), {type: 1});
            } else {
                m = keyPair.$doPrivate(c);
                return keyPair.encryptionScheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength));
            }
        }
    };
};

/***/ }),

/***/ 3752:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var crypto = __webpack_require__(516);
var constants = __webpack_require__(54079);
var schemes = __webpack_require__(87178);

module.exports = function (keyPair, options) {
    var jsEngine = __webpack_require__(59107)(keyPair, options);
    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);

    return {
        encrypt: function (buffer, usePrivate) {
            if (usePrivate) {
                return jsEngine.encrypt(buffer, usePrivate);
            }
            var padding = constants.RSA_PKCS1_OAEP_PADDING;
            if (options.encryptionScheme === 'pkcs1') {
                padding = constants.RSA_PKCS1_PADDING;
            }
            if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                padding = options.encryptionSchemeOptions.padding;
            }

            var data = buffer;
            if (padding === constants.RSA_NO_PADDING) {
                data = pkcs1Scheme.pkcs0pad(buffer);
            }

            return crypto.publicEncrypt({
                key: options.rsaUtils.exportKey('public'),
                padding: padding
            }, data);
        },

        decrypt: function (buffer, usePublic) {
            if (usePublic) {
                return jsEngine.decrypt(buffer, usePublic);
            }
            var padding = constants.RSA_PKCS1_OAEP_PADDING;
            if (options.encryptionScheme === 'pkcs1') {
                padding = constants.RSA_PKCS1_PADDING;
            }
            if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                padding = options.encryptionSchemeOptions.padding;
            }

            var res = crypto.privateDecrypt({
                key: options.rsaUtils.exportKey('private'),
                padding: padding
            }, buffer);

            if (padding === constants.RSA_NO_PADDING) {
                return pkcs1Scheme.pkcs0unpad(res);
            }
            return res;
        }
    };
};

/***/ }),

/***/ 52628:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = (__webpack_require__(80222)._);
var utils = __webpack_require__(80222);

module.exports = {
    privateExport: function (key, options) {
        return {
            n: key.n.toBuffer(),
            e: key.e,
            d: key.d.toBuffer(),
            p: key.p.toBuffer(),
            q: key.q.toBuffer(),
            dmp1: key.dmp1.toBuffer(),
            dmq1: key.dmq1.toBuffer(),
            coeff: key.coeff.toBuffer()
        };
    },

    privateImport: function (key, data, options) {
        if (data.n && data.e && data.d && data.p && data.q && data.dmp1 && data.dmq1 && data.coeff) {
            key.setPrivate(
                data.n,
                data.e,
                data.d,
                data.p,
                data.q,
                data.dmp1,
                data.dmq1,
                data.coeff
            );
        } else {
            throw Error("Invalid key data");
        }
    },

    publicExport: function (key, options) {
        return {
            n: key.n.toBuffer(),
            e: key.e
        };
    },

    publicImport: function (key, data, options) {
        if (data.n && data.e) {
            key.setPublic(
                data.n,
                data.e
            );
        } else {
            throw Error("Invalid key data");
        }
    },

    /**
     * Trying autodetect and import key
     * @param key
     * @param data
     */
    autoImport: function (key, data) {
        if (data.n && data.e) {
            if (data.d && data.p && data.q && data.dmp1 && data.dmq1 && data.coeff) {
                module.exports.privateImport(key, data);
                return true;
            } else {
                module.exports.publicImport(key, data);
                return true;
            }
        }

        return false;
    }
};


/***/ }),

/***/ 99073:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = (__webpack_require__(80222)._);

function formatParse(format) {
    format = format.split('-');
    var keyType = 'private';
    var keyOpt = {type: 'default'};

    for (var i = 1; i < format.length; i++) {
        if (format[i]) {
            switch (format[i]) {
                case 'public':
                    keyType = format[i];
                    break;
                case 'private':
                    keyType = format[i];
                    break;
                case 'pem':
                    keyOpt.type = format[i];
                    break;
                case 'der':
                    keyOpt.type = format[i];
                    break;
            }
        }
    }

    return {scheme: format[0], keyType: keyType, keyOpt: keyOpt};
}

module.exports = {
    pkcs1: __webpack_require__(26282),
    pkcs8: __webpack_require__(70409),
    components: __webpack_require__(52628),
    openssh: __webpack_require__(28689),

    isPrivateExport: function (format) {
        return module.exports[format] && typeof module.exports[format].privateExport === 'function';
    },

    isPrivateImport: function (format) {
        return module.exports[format] && typeof module.exports[format].privateImport === 'function';
    },

    isPublicExport: function (format) {
        return module.exports[format] && typeof module.exports[format].publicExport === 'function';
    },

    isPublicImport: function (format) {
        return module.exports[format] && typeof module.exports[format].publicImport === 'function';
    },

    detectAndImport: function (key, data, format) {
        if (format === undefined) {
            for (var scheme in module.exports) {
                if (typeof module.exports[scheme].autoImport === 'function' && module.exports[scheme].autoImport(key, data)) {
                    return true;
                }
            }
        } else if (format) {
            var fmt = formatParse(format);

            if (module.exports[fmt.scheme]) {
                if (fmt.keyType === 'private') {
                    module.exports[fmt.scheme].privateImport(key, data, fmt.keyOpt);
                } else {
                    module.exports[fmt.scheme].publicImport(key, data, fmt.keyOpt);
                }
            } else {
                throw Error('Unsupported key format');
            }
        }

        return false;
    },

    detectAndExport: function (key, format) {
        if (format) {
            var fmt = formatParse(format);

            if (module.exports[fmt.scheme]) {
                if (fmt.keyType === 'private') {
                    if (!key.isPrivate()) {
                        throw Error("This is not private key");
                    }
                    return module.exports[fmt.scheme].privateExport(key, fmt.keyOpt);
                } else {
                    if (!key.isPublic()) {
                        throw Error("This is not public key");
                    }
                    return module.exports[fmt.scheme].publicExport(key, fmt.keyOpt);
                }
            } else {
                throw Error('Unsupported key format');
            }
        }
    }
};

/***/ }),

/***/ 28689:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
var _ = (__webpack_require__(80222)._);
var utils = __webpack_require__(80222);
var BigInteger = __webpack_require__(88359);

const PRIVATE_OPENING_BOUNDARY = "-----BEGIN OPENSSH PRIVATE KEY-----";
const PRIVATE_CLOSING_BOUNDARY = "-----END OPENSSH PRIVATE KEY-----";

module.exports = {
    privateExport: function (key, options) {
        const nbuf = key.n.toBuffer();

        let ebuf = Buffer.alloc(4)
        ebuf.writeUInt32BE(key.e, 0);
        //Slice leading zeroes
        while (ebuf[0] === 0) ebuf = ebuf.slice(1);

        const dbuf = key.d.toBuffer();
        const coeffbuf = key.coeff.toBuffer();
        const pbuf = key.p.toBuffer();
        const qbuf = key.q.toBuffer();
        let commentbuf;
        if (typeof key.sshcomment !== "undefined") {
            commentbuf = Buffer.from(key.sshcomment);
        } else {
            commentbuf = Buffer.from([]);
        }

        const pubkeyLength =
            11 + // 32bit length, 'ssh-rsa'
            4 + ebuf.byteLength +
            4 + nbuf.byteLength;

        const privateKeyLength =
            8 + //64bit unused checksum
            11 + // 32bit length, 'ssh-rsa'
            4 + nbuf.byteLength +
            4 + ebuf.byteLength +
            4 + dbuf.byteLength +
            4 + coeffbuf.byteLength +
            4 + pbuf.byteLength +
            4 + qbuf.byteLength +
            4 + commentbuf.byteLength;

        let length =
            15 + //openssh-key-v1,0x00,
            16 + // 2*(32bit length, 'none')
            4 + // 32bit length, empty string
            4 + // 32bit number of keys
            4 + // 32bit pubkey length
            pubkeyLength +
            4 + //32bit private+checksum+comment+padding length
            privateKeyLength;

        const paddingLength = Math.ceil(privateKeyLength / 8) * 8 - privateKeyLength;
        length += paddingLength;

        const buf = Buffer.alloc(length);
        const writer = {buf: buf, off: 0};
        buf.write("openssh-key-v1", "utf8");
        buf.writeUInt8(0, 14);
        writer.off += 15;

        writeOpenSSHKeyString(writer, Buffer.from("none"));
        writeOpenSSHKeyString(writer, Buffer.from("none"));
        writeOpenSSHKeyString(writer, Buffer.from(""));

        writer.off = writer.buf.writeUInt32BE(1, writer.off);
        writer.off = writer.buf.writeUInt32BE(pubkeyLength, writer.off);

        writeOpenSSHKeyString(writer, Buffer.from("ssh-rsa"));
        writeOpenSSHKeyString(writer, ebuf);
        writeOpenSSHKeyString(writer, nbuf);

        writer.off = writer.buf.writeUInt32BE(
            length - 47 - pubkeyLength,
            writer.off
        );
        writer.off += 8;

        writeOpenSSHKeyString(writer, Buffer.from("ssh-rsa"));
        writeOpenSSHKeyString(writer, nbuf);
        writeOpenSSHKeyString(writer, ebuf);
        writeOpenSSHKeyString(writer, dbuf);
        writeOpenSSHKeyString(writer, coeffbuf);
        writeOpenSSHKeyString(writer, pbuf);
        writeOpenSSHKeyString(writer, qbuf);
        writeOpenSSHKeyString(writer, commentbuf);

        let pad = 0x01;
        while (writer.off < length) {
            writer.off = writer.buf.writeUInt8(pad++, writer.off);
        }

        if (options.type === "der") {
            return writer.buf
        } else {
            return PRIVATE_OPENING_BOUNDARY + "\n" + utils.linebrk(buf.toString("base64"), 70) + "\n" + PRIVATE_CLOSING_BOUNDARY + "\n";
        }
    },

    privateImport: function (key, data, options) {
        options = options || {};
        var buffer;

        if (options.type !== "der") {
            if (Buffer.isBuffer(data)) {
                data = data.toString("utf8");
            }

            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY)
                    .replace(/\s+|\n\r|\n|\r$/gm, "");
                buffer = Buffer.from(pem, "base64");
            } else {
                throw Error("Unsupported key format");
            }
        } else if (Buffer.isBuffer(data)) {
            buffer = data;
        } else {
            throw Error("Unsupported key format");
        }

        const reader = {buf: buffer, off: 0};

        if (buffer.slice(0, 14).toString("ascii") !== "openssh-key-v1")
            throw "Invalid file format.";

        reader.off += 15;

        //ciphername
        if (readOpenSSHKeyString(reader).toString("ascii") !== "none")
            throw Error("Unsupported key type");
        //kdfname
        if (readOpenSSHKeyString(reader).toString("ascii") !== "none")
            throw Error("Unsupported key type");
        //kdf
        if (readOpenSSHKeyString(reader).toString("ascii") !== "")
            throw Error("Unsupported key type");
        //keynum
        reader.off += 4;

        //sshpublength
        reader.off += 4;

        //keytype
        if (readOpenSSHKeyString(reader).toString("ascii") !== "ssh-rsa")
            throw Error("Unsupported key type");
        readOpenSSHKeyString(reader);
        readOpenSSHKeyString(reader);

        reader.off += 12;
        if (readOpenSSHKeyString(reader).toString("ascii") !== "ssh-rsa")
            throw Error("Unsupported key type");

        const n = readOpenSSHKeyString(reader);
        const e = readOpenSSHKeyString(reader);
        const d = readOpenSSHKeyString(reader);
        const coeff = readOpenSSHKeyString(reader);
        const p = readOpenSSHKeyString(reader);
        const q = readOpenSSHKeyString(reader);

        //Calculate missing values
        const dint = new BigInteger(d);
        const qint = new BigInteger(q);
        const pint = new BigInteger(p);
        const dp = dint.mod(pint.subtract(BigInteger.ONE));
        const dq = dint.mod(qint.subtract(BigInteger.ONE));

        key.setPrivate(
            n,  // modulus
            e,  // publicExponent
            d,  // privateExponent
            p,  // prime1
            q,  // prime2
            dp.toBuffer(),  // exponent1 -- d mod (p1)
            dq.toBuffer(),  // exponent2 -- d mod (q-1)
            coeff  // coefficient -- (inverse of q) mod p
        );

        key.sshcomment = readOpenSSHKeyString(reader).toString("ascii");
    },

    publicExport: function (key, options) {
        let ebuf = Buffer.alloc(4)
        ebuf.writeUInt32BE(key.e, 0);
        //Slice leading zeroes
        while (ebuf[0] === 0) ebuf = ebuf.slice(1);
        const nbuf = key.n.toBuffer();
        const buf = Buffer.alloc(
            ebuf.byteLength + 4 +
            nbuf.byteLength + 4 +
            "ssh-rsa".length + 4
        );

        const writer = {buf: buf, off: 0};
        writeOpenSSHKeyString(writer, Buffer.from("ssh-rsa"));
        writeOpenSSHKeyString(writer, ebuf);
        writeOpenSSHKeyString(writer, nbuf);

        let comment = key.sshcomment || "";

        if (options.type === "der") {
            return writer.buf
        } else {
            return "ssh-rsa " + buf.toString("base64") + " " + comment + "\n";
        }
    },

    publicImport: function (key, data, options) {
        options = options || {};
        var buffer;

        if (options.type !== "der") {
            if (Buffer.isBuffer(data)) {
                data = data.toString("utf8");
            }

            if (_.isString(data)) {
                if (data.substring(0, 8) !== "ssh-rsa ")
                    throw Error("Unsupported key format");
                let pemEnd = data.indexOf(" ", 8);

                //Handle keys with no comment
                if (pemEnd === -1) {
                    pemEnd = data.length;
                } else {
                    key.sshcomment = data.substring(pemEnd + 1)
                        .replace(/\s+|\n\r|\n|\r$/gm, "");
                }

                const pem = data.substring(8, pemEnd)
                    .replace(/\s+|\n\r|\n|\r$/gm, "");
                buffer = Buffer.from(pem, "base64");
            } else {
                throw Error("Unsupported key format");
            }
        } else if (Buffer.isBuffer(data)) {
            buffer = data;
        } else {
            throw Error("Unsupported key format");
        }

        const reader = {buf: buffer, off: 0};

        const type = readOpenSSHKeyString(reader).toString("ascii");

        if (type !== "ssh-rsa")
            throw Error("Invalid key type: " + type);

        const e = readOpenSSHKeyString(reader);
        const n = readOpenSSHKeyString(reader);

        key.setPublic(
            n,
            e
        );
    },

    /**
     * Trying autodetect and import key
     * @param key
     * @param data
     */
    autoImport: function (key, data) {
        // [\S\s]* matches zero or more of any character
        if (/^[\S\s]*-----BEGIN OPENSSH PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END OPENSSH PRIVATE KEY-----[\S\s]*$/g.test(data)) {
            module.exports.privateImport(key, data);
            return true;
        }

        if (/^[\S\s]*ssh-rsa \s*(?=(([A-Za-z0-9+/=]+\s*)+))\1[\S\s]*$/g.test(data)) {
            module.exports.publicImport(key, data);
            return true;
        }

        return false;
    }
};

function readOpenSSHKeyString(reader) {
    const len = reader.buf.readInt32BE(reader.off);
    reader.off += 4;
    const res = reader.buf.slice(reader.off, reader.off + len);
    reader.off += len;
    return res;
}

function writeOpenSSHKeyString(writer, data) {
    writer.buf.writeInt32BE(data.byteLength, writer.off);
    writer.off += 4;
    writer.off += data.copy(writer.buf, writer.off);
}

/***/ }),

/***/ 26282:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
var ber = (__webpack_require__(22803).Ber);
var _ = (__webpack_require__(80222)._);
var utils = __webpack_require__(80222);

const PRIVATE_OPENING_BOUNDARY = '-----BEGIN RSA PRIVATE KEY-----';
const PRIVATE_CLOSING_BOUNDARY = '-----END RSA PRIVATE KEY-----';

const PUBLIC_OPENING_BOUNDARY = '-----BEGIN RSA PUBLIC KEY-----';
const PUBLIC_CLOSING_BOUNDARY = '-----END RSA PUBLIC KEY-----';

module.exports = {
    privateExport: function (key, options) {
        options = options || {};

        var n = key.n.toBuffer();
        var d = key.d.toBuffer();
        var p = key.p.toBuffer();
        var q = key.q.toBuffer();
        var dmp1 = key.dmp1.toBuffer();
        var dmq1 = key.dmq1.toBuffer();
        var coeff = key.coeff.toBuffer();

        var length = n.length + d.length + p.length + q.length + dmp1.length + dmq1.length + coeff.length + 512; // magic
        var writer = new ber.Writer({size: length});

        writer.startSequence();
        writer.writeInt(0);
        writer.writeBuffer(n, 2);
        writer.writeInt(key.e);
        writer.writeBuffer(d, 2);
        writer.writeBuffer(p, 2);
        writer.writeBuffer(q, 2);
        writer.writeBuffer(dmp1, 2);
        writer.writeBuffer(dmq1, 2);
        writer.writeBuffer(coeff, 2);
        writer.endSequence();

        if (options.type === 'der') {
            return writer.buffer;
        } else {
            return PRIVATE_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PRIVATE_CLOSING_BOUNDARY;
        }
    },

    privateImport: function (key, data, options) {
        options = options || {};
        var buffer;

        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }

            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY)
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            } else {
                throw Error('Unsupported key format');
            }
        } else if (Buffer.isBuffer(data)) {
            buffer = data;
        } else {
            throw Error('Unsupported key format');
        }

        var reader = new ber.Reader(buffer);
        reader.readSequence();
        reader.readString(2, true); // just zero
        key.setPrivate(
            reader.readString(2, true),  // modulus
            reader.readString(2, true),  // publicExponent
            reader.readString(2, true),  // privateExponent
            reader.readString(2, true),  // prime1
            reader.readString(2, true),  // prime2
            reader.readString(2, true),  // exponent1 -- d mod (p1)
            reader.readString(2, true),  // exponent2 -- d mod (q-1)
            reader.readString(2, true)   // coefficient -- (inverse of q) mod p
        );
    },

    publicExport: function (key, options) {
        options = options || {};

        var n = key.n.toBuffer();
        var length = n.length + 512; // magic

        var bodyWriter = new ber.Writer({size: length});
        bodyWriter.startSequence();
        bodyWriter.writeBuffer(n, 2);
        bodyWriter.writeInt(key.e);
        bodyWriter.endSequence();

        if (options.type === 'der') {
            return bodyWriter.buffer;
        } else {
            return PUBLIC_OPENING_BOUNDARY + '\n' + utils.linebrk(bodyWriter.buffer.toString('base64'), 64) + '\n' + PUBLIC_CLOSING_BOUNDARY;
        }
    },

    publicImport: function (key, data, options) {
        options = options || {};
        var buffer;

        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }

            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PUBLIC_OPENING_BOUNDARY, PUBLIC_CLOSING_BOUNDARY)
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            }
        } else if (Buffer.isBuffer(data)) {
            buffer = data;
        } else {
            throw Error('Unsupported key format');
        }

        var body = new ber.Reader(buffer);
        body.readSequence();
        key.setPublic(
            body.readString(0x02, true), // modulus
            body.readString(0x02, true)  // publicExponent
        );
    },

    /**
     * Trying autodetect and import key
     * @param key
     * @param data
     */
    autoImport: function (key, data) {
        // [\S\s]* matches zero or more of any character
        if (/^[\S\s]*-----BEGIN RSA PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PRIVATE KEY-----[\S\s]*$/g.test(data)) {
            module.exports.privateImport(key, data);
            return true;
        }

        if (/^[\S\s]*-----BEGIN RSA PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PUBLIC KEY-----[\S\s]*$/g.test(data)) {
            module.exports.publicImport(key, data);
            return true;
        }

        return false;
    }
};

/***/ }),

/***/ 70409:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
var ber = (__webpack_require__(22803).Ber);
var _ = (__webpack_require__(80222)._);
var PUBLIC_RSA_OID = '1.2.840.113549.1.1.1';
var utils = __webpack_require__(80222);

const PRIVATE_OPENING_BOUNDARY = '-----BEGIN PRIVATE KEY-----';
const PRIVATE_CLOSING_BOUNDARY = '-----END PRIVATE KEY-----';

const PUBLIC_OPENING_BOUNDARY = '-----BEGIN PUBLIC KEY-----';
const PUBLIC_CLOSING_BOUNDARY = '-----END PUBLIC KEY-----';

module.exports = {
    privateExport: function (key, options) {
        options = options || {};

        var n = key.n.toBuffer();
        var d = key.d.toBuffer();
        var p = key.p.toBuffer();
        var q = key.q.toBuffer();
        var dmp1 = key.dmp1.toBuffer();
        var dmq1 = key.dmq1.toBuffer();
        var coeff = key.coeff.toBuffer();

        var length = n.length + d.length + p.length + q.length + dmp1.length + dmq1.length + coeff.length + 512; // magic
        var bodyWriter = new ber.Writer({size: length});

        bodyWriter.startSequence();
        bodyWriter.writeInt(0);
        bodyWriter.writeBuffer(n, 2);
        bodyWriter.writeInt(key.e);
        bodyWriter.writeBuffer(d, 2);
        bodyWriter.writeBuffer(p, 2);
        bodyWriter.writeBuffer(q, 2);
        bodyWriter.writeBuffer(dmp1, 2);
        bodyWriter.writeBuffer(dmq1, 2);
        bodyWriter.writeBuffer(coeff, 2);
        bodyWriter.endSequence();

        var writer = new ber.Writer({size: length});
        writer.startSequence();
        writer.writeInt(0);
        writer.startSequence();
        writer.writeOID(PUBLIC_RSA_OID);
        writer.writeNull();
        writer.endSequence();
        writer.writeBuffer(bodyWriter.buffer, 4);
        writer.endSequence();

        if (options.type === 'der') {
            return writer.buffer;
        } else {
            return PRIVATE_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PRIVATE_CLOSING_BOUNDARY;
        }
    },

    privateImport: function (key, data, options) {
        options = options || {};
        var buffer;

        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }

            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY)
                    .replace('-----END PRIVATE KEY-----', '')
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            } else {
                throw Error('Unsupported key format');
            }
        } else if (Buffer.isBuffer(data)) {
            buffer = data;
        } else {
            throw Error('Unsupported key format');
        }

        var reader = new ber.Reader(buffer);
        reader.readSequence();
        reader.readInt(0);
        var header = new ber.Reader(reader.readString(0x30, true));

        if (header.readOID(0x06, true) !== PUBLIC_RSA_OID) {
            throw Error('Invalid Public key format');
        }

        var body = new ber.Reader(reader.readString(0x04, true));
        body.readSequence();
        body.readString(2, true); // just zero
        key.setPrivate(
            body.readString(2, true),  // modulus
            body.readString(2, true),  // publicExponent
            body.readString(2, true),  // privateExponent
            body.readString(2, true),  // prime1
            body.readString(2, true),  // prime2
            body.readString(2, true),  // exponent1 -- d mod (p1)
            body.readString(2, true),  // exponent2 -- d mod (q-1)
            body.readString(2, true)   // coefficient -- (inverse of q) mod p
        );
    },

    publicExport: function (key, options) {
        options = options || {};

        var n = key.n.toBuffer();
        var length = n.length + 512; // magic

        var bodyWriter = new ber.Writer({size: length});
        bodyWriter.writeByte(0);
        bodyWriter.startSequence();
        bodyWriter.writeBuffer(n, 2);
        bodyWriter.writeInt(key.e);
        bodyWriter.endSequence();

        var writer = new ber.Writer({size: length});
        writer.startSequence();
        writer.startSequence();
        writer.writeOID(PUBLIC_RSA_OID);
        writer.writeNull();
        writer.endSequence();
        writer.writeBuffer(bodyWriter.buffer, 3);
        writer.endSequence();

        if (options.type === 'der') {
            return writer.buffer;
        } else {
            return PUBLIC_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PUBLIC_CLOSING_BOUNDARY;
        }
    },

    publicImport: function (key, data, options) {
        options = options || {};
        var buffer;

        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }

            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PUBLIC_OPENING_BOUNDARY, PUBLIC_CLOSING_BOUNDARY)
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            }
        } else if (Buffer.isBuffer(data)) {
            buffer = data;
        } else {
            throw Error('Unsupported key format');
        }

        var reader = new ber.Reader(buffer);
        reader.readSequence();
        var header = new ber.Reader(reader.readString(0x30, true));

        if (header.readOID(0x06, true) !== PUBLIC_RSA_OID) {
            throw Error('Invalid Public key format');
        }

        var body = new ber.Reader(reader.readString(0x03, true));
        body.readByte();
        body.readSequence();
        key.setPublic(
            body.readString(0x02, true), // modulus
            body.readString(0x02, true)  // publicExponent
        );
    },

    /**
     * Trying autodetect and import key
     * @param key
     * @param data
     */
    autoImport: function (key, data) {
        if (/^[\S\s]*-----BEGIN PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PRIVATE KEY-----[\S\s]*$/g.test(data)) {
            module.exports.privateImport(key, data);
            return true;
        }

        if (/^[\S\s]*-----BEGIN PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PUBLIC KEY-----[\S\s]*$/g.test(data)) {
            module.exports.publicImport(key, data);
            return true;
        }

        return false;
    }
};


/***/ }),

/***/ 88359:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
/*
 * Basic JavaScript BN library - subset useful for RSA encryption.
 * 
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */

/*
 * Added Node.js Buffers support
 * 2014 rzcoder
 */

var crypt = __webpack_require__(6286);
var _ = (__webpack_require__(80222)._);

// Bits per digit
var dbits;

// JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = ((canary & 0xffffff) == 0xefcafe);

// (public) Constructor
function BigInteger(a, b) {
    if (a != null) {
        if ("number" == typeof a) {
            this.fromNumber(a, b);
        } else if (Buffer.isBuffer(a)) {
            this.fromBuffer(a);
        } else if (b == null && "string" != typeof a) {
            this.fromByteArray(a);
        } else {
            this.fromString(a, b);
        }
    }
}

// return new, unset BigInteger
function nbi() {
    return new BigInteger(null);
}

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i, x, w, j, c, n) {
    while (--n >= 0) {
        var v = x * this[i++] + w[j] + c;
        c = Math.floor(v / 0x4000000);
        w[j++] = v & 0x3ffffff;
    }
    return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i, x, w, j, c, n) {
    var xl = x & 0x7fff, xh = x >> 15;
    while (--n >= 0) {
        var l = this[i] & 0x7fff;
        var h = this[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w[j++] = l & 0x3fffffff;
    }
    return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
    var xl = x & 0x3fff, xh = x >> 14;
    while (--n >= 0) {
        var l = this[i] & 0x3fff;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
    }
    return c;
}

// We need to select the fastest one that works in this environment. 
//if (j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
//	BigInteger.prototype.am = am2;
//	dbits = 30;
//} else if (j_lm && (navigator.appName != "Netscape")) {
//	BigInteger.prototype.am = am1;
//	dbits = 26;
//} else { // Mozilla/Netscape seems to prefer am3
//	BigInteger.prototype.am = am3;
//	dbits = 28;
//}

// For node.js, we pick am3 with max dbits to 28.
BigInteger.prototype.am = am3;
dbits = 28;

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1 << dbits) - 1);
BigInteger.prototype.DV = (1 << dbits);

var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

function int2char(n) {
    return BI_RM.charAt(n);
}
function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c == null) ? -1 : c;
}

// (protected) copy this to r
function bnpCopyTo(r) {
    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
    this.t = 1;
    this.s = (x < 0) ? -1 : 0;
    if (x > 0) this[0] = x;
    else if (x < -1) this[0] = x + DV;
    else this.t = 0;
}

// return bigint initialized to value
function nbv(i) {
    var r = nbi();
    r.fromInt(i);
    return r;
}

// (protected) set from string and radix
function bnpFromString(data, radix, unsigned) {
    var k;
    switch (radix) {
        case 2:
            k = 1;
            break;
        case 4:
            k = 2;
            break;
        case 8:
            k = 3;
            break;
        case 16:
            k = 4;
            break;
        case 32:
            k = 5;
            break;
        case 256:
            k = 8;
            break;
        default:
            this.fromRadix(data, radix);
            return;
    }

    this.t = 0;
    this.s = 0;

    var i = data.length;
    var mi = false;
    var sh = 0;

    while (--i >= 0) {
        var x = (k == 8) ? data[i] & 0xff : intAt(data, i);
        if (x < 0) {
            if (data.charAt(i) == "-") mi = true;
            continue;
        }
        mi = false;
        if (sh === 0)
            this[this.t++] = x;
        else if (sh + k > this.DB) {
            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
            this[this.t++] = (x >> (this.DB - sh));
        }
        else
            this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB) sh -= this.DB;
    }
    if ((!unsigned) && k == 8 && (data[0] & 0x80) != 0) {
        this.s = -1;
        if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
    }
    this.clamp();
    if (mi) BigInteger.ZERO.subTo(this, this);
}

function bnpFromByteArray(a, unsigned) {
    this.fromString(a, 256, unsigned)
}

function bnpFromBuffer(a) {
    this.fromString(a, 256, true)
}

// (protected) clamp off excess high words
function bnpClamp() {
    var c = this.s & this.DM;
    while (this.t > 0 && this[this.t - 1] == c) --this.t;
}

// (public) return string representation in given radix
function bnToString(b) {
    if (this.s < 0) return "-" + this.negate().toString(b);
    var k;
    if (b == 16) k = 4;
    else if (b == 8) k = 3;
    else if (b == 2) k = 1;
    else if (b == 32) k = 5;
    else if (b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
    var p = this.DB - (i * this.DB) % k;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
            m = true;
            r = int2char(d);
        }
        while (i >= 0) {
            if (p < k) {
                d = (this[i] & ((1 << p) - 1)) << (k - p);
                d |= this[--i] >> (p += this.DB - k);
            }
            else {
                d = (this[i] >> (p -= k)) & km;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if (d > 0) m = true;
            if (m) r += int2char(d);
        }
    }
    return m ? r : "0";
}

// (public) -this
function bnNegate() {
    var r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
}

// (public) |this|
function bnAbs() {
    return (this.s < 0) ? this.negate() : this;
}

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
    var r = this.s - a.s;
    if (r != 0) return r;
    var i = this.t;
    r = i - a.t;
    if (r != 0) return (this.s < 0) ? -r : r;
    while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
    return 0;
}

// returns bit length of the integer x
function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
    }
    if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
    }
    if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
    }
    if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
    }
    if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
    }
    return r;
}

// (public) return the number of bits in "this"
function bnBitLength() {
    if (this.t <= 0) return 0;
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
    var i;
    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
    for (i = n - 1; i >= 0; --i) r[i] = 0;
    r.t = this.t + n;
    r.s = this.s;
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
    for (var i = n; i < this.t; ++i) r[i - n] = this[i];
    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
}

// (protected) r = this << n
function bnpLShiftTo(n, r) {
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << cbs) - 1;
    var ds = Math.floor(n / this.DB), c = (this.s << bs) & this.DM, i;
    for (i = this.t - 1; i >= 0; --i) {
        r[i + ds + 1] = (this[i] >> cbs) | c;
        c = (this[i] & bm) << bs;
    }
    for (i = ds - 1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
}

// (protected) r = this >> n
function bnpRShiftTo(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
        r.t = 0;
        return;
    }
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << bs) - 1;
    r[0] = this[ds] >> bs;
    for (var i = ds + 1; i < this.t; ++i) {
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
    }
    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
}

// (protected) r = this - a
function bnpSubTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    }
    else {
        c += this.s;
        while (i < a.t) {
            c -= a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c -= a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c < -1) r[i++] = this.DV + c;
    else if (c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i + y.t;
    while (--i >= 0) r[i] = 0;
    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
    r.s = 0;
    r.clamp();
    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2 * x.t;
    while (--i >= 0) r[i] = 0;
    for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
            r[i + x.t] -= x.DV;
            r[i + x.t + 1] = 1;
        }
    }
    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
    var pm = m.abs();
    if (pm.t <= 0) return;
    var pt = this.abs();
    if (pt.t < pm.t) {
        if (q != null) q.fromInt(0);
        if (r != null) this.copyTo(r);
        return;
    }
    if (r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB - nbits(pm[pm.t - 1]);	// normalize modulus
    if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
    }
    else {
        pm.copyTo(y);
        pt.copyTo(r);
    }
    var ys = y.t;
    var y0 = y[ys - 1];
    if (y0 === 0) return;
    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);
    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
    var i = r.t, j = i - ys, t = (q == null) ? nbi() : q;
    y.dlShiftTo(j, t);
    if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
    }
    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y);	// "negative" y so we can replace sub with am later
    while (y.t < ys) y[y.t++] = 0;
    while (--j >= 0) {
        // Estimate quotient digit
        var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {	// Try it out
            y.dlShiftTo(j, t);
            r.subTo(t, r);
            while (r[i] < --qd) r.subTo(t, r);
        }
    }
    if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms) BigInteger.ZERO.subTo(q, q);
    }
    r.t = ys;
    r.clamp();
    if (nsh > 0) r.rShiftTo(nsh, r);	// Denormalize remainder
    if (ts < 0) BigInteger.ZERO.subTo(r, r);
}

// (public) this mod a
function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
    return r;
}

// Modular reduction using "classic" algorithm
function Classic(m) {
    this.m = m;
}
function cConvert(x) {
    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
}
function cRevert(x) {
    return x;
}
function cReduce(x) {
    x.divRemTo(this.m, null, x);
}
function cMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
function cSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
    if (this.t < 1) return 0;
    var x = this[0];
    if ((x & 1) === 0) return 0;
    var y = x & 3;		// y == 1/x mod 2^2
    y = (y * (2 - (x & 0xf) * y)) & 0xf;	// y == 1/x mod 2^4
    y = (y * (2 - (x & 0xff) * y)) & 0xff;	// y == 1/x mod 2^8
    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y * (2 - x * y % this.DV)) % this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y > 0) ? this.DV - y : -y;
}

// Montgomery reduction
function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 0x7fff;
    this.mph = this.mp >> 15;
    this.um = (1 << (m.DB - 15)) - 1;
    this.mt2 = 2 * m.t;
}

// xR mod m
function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
    return r;
}

// x/R mod m
function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
    while (x.t <= this.mt2)	// pad x so am has enough room later
        x[x.t++] = 0;
    for (var i = 0; i < this.m.t; ++i) {
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i] & 0x7fff;
        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        // propagate carry
        while (x[j] >= x.DV) {
            x[j] -= x.DV;
            x[++j]++;
        }
    }
    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}

// r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;

// (protected) true iff this is even
function bnpIsEven() {
    return ((this.t > 0) ? (this[0] & 1) : this.s) === 0;
}

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e, z) {
    if (e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
    g.copyTo(r);
    while (--i >= 0) {
        z.sqrTo(r, r2);
        if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);
        else {
            var t = r;
            r = r2;
            r2 = t;
        }
    }
    return z.revert(r);
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e, m) {
    var z;
    if (e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e, z);
}

// Copyright (c) 2005-2009  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.

// Extended JavaScript BN functions, required for RSA private ops.

// Version 1.1: new BigInteger("0", 10) returns "proper" zero
// Version 1.2: square() API, isProbablePrime fix

//(public)
function bnClone() {
    var r = nbi();
    this.copyTo(r);
    return r;
}

//(public) return value as integer
function bnIntValue() {
    if (this.s < 0) {
        if (this.t == 1) return this[0] - this.DV;
        else if (this.t === 0) return -1;
    }
    else if (this.t == 1) return this[0];
    else if (this.t === 0) return 0;
// assumes 16 < DB < 32
    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];
}

//(public) return value as byte
function bnByteValue() {
    return (this.t == 0) ? this.s : (this[0] << 24) >> 24;
}

//(public) return value as short (assumes DB>=16)
function bnShortValue() {
    return (this.t == 0) ? this.s : (this[0] << 16) >> 16;
}

//(protected) return x s.t. r^x < DV
function bnpChunkSize(r) {
    return Math.floor(Math.LN2 * this.DB / Math.log(r));
}

//(public) 0 if this === 0, 1 if this > 0
function bnSigNum() {
    if (this.s < 0) return -1;
    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
}

//(protected) convert to radix string
function bnpToRadix(b) {
    if (b == null) b = 10;
    if (this.signum() === 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b, cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d, y, z);
    while (y.signum() > 0) {
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
    }
    return z.intValue().toString(b) + r;
}

//(protected) convert from radix string
function bnpFromRadix(s, b) {
    this.fromInt(0);
    if (b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
    for (var i = 0; i < s.length; ++i) {
        var x = intAt(s, i);
        if (x < 0) {
            if (s.charAt(i) == "-" && this.signum() === 0) mi = true;
            continue;
        }
        w = b * w + x;
        if (++j >= cs) {
            this.dMultiply(d);
            this.dAddOffset(w, 0);
            j = 0;
            w = 0;
        }
    }
    if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
    }
    if (mi) BigInteger.ZERO.subTo(this, this);
}

//(protected) alternate constructor
function bnpFromNumber(a, b) {
    if ("number" == typeof b) {
        // new BigInteger(int,int,RNG)
        if (a < 2) this.fromInt(1);
        else {
            this.fromNumber(a);
            if (!this.testBit(a - 1))	// force MSB set
                this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
            if (this.isEven()) this.dAddOffset(1, 0); // force odd
            while (!this.isProbablePrime(b)) {
                this.dAddOffset(2, 0);
                if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
            }
        }
    } else {
        // new BigInteger(int,RNG)
        var x = crypt.randomBytes((a >> 3) + 1)
        var t = a & 7;

        if (t > 0)
            x[0] &= ((1 << t) - 1);
        else
            x[0] = 0;

        this.fromByteArray(x);
    }
}

//(public) convert to bigendian byte array
function bnToByteArray() {
    var i = this.t, r = new Array();
    r[0] = this.s;
    var p = this.DB - (i * this.DB) % 8, d, k = 0;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)
            r[k++] = d | (this.s << (this.DB - p));
        while (i >= 0) {
            if (p < 8) {
                d = (this[i] & ((1 << p) - 1)) << (8 - p);
                d |= this[--i] >> (p += this.DB - 8);
            }
            else {
                d = (this[i] >> (p -= 8)) & 0xff;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if ((d & 0x80) != 0) d |= -256;
            if (k === 0 && (this.s & 0x80) != (d & 0x80)) ++k;
            if (k > 0 || d != this.s) r[k++] = d;
        }
    }
    return r;
}

/**
 * return Buffer object
 * @param trim {boolean} slice buffer if first element == 0
 * @returns {Buffer}
 */
function bnToBuffer(trimOrSize) {
    var res = Buffer.from(this.toByteArray());
    if (trimOrSize === true && res[0] === 0) {
        res = res.slice(1);
    } else if (_.isNumber(trimOrSize)) {
        if (res.length > trimOrSize) {
            for (var i = 0; i < res.length - trimOrSize; i++) {
                if (res[i] !== 0) {
                    return null;
                }
            }
            return res.slice(res.length - trimOrSize);
        } else if (res.length < trimOrSize) {
            var padded = Buffer.alloc(trimOrSize);
            padded.fill(0, 0, trimOrSize - res.length);
            res.copy(padded, trimOrSize - res.length);
            return padded;
        }
    }
    return res;
}

function bnEquals(a) {
    return (this.compareTo(a) == 0);
}
function bnMin(a) {
    return (this.compareTo(a) < 0) ? this : a;
}
function bnMax(a) {
    return (this.compareTo(a) > 0) ? this : a;
}

//(protected) r = this op a (bitwise)
function bnpBitwiseTo(a, op, r) {
    var i, f, m = Math.min(a.t, this.t);
    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);
    if (a.t < this.t) {
        f = a.s & this.DM;
        for (i = m; i < this.t; ++i) r[i] = op(this[i], f);
        r.t = this.t;
    }
    else {
        f = this.s & this.DM;
        for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);
        r.t = a.t;
    }
    r.s = op(this.s, a.s);
    r.clamp();
}

//(public) this & a
function op_and(x, y) {
    return x & y;
}
function bnAnd(a) {
    var r = nbi();
    this.bitwiseTo(a, op_and, r);
    return r;
}

//(public) this | a
function op_or(x, y) {
    return x | y;
}
function bnOr(a) {
    var r = nbi();
    this.bitwiseTo(a, op_or, r);
    return r;
}

//(public) this ^ a
function op_xor(x, y) {
    return x ^ y;
}
function bnXor(a) {
    var r = nbi();
    this.bitwiseTo(a, op_xor, r);
    return r;
}

//(public) this & ~a
function op_andnot(x, y) {
    return x & ~y;
}
function bnAndNot(a) {
    var r = nbi();
    this.bitwiseTo(a, op_andnot, r);
    return r;
}

//(public) ~this
function bnNot() {
    var r = nbi();
    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];
    r.t = this.t;
    r.s = ~this.s;
    return r;
}

//(public) this << n
function bnShiftLeft(n) {
    var r = nbi();
    if (n < 0) this.rShiftTo(-n, r); else this.lShiftTo(n, r);
    return r;
}

//(public) this >> n
function bnShiftRight(n) {
    var r = nbi();
    if (n < 0) this.lShiftTo(-n, r); else this.rShiftTo(n, r);
    return r;
}

//return index of lowest 1-bit in x, x < 2^31
function lbit(x) {
    if (x === 0) return -1;
    var r = 0;
    if ((x & 0xffff) === 0) {
        x >>= 16;
        r += 16;
    }
    if ((x & 0xff) === 0) {
        x >>= 8;
        r += 8;
    }
    if ((x & 0xf) === 0) {
        x >>= 4;
        r += 4;
    }
    if ((x & 3) === 0) {
        x >>= 2;
        r += 2;
    }
    if ((x & 1) === 0) ++r;
    return r;
}

//(public) returns index of lowest 1-bit (or -1 if none)
function bnGetLowestSetBit() {
    for (var i = 0; i < this.t; ++i)
        if (this[i] != 0) return i * this.DB + lbit(this[i]);
    if (this.s < 0) return this.t * this.DB;
    return -1;
}

//return number of 1 bits in x
function cbit(x) {
    var r = 0;
    while (x != 0) {
        x &= x - 1;
        ++r;
    }
    return r;
}

//(public) return number of set bits
function bnBitCount() {
    var r = 0, x = this.s & this.DM;
    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);
    return r;
}

//(public) true iff nth bit is set
function bnTestBit(n) {
    var j = Math.floor(n / this.DB);
    if (j >= this.t) return (this.s != 0);
    return ((this[j] & (1 << (n % this.DB))) != 0);
}

//(protected) this op (1<<n)
function bnpChangeBit(n, op) {
    var r = BigInteger.ONE.shiftLeft(n);
    this.bitwiseTo(r, op, r);
    return r;
}

//(public) this | (1<<n)
function bnSetBit(n) {
    return this.changeBit(n, op_or);
}

//(public) this & ~(1<<n)
function bnClearBit(n) {
    return this.changeBit(n, op_andnot);
}

//(public) this ^ (1<<n)
function bnFlipBit(n) {
    return this.changeBit(n, op_xor);
}

//(protected) r = this + a
function bnpAddTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c += a.s;
        while (i < this.t) {
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    }
    else {
        c += this.s;
        while (i < a.t) {
            c += a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c > 0) r[i++] = c;
    else if (c < -1) r[i++] = this.DV + c;
    r.t = i;
    r.clamp();
}

//(public) this + a
function bnAdd(a) {
    var r = nbi();
    this.addTo(a, r);
    return r;
}

//(public) this - a
function bnSubtract(a) {
    var r = nbi();
    this.subTo(a, r);
    return r;
}

//(public) this * a
function bnMultiply(a) {
    var r = nbi();
    this.multiplyTo(a, r);
    return r;
}

// (public) this^2
function bnSquare() {
    var r = nbi();
    this.squareTo(r);
    return r;
}

//(public) this / a
function bnDivide(a) {
    var r = nbi();
    this.divRemTo(a, r, null);
    return r;
}

//(public) this % a
function bnRemainder(a) {
    var r = nbi();
    this.divRemTo(a, null, r);
    return r;
}

//(public) [this/a,this%a]
function bnDivideAndRemainder(a) {
    var q = nbi(), r = nbi();
    this.divRemTo(a, q, r);
    return new Array(q, r);
}

//(protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
    ++this.t;
    this.clamp();
}

//(protected) this += n << w words, this >= 0
function bnpDAddOffset(n, w) {
    if (n === 0) return;
    while (this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while (this[w] >= this.DV) {
        this[w] -= this.DV;
        if (++w >= this.t) this[this.t++] = 0;
        ++this[w];
    }
}

//A "null" reducer
function NullExp() {
}
function nNop(x) {
    return x;
}
function nMulTo(x, y, r) {
    x.multiplyTo(y, r);
}
function nSqrTo(x, r) {
    x.squareTo(r);
}

NullExp.prototype.convert = nNop;
NullExp.prototype.revert = nNop;
NullExp.prototype.mulTo = nMulTo;
NullExp.prototype.sqrTo = nSqrTo;

//(public) this^e
function bnPow(e) {
    return this.exp(e, new NullExp());
}

//(protected) r = lower n words of "this * a", a.t <= n
//"this" should be the larger one if appropriate.
function bnpMultiplyLowerTo(a, n, r) {
    var i = Math.min(this.t + a.t, n);
    r.s = 0; // assumes a,this >= 0
    r.t = i;
    while (i > 0) r[--i] = 0;
    var j;
    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);
    r.clamp();
}

//(protected) r = "this * a" without lower n words, n > 0
//"this" should be the larger one if appropriate.
function bnpMultiplyUpperTo(a, n, r) {
    --n;
    var i = r.t = this.t + a.t - n;
    r.s = 0; // assumes a,this >= 0
    while (--i >= 0) r[i] = 0;
    for (i = Math.max(n - this.t, 0); i < a.t; ++i)
        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
    r.clamp();
    r.drShiftTo(1, r);
}

//Barrett modular reduction
function Barrett(m) {
// setup Barrett
    this.r2 = nbi();
    this.q3 = nbi();
    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
    this.mu = this.r2.divide(m);
    this.m = m;
}

function barrettConvert(x) {
    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
    else if (x.compareTo(this.m) < 0) return x;
    else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
    }
}

function barrettRevert(x) {
    return x;
}

//x = x mod m (HAC 14.42)
function barrettReduce(x) {
    x.drShiftTo(this.m.t - 1, this.r2);
    if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
    }
    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);
    x.subTo(this.r2, x);
    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
}

//r = x^2 mod m; x != r
function barrettSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}

//r = x*y mod m; x,y != r
function barrettMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}

Barrett.prototype.convert = barrettConvert;
Barrett.prototype.revert = barrettRevert;
Barrett.prototype.reduce = barrettReduce;
Barrett.prototype.mulTo = barrettMulTo;
Barrett.prototype.sqrTo = barrettSqrTo;

//(public) this^e % m (HAC 14.85)
function bnModPow(e, m) {
    var i = e.bitLength(), k, r = nbv(1), z;
    if (i <= 0) return r;
    else if (i < 18) k = 1;
    else if (i < 48) k = 3;
    else if (i < 144) k = 4;
    else if (i < 768) k = 5;
    else k = 6;
    if (i < 8)
        z = new Classic(m);
    else if (m.isEven())
        z = new Barrett(m);
    else
        z = new Montgomery(m);

// precomputation
    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
    g[1] = z.convert(this);
    if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while (n <= km) {
            g[n] = nbi();
            z.mulTo(g2, g[n - 2], g[n]);
            n += 2;
        }
    }

    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
    i = nbits(e[j]) - 1;
    while (j >= 0) {
        if (i >= k1) w = (e[j] >> (i - k1)) & km;
        else {
            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
            if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);
        }

        n = k;
        while ((w & 1) === 0) {
            w >>= 1;
            --n;
        }
        if ((i -= n) < 0) {
            i += this.DB;
            --j;
        }
        if (is1) {	// ret == 1, don't bother squaring or multiplying it
            g[w].copyTo(r);
            is1 = false;
        }
        else {
            while (n > 1) {
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n -= 2;
            }
            if (n > 0) z.sqrTo(r, r2); else {
                t = r;
                r = r2;
                r2 = t;
            }
            z.mulTo(r2, g[w], r);
        }

        while (j >= 0 && (e[j] & (1 << i)) === 0) {
            z.sqrTo(r, r2);
            t = r;
            r = r2;
            r2 = t;
            if (--i < 0) {
                i = this.DB - 1;
                --j;
            }
        }
    }
    return z.revert(r);
}

//(public) gcd(this,a) (HAC 14.54)
function bnGCD(a) {
    var x = (this.s < 0) ? this.negate() : this.clone();
    var y = (a.s < 0) ? a.negate() : a.clone();
    if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
    }
    var i = x.getLowestSetBit(), g = y.getLowestSetBit();
    if (g < 0) return x;
    if (i < g) g = i;
    if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
    }
    while (x.signum() > 0) {
        if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
            x.subTo(y, x);
            x.rShiftTo(1, x);
        }
        else {
            y.subTo(x, y);
            y.rShiftTo(1, y);
        }
    }
    if (g > 0) y.lShiftTo(g, y);
    return y;
}

//(protected) this % n, n < 2^26
function bnpModInt(n) {
    if (n <= 0) return 0;
    var d = this.DV % n, r = (this.s < 0) ? n - 1 : 0;
    if (this.t > 0)
        if (d === 0) r = this[0] % n;
        else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;
    return r;
}

//(public) 1/this % m (HAC 14.61)
function bnModInverse(m) {
    var ac = m.isEven();
    if ((this.isEven() && ac) || m.signum() === 0) return BigInteger.ZERO;
    var u = m.clone(), v = this.clone();
    var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
    while (u.signum() != 0) {
        while (u.isEven()) {
            u.rShiftTo(1, u);
            if (ac) {
                if (!a.isEven() || !b.isEven()) {
                    a.addTo(this, a);
                    b.subTo(m, b);
                }
                a.rShiftTo(1, a);
            }
            else if (!b.isEven()) b.subTo(m, b);
            b.rShiftTo(1, b);
        }
        while (v.isEven()) {
            v.rShiftTo(1, v);
            if (ac) {
                if (!c.isEven() || !d.isEven()) {
                    c.addTo(this, c);
                    d.subTo(m, d);
                }
                c.rShiftTo(1, c);
            }
            else if (!d.isEven()) d.subTo(m, d);
            d.rShiftTo(1, d);
        }
        if (u.compareTo(v) >= 0) {
            u.subTo(v, u);
            if (ac) a.subTo(c, a);
            b.subTo(d, b);
        }
        else {
            v.subTo(u, v);
            if (ac) c.subTo(a, c);
            d.subTo(b, d);
        }
    }
    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
    if (d.compareTo(m) >= 0) return d.subtract(m);
    if (d.signum() < 0) d.addTo(m, d); else return d;
    if (d.signum() < 0) return d.add(m); else return d;
}

var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];

//(public) test primality with certainty >= 1-.5^t
function bnIsProbablePrime(t) {
    var i, x = this.abs();
    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
        for (i = 0; i < lowprimes.length; ++i)
            if (x[0] == lowprimes[i]) return true;
        return false;
    }
    if (x.isEven()) return false;
    i = 1;
    while (i < lowprimes.length) {
        var m = lowprimes[i], j = i + 1;
        while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];
        m = x.modInt(m);
        while (i < j) if (m % lowprimes[i++] === 0) return false;
    }
    return x.millerRabin(t);
}

//(protected) true if probably prime (HAC 4.24, Miller-Rabin)
function bnpMillerRabin(t) {
    var n1 = this.subtract(BigInteger.ONE);
    var k = n1.getLowestSetBit();
    if (k <= 0) return false;
    var r = n1.shiftRight(k);
    t = (t + 1) >> 1;
    if (t > lowprimes.length) t = lowprimes.length;
    var a = nbi();
    for (var i = 0; i < t; ++i) {
        //Pick bases at random, instead of starting at 2
        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
        var y = a.modPow(r, this);
        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
            var j = 1;
            while (j++ < k && y.compareTo(n1) != 0) {
                y = y.modPowInt(2, this);
                if (y.compareTo(BigInteger.ONE) === 0) return false;
            }
            if (y.compareTo(n1) != 0) return false;
        }
    }
    return true;
}

// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.fromByteArray = bnpFromByteArray;
BigInteger.prototype.fromBuffer = bnpFromBuffer;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;

BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.fromNumber = bnpFromNumber;
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
BigInteger.prototype.changeBit = bnpChangeBit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
BigInteger.prototype.modInt = bnpModInt;
BigInteger.prototype.millerRabin = bnpMillerRabin;


// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;

BigInteger.prototype.clone = bnClone;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.byteValue = bnByteValue;
BigInteger.prototype.shortValue = bnShortValue;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.toByteArray = bnToByteArray;
BigInteger.prototype.toBuffer = bnToBuffer;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.min = bnMin;
BigInteger.prototype.max = bnMax;
BigInteger.prototype.and = bnAnd;
BigInteger.prototype.or = bnOr;
BigInteger.prototype.xor = bnXor;
BigInteger.prototype.andNot = bnAndNot;
BigInteger.prototype.not = bnNot;
BigInteger.prototype.shiftLeft = bnShiftLeft;
BigInteger.prototype.shiftRight = bnShiftRight;
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
BigInteger.prototype.bitCount = bnBitCount;
BigInteger.prototype.testBit = bnTestBit;
BigInteger.prototype.setBit = bnSetBit;
BigInteger.prototype.clearBit = bnClearBit;
BigInteger.prototype.flipBit = bnFlipBit;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.remainder = bnRemainder;
BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
BigInteger.prototype.modPow = bnModPow;
BigInteger.prototype.modInverse = bnModInverse;
BigInteger.prototype.pow = bnPow;
BigInteger.prototype.gcd = bnGCD;
BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
BigInteger.int2char = int2char;

// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

// JSBN-specific extension
BigInteger.prototype.square = bnSquare;

//BigInteger interfaces not implemented in jsbn:

//BigInteger(int signum, byte[] magnitude)
//double doubleValue()
//float floatValue()
//int hashCode()
//long longValue()
//static BigInteger valueOf(long val)

module.exports = BigInteger;

/***/ }),

/***/ 64153:
/***/ ((module, exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
/*
 * RSA Encryption / Decryption with PKCS1 v2 Padding.
 * 
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */

/*
 * Node.js adaptation
 * long message support implementation
 * signing/verifying
 *
 * 2014 rzcoder
 */

var _ = (__webpack_require__(80222)._);
var crypt = __webpack_require__(6286);
var BigInteger = __webpack_require__(88359);
var utils = __webpack_require__(80222);
var schemes = __webpack_require__(87178);
var encryptEngines = __webpack_require__(42589);

exports.BigInteger = BigInteger;
module.exports.Key = (function () {
    /**
     * RSA key constructor
     *
     * n - modulus
     * e - publicExponent
     * d - privateExponent
     * p - prime1
     * q - prime2
     * dmp1 - exponent1 -- d mod (p1)
     * dmq1 - exponent2 -- d mod (q-1)
     * coeff - coefficient -- (inverse of q) mod p
     */
    function RSAKey() {
        this.n = null;
        this.e = 0;
        this.d = null;
        this.p = null;
        this.q = null;
        this.dmp1 = null;
        this.dmq1 = null;
        this.coeff = null;
    }

    RSAKey.prototype.setOptions = function (options) {
        var signingSchemeProvider = schemes[options.signingScheme];
        var encryptionSchemeProvider = schemes[options.encryptionScheme];

        if (signingSchemeProvider === encryptionSchemeProvider) {
            this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);
        } else {
            this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);
            this.signingScheme = signingSchemeProvider.makeScheme(this, options);
        }

        this.encryptEngine = encryptEngines.getEngine(this, options);
    };

    /**
     * Generate a new random private key B bits long, using public expt E
     * @param B
     * @param E
     */
    RSAKey.prototype.generate = function (B, E) {
        var qs = B >> 1;
        this.e = parseInt(E, 16);
        var ee = new BigInteger(E, 16);
        while (true) {
            while (true) {
                this.p = new BigInteger(B - qs, 1);
                if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.p.isProbablePrime(10))
                    break;
            }
            while (true) {
                this.q = new BigInteger(qs, 1);
                if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.q.isProbablePrime(10))
                    break;
            }
            if (this.p.compareTo(this.q) <= 0) {
                var t = this.p;
                this.p = this.q;
                this.q = t;
            }
            var p1 = this.p.subtract(BigInteger.ONE);
            var q1 = this.q.subtract(BigInteger.ONE);
            var phi = p1.multiply(q1);
            if (phi.gcd(ee).compareTo(BigInteger.ONE) === 0) {
                this.n = this.p.multiply(this.q);
                if (this.n.bitLength() < B) {
                    continue;
                }
                this.d = ee.modInverse(phi);
                this.dmp1 = this.d.mod(p1);
                this.dmq1 = this.d.mod(q1);
                this.coeff = this.q.modInverse(this.p);
                break;
            }
        }
        this.$$recalculateCache();
    };

    /**
     * Set the private key fields N, e, d and CRT params from buffers
     *
     * @param N
     * @param E
     * @param D
     * @param P
     * @param Q
     * @param DP
     * @param DQ
     * @param C
     */
    RSAKey.prototype.setPrivate = function (N, E, D, P, Q, DP, DQ, C) {
        if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {
            this.n = new BigInteger(N);
            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);
            this.d = new BigInteger(D);

            if (P && Q && DP && DQ && C) {
                this.p = new BigInteger(P);
                this.q = new BigInteger(Q);
                this.dmp1 = new BigInteger(DP);
                this.dmq1 = new BigInteger(DQ);
                this.coeff = new BigInteger(C);
            } else {
                // TODO: re-calculate any missing CRT params
            }
            this.$$recalculateCache();
        } else {
            throw Error("Invalid RSA private key");
        }
    };

    /**
     * Set the public key fields N and e from hex strings
     * @param N
     * @param E
     */
    RSAKey.prototype.setPublic = function (N, E) {
        if (N && E && N.length > 0 && (_.isNumber(E) || E.length > 0)) {
            this.n = new BigInteger(N);
            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);
            this.$$recalculateCache();
        } else {
            throw Error("Invalid RSA public key");
        }
    };

    /**
     * private
     * Perform raw private operation on "x": return x^d (mod n)
     *
     * @param x
     * @returns {*}
     */
    RSAKey.prototype.$doPrivate = function (x) {
        if (this.p || this.q) {
            return x.modPow(this.d, this.n);
        }

        // TODO: re-calculate any missing CRT params
        var xp = x.mod(this.p).modPow(this.dmp1, this.p);
        var xq = x.mod(this.q).modPow(this.dmq1, this.q);

        while (xp.compareTo(xq) < 0) {
            xp = xp.add(this.p);
        }
        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);
    };

    /**
     * private
     * Perform raw public operation on "x": return x^e (mod n)
     *
     * @param x
     * @returns {*}
     */
    RSAKey.prototype.$doPublic = function (x) {
        return x.modPowInt(this.e, this.n);
    };

    /**
     * Return the PKCS#1 RSA encryption of buffer
     * @param buffer {Buffer}
     * @returns {Buffer}
     */
    RSAKey.prototype.encrypt = function (buffer, usePrivate) {
        var buffers = [];
        var results = [];
        var bufferSize = buffer.length;
        var buffersCount = Math.ceil(bufferSize / this.maxMessageLength) || 1; // total buffers count for encrypt
        var dividedSize = Math.ceil(bufferSize / buffersCount || 1); // each buffer size

        if (buffersCount == 1) {
            buffers.push(buffer);
        } else {
            for (var bufNum = 0; bufNum < buffersCount; bufNum++) {
                buffers.push(buffer.slice(bufNum * dividedSize, (bufNum + 1) * dividedSize));
            }
        }

        for (var i = 0; i < buffers.length; i++) {
            results.push(this.encryptEngine.encrypt(buffers[i], usePrivate));
        }

        return Buffer.concat(results);
    };

    /**
     * Return the PKCS#1 RSA decryption of buffer
     * @param buffer {Buffer}
     * @returns {Buffer}
     */
    RSAKey.prototype.decrypt = function (buffer, usePublic) {
        if (buffer.length % this.encryptedDataLength > 0) {
            throw Error('Incorrect data or key');
        }

        var result = [];
        var offset = 0;
        var length = 0;
        var buffersCount = buffer.length / this.encryptedDataLength;

        for (var i = 0; i < buffersCount; i++) {
            offset = i * this.encryptedDataLength;
            length = offset + this.encryptedDataLength;
            result.push(this.encryptEngine.decrypt(buffer.slice(offset, Math.min(length, buffer.length)), usePublic));
        }

        return Buffer.concat(result);
    };

    RSAKey.prototype.sign = function (buffer) {
        return this.signingScheme.sign.apply(this.signingScheme, arguments);
    };

    RSAKey.prototype.verify = function (buffer, signature, signature_encoding) {
        return this.signingScheme.verify.apply(this.signingScheme, arguments);
    };

    /**
     * Check if key pair contains private key
     */
    RSAKey.prototype.isPrivate = function () {
        return this.n && this.e && this.d && true || false;
    };

    /**
     * Check if key pair contains public key
     * @param strict {boolean} - public key only, return false if have private exponent
     */
    RSAKey.prototype.isPublic = function (strict) {
        return this.n && this.e && !(strict && this.d) || false;
    };

    Object.defineProperty(RSAKey.prototype, 'keySize', {
        get: function () {
            return this.cache.keyBitLength;
        }
    });

    Object.defineProperty(RSAKey.prototype, 'encryptedDataLength', {
        get: function () {
            return this.cache.keyByteLength;
        }
    });

    Object.defineProperty(RSAKey.prototype, 'maxMessageLength', {
        get: function () {
            return this.encryptionScheme.maxMessageLength();
        }
    });

    /**
     * Caching key data
     */
    RSAKey.prototype.$$recalculateCache = function () {
        this.cache = this.cache || {};
        // Bit & byte length
        this.cache.keyBitLength = this.n.bitLength();
        this.cache.keyByteLength = (this.cache.keyBitLength + 6) >> 3;
    };

    return RSAKey;
})();



/***/ }),

/***/ 6400:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
/**
 * PKCS_OAEP signature scheme
 */

var BigInteger = __webpack_require__(88359);
var crypt = __webpack_require__(59358);

module.exports = {
    isEncryption: true,
    isSignature: false
};

module.exports.digestLength = {
    md4: 16,
    md5: 16,
    ripemd160: 20,
    rmd160: 20,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64
};

var DEFAULT_HASH_FUNCTION = 'sha1';

/*
 * OAEP Mask Generation Function 1
 * Generates a buffer full of pseudorandom bytes given seed and maskLength.
 * Giving the same seed, maskLength, and hashFunction will result in the same exact byte values in the buffer.
 *
 * https://tools.ietf.org/html/rfc3447#appendix-B.2.1
 *
 * Parameters:
 * seed			[Buffer]	The pseudo random seed for this function
 * maskLength	[int]		The length of the output
 * hashFunction	[String]	The hashing function to use. Will accept any valid crypto hash. Default "sha1"
 *		Supports "sha1" and "sha256".
 *		To add another algorythm the algorythem must be accepted by crypto.createHash, and then the length of the output of the hash function (the digest) must be added to the digestLength object below.
 *		Most RSA implementations will be expecting sha1
 */
module.exports.eme_oaep_mgf1 = function (seed, maskLength, hashFunction) {
    hashFunction = hashFunction || DEFAULT_HASH_FUNCTION;
    var hLen = module.exports.digestLength[hashFunction];
    var count = Math.ceil(maskLength / hLen);
    var T = Buffer.alloc(hLen * count);
    var c = Buffer.alloc(4);
    for (var i = 0; i < count; ++i) {
        var hash = crypt.createHash(hashFunction);
        hash.update(seed);
        c.writeUInt32BE(i, 0);
        hash.update(c);
        hash.digest().copy(T, i * hLen);
    }
    return T.slice(0, maskLength);
};

module.exports.makeScheme = function (key, options) {
    function Scheme(key, options) {
        this.key = key;
        this.options = options;
    }

    Scheme.prototype.maxMessageLength = function () {
        return this.key.encryptedDataLength - 2 * module.exports.digestLength[this.options.encryptionSchemeOptions.hash || DEFAULT_HASH_FUNCTION] - 2;
    };

    /**
     * Pad input
     * alg: PKCS1_OAEP
     *
     * https://tools.ietf.org/html/rfc3447#section-7.1.1
     */
    Scheme.prototype.encPad = function (buffer) {
        var hash = this.options.encryptionSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        var mgf = this.options.encryptionSchemeOptions.mgf || module.exports.eme_oaep_mgf1;
        var label = this.options.encryptionSchemeOptions.label || Buffer.alloc(0);
        var emLen = this.key.encryptedDataLength;

        var hLen = module.exports.digestLength[hash];

        // Make sure we can put message into an encoded message of emLen bytes
        if (buffer.length > emLen - 2 * hLen - 2) {
            throw new Error("Message is too long to encode into an encoded message with a length of " + emLen + " bytes, increase" +
            "emLen to fix this error (minimum value for given parameters and options: " + (emLen - 2 * hLen - 2) + ")");
        }

        var lHash = crypt.createHash(hash);
        lHash.update(label);
        lHash = lHash.digest();

        var PS = Buffer.alloc(emLen - buffer.length - 2 * hLen - 1); // Padding "String"
        PS.fill(0); // Fill the buffer with octets of 0
        PS[PS.length - 1] = 1;

        var DB = Buffer.concat([lHash, PS, buffer]);
        var seed = crypt.randomBytes(hLen);

        // mask = dbMask
        var mask = mgf(seed, DB.length, hash);
        // XOR DB and dbMask together.
        for (var i = 0; i < DB.length; i++) {
            DB[i] ^= mask[i];
        }
        // DB = maskedDB

        // mask = seedMask
        mask = mgf(DB, hLen, hash);
        // XOR seed and seedMask together.
        for (i = 0; i < seed.length; i++) {
            seed[i] ^= mask[i];
        }
        // seed = maskedSeed

        var em = Buffer.alloc(1 + seed.length + DB.length);
        em[0] = 0;
        seed.copy(em, 1);
        DB.copy(em, 1 + seed.length);

        return em;
    };

    /**
     * Unpad input
     * alg: PKCS1_OAEP
     *
     * Note: This method works within the buffer given and modifies the values. It also returns a slice of the EM as the return Message.
     * If the implementation requires that the EM parameter be unmodified then the implementation should pass in a clone of the EM buffer.
     *
     * https://tools.ietf.org/html/rfc3447#section-7.1.2
     */
    Scheme.prototype.encUnPad = function (buffer) {
        var hash = this.options.encryptionSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        var mgf = this.options.encryptionSchemeOptions.mgf || module.exports.eme_oaep_mgf1;
        var label = this.options.encryptionSchemeOptions.label || Buffer.alloc(0);

        var hLen = module.exports.digestLength[hash];

        // Check to see if buffer is a properly encoded OAEP message
        if (buffer.length < 2 * hLen + 2) {
            throw new Error("Error decoding message, the supplied message is not long enough to be a valid OAEP encoded message");
        }

        var seed = buffer.slice(1, hLen + 1);	// seed = maskedSeed
        var DB = buffer.slice(1 + hLen);		// DB = maskedDB

        var mask = mgf(DB, hLen, hash); // seedMask
        // XOR maskedSeed and seedMask together to get the original seed.
        for (var i = 0; i < seed.length; i++) {
            seed[i] ^= mask[i];
        }

        mask = mgf(seed, DB.length, hash); // dbMask
        // XOR DB and dbMask together to get the original data block.
        for (i = 0; i < DB.length; i++) {
            DB[i] ^= mask[i];
        }

        var lHash = crypt.createHash(hash);
        lHash.update(label);
        lHash = lHash.digest();

        var lHashEM = DB.slice(0, hLen);
        if (lHashEM.toString("hex") != lHash.toString("hex")) {
            throw new Error("Error decoding message, the lHash calculated from the label provided and the lHash in the encrypted data do not match.");
        }

        // Filter out padding
        i = hLen;
        while (DB[i++] === 0 && i < DB.length);
        if (DB[i - 1] != 1) {
            throw new Error("Error decoding message, there is no padding message separator byte");
        }

        return DB.slice(i); // Message
    };

    return new Scheme(key, options);
};


/***/ }),

/***/ 51067:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
/**
 * PKCS1 padding and signature scheme
 */

var BigInteger = __webpack_require__(88359);
var crypt = __webpack_require__(59358);
var constants = __webpack_require__(18288);
var SIGN_INFO_HEAD = {
    md2: Buffer.from('3020300c06082a864886f70d020205000410', 'hex'),
    md5: Buffer.from('3020300c06082a864886f70d020505000410', 'hex'),
    sha1: Buffer.from('3021300906052b0e03021a05000414', 'hex'),
    sha224: Buffer.from('302d300d06096086480165030402040500041c', 'hex'),
    sha256: Buffer.from('3031300d060960864801650304020105000420', 'hex'),
    sha384: Buffer.from('3041300d060960864801650304020205000430', 'hex'),
    sha512: Buffer.from('3051300d060960864801650304020305000440', 'hex'),
    ripemd160: Buffer.from('3021300906052b2403020105000414', 'hex'),
    rmd160: Buffer.from('3021300906052b2403020105000414', 'hex')
};

var SIGN_ALG_TO_HASH_ALIASES = {
    'ripemd160': 'rmd160'
};

var DEFAULT_HASH_FUNCTION = 'sha256';

module.exports = {
    isEncryption: true,
    isSignature: true
};

module.exports.makeScheme = function (key, options) {
    function Scheme(key, options) {
        this.key = key;
        this.options = options;
    }

    Scheme.prototype.maxMessageLength = function () {
        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            return this.key.encryptedDataLength;
        }
        return this.key.encryptedDataLength - 11;
    };

    /**
     * Pad input Buffer to encryptedDataLength bytes, and return Buffer.from
     * alg: PKCS#1
     * @param buffer
     * @returns {Buffer}
     */
    Scheme.prototype.encPad = function (buffer, options) {
        options = options || {};
        var filled;
        if (buffer.length > this.key.maxMessageLength) {
            throw new Error("Message too long for RSA (n=" + this.key.encryptedDataLength + ", l=" + buffer.length + ")");
        }
        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            //RSA_NO_PADDING treated like JAVA left pad with zero character
            filled = Buffer.alloc(this.key.maxMessageLength - buffer.length);
            filled.fill(0);
            return Buffer.concat([filled, buffer]);
        }

        /* Type 1: zeros padding for private key encrypt */
        if (options.type === 1) {
            filled = Buffer.alloc(this.key.encryptedDataLength - buffer.length - 1);
            filled.fill(0xff, 0, filled.length - 1);
            filled[0] = 1;
            filled[filled.length - 1] = 0;

            return Buffer.concat([filled, buffer]);
        } else {
            /* random padding for public key encrypt */
            filled = Buffer.alloc(this.key.encryptedDataLength - buffer.length);
            filled[0] = 0;
            filled[1] = 2;
            var rand = crypt.randomBytes(filled.length - 3);
            for (var i = 0; i < rand.length; i++) {
                var r = rand[i];
                while (r === 0) { // non-zero only
                    r = crypt.randomBytes(1)[0];
                }
                filled[i + 2] = r;
            }
            filled[filled.length - 1] = 0;
            return Buffer.concat([filled, buffer]);
        }
    };

    /**
     * Unpad input Buffer and, if valid, return the Buffer object
     * alg: PKCS#1 (type 2, random)
     * @param buffer
     * @returns {Buffer}
     */
    Scheme.prototype.encUnPad = function (buffer, options) {
        options = options || {};
        var i = 0;

        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            //RSA_NO_PADDING treated like JAVA left pad with zero character
            var unPad;
            if (typeof buffer.lastIndexOf == "function") { //patch for old node version
                unPad = buffer.slice(buffer.lastIndexOf('\0') + 1, buffer.length);
            } else {
                unPad = buffer.slice(String.prototype.lastIndexOf.call(buffer, '\0') + 1, buffer.length);
            }
            return unPad;
        }

        if (buffer.length < 4) {
            return null;
        }

        /* Type 1: zeros padding for private key decrypt */
        if (options.type === 1) {
            if (buffer[0] !== 0 || buffer[1] !== 1) {
                return null;
            }
            i = 3;
            while (buffer[i] !== 0) {
                if (buffer[i] != 0xFF || ++i >= buffer.length) {
                    return null;
                }
            }
        } else {
            /* random padding for public key decrypt */
            if (buffer[0] !== 0 || buffer[1] !== 2) {
                return null;
            }
            i = 3;
            while (buffer[i] !== 0) {
                if (++i >= buffer.length) {
                    return null;
                }
            }
        }
        return buffer.slice(i + 1, buffer.length);
    };

    Scheme.prototype.sign = function (buffer) {
        var hashAlgorithm = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        if (this.options.environment === 'browser') {
            hashAlgorithm = SIGN_ALG_TO_HASH_ALIASES[hashAlgorithm] || hashAlgorithm;

            var hasher = crypt.createHash(hashAlgorithm);
            hasher.update(buffer);
            var hash = this.pkcs1pad(hasher.digest(), hashAlgorithm);
            var res = this.key.$doPrivate(new BigInteger(hash)).toBuffer(this.key.encryptedDataLength);

            return res;
        } else {
            var signer = crypt.createSign('RSA-' + hashAlgorithm.toUpperCase());
            signer.update(buffer);
            return signer.sign(this.options.rsaUtils.exportKey('private'));
        }
    };

    Scheme.prototype.verify = function (buffer, signature, signature_encoding) {
        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            //RSA_NO_PADDING has no verify data
            return false;
        }
        var hashAlgorithm = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        if (this.options.environment === 'browser') {
            hashAlgorithm = SIGN_ALG_TO_HASH_ALIASES[hashAlgorithm] || hashAlgorithm;

            if (signature_encoding) {
                signature = Buffer.from(signature, signature_encoding);
            }

            var hasher = crypt.createHash(hashAlgorithm);
            hasher.update(buffer);
            var hash = this.pkcs1pad(hasher.digest(), hashAlgorithm);
            var m = this.key.$doPublic(new BigInteger(signature));

            return m.toBuffer().toString('hex') == hash.toString('hex');
        } else {
            var verifier = crypt.createVerify('RSA-' + hashAlgorithm.toUpperCase());
            verifier.update(buffer);
            return verifier.verify(this.options.rsaUtils.exportKey('public'), signature, signature_encoding);
        }
    };

    /**
     * PKCS#1 zero pad input buffer to max data length
     * @param hashBuf
     * @param hashAlgorithm
     * @returns {*}
     */
    Scheme.prototype.pkcs0pad = function (buffer) {
        var filled = Buffer.alloc(this.key.maxMessageLength - buffer.length);
        filled.fill(0);
        return Buffer.concat([filled, buffer]);
    };

    Scheme.prototype.pkcs0unpad = function (buffer) {
        var unPad;
        if (typeof buffer.lastIndexOf == "function") { //patch for old node version
            unPad = buffer.slice(buffer.lastIndexOf('\0') + 1, buffer.length);
        } else {
            unPad = buffer.slice(String.prototype.lastIndexOf.call(buffer, '\0') + 1, buffer.length);
        }

        return unPad;
    };

    /**
     * PKCS#1 pad input buffer to max data length
     * @param hashBuf
     * @param hashAlgorithm
     * @returns {*}
     */
    Scheme.prototype.pkcs1pad = function (hashBuf, hashAlgorithm) {
        var digest = SIGN_INFO_HEAD[hashAlgorithm];
        if (!digest) {
            throw Error('Unsupported hash algorithm');
        }

        var data = Buffer.concat([digest, hashBuf]);

        if (data.length + 10 > this.key.encryptedDataLength) {
            throw Error('Key is too short for signing algorithm (' + hashAlgorithm + ')');
        }

        var filled = Buffer.alloc(this.key.encryptedDataLength - data.length - 1);
        filled.fill(0xff, 0, filled.length - 1);
        filled[0] = 1;
        filled[filled.length - 1] = 0;

        var res = Buffer.concat([filled, data]);

        return res;
    };

    return new Scheme(key, options);
};




/***/ }),

/***/ 52085:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
/**
 * PSS signature scheme
 */

var BigInteger = __webpack_require__(88359);
var crypt = __webpack_require__(59358);

module.exports = {
    isEncryption: false,
    isSignature: true
};

var DEFAULT_HASH_FUNCTION = 'sha1';
var DEFAULT_SALT_LENGTH = 20;

module.exports.makeScheme = function (key, options) {
    var OAEP = (__webpack_require__(87178).pkcs1_oaep);

    /**
     * @param key
     * @param options
     * options    [Object]    An object that contains the following keys that specify certain options for encoding.
     *  └>signingSchemeOptions
     *     ├>hash    [String]    Hash function to use when encoding and generating masks. Must be a string accepted by node's crypto.createHash function. (default = "sha1")
     *     ├>mgf    [function]    The mask generation function to use when encoding. (default = mgf1SHA1)
     *     └>sLen    [uint]        The length of the salt to generate. (default = 20)
     * @constructor
     */
    function Scheme(key, options) {
        this.key = key;
        this.options = options;
    }

    Scheme.prototype.sign = function (buffer) {
        var mHash = crypt.createHash(this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION);
        mHash.update(buffer);

        var encoded = this.emsa_pss_encode(mHash.digest(), this.key.keySize - 1);
        return this.key.$doPrivate(new BigInteger(encoded)).toBuffer(this.key.encryptedDataLength);
    };

    Scheme.prototype.verify = function (buffer, signature, signature_encoding) {
        if (signature_encoding) {
            signature = Buffer.from(signature, signature_encoding);
        }
        signature = new BigInteger(signature);

        var emLen = Math.ceil((this.key.keySize - 1) / 8);
        var m = this.key.$doPublic(signature).toBuffer(emLen);

        var mHash = crypt.createHash(this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION);
        mHash.update(buffer);

        return this.emsa_pss_verify(mHash.digest(), m, this.key.keySize - 1);
    };

    /*
     * https://tools.ietf.org/html/rfc3447#section-9.1.1
     *
     * mHash	[Buffer]	Hashed message to encode
     * emBits	[uint]		Maximum length of output in bits. Must be at least 8hLen + 8sLen + 9 (hLen = Hash digest length in bytes | sLen = length of salt in bytes)
     * @returns {Buffer} The encoded message
     */
    Scheme.prototype.emsa_pss_encode = function (mHash, emBits) {
        var hash = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        var mgf = this.options.signingSchemeOptions.mgf || OAEP.eme_oaep_mgf1;
        var sLen = this.options.signingSchemeOptions.saltLength || DEFAULT_SALT_LENGTH;

        var hLen = OAEP.digestLength[hash];
        var emLen = Math.ceil(emBits / 8);

        if (emLen < hLen + sLen + 2) {
            throw new Error("Output length passed to emBits(" + emBits + ") is too small for the options " +
                "specified(" + hash + ", " + sLen + "). To fix this issue increase the value of emBits. (minimum size: " +
                (8 * hLen + 8 * sLen + 9) + ")"
            );
        }

        var salt = crypt.randomBytes(sLen);

        var Mapostrophe = Buffer.alloc(8 + hLen + sLen);
        Mapostrophe.fill(0, 0, 8);
        mHash.copy(Mapostrophe, 8);
        salt.copy(Mapostrophe, 8 + mHash.length);

        var H = crypt.createHash(hash);
        H.update(Mapostrophe);
        H = H.digest();

        var PS = Buffer.alloc(emLen - salt.length - hLen - 2);
        PS.fill(0);

        var DB = Buffer.alloc(PS.length + 1 + salt.length);
        PS.copy(DB);
        DB[PS.length] = 0x01;
        salt.copy(DB, PS.length + 1);

        var dbMask = mgf(H, DB.length, hash);

        // XOR DB and dbMask together
        var maskedDB = Buffer.alloc(DB.length);
        for (var i = 0; i < dbMask.length; i++) {
            maskedDB[i] = DB[i] ^ dbMask[i];
        }

        var bits = 8 * emLen - emBits;
        var mask = 255 ^ (255 >> 8 - bits << 8 - bits);
        maskedDB[0] = maskedDB[0] & mask;

        var EM = Buffer.alloc(maskedDB.length + H.length + 1);
        maskedDB.copy(EM, 0);
        H.copy(EM, maskedDB.length);
        EM[EM.length - 1] = 0xbc;

        return EM;
    };

    /*
     * https://tools.ietf.org/html/rfc3447#section-9.1.2
     *
     * mHash	[Buffer]	Hashed message
     * EM		[Buffer]	Signature
     * emBits	[uint]		Length of EM in bits. Must be at least 8hLen + 8sLen + 9 to be a valid signature. (hLen = Hash digest length in bytes | sLen = length of salt in bytes)
     * @returns {Boolean} True if signature(EM) matches message(M)
     */
    Scheme.prototype.emsa_pss_verify = function (mHash, EM, emBits) {
        var hash = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        var mgf = this.options.signingSchemeOptions.mgf || OAEP.eme_oaep_mgf1;
        var sLen = this.options.signingSchemeOptions.saltLength || DEFAULT_SALT_LENGTH;

        var hLen = OAEP.digestLength[hash];
        var emLen = Math.ceil(emBits / 8);

        if (emLen < hLen + sLen + 2 || EM[EM.length - 1] != 0xbc) {
            return false;
        }

        var DB = Buffer.alloc(emLen - hLen - 1);
        EM.copy(DB, 0, 0, emLen - hLen - 1);

        var mask = 0;
        for (var i = 0, bits = 8 * emLen - emBits; i < bits; i++) {
            mask |= 1 << (7 - i);
        }

        if ((DB[0] & mask) !== 0) {
            return false;
        }

        var H = EM.slice(emLen - hLen - 1, emLen - 1);
        var dbMask = mgf(H, DB.length, hash);

        // Unmask DB
        for (i = 0; i < DB.length; i++) {
            DB[i] ^= dbMask[i];
        }

        bits = 8 * emLen - emBits;
        mask = 255 ^ (255 >> 8 - bits << 8 - bits);
        DB[0] = DB[0] & mask;

        // Filter out padding
        for (i = 0; DB[i] === 0 && i < DB.length; i++);
        if (DB[i] != 1) {
            return false;
        }

        var salt = DB.slice(DB.length - sLen);

        var Mapostrophe = Buffer.alloc(8 + hLen + sLen);
        Mapostrophe.fill(0, 0, 8);
        mHash.copy(Mapostrophe, 8);
        salt.copy(Mapostrophe, 8 + mHash.length);

        var Hapostrophe = crypt.createHash(hash);
        Hapostrophe.update(Mapostrophe);
        Hapostrophe = Hapostrophe.digest();

        return H.toString("hex") === Hapostrophe.toString("hex");
    };

    return new Scheme(key, options);
};


/***/ }),

/***/ 87178:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = {
    pkcs1: __webpack_require__(51067),
    pkcs1_oaep: __webpack_require__(6400),
    pss: __webpack_require__(52085),

    /**
     * Check if scheme has padding methods
     * @param scheme {string}
     * @returns {Boolean}
     */
    isEncryption: function (scheme) {
        return module.exports[scheme] && module.exports[scheme].isEncryption;
    },

    /**
     * Check if scheme has sign/verify methods
     * @param scheme {string}
     * @returns {Boolean}
     */
    isSignature: function (scheme) {
        return module.exports[scheme] && module.exports[scheme].isSignature;
    }
};

/***/ }),

/***/ 80222:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(27061);
/*
 * Utils functions
 *
 */

var crypt = __webpack_require__(29552);

/**
 * Break string str each maxLen symbols
 * @param str
 * @param maxLen
 * @returns {string}
 */
module.exports.linebrk = function (str, maxLen) {
    var res = '';
    var i = 0;
    while (i + maxLen < str.length) {
        res += str.substring(i, i + maxLen) + "\n";
        i += maxLen;
    }
    return res + str.substring(i, str.length);
};

module.exports.detectEnvironment = function () {
    if (typeof(window) !== 'undefined' && window && !(process && process.title === 'node')) {
        return 'browser';
    }

    return 'node';
};

/**
 * Trying get a 32-bit unsigned integer from the partial buffer
 * @param buffer
 * @param offset
 * @returns {Number}
 */
module.exports.get32IntFromBuffer = function (buffer, offset) {
    offset = offset || 0;
    var size = 0;
    if ((size = buffer.length - offset) > 0) {
        if (size >= 4) {
            return buffer.readUIntBE(offset, size);
        } else {
            var res = 0;
            for (var i = offset + size, d = 0; i > offset; i--, d += 2) {
                res += buffer[i - 1] * Math.pow(16, d);
            }
            return res;
        }
    } else {
        return NaN;
    }
};

module.exports._ = {
    isObject: function (value) {
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
    },

    isString: function (value) {
        return typeof value == 'string' || value instanceof String;
    },

    isNumber: function (value) {
        return typeof value == 'number' || !isNaN(parseFloat(value)) && isFinite(value);
    },

    /**
     * Returns copy of `obj` without `removeProp` field.
     * @param obj
     * @param removeProp
     * @returns Object
     */
    omit: function (obj, removeProp) {
        var newObj = {};
        for (var prop in obj) {
            if (!obj.hasOwnProperty(prop) || prop === removeProp) {
                continue;
            }
            newObj[prop] = obj[prop];
        }

        return newObj;
    }
};

/**
 * Strips everything around the opening and closing lines, including the lines
 * themselves.
 */
module.exports.trimSurroundingText = function (data, opening, closing) {
    var trimStartIndex = 0;
    var trimEndIndex = data.length;

    var openingBoundaryIndex = data.indexOf(opening);
    if (openingBoundaryIndex >= 0) {
        trimStartIndex = openingBoundaryIndex + opening.length;
    }

    var closingBoundaryIndex = data.indexOf(closing, openingBoundaryIndex);
    if (closingBoundaryIndex >= 0) {
        trimEndIndex = closingBoundaryIndex;
    }

    return data.substring(trimStartIndex, trimEndIndex);
}

/***/ }),

/***/ 60836:
/***/ ((module) => {

"use strict";


var numberIsNaN = function (value) {
	return value !== value;
};

module.exports = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};



/***/ }),

/***/ 83822:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(67392);
var callBind = __webpack_require__(34573);

var implementation = __webpack_require__(60836);
var getPolyfill = __webpack_require__(11800);
var shim = __webpack_require__(27894);

var polyfill = callBind(getPolyfill(), Object);

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ 11800:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(60836);

module.exports = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation;
};


/***/ }),

/***/ 27894:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getPolyfill = __webpack_require__(11800);
var define = __webpack_require__(67392);

module.exports = function shimObjectIs() {
	var polyfill = getPolyfill();
	define(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ 89538:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(71030); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ 44733:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(71030);

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(89538);

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ 71030:
/***/ ((module) => {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ 4132:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wrappy = __webpack_require__(67477)
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}


/***/ }),

/***/ 54167:
/***/ ((__unused_webpack_module, exports) => {

exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
	return '/'
};


/***/ }),

/***/ 67425:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;


/***/ }),

/***/ 58265:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PerformanceObserver": () => (/* binding */ PerformanceObserver),
/* harmony export */   "performance": () => (/* binding */ performance)
/* harmony export */ });
const { PerformanceObserver, performance } = globalThis;


/***/ }),

/***/ 27061:
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ 52830:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);


// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = (__webpack_require__(27172).Buffer)
var crypto = __webpack_require__.g.crypto || __webpack_require__.g.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}


/***/ }),

/***/ 86248:
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ 27172:
/***/ ((module, exports, __webpack_require__) => {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(30816)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ 21788:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);
/* eslint-disable node/no-deprecated-api */



var buffer = __webpack_require__(30816)
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer


/***/ }),

/***/ 43134:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const ANY = Symbol('SemVer ANY')
// hoisted class for cyclic dependency
class Comparator {
  static get ANY () {
    return ANY
  }

  constructor (comp, options) {
    options = parseOptions(options)

    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp
      } else {
        comp = comp.value
      }
    }

    debug('comparator', comp, options)
    this.options = options
    this.loose = !!options.loose
    this.parse(comp)

    if (this.semver === ANY) {
      this.value = ''
    } else {
      this.value = this.operator + this.semver.version
    }

    debug('comp', this)
  }

  parse (comp) {
    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
    const m = comp.match(r)

    if (!m) {
      throw new TypeError(`Invalid comparator: ${comp}`)
    }

    this.operator = m[1] !== undefined ? m[1] : ''
    if (this.operator === '=') {
      this.operator = ''
    }

    // if it literally is just '>' or '' then allow anything.
    if (!m[2]) {
      this.semver = ANY
    } else {
      this.semver = new SemVer(m[2], this.options.loose)
    }
  }

  toString () {
    return this.value
  }

  test (version) {
    debug('Comparator.test', version, this.options.loose)

    if (this.semver === ANY || version === ANY) {
      return true
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    return cmp(version, this.operator, this.semver, this.options)
  }

  intersects (comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError('a Comparator is required')
    }

    if (!options || typeof options !== 'object') {
      options = {
        loose: !!options,
        includePrerelease: false,
      }
    }

    if (this.operator === '') {
      if (this.value === '') {
        return true
      }
      return new Range(comp.value, options).test(this.value)
    } else if (comp.operator === '') {
      if (comp.value === '') {
        return true
      }
      return new Range(this.value, options).test(comp.semver)
    }

    const sameDirectionIncreasing =
      (this.operator === '>=' || this.operator === '>') &&
      (comp.operator === '>=' || comp.operator === '>')
    const sameDirectionDecreasing =
      (this.operator === '<=' || this.operator === '<') &&
      (comp.operator === '<=' || comp.operator === '<')
    const sameSemVer = this.semver.version === comp.semver.version
    const differentDirectionsInclusive =
      (this.operator === '>=' || this.operator === '<=') &&
      (comp.operator === '>=' || comp.operator === '<=')
    const oppositeDirectionsLessThan =
      cmp(this.semver, '<', comp.semver, options) &&
      (this.operator === '>=' || this.operator === '>') &&
        (comp.operator === '<=' || comp.operator === '<')
    const oppositeDirectionsGreaterThan =
      cmp(this.semver, '>', comp.semver, options) &&
      (this.operator === '<=' || this.operator === '<') &&
        (comp.operator === '>=' || comp.operator === '>')

    return (
      sameDirectionIncreasing ||
      sameDirectionDecreasing ||
      (sameSemVer && differentDirectionsInclusive) ||
      oppositeDirectionsLessThan ||
      oppositeDirectionsGreaterThan
    )
  }
}

module.exports = Comparator

const parseOptions = __webpack_require__(48716)
const { re, t } = __webpack_require__(19022)
const cmp = __webpack_require__(35452)
const debug = __webpack_require__(46830)
const SemVer = __webpack_require__(89510)
const Range = __webpack_require__(87374)


/***/ }),

/***/ 87374:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// hoisted class for cyclic dependency
class Range {
  constructor (range, options) {
    options = parseOptions(options)

    if (range instanceof Range) {
      if (
        range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease
      ) {
        return range
      } else {
        return new Range(range.raw, options)
      }
    }

    if (range instanceof Comparator) {
      // just put it in the set and return
      this.raw = range.value
      this.set = [[range]]
      this.format()
      return this
    }

    this.options = options
    this.loose = !!options.loose
    this.includePrerelease = !!options.includePrerelease

    // First, split based on boolean or ||
    this.raw = range
    this.set = range
      .split('||')
      // map the range to a 2d array of comparators
      .map(r => this.parseRange(r.trim()))
      // throw out any comparator lists that are empty
      // this generally means that it was not a valid range, which is allowed
      // in loose mode, but will still throw if the WHOLE range is invalid.
      .filter(c => c.length)

    if (!this.set.length) {
      throw new TypeError(`Invalid SemVer Range: ${range}`)
    }

    // if we have any that are not the null set, throw out null sets.
    if (this.set.length > 1) {
      // keep the first one, in case they're all null sets
      const first = this.set[0]
      this.set = this.set.filter(c => !isNullSet(c[0]))
      if (this.set.length === 0) {
        this.set = [first]
      } else if (this.set.length > 1) {
        // if we have any that are *, then the range is just *
        for (const c of this.set) {
          if (c.length === 1 && isAny(c[0])) {
            this.set = [c]
            break
          }
        }
      }
    }

    this.format()
  }

  format () {
    this.range = this.set
      .map((comps) => {
        return comps.join(' ').trim()
      })
      .join('||')
      .trim()
    return this.range
  }

  toString () {
    return this.range
  }

  parseRange (range) {
    range = range.trim()

    // memoize range parsing for performance.
    // this is a very hot path, and fully deterministic.
    const memoOpts = Object.keys(this.options).join(',')
    const memoKey = `parseRange:${memoOpts}:${range}`
    const cached = cache.get(memoKey)
    if (cached) {
      return cached
    }

    const loose = this.options.loose
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))
    debug('hyphen replace', range)
    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
    debug('comparator trim', range)

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(re[t.CARETTRIM], caretTrimReplace)

    // normalize spaces
    range = range.split(/\s+/).join(' ')

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    let rangeList = range
      .split(' ')
      .map(comp => parseComparator(comp, this.options))
      .join(' ')
      .split(/\s+/)
      // >=0.0.0 is equivalent to *
      .map(comp => replaceGTE0(comp, this.options))

    if (loose) {
      // in loose mode, throw out any that are not valid comparators
      rangeList = rangeList.filter(comp => {
        debug('loose invalid filter', comp, this.options)
        return !!comp.match(re[t.COMPARATORLOOSE])
      })
    }
    debug('range list', rangeList)

    // if any comparators are the null set, then replace with JUST null set
    // if more than one comparator, remove any * comparators
    // also, don't include the same comparator more than once
    const rangeMap = new Map()
    const comparators = rangeList.map(comp => new Comparator(comp, this.options))
    for (const comp of comparators) {
      if (isNullSet(comp)) {
        return [comp]
      }
      rangeMap.set(comp.value, comp)
    }
    if (rangeMap.size > 1 && rangeMap.has('')) {
      rangeMap.delete('')
    }

    const result = [...rangeMap.values()]
    cache.set(memoKey, result)
    return result
  }

  intersects (range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError('a Range is required')
    }

    return this.set.some((thisComparators) => {
      return (
        isSatisfiable(thisComparators, options) &&
        range.set.some((rangeComparators) => {
          return (
            isSatisfiable(rangeComparators, options) &&
            thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options)
              })
            })
          )
        })
      )
    })
  }

  // if ANY of the sets match ALL of its comparators, then pass
  test (version) {
    if (!version) {
      return false
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    for (let i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version, this.options)) {
        return true
      }
    }
    return false
  }
}
module.exports = Range

const LRU = __webpack_require__(42873)
const cache = new LRU({ max: 1000 })

const parseOptions = __webpack_require__(48716)
const Comparator = __webpack_require__(43134)
const debug = __webpack_require__(46830)
const SemVer = __webpack_require__(89510)
const {
  re,
  t,
  comparatorTrimReplace,
  tildeTrimReplace,
  caretTrimReplace,
} = __webpack_require__(19022)

const isNullSet = c => c.value === '<0.0.0-0'
const isAny = c => c.value === ''

// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options) => {
  let result = true
  const remainingComparators = comparators.slice()
  let testComparator = remainingComparators.pop()

  while (result && remainingComparators.length) {
    result = remainingComparators.every((otherComparator) => {
      return testComparator.intersects(otherComparator, options)
    })

    testComparator = remainingComparators.pop()
  }

  return result
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options) => {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

const isX = id => !id || id.toLowerCase() === 'x' || id === '*'

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
const replaceTildes = (comp, options) =>
  comp.trim().split(/\s+/).map((c) => {
    return replaceTilde(c, options)
  }).join(' ')

const replaceTilde = (comp, options) => {
  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('tilde', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0-0
      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = `>=${M}.${m}.${p}-${pr
      } <${M}.${+m + 1}.0-0`
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0-0
      ret = `>=${M}.${m}.${p
      } <${M}.${+m + 1}.0-0`
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
const replaceCarets = (comp, options) =>
  comp.trim().split(/\s+/).map((c) => {
    return replaceCaret(c, options)
  }).join(' ')

const replaceCaret = (comp, options) => {
  debug('caret', comp, options)
  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
  const z = options.includePrerelease ? '-0' : ''
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('caret', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      if (M === '0') {
        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`
      } else {
        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p}-${pr
        } <${+M + 1}.0.0-0`
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p
        } <${+M + 1}.0.0-0`
      }
    }

    debug('caret return', ret)
    return ret
  })
}

const replaceXRanges = (comp, options) => {
  debug('replaceXRanges', comp, options)
  return comp.split(/\s+/).map((c) => {
    return replaceXRange(c, options)
  }).join(' ')
}

const replaceXRange = (comp, options) => {
  comp = comp.trim()
  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    const xM = isX(M)
    const xm = xM || isX(m)
    const xp = xm || isX(p)
    const anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value
    pr = options.includePrerelease ? '-0' : ''

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      if (gtlt === '<') {
        pr = '-0'
      }

      ret = `${gtlt + M}.${m}.${p}${pr}`
    } else if (xm) {
      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`
    } else if (xp) {
      ret = `>=${M}.${m}.0${pr
      } <${M}.${+m + 1}.0-0`
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options) => {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[t.STAR], '')
}

const replaceGTE0 = (comp, options) => {
  debug('replaceGTE0', comp, options)
  return comp.trim()
    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
}

// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
const hyphenReplace = incPr => ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr, tb) => {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = `>=${fM}.0.0${incPr ? '-0' : ''}`
  } else if (isX(fp)) {
    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`
  } else if (fpr) {
    from = `>=${from}`
  } else {
    from = `>=${from}${incPr ? '-0' : ''}`
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = `<${+tM + 1}.0.0-0`
  } else if (isX(tp)) {
    to = `<${tM}.${+tm + 1}.0-0`
  } else if (tpr) {
    to = `<=${tM}.${tm}.${tp}-${tpr}`
  } else if (incPr) {
    to = `<${tM}.${tm}.${+tp + 1}-0`
  } else {
    to = `<=${to}`
  }

  return (`${from} ${to}`).trim()
}

const testSet = (set, version, options) => {
  for (let i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (let i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === Comparator.ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        const allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}


/***/ }),

/***/ 89510:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const debug = __webpack_require__(46830)
const { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__(50039)
const { re, t } = __webpack_require__(19022)

const parseOptions = __webpack_require__(48716)
const { compareIdentifiers } = __webpack_require__(8822)
class SemVer {
  constructor (version, options) {
    options = parseOptions(options)

    if (version instanceof SemVer) {
      if (version.loose === !!options.loose &&
          version.includePrerelease === !!options.includePrerelease) {
        return version
      } else {
        version = version.version
      }
    } else if (typeof version !== 'string') {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError(
        `version is longer than ${MAX_LENGTH} characters`
      )
    }

    debug('SemVer', version, options)
    this.options = options
    this.loose = !!options.loose
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease

    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])

    if (!m) {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    this.raw = version

    // these are actually numbers
    this.major = +m[1]
    this.minor = +m[2]
    this.patch = +m[3]

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version')
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version')
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version')
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = []
    } else {
      this.prerelease = m[4].split('.').map((id) => {
        if (/^[0-9]+$/.test(id)) {
          const num = +id
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num
          }
        }
        return id
      })
    }

    this.build = m[5] ? m[5].split('.') : []
    this.format()
  }

  format () {
    this.version = `${this.major}.${this.minor}.${this.patch}`
    if (this.prerelease.length) {
      this.version += `-${this.prerelease.join('.')}`
    }
    return this.version
  }

  toString () {
    return this.version
  }

  compare (other) {
    debug('SemVer.compare', this.version, this.options, other)
    if (!(other instanceof SemVer)) {
      if (typeof other === 'string' && other === this.version) {
        return 0
      }
      other = new SemVer(other, this.options)
    }

    if (other.version === this.version) {
      return 0
    }

    return this.compareMain(other) || this.comparePre(other)
  }

  compareMain (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    )
  }

  comparePre (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) {
      return -1
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0
    }

    let i = 0
    do {
      const a = this.prerelease[i]
      const b = other.prerelease[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  compareBuild (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    let i = 0
    do {
      const a = this.build[i]
      const b = other.build[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc (release, identifier) {
    switch (release) {
      case 'premajor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor = 0
        this.major++
        this.inc('pre', identifier)
        break
      case 'preminor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor++
        this.inc('pre', identifier)
        break
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0
        this.inc('patch', identifier)
        this.inc('pre', identifier)
        break
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier)
        }
        this.inc('pre', identifier)
        break

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (
          this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0
        ) {
          this.major++
        }
        this.minor = 0
        this.patch = 0
        this.prerelease = []
        break
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++
        }
        this.patch = 0
        this.prerelease = []
        break
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) {
          this.patch++
        }
        this.prerelease = []
        break
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre':
        if (this.prerelease.length === 0) {
          this.prerelease = [0]
        } else {
          let i = this.prerelease.length
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++
              i = -2
            }
          }
          if (i === -1) {
            // didn't increment anything
            this.prerelease.push(0)
          }
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = [identifier, 0]
            }
          } else {
            this.prerelease = [identifier, 0]
          }
        }
        break

      default:
        throw new Error(`invalid increment argument: ${release}`)
    }
    this.format()
    this.raw = this.version
    return this
  }
}

module.exports = SemVer


/***/ }),

/***/ 76457:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const parse = __webpack_require__(95692)
const clean = (version, options) => {
  const s = parse(version.trim().replace(/^[=v]+/, ''), options)
  return s ? s.version : null
}
module.exports = clean


/***/ }),

/***/ 35452:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const eq = __webpack_require__(98565)
const neq = __webpack_require__(23328)
const gt = __webpack_require__(82260)
const gte = __webpack_require__(86579)
const lt = __webpack_require__(20290)
const lte = __webpack_require__(5891)

const cmp = (a, op, b, loose) => {
  switch (op) {
    case '===':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a === b

    case '!==':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError(`Invalid operator: ${op}`)
  }
}
module.exports = cmp


/***/ }),

/***/ 99469:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)
const parse = __webpack_require__(95692)
const { re, t } = __webpack_require__(19022)

const coerce = (version, options) => {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version === 'number') {
    version = String(version)
  }

  if (typeof version !== 'string') {
    return null
  }

  options = options || {}

  let match = null
  if (!options.rtl) {
    match = version.match(re[t.COERCE])
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    let next
    while ((next = re[t.COERCERTL].exec(version)) &&
        (!match || match.index + match[0].length !== version.length)
    ) {
      if (!match ||
            next.index + next[0].length !== match.index + match[0].length) {
        match = next
      }
      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length
    }
    // leave it in a clean state
    re[t.COERCERTL].lastIndex = -1
  }

  if (match === null) {
    return null
  }

  return parse(`${match[2]}.${match[3] || '0'}.${match[4] || '0'}`, options)
}
module.exports = coerce


/***/ }),

/***/ 51868:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)
const compareBuild = (a, b, loose) => {
  const versionA = new SemVer(a, loose)
  const versionB = new SemVer(b, loose)
  return versionA.compare(versionB) || versionA.compareBuild(versionB)
}
module.exports = compareBuild


/***/ }),

/***/ 5919:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(43992)
const compareLoose = (a, b) => compare(a, b, true)
module.exports = compareLoose


/***/ }),

/***/ 43992:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)
const compare = (a, b, loose) =>
  new SemVer(a, loose).compare(new SemVer(b, loose))

module.exports = compare


/***/ }),

/***/ 41007:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const parse = __webpack_require__(95692)
const eq = __webpack_require__(98565)

const diff = (version1, version2) => {
  if (eq(version1, version2)) {
    return null
  } else {
    const v1 = parse(version1)
    const v2 = parse(version2)
    const hasPre = v1.prerelease.length || v2.prerelease.length
    const prefix = hasPre ? 'pre' : ''
    const defaultResult = hasPre ? 'prerelease' : ''
    for (const key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return prefix + key
        }
      }
    }
    return defaultResult // may be undefined
  }
}
module.exports = diff


/***/ }),

/***/ 98565:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(43992)
const eq = (a, b, loose) => compare(a, b, loose) === 0
module.exports = eq


/***/ }),

/***/ 82260:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(43992)
const gt = (a, b, loose) => compare(a, b, loose) > 0
module.exports = gt


/***/ }),

/***/ 86579:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(43992)
const gte = (a, b, loose) => compare(a, b, loose) >= 0
module.exports = gte


/***/ }),

/***/ 30515:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)

const inc = (version, release, options, identifier) => {
  if (typeof (options) === 'string') {
    identifier = options
    options = undefined
  }

  try {
    return new SemVer(
      version instanceof SemVer ? version.version : version,
      options
    ).inc(release, identifier).version
  } catch (er) {
    return null
  }
}
module.exports = inc


/***/ }),

/***/ 20290:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(43992)
const lt = (a, b, loose) => compare(a, b, loose) < 0
module.exports = lt


/***/ }),

/***/ 5891:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(43992)
const lte = (a, b, loose) => compare(a, b, loose) <= 0
module.exports = lte


/***/ }),

/***/ 62611:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)
const major = (a, loose) => new SemVer(a, loose).major
module.exports = major


/***/ }),

/***/ 76319:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)
const minor = (a, loose) => new SemVer(a, loose).minor
module.exports = minor


/***/ }),

/***/ 23328:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(43992)
const neq = (a, b, loose) => compare(a, b, loose) !== 0
module.exports = neq


/***/ }),

/***/ 95692:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { MAX_LENGTH } = __webpack_require__(50039)
const { re, t } = __webpack_require__(19022)
const SemVer = __webpack_require__(89510)

const parseOptions = __webpack_require__(48716)
const parse = (version, options) => {
  options = parseOptions(options)

  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  if (version.length > MAX_LENGTH) {
    return null
  }

  const r = options.loose ? re[t.LOOSE] : re[t.FULL]
  if (!r.test(version)) {
    return null
  }

  try {
    return new SemVer(version, options)
  } catch (er) {
    return null
  }
}

module.exports = parse


/***/ }),

/***/ 7368:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)
const patch = (a, loose) => new SemVer(a, loose).patch
module.exports = patch


/***/ }),

/***/ 97794:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const parse = __webpack_require__(95692)
const prerelease = (version, options) => {
  const parsed = parse(version, options)
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}
module.exports = prerelease


/***/ }),

/***/ 19114:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(43992)
const rcompare = (a, b, loose) => compare(b, a, loose)
module.exports = rcompare


/***/ }),

/***/ 3843:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compareBuild = __webpack_require__(51868)
const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))
module.exports = rsort


/***/ }),

/***/ 99845:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(87374)
const satisfies = (version, range, options) => {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}
module.exports = satisfies


/***/ }),

/***/ 58753:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compareBuild = __webpack_require__(51868)
const sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))
module.exports = sort


/***/ }),

/***/ 30398:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const parse = __webpack_require__(95692)
const valid = (version, options) => {
  const v = parse(version, options)
  return v ? v.version : null
}
module.exports = valid


/***/ }),

/***/ 38873:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// just pre-load all the stuff that index.js lazily exports
const internalRe = __webpack_require__(19022)
module.exports = {
  re: internalRe.re,
  src: internalRe.src,
  tokens: internalRe.t,
  SEMVER_SPEC_VERSION: (__webpack_require__(50039).SEMVER_SPEC_VERSION),
  SemVer: __webpack_require__(89510),
  compareIdentifiers: (__webpack_require__(8822).compareIdentifiers),
  rcompareIdentifiers: (__webpack_require__(8822).rcompareIdentifiers),
  parse: __webpack_require__(95692),
  valid: __webpack_require__(30398),
  clean: __webpack_require__(76457),
  inc: __webpack_require__(30515),
  diff: __webpack_require__(41007),
  major: __webpack_require__(62611),
  minor: __webpack_require__(76319),
  patch: __webpack_require__(7368),
  prerelease: __webpack_require__(97794),
  compare: __webpack_require__(43992),
  rcompare: __webpack_require__(19114),
  compareLoose: __webpack_require__(5919),
  compareBuild: __webpack_require__(51868),
  sort: __webpack_require__(58753),
  rsort: __webpack_require__(3843),
  gt: __webpack_require__(82260),
  lt: __webpack_require__(20290),
  eq: __webpack_require__(98565),
  neq: __webpack_require__(23328),
  gte: __webpack_require__(86579),
  lte: __webpack_require__(5891),
  cmp: __webpack_require__(35452),
  coerce: __webpack_require__(99469),
  Comparator: __webpack_require__(43134),
  Range: __webpack_require__(87374),
  satisfies: __webpack_require__(99845),
  toComparators: __webpack_require__(98384),
  maxSatisfying: __webpack_require__(86369),
  minSatisfying: __webpack_require__(2663),
  minVersion: __webpack_require__(20075),
  validRange: __webpack_require__(19178),
  outside: __webpack_require__(19434),
  gtr: __webpack_require__(48237),
  ltr: __webpack_require__(89860),
  intersects: __webpack_require__(88258),
  simplifyRange: __webpack_require__(53607),
  subset: __webpack_require__(42199),
}


/***/ }),

/***/ 50039:
/***/ ((module) => {

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0'

const MAX_LENGTH = 256
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
/* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16

module.exports = {
  SEMVER_SPEC_VERSION,
  MAX_LENGTH,
  MAX_SAFE_INTEGER,
  MAX_SAFE_COMPONENT_LENGTH,
}


/***/ }),

/***/ 46830:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(27061);
const debug = (
  typeof process === 'object' &&
  process.env &&
  process.env.NODE_DEBUG &&
  /\bsemver\b/i.test(process.env.NODE_DEBUG)
) ? (...args) => console.error('SEMVER', ...args)
  : () => {}

module.exports = debug


/***/ }),

/***/ 8822:
/***/ ((module) => {

const numeric = /^[0-9]+$/
const compareIdentifiers = (a, b) => {
  const anum = numeric.test(a)
  const bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)

module.exports = {
  compareIdentifiers,
  rcompareIdentifiers,
}


/***/ }),

/***/ 48716:
/***/ ((module) => {

// parse out just the options we care about so we always get a consistent
// obj with keys in a consistent order.
const opts = ['includePrerelease', 'loose', 'rtl']
const parseOptions = options =>
  !options ? {}
  : typeof options !== 'object' ? { loose: true }
  : opts.filter(k => options[k]).reduce((o, k) => {
    o[k] = true
    return o
  }, {})
module.exports = parseOptions


/***/ }),

/***/ 19022:
/***/ ((module, exports, __webpack_require__) => {

const { MAX_SAFE_COMPONENT_LENGTH } = __webpack_require__(50039)
const debug = __webpack_require__(46830)
exports = module.exports = {}

// The actual regexps go on exports.re
const re = exports.re = []
const src = exports.src = []
const t = exports.t = {}
let R = 0

const createToken = (name, value, isGlobal) => {
  const index = R++
  debug(name, index, value)
  t[name] = index
  src[index] = value
  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)
}

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*')
createToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

createToken('NONNUMERICIDENTIFIER', '\\d*[a-zA-Z-][a-zA-Z0-9-]*')

// ## Main Version
// Three dot-separated numeric identifiers.

createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})`)

createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
}|${src[t.NONNUMERICIDENTIFIER]})`)

createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
}|${src[t.NONNUMERICIDENTIFIER]})`)

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`)

createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

createToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
}(?:\\.${src[t.BUILDIDENTIFIER]})*))`)

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
}${src[t.PRERELEASE]}?${
  src[t.BUILD]}?`)

createToken('FULL', `^${src[t.FULLPLAIN]}$`)

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
}${src[t.PRERELEASELOOSE]}?${
  src[t.BUILD]}?`)

createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)

createToken('GTLT', '((?:<|>)?=?)')

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`)
createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`)

createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:${src[t.PRERELEASE]})?${
                     src[t.BUILD]}?` +
                   `)?)?`)

createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:${src[t.PRERELEASELOOSE]})?${
                          src[t.BUILD]}?` +
                        `)?)?`)

createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`)
createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`)

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken('COERCE', `${'(^|[^\\d])' +
              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
              `(?:$|[^\\d])`)
createToken('COERCERTL', src[t.COERCE], true)

// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken('LONETILDE', '(?:~>?)')

createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true)
exports.tildeTrimReplace = '$1~'

createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)
createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)

// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken('LONECARET', '(?:\\^)')

createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true)
exports.caretTrimReplace = '$1^'

createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)
createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)

// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`)
createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`)

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)
exports.comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
                   `\\s+-\\s+` +
                   `(${src[t.XRANGEPLAIN]})` +
                   `\\s*$`)

createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s+-\\s+` +
                        `(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s*$`)

// Star ranges basically just allow anything at all.
createToken('STAR', '(<|>)?=?\\s*\\*')
// >=0.0.0 is like a star
createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$')
createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$')


/***/ }),

/***/ 42873:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// A linked list to keep track of recently-used-ness
const Yallist = __webpack_require__(7372)

const MAX = Symbol('max')
const LENGTH = Symbol('length')
const LENGTH_CALCULATOR = Symbol('lengthCalculator')
const ALLOW_STALE = Symbol('allowStale')
const MAX_AGE = Symbol('maxAge')
const DISPOSE = Symbol('dispose')
const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')
const LRU_LIST = Symbol('lruList')
const CACHE = Symbol('cache')
const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')

const naiveLength = () => 1

// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
  constructor (options) {
    if (typeof options === 'number')
      options = { max: options }

    if (!options)
      options = {}

    if (options.max && (typeof options.max !== 'number' || options.max < 0))
      throw new TypeError('max must be a non-negative number')
    // Kind of weird to have a default max of Infinity, but oh well.
    const max = this[MAX] = options.max || Infinity

    const lc = options.length || naiveLength
    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc
    this[ALLOW_STALE] = options.stale || false
    if (options.maxAge && typeof options.maxAge !== 'number')
      throw new TypeError('maxAge must be a number')
    this[MAX_AGE] = options.maxAge || 0
    this[DISPOSE] = options.dispose
    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false
    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false
    this.reset()
  }

  // resize the cache when the max changes.
  set max (mL) {
    if (typeof mL !== 'number' || mL < 0)
      throw new TypeError('max must be a non-negative number')

    this[MAX] = mL || Infinity
    trim(this)
  }
  get max () {
    return this[MAX]
  }

  set allowStale (allowStale) {
    this[ALLOW_STALE] = !!allowStale
  }
  get allowStale () {
    return this[ALLOW_STALE]
  }

  set maxAge (mA) {
    if (typeof mA !== 'number')
      throw new TypeError('maxAge must be a non-negative number')

    this[MAX_AGE] = mA
    trim(this)
  }
  get maxAge () {
    return this[MAX_AGE]
  }

  // resize the cache when the lengthCalculator changes.
  set lengthCalculator (lC) {
    if (typeof lC !== 'function')
      lC = naiveLength

    if (lC !== this[LENGTH_CALCULATOR]) {
      this[LENGTH_CALCULATOR] = lC
      this[LENGTH] = 0
      this[LRU_LIST].forEach(hit => {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)
        this[LENGTH] += hit.length
      })
    }
    trim(this)
  }
  get lengthCalculator () { return this[LENGTH_CALCULATOR] }

  get length () { return this[LENGTH] }
  get itemCount () { return this[LRU_LIST].length }

  rforEach (fn, thisp) {
    thisp = thisp || this
    for (let walker = this[LRU_LIST].tail; walker !== null;) {
      const prev = walker.prev
      forEachStep(this, fn, walker, thisp)
      walker = prev
    }
  }

  forEach (fn, thisp) {
    thisp = thisp || this
    for (let walker = this[LRU_LIST].head; walker !== null;) {
      const next = walker.next
      forEachStep(this, fn, walker, thisp)
      walker = next
    }
  }

  keys () {
    return this[LRU_LIST].toArray().map(k => k.key)
  }

  values () {
    return this[LRU_LIST].toArray().map(k => k.value)
  }

  reset () {
    if (this[DISPOSE] &&
        this[LRU_LIST] &&
        this[LRU_LIST].length) {
      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))
    }

    this[CACHE] = new Map() // hash of items by key
    this[LRU_LIST] = new Yallist() // list of items in order of use recency
    this[LENGTH] = 0 // length of items in the list
  }

  dump () {
    return this[LRU_LIST].map(hit =>
      isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter(h => h)
  }

  dumpLru () {
    return this[LRU_LIST]
  }

  set (key, value, maxAge) {
    maxAge = maxAge || this[MAX_AGE]

    if (maxAge && typeof maxAge !== 'number')
      throw new TypeError('maxAge must be a number')

    const now = maxAge ? Date.now() : 0
    const len = this[LENGTH_CALCULATOR](value, key)

    if (this[CACHE].has(key)) {
      if (len > this[MAX]) {
        del(this, this[CACHE].get(key))
        return false
      }

      const node = this[CACHE].get(key)
      const item = node.value

      // dispose of the old one before overwriting
      // split out into 2 ifs for better coverage tracking
      if (this[DISPOSE]) {
        if (!this[NO_DISPOSE_ON_SET])
          this[DISPOSE](key, item.value)
      }

      item.now = now
      item.maxAge = maxAge
      item.value = value
      this[LENGTH] += len - item.length
      item.length = len
      this.get(key)
      trim(this)
      return true
    }

    const hit = new Entry(key, value, len, now, maxAge)

    // oversized objects fall out of cache automatically.
    if (hit.length > this[MAX]) {
      if (this[DISPOSE])
        this[DISPOSE](key, value)

      return false
    }

    this[LENGTH] += hit.length
    this[LRU_LIST].unshift(hit)
    this[CACHE].set(key, this[LRU_LIST].head)
    trim(this)
    return true
  }

  has (key) {
    if (!this[CACHE].has(key)) return false
    const hit = this[CACHE].get(key).value
    return !isStale(this, hit)
  }

  get (key) {
    return get(this, key, true)
  }

  peek (key) {
    return get(this, key, false)
  }

  pop () {
    const node = this[LRU_LIST].tail
    if (!node)
      return null

    del(this, node)
    return node.value
  }

  del (key) {
    del(this, this[CACHE].get(key))
  }

  load (arr) {
    // reset the cache
    this.reset()

    const now = Date.now()
    // A previous serialized cache has the most recent items first
    for (let l = arr.length - 1; l >= 0; l--) {
      const hit = arr[l]
      const expiresAt = hit.e || 0
      if (expiresAt === 0)
        // the item was created without expiration in a non aged cache
        this.set(hit.k, hit.v)
      else {
        const maxAge = expiresAt - now
        // dont add already expired items
        if (maxAge > 0) {
          this.set(hit.k, hit.v, maxAge)
        }
      }
    }
  }

  prune () {
    this[CACHE].forEach((value, key) => get(this, key, false))
  }
}

const get = (self, key, doUse) => {
  const node = self[CACHE].get(key)
  if (node) {
    const hit = node.value
    if (isStale(self, hit)) {
      del(self, node)
      if (!self[ALLOW_STALE])
        return undefined
    } else {
      if (doUse) {
        if (self[UPDATE_AGE_ON_GET])
          node.value.now = Date.now()
        self[LRU_LIST].unshiftNode(node)
      }
    }
    return hit.value
  }
}

const isStale = (self, hit) => {
  if (!hit || (!hit.maxAge && !self[MAX_AGE]))
    return false

  const diff = Date.now() - hit.now
  return hit.maxAge ? diff > hit.maxAge
    : self[MAX_AGE] && (diff > self[MAX_AGE])
}

const trim = self => {
  if (self[LENGTH] > self[MAX]) {
    for (let walker = self[LRU_LIST].tail;
      self[LENGTH] > self[MAX] && walker !== null;) {
      // We know that we're about to delete this one, and also
      // what the next least recently used key will be, so just
      // go ahead and set it now.
      const prev = walker.prev
      del(self, walker)
      walker = prev
    }
  }
}

const del = (self, node) => {
  if (node) {
    const hit = node.value
    if (self[DISPOSE])
      self[DISPOSE](hit.key, hit.value)

    self[LENGTH] -= hit.length
    self[CACHE].delete(hit.key)
    self[LRU_LIST].removeNode(node)
  }
}

class Entry {
  constructor (key, value, length, now, maxAge) {
    this.key = key
    this.value = value
    this.length = length
    this.now = now
    this.maxAge = maxAge || 0
  }
}

const forEachStep = (self, fn, node, thisp) => {
  let hit = node.value
  if (isStale(self, hit)) {
    del(self, node)
    if (!self[ALLOW_STALE])
      hit = undefined
  }
  if (hit)
    fn.call(thisp, hit.value, hit.key, self)
}

module.exports = LRUCache


/***/ }),

/***/ 48237:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Determine if version is greater than all the versions possible in the range.
const outside = __webpack_require__(19434)
const gtr = (version, range, options) => outside(version, range, '>', options)
module.exports = gtr


/***/ }),

/***/ 88258:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(87374)
const intersects = (r1, r2, options) => {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2)
}
module.exports = intersects


/***/ }),

/***/ 89860:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const outside = __webpack_require__(19434)
// Determine if version is less than all the versions possible in the range
const ltr = (version, range, options) => outside(version, range, '<', options)
module.exports = ltr


/***/ }),

/***/ 86369:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)
const Range = __webpack_require__(87374)

const maxSatisfying = (versions, range, options) => {
  let max = null
  let maxSV = null
  let rangeObj = null
  try {
    rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v
        maxSV = new SemVer(max, options)
      }
    }
  })
  return max
}
module.exports = maxSatisfying


/***/ }),

/***/ 2663:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)
const Range = __webpack_require__(87374)
const minSatisfying = (versions, range, options) => {
  let min = null
  let minSV = null
  let rangeObj = null
  try {
    rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v
        minSV = new SemVer(min, options)
      }
    }
  })
  return min
}
module.exports = minSatisfying


/***/ }),

/***/ 20075:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)
const Range = __webpack_require__(87374)
const gt = __webpack_require__(82260)

const minVersion = (range, loose) => {
  range = new Range(range, loose)

  let minver = new SemVer('0.0.0')
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0')
  if (range.test(minver)) {
    return minver
  }

  minver = null
  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i]

    let setMin = null
    comparators.forEach((comparator) => {
      // Clone to avoid manipulating the comparator's semver object.
      const compver = new SemVer(comparator.semver.version)
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++
          } else {
            compver.prerelease.push(0)
          }
          compver.raw = compver.format()
          /* fallthrough */
        case '':
        case '>=':
          if (!setMin || gt(compver, setMin)) {
            setMin = compver
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error(`Unexpected operation: ${comparator.operator}`)
      }
    })
    if (setMin && (!minver || gt(minver, setMin))) {
      minver = setMin
    }
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}
module.exports = minVersion


/***/ }),

/***/ 19434:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(89510)
const Comparator = __webpack_require__(43134)
const { ANY } = Comparator
const Range = __webpack_require__(87374)
const satisfies = __webpack_require__(99845)
const gt = __webpack_require__(82260)
const lt = __webpack_require__(20290)
const lte = __webpack_require__(5891)
const gte = __webpack_require__(86579)

const outside = (version, range, hilo, options) => {
  version = new SemVer(version, options)
  range = new Range(range, options)

  let gtfn, ltefn, ltfn, comp, ecomp
  switch (hilo) {
    case '>':
      gtfn = gt
      ltefn = lte
      ltfn = lt
      comp = '>'
      ecomp = '>='
      break
    case '<':
      gtfn = lt
      ltefn = gte
      ltfn = gt
      comp = '<'
      ecomp = '<='
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisfies the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i]

    let high = null
    let low = null

    comparators.forEach((comparator) => {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator
      low = low || comparator
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator
      }
    })

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

module.exports = outside


/***/ }),

/***/ 53607:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies = __webpack_require__(99845)
const compare = __webpack_require__(43992)
module.exports = (versions, range, options) => {
  const set = []
  let first = null
  let prev = null
  const v = versions.sort((a, b) => compare(a, b, options))
  for (const version of v) {
    const included = satisfies(version, range, options)
    if (included) {
      prev = version
      if (!first) {
        first = version
      }
    } else {
      if (prev) {
        set.push([first, prev])
      }
      prev = null
      first = null
    }
  }
  if (first) {
    set.push([first, null])
  }

  const ranges = []
  for (const [min, max] of set) {
    if (min === max) {
      ranges.push(min)
    } else if (!max && min === v[0]) {
      ranges.push('*')
    } else if (!max) {
      ranges.push(`>=${min}`)
    } else if (min === v[0]) {
      ranges.push(`<=${max}`)
    } else {
      ranges.push(`${min} - ${max}`)
    }
  }
  const simplified = ranges.join(' || ')
  const original = typeof range.raw === 'string' ? range.raw : String(range)
  return simplified.length < original.length ? simplified : range
}


/***/ }),

/***/ 42199:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(87374)
const Comparator = __webpack_require__(43134)
const { ANY } = Comparator
const satisfies = __webpack_require__(99845)
const compare = __webpack_require__(43992)

// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true

const subset = (sub, dom, options = {}) => {
  if (sub === dom) {
    return true
  }

  sub = new Range(sub, options)
  dom = new Range(dom, options)
  let sawNonNull = false

  OUTER: for (const simpleSub of sub.set) {
    for (const simpleDom of dom.set) {
      const isSub = simpleSubset(simpleSub, simpleDom, options)
      sawNonNull = sawNonNull || isSub !== null
      if (isSub) {
        continue OUTER
      }
    }
    // the null set is a subset of everything, but null simple ranges in
    // a complex range should be ignored.  so if we saw a non-null range,
    // then we know this isn't a subset, but if EVERY simple range was null,
    // then it is a subset.
    if (sawNonNull) {
      return false
    }
  }
  return true
}

const simpleSubset = (sub, dom, options) => {
  if (sub === dom) {
    return true
  }

  if (sub.length === 1 && sub[0].semver === ANY) {
    if (dom.length === 1 && dom[0].semver === ANY) {
      return true
    } else if (options.includePrerelease) {
      sub = [new Comparator('>=0.0.0-0')]
    } else {
      sub = [new Comparator('>=0.0.0')]
    }
  }

  if (dom.length === 1 && dom[0].semver === ANY) {
    if (options.includePrerelease) {
      return true
    } else {
      dom = [new Comparator('>=0.0.0')]
    }
  }

  const eqSet = new Set()
  let gt, lt
  for (const c of sub) {
    if (c.operator === '>' || c.operator === '>=') {
      gt = higherGT(gt, c, options)
    } else if (c.operator === '<' || c.operator === '<=') {
      lt = lowerLT(lt, c, options)
    } else {
      eqSet.add(c.semver)
    }
  }

  if (eqSet.size > 1) {
    return null
  }

  let gtltComp
  if (gt && lt) {
    gtltComp = compare(gt.semver, lt.semver, options)
    if (gtltComp > 0) {
      return null
    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
      return null
    }
  }

  // will iterate one or zero times
  for (const eq of eqSet) {
    if (gt && !satisfies(eq, String(gt), options)) {
      return null
    }

    if (lt && !satisfies(eq, String(lt), options)) {
      return null
    }

    for (const c of dom) {
      if (!satisfies(eq, String(c), options)) {
        return false
      }
    }

    return true
  }

  let higher, lower
  let hasDomLT, hasDomGT
  // if the subset has a prerelease, we need a comparator in the superset
  // with the same tuple and a prerelease, or it's not a subset
  let needDomLTPre = lt &&
    !options.includePrerelease &&
    lt.semver.prerelease.length ? lt.semver : false
  let needDomGTPre = gt &&
    !options.includePrerelease &&
    gt.semver.prerelease.length ? gt.semver : false
  // exception: <1.2.3-0 is the same as <1.2.3
  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&
      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
    needDomLTPre = false
  }

  for (const c of dom) {
    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='
    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='
    if (gt) {
      if (needDomGTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomGTPre.major &&
            c.semver.minor === needDomGTPre.minor &&
            c.semver.patch === needDomGTPre.patch) {
          needDomGTPre = false
        }
      }
      if (c.operator === '>' || c.operator === '>=') {
        higher = higherGT(gt, c, options)
        if (higher === c && higher !== gt) {
          return false
        }
      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {
        return false
      }
    }
    if (lt) {
      if (needDomLTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomLTPre.major &&
            c.semver.minor === needDomLTPre.minor &&
            c.semver.patch === needDomLTPre.patch) {
          needDomLTPre = false
        }
      }
      if (c.operator === '<' || c.operator === '<=') {
        lower = lowerLT(lt, c, options)
        if (lower === c && lower !== lt) {
          return false
        }
      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {
        return false
      }
    }
    if (!c.operator && (lt || gt) && gtltComp !== 0) {
      return false
    }
  }

  // if there was a < or >, and nothing in the dom, then must be false
  // UNLESS it was limited by another range in the other direction.
  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
  if (gt && hasDomLT && !lt && gtltComp !== 0) {
    return false
  }

  if (lt && hasDomGT && !gt && gtltComp !== 0) {
    return false
  }

  // we needed a prerelease range in a specific tuple, but didn't get one
  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
  // because it includes prereleases in the 1.2.3 tuple
  if (needDomGTPre || needDomLTPre) {
    return false
  }

  return true
}

// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare(a.semver, b.semver, options)
  return comp > 0 ? a
    : comp < 0 ? b
    : b.operator === '>' && a.operator === '>=' ? b
    : a
}

// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare(a.semver, b.semver, options)
  return comp < 0 ? a
    : comp > 0 ? b
    : b.operator === '<' && a.operator === '<=' ? b
    : a
}

module.exports = subset


/***/ }),

/***/ 98384:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(87374)

// Mostly just for testing and legacy API reasons
const toComparators = (range, options) =>
  new Range(range, options).set
    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))

module.exports = toComparators


/***/ }),

/***/ 19178:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(87374)
const validRange = (range, options) => {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}
module.exports = validRange


/***/ }),

/***/ 86763:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

(__webpack_require__(11890).install)();


/***/ }),

/***/ 11890:
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
/* provided dependency */ var process = __webpack_require__(27061);
var SourceMapConsumer = (__webpack_require__(45517).SourceMapConsumer);
var path = __webpack_require__(67425);

var fs;
try {
  fs = __webpack_require__(42782);
  if (!fs.existsSync || !fs.readFileSync) {
    // fs doesn't have all methods we need
    fs = null;
  }
} catch (err) {
  /* nop */
}

var bufferFrom = __webpack_require__(91613);

/**
 * Requires a module which is protected against bundler minification.
 *
 * @param {NodeModule} mod
 * @param {string} request
 */
function dynamicRequire(mod, request) {
  return mod.require(request);
}

// Only install once if called multiple times
var errorFormatterInstalled = false;
var uncaughtShimInstalled = false;

// If true, the caches are reset before a stack trace formatting operation
var emptyCacheBetweenOperations = false;

// Supports {browser, node, auto}
var environment = "auto";

// Maps a file path to a string containing the file contents
var fileContentsCache = {};

// Maps a file path to a source map for that file
var sourceMapCache = {};

// Regex for detecting source maps
var reSourceMap = /^data:application\/json[^,]+base64,/;

// Priority list of retrieve handlers
var retrieveFileHandlers = [];
var retrieveMapHandlers = [];

function isInBrowser() {
  if (environment === "browser")
    return true;
  if (environment === "node")
    return false;
  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === "renderer"));
}

function hasGlobalProcessEventEmitter() {
  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));
}

function globalProcessVersion() {
  if ((typeof process === 'object') && (process !== null)) {
    return process.version;
  } else {
    return '';
  }
}

function globalProcessStderr() {
  if ((typeof process === 'object') && (process !== null)) {
    return process.stderr;
  }
}

function globalProcessExit(code) {
  if ((typeof process === 'object') && (process !== null) && (typeof process.exit === 'function')) {
    return process.exit(code);
  }
}

function handlerExec(list) {
  return function(arg) {
    for (var i = 0; i < list.length; i++) {
      var ret = list[i](arg);
      if (ret) {
        return ret;
      }
    }
    return null;
  };
}

var retrieveFile = handlerExec(retrieveFileHandlers);

retrieveFileHandlers.push(function(path) {
  // Trim the path to make sure there is no extra whitespace.
  path = path.trim();
  if (/^file:/.test(path)) {
    // existsSync/readFileSync can't handle file protocol, but once stripped, it works
    path = path.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
      return drive ?
        '' : // file:///C:/dir/file -> C:/dir/file
        '/'; // file:///root-dir/file -> /root-dir/file
    });
  }
  if (path in fileContentsCache) {
    return fileContentsCache[path];
  }

  var contents = '';
  try {
    if (!fs) {
      // Use SJAX if we are in the browser
      var xhr = new XMLHttpRequest();
      xhr.open('GET', path, /** async */ false);
      xhr.send(null);
      if (xhr.readyState === 4 && xhr.status === 200) {
        contents = xhr.responseText;
      }
    } else if (fs.existsSync(path)) {
      // Otherwise, use the filesystem
      contents = fs.readFileSync(path, 'utf8');
    }
  } catch (er) {
    /* ignore any errors */
  }

  return fileContentsCache[path] = contents;
});

// Support URLs relative to a directory, but be careful about a protocol prefix
// in case we are in the browser (i.e. directories may start with "http://" or "file:///")
function supportRelativeURL(file, url) {
  if (!file) return url;
  var dir = path.dirname(file);
  var match = /^\w+:\/\/[^\/]*/.exec(dir);
  var protocol = match ? match[0] : '';
  var startPath = dir.slice(protocol.length);
  if (protocol && /^\/\w\:/.test(startPath)) {
    // handle file:///C:/ paths
    protocol += '/';
    return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\/g, '/');
  }
  return protocol + path.resolve(dir.slice(protocol.length), url);
}

function retrieveSourceMapURL(source) {
  var fileData;

  if (isInBrowser()) {
     try {
       var xhr = new XMLHttpRequest();
       xhr.open('GET', source, false);
       xhr.send(null);
       fileData = xhr.readyState === 4 ? xhr.responseText : null;

       // Support providing a sourceMappingURL via the SourceMap header
       var sourceMapHeader = xhr.getResponseHeader("SourceMap") ||
                             xhr.getResponseHeader("X-SourceMap");
       if (sourceMapHeader) {
         return sourceMapHeader;
       }
     } catch (e) {
     }
  }

  // Get the URL of the source map
  fileData = retrieveFile(source);
  var re = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
  // Keep executing the search to find the *last* sourceMappingURL to avoid
  // picking up sourceMappingURLs from comments, strings, etc.
  var lastMatch, match;
  while (match = re.exec(fileData)) lastMatch = match;
  if (!lastMatch) return null;
  return lastMatch[1];
};

// Can be overridden by the retrieveSourceMap option to install. Takes a
// generated source filename; returns a {map, optional url} object, or null if
// there is no source map.  The map field may be either a string or the parsed
// JSON object (ie, it must be a valid argument to the SourceMapConsumer
// constructor).
var retrieveSourceMap = handlerExec(retrieveMapHandlers);
retrieveMapHandlers.push(function(source) {
  var sourceMappingURL = retrieveSourceMapURL(source);
  if (!sourceMappingURL) return null;

  // Read the contents of the source map
  var sourceMapData;
  if (reSourceMap.test(sourceMappingURL)) {
    // Support source map URL as a data url
    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);
    sourceMapData = bufferFrom(rawData, "base64").toString();
    sourceMappingURL = source;
  } else {
    // Support source map URLs relative to the source URL
    sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
    sourceMapData = retrieveFile(sourceMappingURL);
  }

  if (!sourceMapData) {
    return null;
  }

  return {
    url: sourceMappingURL,
    map: sourceMapData
  };
});

function mapSourcePosition(position) {
  var sourceMap = sourceMapCache[position.source];
  if (!sourceMap) {
    // Call the (overrideable) retrieveSourceMap function to get the source map.
    var urlAndMap = retrieveSourceMap(position.source);
    if (urlAndMap) {
      sourceMap = sourceMapCache[position.source] = {
        url: urlAndMap.url,
        map: new SourceMapConsumer(urlAndMap.map)
      };

      // Load all sources stored inline with the source map into the file cache
      // to pretend like they are already loaded. They may not exist on disk.
      if (sourceMap.map.sourcesContent) {
        sourceMap.map.sources.forEach(function(source, i) {
          var contents = sourceMap.map.sourcesContent[i];
          if (contents) {
            var url = supportRelativeURL(sourceMap.url, source);
            fileContentsCache[url] = contents;
          }
        });
      }
    } else {
      sourceMap = sourceMapCache[position.source] = {
        url: null,
        map: null
      };
    }
  }

  // Resolve the source URL relative to the URL of the source map
  if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === 'function') {
    var originalPosition = sourceMap.map.originalPositionFor(position);

    // Only return the original position if a matching line was found. If no
    // matching line is found then we return position instead, which will cause
    // the stack trace to print the path and line for the compiled file. It is
    // better to give a precise location in the compiled file than a vague
    // location in the original file.
    if (originalPosition.source !== null) {
      originalPosition.source = supportRelativeURL(
        sourceMap.url, originalPosition.source);
      return originalPosition;
    }
  }

  return position;
}

// Parses code generated by FormatEvalOrigin(), a function inside V8:
// https://code.google.com/p/v8/source/browse/trunk/src/messages.js
function mapEvalOrigin(origin) {
  // Most eval() calls are in this format
  var match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
  if (match) {
    var position = mapSourcePosition({
      source: match[2],
      line: +match[3],
      column: match[4] - 1
    });
    return 'eval at ' + match[1] + ' (' + position.source + ':' +
      position.line + ':' + (position.column + 1) + ')';
  }

  // Parse nested eval() calls using recursion
  match = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
  if (match) {
    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';
  }

  // Make sure we still return useful information if we didn't find anything
  return origin;
}

// This is copied almost verbatim from the V8 source code at
// https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The
// implementation of wrapCallSite() used to just forward to the actual source
// code of CallSite.prototype.toString but unfortunately a new release of V8
// did something to the prototype chain and broke the shim. The only fix I
// could find was copy/paste.
function CallSiteToString() {
  var fileName;
  var fileLocation = "";
  if (this.isNative()) {
    fileLocation = "native";
  } else {
    fileName = this.getScriptNameOrSourceURL();
    if (!fileName && this.isEval()) {
      fileLocation = this.getEvalOrigin();
      fileLocation += ", ";  // Expecting source position to follow.
    }

    if (fileName) {
      fileLocation += fileName;
    } else {
      // Source code does not originate from a file and is not native, but we
      // can still get the source position inside the source string, e.g. in
      // an eval string.
      fileLocation += "<anonymous>";
    }
    var lineNumber = this.getLineNumber();
    if (lineNumber != null) {
      fileLocation += ":" + lineNumber;
      var columnNumber = this.getColumnNumber();
      if (columnNumber) {
        fileLocation += ":" + columnNumber;
      }
    }
  }

  var line = "";
  var functionName = this.getFunctionName();
  var addSuffix = true;
  var isConstructor = this.isConstructor();
  var isMethodCall = !(this.isToplevel() || isConstructor);
  if (isMethodCall) {
    var typeName = this.getTypeName();
    // Fixes shim to be backward compatable with Node v0 to v4
    if (typeName === "[object Object]") {
      typeName = "null";
    }
    var methodName = this.getMethodName();
    if (functionName) {
      if (typeName && functionName.indexOf(typeName) != 0) {
        line += typeName + ".";
      }
      line += functionName;
      if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
        line += " [as " + methodName + "]";
      }
    } else {
      line += typeName + "." + (methodName || "<anonymous>");
    }
  } else if (isConstructor) {
    line += "new " + (functionName || "<anonymous>");
  } else if (functionName) {
    line += functionName;
  } else {
    line += fileLocation;
    addSuffix = false;
  }
  if (addSuffix) {
    line += " (" + fileLocation + ")";
  }
  return line;
}

function cloneCallSite(frame) {
  var object = {};
  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];
  });
  object.toString = CallSiteToString;
  return object;
}

function wrapCallSite(frame, state) {
  // provides interface backward compatibility
  if (state === undefined) {
    state = { nextPosition: null, curPosition: null }
  }
  if(frame.isNative()) {
    state.curPosition = null;
    return frame;
  }

  // Most call sites will return the source file from getFileName(), but code
  // passed to eval() ending in "//# sourceURL=..." will return the source file
  // from getScriptNameOrSourceURL() instead
  var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
  if (source) {
    var line = frame.getLineNumber();
    var column = frame.getColumnNumber() - 1;

    // Fix position in Node where some (internal) code is prepended.
    // See https://github.com/evanw/node-source-map-support/issues/36
    // Header removed in node at ^10.16 || >=11.11.0
    // v11 is not an LTS candidate, we can just test the one version with it.
    // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11
    var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
    var headerLength = noHeader.test(globalProcessVersion()) ? 0 : 62;
    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
      column -= headerLength;
    }

    var position = mapSourcePosition({
      source: source,
      line: line,
      column: column
    });
    state.curPosition = position;
    frame = cloneCallSite(frame);
    var originalFunctionName = frame.getFunctionName;
    frame.getFunctionName = function() {
      if (state.nextPosition == null) {
        return originalFunctionName();
      }
      return state.nextPosition.name || originalFunctionName();
    };
    frame.getFileName = function() { return position.source; };
    frame.getLineNumber = function() { return position.line; };
    frame.getColumnNumber = function() { return position.column + 1; };
    frame.getScriptNameOrSourceURL = function() { return position.source; };
    return frame;
  }

  // Code called using eval() needs special handling
  var origin = frame.isEval() && frame.getEvalOrigin();
  if (origin) {
    origin = mapEvalOrigin(origin);
    frame = cloneCallSite(frame);
    frame.getEvalOrigin = function() { return origin; };
    return frame;
  }

  // If we get here then we were unable to change the source position
  return frame;
}

// This function is part of the V8 stack trace API, for more info see:
// https://v8.dev/docs/stack-trace-api
function prepareStackTrace(error, stack) {
  if (emptyCacheBetweenOperations) {
    fileContentsCache = {};
    sourceMapCache = {};
  }

  var name = error.name || 'Error';
  var message = error.message || '';
  var errorString = name + ": " + message;

  var state = { nextPosition: null, curPosition: null };
  var processedStack = [];
  for (var i = stack.length - 1; i >= 0; i--) {
    processedStack.push('\n    at ' + wrapCallSite(stack[i], state));
    state.nextPosition = state.curPosition;
  }
  state.curPosition = state.nextPosition = null;
  return errorString + processedStack.reverse().join('');
}

// Generate position and snippet of original source with pointer
function getErrorSource(error) {
  var match = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
  if (match) {
    var source = match[1];
    var line = +match[2];
    var column = +match[3];

    // Support the inline sourceContents inside the source map
    var contents = fileContentsCache[source];

    // Support files on disk
    if (!contents && fs && fs.existsSync(source)) {
      try {
        contents = fs.readFileSync(source, 'utf8');
      } catch (er) {
        contents = '';
      }
    }

    // Format the line from the original source code like node does
    if (contents) {
      var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
      if (code) {
        return source + ':' + line + '\n' + code + '\n' +
          new Array(column).join(' ') + '^';
      }
    }
  }
  return null;
}

function printErrorAndExit (error) {
  var source = getErrorSource(error);

  // Ensure error is printed synchronously and not truncated
  var stderr = globalProcessStderr();
  if (stderr && stderr._handle && stderr._handle.setBlocking) {
    stderr._handle.setBlocking(true);
  }

  if (source) {
    console.error();
    console.error(source);
  }

  console.error(error.stack);
  globalProcessExit(1);
}

function shimEmitUncaughtException () {
  var origEmit = process.emit;

  process.emit = function (type) {
    if (type === 'uncaughtException') {
      var hasStack = (arguments[1] && arguments[1].stack);
      var hasListeners = (this.listeners(type).length > 0);

      if (hasStack && !hasListeners) {
        return printErrorAndExit(arguments[1]);
      }
    }

    return origEmit.apply(this, arguments);
  };
}

var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);

exports.wrapCallSite = wrapCallSite;
exports.getErrorSource = getErrorSource;
exports.mapSourcePosition = mapSourcePosition;
exports.retrieveSourceMap = retrieveSourceMap;

exports.install = function(options) {
  options = options || {};

  if (options.environment) {
    environment = options.environment;
    if (["node", "browser", "auto"].indexOf(environment) === -1) {
      throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}")
    }
  }

  // Allow sources to be found by methods other than reading the files
  // directly from disk.
  if (options.retrieveFile) {
    if (options.overrideRetrieveFile) {
      retrieveFileHandlers.length = 0;
    }

    retrieveFileHandlers.unshift(options.retrieveFile);
  }

  // Allow source maps to be found by methods other than reading the files
  // directly from disk.
  if (options.retrieveSourceMap) {
    if (options.overrideRetrieveSourceMap) {
      retrieveMapHandlers.length = 0;
    }

    retrieveMapHandlers.unshift(options.retrieveSourceMap);
  }

  // Support runtime transpilers that include inline source maps
  if (options.hookRequire && !isInBrowser()) {
    // Use dynamicRequire to avoid including in browser bundles
    var Module = dynamicRequire(module, 'module');
    var $compile = Module.prototype._compile;

    if (!$compile.__sourceMapSupport) {
      Module.prototype._compile = function(content, filename) {
        fileContentsCache[filename] = content;
        sourceMapCache[filename] = undefined;
        return $compile.call(this, content, filename);
      };

      Module.prototype._compile.__sourceMapSupport = true;
    }
  }

  // Configure options
  if (!emptyCacheBetweenOperations) {
    emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?
      options.emptyCacheBetweenOperations : false;
  }

  // Install the error reformatter
  if (!errorFormatterInstalled) {
    errorFormatterInstalled = true;
    Error.prepareStackTrace = prepareStackTrace;
  }

  if (!uncaughtShimInstalled) {
    var installHandler = 'handleUncaughtExceptions' in options ?
      options.handleUncaughtExceptions : true;

    // Do not override 'uncaughtException' with our own handler in Node.js
    // Worker threads. Workers pass the error to the main thread as an event,
    // rather than printing something to stderr and exiting.
    try {
      // We need to use `dynamicRequire` because `require` on it's own will be optimized by WebPack/Browserify.
      var worker_threads = dynamicRequire(module, 'worker_threads');
      if (worker_threads.isMainThread === false) {
        installHandler = false;
      }
    } catch(e) {}

    // Provide the option to not install the uncaught exception handler. This is
    // to support other uncaught exception handlers (in test frameworks, for
    // example). If this handler is not installed and there are no other uncaught
    // exception handlers, uncaught exceptions will be caught by node's built-in
    // exception handler and the process will still be terminated. However, the
    // generated JavaScript code will be shown above the stack trace instead of
    // the original source code.
    if (installHandler && hasGlobalProcessEventEmitter()) {
      uncaughtShimInstalled = true;
      shimEmitUncaughtException();
    }
  }
};

exports.resetRetrieveHandlers = function() {
  retrieveFileHandlers.length = 0;
  retrieveMapHandlers.length = 0;

  retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
  retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);

  retrieveSourceMap = handlerExec(retrieveMapHandlers);
  retrieveFile = handlerExec(retrieveFileHandlers);
}


/***/ }),

/***/ 35447:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(24023);
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.I = ArraySet;


/***/ }),

/***/ 62725:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = __webpack_require__(4817);

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};


/***/ }),

/***/ 4817:
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};


/***/ }),

/***/ 89106:
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};


/***/ }),

/***/ 68626:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(24023);

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.H = MappingList;


/***/ }),

/***/ 39213:
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.U = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};


/***/ }),

/***/ 17447:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(24023);
var binarySearch = __webpack_require__(89106);
var ArraySet = (__webpack_require__(35447)/* .ArraySet */ .I);
var base64VLQ = __webpack_require__(62725);
var quickSort = (__webpack_require__(39213)/* .quickSort */ .U);

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

__webpack_unused_export__ = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

__webpack_unused_export__ = IndexedSourceMapConsumer;


/***/ }),

/***/ 5584:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = __webpack_require__(62725);
var util = __webpack_require__(24023);
var ArraySet = (__webpack_require__(35447)/* .ArraySet */ .I);
var MappingList = (__webpack_require__(68626)/* .MappingList */ .H);

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.h = SourceMapGenerator;


/***/ }),

/***/ 61270:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = (__webpack_require__(5584)/* .SourceMapGenerator */ .h);
var util = __webpack_require__(24023);

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

__webpack_unused_export__ = SourceNode;


/***/ }),

/***/ 24023:
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;


/***/ }),

/***/ 45517:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
/* unused reexport */ __webpack_require__(5584)/* .SourceMapGenerator */ .h;
exports.SourceMapConsumer = __webpack_require__(17447).SourceMapConsumer;
/* unused reexport */ __webpack_require__(61270);


/***/ }),

/***/ 83424:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = (__webpack_require__(50343).EventEmitter);
var inherits = __webpack_require__(70087);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(13610);
Stream.Writable = __webpack_require__(95163);
Stream.Duplex = __webpack_require__(78863);
Stream.Transform = __webpack_require__(75081);
Stream.PassThrough = __webpack_require__(65117);
Stream.finished = __webpack_require__(71791)
Stream.pipeline = __webpack_require__(24297)

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),

/***/ 25319:
/***/ ((module) => {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.q = codes;


/***/ }),

/***/ 78863:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(13610);

var Writable = __webpack_require__(95163);

__webpack_require__(70087)(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

/***/ }),

/***/ 65117:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(75081);

__webpack_require__(70087)(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ 13610:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = (__webpack_require__(50343).EventEmitter);

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(90801);
/*</replacement>*/


var Buffer = (__webpack_require__(30816).Buffer);

var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(77702);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(53667);

var destroyImpl = __webpack_require__(14382);

var _require = __webpack_require__(59693),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = (__webpack_require__(25319)/* .codes */ .q),
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

__webpack_require__(70087)(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(78863);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = (__webpack_require__(15738)/* .StringDecoder */ .s);
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(78863);
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = (__webpack_require__(15738)/* .StringDecoder */ .s);
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(86473);
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(22867);
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}

/***/ }),

/***/ 75081:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = (__webpack_require__(25319)/* .codes */ .q),
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(78863);

__webpack_require__(70087)(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),

/***/ 95163:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(17451)
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(90801);
/*</replacement>*/


var Buffer = (__webpack_require__(30816).Buffer);

var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(14382);

var _require = __webpack_require__(59693),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = (__webpack_require__(25319)/* .codes */ .q),
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

__webpack_require__(70087)(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(78863);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(78863); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};

/***/ }),

/***/ 86473:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);


var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = __webpack_require__(71791);

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;

/***/ }),

/***/ 53667:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(30816),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(73927),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();

/***/ }),

/***/ 14382:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);
 // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};

/***/ }),

/***/ 71791:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = (__webpack_require__(25319)/* .codes.ERR_STREAM_PREMATURE_CLOSE */ .q.ERR_STREAM_PREMATURE_CLOSE);

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),

/***/ 22867:
/***/ ((module) => {

module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};


/***/ }),

/***/ 24297:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).


var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = (__webpack_require__(25319)/* .codes */ .q),
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(71791);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;

/***/ }),

/***/ 59693:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ERR_INVALID_OPT_VALUE = (__webpack_require__(25319)/* .codes.ERR_INVALID_OPT_VALUE */ .q.ERR_INVALID_OPT_VALUE);

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),

/***/ 90801:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(50343).EventEmitter;


/***/ }),

/***/ 15738:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = (__webpack_require__(27172).Buffer);
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.s = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ 2606:
/***/ ((module) => {

"use strict";

const singleComment = Symbol('singleComment');
const multiComment = Symbol('multiComment');
const stripWithoutWhitespace = () => '';
const stripWithWhitespace = (string, start, end) => string.slice(start, end).replace(/\S/g, ' ');

const isEscaped = (jsonString, quotePosition) => {
	let index = quotePosition - 1;
	let backslashCount = 0;

	while (jsonString[index] === '\\') {
		index -= 1;
		backslashCount += 1;
	}

	return Boolean(backslashCount % 2);
};

module.exports = (jsonString, options = {}) => {
	if (typeof jsonString !== 'string') {
		throw new TypeError(`Expected argument \`jsonString\` to be a \`string\`, got \`${typeof jsonString}\``);
	}

	const strip = options.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;

	let insideString = false;
	let insideComment = false;
	let offset = 0;
	let result = '';

	for (let i = 0; i < jsonString.length; i++) {
		const currentCharacter = jsonString[i];
		const nextCharacter = jsonString[i + 1];

		if (!insideComment && currentCharacter === '"') {
			const escaped = isEscaped(jsonString, i);
			if (!escaped) {
				insideString = !insideString;
			}
		}

		if (insideString) {
			continue;
		}

		if (!insideComment && currentCharacter + nextCharacter === '//') {
			result += jsonString.slice(offset, i);
			offset = i;
			insideComment = singleComment;
			i++;
		} else if (insideComment === singleComment && currentCharacter + nextCharacter === '\r\n') {
			i++;
			insideComment = false;
			result += strip(jsonString, offset, i);
			offset = i;
			continue;
		} else if (insideComment === singleComment && currentCharacter === '\n') {
			insideComment = false;
			result += strip(jsonString, offset, i);
			offset = i;
		} else if (!insideComment && currentCharacter + nextCharacter === '/*') {
			result += jsonString.slice(offset, i);
			offset = i;
			insideComment = multiComment;
			i++;
			continue;
		} else if (insideComment === multiComment && currentCharacter + nextCharacter === '*/') {
			i++;
			insideComment = false;
			result += strip(jsonString, offset, i + 1);
			offset = i + 1;
			continue;
		}
	}

	return result + (insideComment ? strip(jsonString.slice(offset)) : jsonString.slice(offset));
};


/***/ }),

/***/ 18939:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ExperimentationService_1 = __webpack_require__(21025);
exports.ExperimentationService = ExperimentationService_1.ExperimentationService;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 32378:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(85913);

/***/ }),

/***/ 45158:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);
var settle = __webpack_require__(43544);
var cookies = __webpack_require__(8326);
var buildURL = __webpack_require__(7553);
var buildFullPath = __webpack_require__(41636);
var parseHeaders = __webpack_require__(75097);
var isURLSameOrigin = __webpack_require__(60934);
var createError = __webpack_require__(65620);
var transitionalDefaults = __webpack_require__(78869);
var Cancel = __webpack_require__(89086);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ 85913:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);
var bind = __webpack_require__(73867);
var Axios = __webpack_require__(81258);
var mergeConfig = __webpack_require__(17639);
var defaults = __webpack_require__(95872);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(89086);
axios.CancelToken = __webpack_require__(24244);
axios.isCancel = __webpack_require__(2215);
axios.VERSION = (__webpack_require__(5306).version);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(4919);

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(17149);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ 89086:
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ 24244:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(89086);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ 2215:
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ 81258:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);
var buildURL = __webpack_require__(7553);
var InterceptorManager = __webpack_require__(15406);
var dispatchRequest = __webpack_require__(37331);
var mergeConfig = __webpack_require__(17639);
var validator = __webpack_require__(12456);

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ 15406:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ 41636:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(21172);
var combineURLs = __webpack_require__(93958);

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ 65620:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(81805);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ 37331:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);
var transformData = __webpack_require__(73189);
var isCancel = __webpack_require__(2215);
var defaults = __webpack_require__(95872);
var Cancel = __webpack_require__(89086);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ 81805:
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};


/***/ }),

/***/ 17639:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};


/***/ }),

/***/ 43544:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(65620);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ 73189:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);
var defaults = __webpack_require__(95872);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ 95872:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);


var utils = __webpack_require__(74448);
var normalizeHeaderName = __webpack_require__(98677);
var enhanceError = __webpack_require__(81805);
var transitionalDefaults = __webpack_require__(78869);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(45158);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(45158);
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: transitionalDefaults,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ 78869:
/***/ ((module) => {

"use strict";


module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};


/***/ }),

/***/ 5306:
/***/ ((module) => {

module.exports = {
  "version": "0.26.1"
};

/***/ }),

/***/ 73867:
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ 7553:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ 93958:
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ 8326:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ 21172:
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ 17149:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};


/***/ }),

/***/ 60934:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ 98677:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ 75097:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(74448);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ 4919:
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ 12456:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var VERSION = (__webpack_require__(5306).version);

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ 74448:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(73867);

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ 21025:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const TasApiFeatureProvider_1 = __webpack_require__(54524);
const AxiosHttpClient_1 = __webpack_require__(54229);
const ExperimentationServiceAutoPolling_1 = __webpack_require__(83543);
/**
 * Experimentation service to provide functionality of A/B experiments:
 * - reading flights;
 * - caching current set of flights;
 * - get answer on if flights are enabled.
 */
class ExperimentationService extends ExperimentationServiceAutoPolling_1.ExperimentationServiceAutoPolling {
    constructor(options) {
        super(options.telemetry, options.filterProviders || [], // Defaulted to empty array.
        options.refetchInterval != null
            ? options.refetchInterval
            : // If no fetch interval is provided, refetch functionality is turned off.
                0, options.featuresTelemetryPropertyName, options.assignmentContextTelemetryPropertyName, options.telemetryEventName, options.storageKey, options.keyValueStorage);
        this.options = options;
        this.invokeInit();
    }
    init() {
        // set feature providers to be an empty array.
        this.featureProviders = [];
        // Add WebApi feature provider.
        this.addFeatureProvider(new TasApiFeatureProvider_1.TasApiFeatureProvider(new AxiosHttpClient_1.AxiosHttpClient(this.options.endpoint), this.telemetry, this.filterProviders));
        // This will start polling the TAS.
        super.init();
    }
}
exports.ExperimentationService = ExperimentationService;
ExperimentationService.REFRESH_RATE_IN_MINUTES = 30;
//# sourceMappingURL=ExperimentationService.js.map

/***/ }),

/***/ 83543:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ExperimentationServiceBase_1 = __webpack_require__(73309);
const PollingService_1 = __webpack_require__(55611);
/**
 * Implementation of Feature provider that provides a polling feature, where the source can be re-fetched every x time given.
 */
class ExperimentationServiceAutoPolling extends ExperimentationServiceBase_1.ExperimentationServiceBase {
    constructor(telemetry, filterProviders, refreshRateMs, featuresTelemetryPropertyName, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage) {
        super(telemetry, featuresTelemetryPropertyName, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage);
        this.telemetry = telemetry;
        this.filterProviders = filterProviders;
        this.refreshRateMs = refreshRateMs;
        this.featuresTelemetryPropertyName = featuresTelemetryPropertyName;
        this.assignmentContextTelemetryPropertyName = assignmentContextTelemetryPropertyName;
        this.telemetryEventName = telemetryEventName;
        this.storageKey = storageKey;
        this.storage = storage;
        // Excluding 0 since it allows to turn off the auto polling.
        if (refreshRateMs < 1000 && refreshRateMs !== 0) {
            throw new Error('The minimum refresh rate for polling is 1000 ms (1 second). If you wish to deactivate this auto-polling use value of 0.');
        }
        if (refreshRateMs > 0) {
            this.pollingService = new PollingService_1.PollingService(refreshRateMs);
            this.pollingService.OnPollTick(async () => {
                await super.getFeaturesAsync();
            });
        }
    }
    init() {
        if (this.pollingService) {
            this.pollingService.StartPolling(true);
        }
        else {
            super.getFeaturesAsync();
        }
    }
    /**
     * Wrapper that will reset the polling intervals whenever the feature data is fetched manually.
     */
    async getFeaturesAsync(overrideInMemoryFeatures = false) {
        if (!this.pollingService) {
            return await super.getFeaturesAsync(overrideInMemoryFeatures);
        }
        else {
            this.pollingService.StopPolling();
            let result = await super.getFeaturesAsync(overrideInMemoryFeatures);
            this.pollingService.StartPolling();
            return result;
        }
    }
}
exports.ExperimentationServiceAutoPolling = ExperimentationServiceAutoPolling;
//# sourceMappingURL=ExperimentationServiceAutoPolling.js.map

/***/ }),

/***/ 73309:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const MemoryKeyValueStorage_1 = __webpack_require__(93343);
/**
 * Experimentation service to provide functionality of A/B experiments:
 * - reading flights;
 * - caching current set of flights;
 * - get answer on if flights are enabled.
 */
class ExperimentationServiceBase {
    constructor(telemetry, featuresTelemetryPropertyName, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage) {
        this.telemetry = telemetry;
        this.featuresTelemetryPropertyName = featuresTelemetryPropertyName;
        this.assignmentContextTelemetryPropertyName = assignmentContextTelemetryPropertyName;
        this.telemetryEventName = telemetryEventName;
        this.storageKey = storageKey;
        this.storage = storage;
        this.featuresConsumed = false;
        this.cachedTelemetryEvents = [];
        this._features = {
            features: [],
            assignmentContext: '',
            configs: []
        };
        if (!this.storageKey) {
            this.storageKey = 'ABExp.Features';
        }
        if (!this.storage) {
            storage = new MemoryKeyValueStorage_1.MemoryKeyValueStorage();
        }
        this.loadCachePromise = this.loadCachedFeatureData();
        this.initializePromise = this.loadCachePromise;
        this.initialFetch = new Promise((resolve, reject) => {
            this.resolveInitialFetchPromise = resolve;
        });
    }
    get features() {
        return this._features;
    }
    set features(value) {
        this._features = value;
        /**
         * If an implementation of telemetry exists, we set the shared property.
         */
        if (this.telemetry) {
            this.telemetry.setSharedProperty(this.featuresTelemetryPropertyName, this.features.features.join(';'));
            this.telemetry.setSharedProperty(this.assignmentContextTelemetryPropertyName, this.features.assignmentContext);
        }
    }
    /**
     * Gets all the features from the provider sources (not cache).
     * It returns these features and will also update the providers to have the latest features cached.
     */
    async getFeaturesAsync(overrideInMemoryFeatures = false) {
        /**
         * If there's already a fetching promise, there's no need to call it again.
         * We return that as result.
         */
        if (this.fetchPromise != null) {
            try {
                await this.fetchPromise;
            }
            catch (_a) {
                // Fetching features threw. Can happen if not connected to the internet, e.g
            }
            return this.features;
        }
        if (!this.featureProviders || this.featureProviders.length === 0) {
            return Promise.resolve({
                features: [],
                assignmentContext: '',
                configs: []
            });
        }
        /**
         * Fetch all from providers.
         */
        this.fetchPromise = Promise.all(this.featureProviders.map(async (provider) => {
            return await provider.getFeatures();
        }));
        try {
            const featureResults = await this.fetchPromise;
            this.updateFeatures(featureResults, overrideInMemoryFeatures);
        }
        catch (_b) {
            // Fetching features threw. Can happen if not connected to the internet, e.g.
        }
        this.fetchPromise = undefined;
        if (this.resolveInitialFetchPromise) {
            this.resolveInitialFetchPromise();
            this.resolveInitialFetchPromise = undefined;
        }
        /**
         * At this point all features have been re-fetched and cache has been updated.
         * We return the cached features.
         */
        return this.features;
    }
    /**
     *
     * @param featureResults The feature results obtained from all the feature providers.
     */
    updateFeatures(featureResults, overrideInMemoryFeatures = false) {
        /**
         * if features comes as a null value, that is taken as if there aren't any features active,
         * so an empty array is defaulted.
         */
        let features = {
            features: [],
            assignmentContext: '',
            configs: []
        };
        for (let result of featureResults) {
            for (let feature of result.features) {
                if (!features.features.includes(feature)) {
                    features.features.push(feature);
                }
            }
            for (let config of result.configs) {
                const existingConfig = features.configs.find(c => c.Id === config.Id);
                if (existingConfig) {
                    existingConfig.Parameters = Object.assign(Object.assign({}, existingConfig.Parameters), config.Parameters);
                }
                else {
                    features.configs.push(config);
                }
            }
            features.assignmentContext += result.assignmentContext;
        }
        /**
         * Set the obtained feature values to the global features variable. This stores them in memory.
         */
        if (overrideInMemoryFeatures || !this.featuresConsumed) {
            this.features = features;
        }
        /**
         * If we have storage, we cache the latest results into the storage.
         */
        if (this.storage) {
            this.storage.setValue(this.storageKey, features);
        }
    }
    async loadCachedFeatureData() {
        let cachedFeatureData;
        if (this.storage) {
            cachedFeatureData = await this.storage.getValue(this.storageKey);
            // When updating from an older version of tas-client, configs may be undefined 
            if (cachedFeatureData !== undefined && cachedFeatureData.configs === undefined) {
                cachedFeatureData.configs = [];
            }
        }
        if (this.features.features.length === 0) {
            this.features = cachedFeatureData || { features: [], assignmentContext: '', configs: [] };
        }
    }
    /**
     * Returns a value indicating whether the given flight is enabled.
     * It uses the in-memory cache.
     * @param flight The flight to check.
     */
    isFlightEnabled(flight) {
        this.featuresConsumed = true;
        this.PostEventToTelemetry(flight);
        return this.features.features.includes(flight);
    }
    /**
     * Returns a value indicating whether the given flight is enabled.
     * It uses the values currently on cache.
     * @param flight The flight to check.
     */
    async isCachedFlightEnabled(flight) {
        await this.loadCachePromise;
        this.featuresConsumed = true;
        this.PostEventToTelemetry(flight);
        return this.features.features.includes(flight);
    }
    /**
     * Returns a value indicating whether the given flight is enabled.
     * It re-fetches values from the server.
     * @param flight the flight to check.
     */
    async isFlightEnabledAsync(flight) {
        const features = await this.getFeaturesAsync(true);
        this.featuresConsumed = true;
        this.PostEventToTelemetry(flight);
        return features.features.includes(flight);
    }
    /**
     * Returns the value of the treatment variable, or undefined if not found.
     * It uses the values currently in memory, so the experimentation service
     * must be initialized before calling.
     * @param config name of the config to check.
     * @param name name of the treatment variable.
     */
    getTreatmentVariable(configId, name) {
        var _a;
        this.featuresConsumed = true;
        this.PostEventToTelemetry(`${configId}.${name}`);
        const config = this.features.configs.find(c => c.Id === configId);
        return (_a = config) === null || _a === void 0 ? void 0 : _a.Parameters[name];
    }
    /**
     * Returns the value of the treatment variable, or undefined if not found.
     * It re-fetches values from the server. If checkCache is set to true and the value exists
     * in the cache, the Treatment Assignment Service is not called.
     * @param config name of the config to check.
     * @param name name of the treatment variable.
     * @param checkCache check the cache for the variable before calling the TAS.
     */
    async getTreatmentVariableAsync(configId, name, checkCache) {
        if (checkCache) {
            const _featuresConsumed = this.featuresConsumed;
            const cachedValue = this.getTreatmentVariable(configId, name);
            if (cachedValue === undefined) {
                this.featuresConsumed = _featuresConsumed;
            }
            else {
                return cachedValue;
            }
        }
        await this.getFeaturesAsync(true);
        return this.getTreatmentVariable(configId, name);
    }
    PostEventToTelemetry(flight) {
        /**
         * If this event has already been posted, we omit from posting it again.
         */
        if (this.cachedTelemetryEvents.includes(flight)) {
            return;
        }
        this.telemetry.postEvent(this.telemetryEventName, new Map([['ABExp.queriedFeature', flight]]));
        /**
         * We cache the flight so we don't post it again.
         */
        this.cachedTelemetryEvents.push(flight);
    }
    invokeInit() {
        this.init();
    }
    addFeatureProvider(...providers) {
        if (providers == null || this.featureProviders == null) {
            return;
        }
        for (let provider of providers) {
            this.featureProviders.push(provider);
        }
    }
}
exports.ExperimentationServiceBase = ExperimentationServiceBase;
//# sourceMappingURL=ExperimentationServiceBase.js.map

/***/ }),

/***/ 96749:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Abstract class for Feature Provider Implementation.
 */
class BaseFeatureProvider {
    /**
     * @param telemetry The telemetry implementation.
     */
    constructor(telemetry) {
        this.telemetry = telemetry;
        this.isFetching = false;
    }
    /**
     * Method that wraps the fetch method in order to re-use the fetch promise if needed.
     * @param headers The headers to be used on the fetch method.
     */
    async getFeatures() {
        if (this.isFetching && this.fetchPromise) {
            return this.fetchPromise;
        }
        this.fetchPromise = this.fetch();
        let features = await this.fetchPromise;
        this.isFetching = false;
        this.fetchPromise = undefined;
        return features;
    }
}
exports.BaseFeatureProvider = BaseFeatureProvider;
//# sourceMappingURL=BaseFeatureProvider.js.map

/***/ }),

/***/ 56331:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseFeatureProvider_1 = __webpack_require__(96749);
/**
 * Feature provider implementation that handles filters.
 */
class FilteredFeatureProvider extends BaseFeatureProvider_1.BaseFeatureProvider {
    constructor(telemetry, filterProviders) {
        super(telemetry);
        this.telemetry = telemetry;
        this.filterProviders = filterProviders;
        this.cachedTelemetryEvents = [];
    }
    getFilters() {
        // We get the filters that will be sent as headers.
        let filters = new Map();
        for (let filter of this.filterProviders) {
            let filterHeaders = filter.getFilters();
            for (let key of filterHeaders.keys()) {
                // Headers can be overridden by custom filters.
                // That's why a check isn't done to see if the header already exists, the value is just set.
                let filterValue = filterHeaders.get(key);
                filters.set(key, filterValue);
            }
        }
        return filters;
    }
    PostEventToTelemetry(headers) {
        /**
         * If these headers have already been posted, we skip from posting them again..
         */
        if (this.cachedTelemetryEvents.includes(headers)) {
            return;
        }
        const jsonHeaders = JSON.stringify(headers);
        this.telemetry.postEvent('report-headers', new Map([['ABExp.headers', jsonHeaders]]));
        /**
         * We cache the flight so we don't post it again.
         */
        this.cachedTelemetryEvents.push(headers);
    }
}
exports.FilteredFeatureProvider = FilteredFeatureProvider;
//# sourceMappingURL=FilteredFeatureProvider.js.map

/***/ }),

/***/ 54524:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const FilteredFeatureProvider_1 = __webpack_require__(56331);
/**
 * Feature provider implementation that calls the TAS web service to get the most recent active features.
 */
class TasApiFeatureProvider extends FilteredFeatureProvider_1.FilteredFeatureProvider {
    constructor(httpClient, telemetry, filterProviders) {
        super(telemetry, filterProviders);
        this.httpClient = httpClient;
        this.telemetry = telemetry;
        this.filterProviders = filterProviders;
    }
    /**
     * Method that handles fetching of latest data (in this case, flights) from the provider.
     */
    async fetch() {
        // We get the filters that will be sent as headers.
        let filters = this.getFilters();
        let headers = {};
        // Filters are handled using Map<string,any> therefore we need to
        // convert these filters into something axios can take as headers.
        for (let key of filters.keys()) {
            const filterValue = filters.get(key);
            headers[key] = filterValue;
        }
        //axios webservice call.
        let response = await this.httpClient.get({ headers: headers });
        // If we have at least one filter, we post it to telemetry event.
        if (filters.keys.length > 0) {
            this.PostEventToTelemetry(headers);
        }
        // Read the response data from the server.
        let responseData = response.data;
        let configs = responseData.Configs;
        let features = [];
        for (let c of configs) {
            if (!c.Parameters) {
                continue;
            }
            for (let key of Object.keys(c.Parameters)) {
                const featureName = key + (c.Parameters[key] ? '' : 'cf');
                if (!features.includes(featureName)) {
                    features.push(featureName);
                }
            }
        }
        return {
            features,
            assignmentContext: responseData.AssignmentContext,
            configs
        };
    }
}
exports.TasApiFeatureProvider = TasApiFeatureProvider;
//# sourceMappingURL=TasApiFeatureProvider.js.map

/***/ }),

/***/ 54229:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const axios_1 = __webpack_require__(32378);
class AxiosHttpClient {
    constructor(endpoint) {
        this.endpoint = endpoint;
    }
    get(config) {
        return axios_1.default.get(this.endpoint, Object.assign(Object.assign({}, config), { proxy: false }));
    }
}
exports.AxiosHttpClient = AxiosHttpClient;
//# sourceMappingURL=AxiosHttpClient.js.map

/***/ }),

/***/ 93343:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
class MemoryKeyValueStorage {
    constructor() {
        this.storage = new Map();
    }
    async getValue(key, defaultValue) {
        if (this.storage.has(key)) {
            return await Promise.resolve(this.storage.get(key));
        }
        return await Promise.resolve(defaultValue || undefined);
    }
    setValue(key, value) {
        this.storage.set(key, value);
    }
}
exports.MemoryKeyValueStorage = MemoryKeyValueStorage;
//# sourceMappingURL=MemoryKeyValueStorage.js.map

/***/ }),

/***/ 55611:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
class PollingService {
    constructor(fetchInterval) {
        this.fetchInterval = fetchInterval;
    }
    StopPolling() {
        clearInterval(this.intervalHandle);
        this.intervalHandle = undefined;
    }
    OnPollTick(callback) {
        this.onTick = callback;
    }
    StartPolling(pollImmediately = false) {
        if (this.intervalHandle) {
            this.StopPolling();
        }
        // If there's no callback, there's no point to start polling.
        if (this.onTick == null) {
            return;
        }
        if (pollImmediately) {
            this.onTick().then(() => { return; }).catch(() => { return; });
        }
        /**
         * Set the interval to start running.
         */
        this.intervalHandle = setInterval(async () => {
            await this.onTick();
        }, this.fetchInterval);
        if (this.intervalHandle.unref) { // unref is only available in Node, not the web
            this.intervalHandle.unref(); // unref is used to avoid keeping node.js alive only because of these timeouts.
        }
    }
}
exports.PollingService = PollingService;
//# sourceMappingURL=PollingService.js.map

/***/ }),

/***/ 13751:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodespaceCreation = void 0;
const nls = __webpack_require__(52730);
const injectMessageParameters_1 = __webpack_require__(30393);
const telemetryString_1 = __webpack_require__(91257);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const vscode_command_framework_1 = __webpack_require__(89813);
const opentelemetry = __webpack_require__(30775);
const IConfigurationManager_1 = __webpack_require__(51850);
const OpenTelemetryProvider_1 = __webpack_require__(34396);
const localize = nls.loadMessageBundle();
class CodespaceCreation {
    constructor(dependencies) {
        this.dependencies = dependencies;
        this.logger = vscode_command_framework_1.traceSource.withName('CodespacesCreation');
    }
    async createNewCodespace(telemetryEvent, prompt, repoName, ref) {
        const codespaceParams = await prompt.run({
            values: {
                fullRepoName: repoName,
                ref: ref,
            },
        });
        const span = opentelemetry.trace
            .getTracer(OpenTelemetryProvider_1.openTelemetryTracerName)
            .startSpan(OpenTelemetryProvider_1.OpenTelemetrySpans.createCodespace);
        const creationStartTime = Date.now();
        const codespace = await this.provision(codespaceParams);
        span.setAttribute(OpenTelemetryProvider_1.openTelemetryCodespaceId, codespace.environment_id);
        span.end();
        const finishedTime = Date.now();
        telemetryEvent.addMeasure(telemetryString_1.TelemetryMeasureNames.PROVISIONING_DURATION, finishedTime - creationStartTime);
        this.dependencies.commandUtil.executeCommand("github.codespaces.connect" /* connect */, {
            name: codespace.name,
            newWindow: this.dependencies.configurationManager.getConfigValue(IConfigurationManager_1.ConfigurationKey.createCodespaceInNewWindow),
        });
    }
    async provision(codespaceParams) {
        const title = (0, injectMessageParameters_1.injectMessageParameters)(localize('message.codespaceCreation.title.creatingCodespace', 'Creating codespace for repo: {}'), codespaceParams.fullRepoName);
        let codespace;
        return await this.dependencies.notificationUtil.withProgress({
            title,
            location: this.dependencies.notificationUtil.notificationProgressLocation,
        }, async () => {
            var _a, _b;
            try {
                codespace = await this.dependencies
                    .getApiProvider()
                    .environments.provisionCodespace(codespaceParams.repo, codespaceParams.ref, {
                    skuName: (_a = codespaceParams.sku) === null || _a === void 0 ? void 0 : _a.name,
                    devcontainerPath: codespaceParams.devcontainerPath,
                    multiRepoPermissionsOptOut: codespaceParams.multiRepoPermissionsOptOut,
                });
            }
            catch (error) {
                if (error instanceof vscode_command_framework_1.CommandError &&
                    error.code === vscode_command_framework_1.CommandErrorCode.REQUESTING_PERMISSIONS) {
                    const permissionsMessageTitle = localize('message.codespaceCreation.authorizePermissionsTitle', 'The codespace is requesting updated permissions.');
                    const permissionsMessageDetail = localize('message.codespaceCreation.authorizePermissionsDetail', 'The codespace is requesting updated permissions. Please visit the provided link to review this request.');
                    const authorizeMessage = localize('message.codespaceCreation.authorizePermissions', 'Review and authorize request');
                    const continueWithoutAuthorizationMessage = localize('message.codespaceCreation.continueWithoutAuthorization', 'Continue without authorizing');
                    const allowPermissionsUrl = error.userMessage;
                    if (!allowPermissionsUrl) {
                        throw new vscode_command_framework_1.CommandError({
                            userMessage: 'Could not get the URL to allow permissions',
                        });
                    }
                    const selection = await this.dependencies.notificationUtil.showErrorMessage(permissionsMessageTitle, { modal: true, detail: permissionsMessageDetail }, authorizeMessage, continueWithoutAuthorizationMessage);
                    if (selection === authorizeMessage) {
                        await this.dependencies.extensionsUtil.openLinkInBrowser(allowPermissionsUrl);
                        throw new vscode_command_framework_1.CancellationError();
                    }
                    else if (selection === continueWithoutAuthorizationMessage) {
                        codespace = await this.dependencies
                            .getApiProvider()
                            .environments.provisionCodespace(codespaceParams.repo, codespaceParams.ref, {
                            skuName: (_b = codespaceParams.sku) === null || _b === void 0 ? void 0 : _b.name,
                            devcontainerPath: codespaceParams.devcontainerPath,
                            multiRepoPermissionsOptOut: true,
                        });
                    }
                    else {
                        throw new vscode_command_framework_1.CancellationError();
                    }
                }
            }
            CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(codespace);
            return codespace;
        });
    }
}
exports.CodespaceCreation = CodespaceCreation;


/***/ }),

/***/ 36713:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Instance = exports.CodespaceDetailsProvider = void 0;
const vs_ssh_1 = __webpack_require__(92126);
const vscode_jsonrpc_1 = __webpack_require__(83730);
const vscode_command_framework_1 = __webpack_require__(89813);
class CodespaceDetailsProvider {
    constructor(dependencies) {
        this.dependencies = dependencies;
        this.changeEmitter = new vscode_jsonrpc_1.Emitter();
        this.onCodespacesChanged = this.changeEmitter.event;
        this.codespaces = new Map();
        this.logger = vscode_command_framework_1.traceSource.withName('CodespaceInfo');
        this.dependencies.getApiProvider().onSignInChanged(this.updateCodespacesDetails.bind(this));
        this.updateCodespacesDetails().catch((err) => this.logger.error('Failed to fetch codespaces', err));
    }
    static get Instance() {
        return CodespaceDetailsProvider.singleton;
    }
    static init(dependencies) {
        CodespaceDetailsProvider.singleton = new CodespaceDetailsProvider(dependencies);
    }
    async updateCodespacesDetails() {
        // Create a promise to track this operation. When we resolve promises below, we must resolve
        // this local variable instead of resolving the `codespaceDetailsPromise` which might be pointing
        // to a different operation at the time when the current operation completes.
        const completionPromise = new vs_ssh_1.PromiseCompletionSource();
        // Store the latest operation's promise for callers to reference
        this.codespacesDetailsCompletion = completionPromise;
        if (!this.dependencies.getApiProvider().isSignedIn()) {
            this.disposeLists();
            completionPromise.resolve();
            return;
        }
        let codespaces = [];
        try {
            codespaces = (await this.dependencies.getApiProvider().environments.listCodespaces())
                .codespaces;
        }
        catch (e) {
            completionPromise.reject(e);
            throw e;
        }
        this.codespaces.clear();
        codespaces.forEach((element) => {
            this.codespaces.set(element.environment_id, element);
        });
        completionPromise.resolve();
        this.fireOnCodespacesChanged();
    }
    async fetchCodespaceDetailsById(codespaceId) {
        const codespace = await this.dependencies
            .getApiProvider()
            .environments.getCodespace(codespaceId);
        if (codespace) {
            this.codespaces.set(codespaceId, codespace);
        }
        else if (this.codespaces.get(codespaceId)) {
            this.codespaces.delete(codespaceId);
        }
        this.fireOnCodespacesChanged();
        return codespace;
    }
    async fetchCodespaceDetailsByName(codespaceName) {
        const codespace = await this.dependencies
            .getApiProvider()
            .environments.getCodespaceByName(codespaceName);
        if (codespace) {
            this.codespaces.set(codespace.environment_id, codespace);
        }
        else {
            for (let c of this.codespaces.values()) {
                if (c.name === codespaceName) {
                    this.codespaces.delete(c.environment_id);
                    break;
                }
            }
        }
        this.fireOnCodespacesChanged();
        return codespace;
    }
    getCachedCodespaceDetailsById(codespaceId) {
        return this.codespaces.get(codespaceId);
    }
    /*Updates a single environment and triggers the change event*/
    addOrUpdateCodespace(codespace) {
        this.codespaces.set(codespace.environment_id, codespace);
        this.fireOnCodespacesChanged();
    }
    removeCodespaceById(codespaceId) {
        this.codespaces.delete(codespaceId);
        this.fireOnCodespacesChanged();
    }
    setCurrentCodespace(codespace) {
        this.currentCodespace = codespace;
        this.fireOnCodespacesChanged();
    }
    getCurrentCodespace() {
        return this.currentCodespace;
    }
    async fetchEnvironmentsList() {
        return await this.getCodespacesDetailsPromise();
    }
    getCodespaceDetails() {
        if (!this.codespaces) {
            return [];
        }
        return [...this.codespaces.values()];
    }
    disposeLists() {
        this.codespaces.clear();
        this.fireOnCodespacesChanged();
    }
    fireOnCodespacesChanged() {
        this.changeEmitter.fire(this.getCodespaceDetails());
    }
    getCodespacesDetailsPromise() {
        return this.codespacesDetailsCompletion
            ? this.codespacesDetailsCompletion.promise.then(() => this.getCodespaceDetails())
            : Promise.resolve([]);
    }
}
exports.CodespaceDetailsProvider = CodespaceDetailsProvider;
const Instance = CodespaceDetailsProvider.Instance;
exports.Instance = Instance;


/***/ }),

/***/ 76506:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAvailableCommands = exports.getCodespaceDetailsFromCommandOptions = exports.getCodespaceFromCommandOptions = void 0;
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const environmentInfo_1 = __webpack_require__(42802);
const environments_1 = __webpack_require__(66005);
const trace_1 = __webpack_require__(72953);
const { Available, Provisioning, Shutdown, ShuttingDown, Unavailable, Starting, Exporting, Queued, Rebuilding, } = environmentInfo_1.StateInfo;
/**
 * @param options the options provided to the command
 * @param quickPick If set, user will be prompted to choose from a list of environments
 * @param quickPick.selectMsg Message to display for choosing the environment
 * @param quickPick.filter An optional filter based on available environment commands
 * @param quickPick.fallback Invoked if there are no environments that pass the filter
 */
async function getCodespaceFromCommandOptions(options, quickPick) {
    if (options.name) {
        // If the name is provided, no need to query the whole list. Just lookup directly by name.
        return await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchCodespaceDetailsByName(options.name);
    }
    let environmentId = options.id || options.environmentId;
    if (environmentId) {
        let codespaces = await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchEnvironmentsList();
        let codespace = codespaces.find((e) => e.environment_id === environmentId);
        if (!codespace) {
            codespace = await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchCodespaceDetailsById(environmentId);
            // If the valid codespace is missing in cache, it means that cached list was stale.
            // This could happen if connecting via the protocol handler while
            // VS Code was already running.
            if (codespace) {
                // Refresh list asynchronously.
                CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.updateCodespacesDetails().catch((e) => {
                    const trace = trace_1.mainTrace.createChild('EnvironmentCommand');
                    trace.error(`Updating codespace details failed. ${JSON.stringify(e)}`);
                });
            }
        }
        else if (options.needConnectionDetails) {
            // We have the codespace metadata cached, but the caller requested the connection details,
            // so we need to fetch the details and return those
            return await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchCodespaceDetailsById(environmentId);
        }
        return codespace;
    }
    if (quickPick === undefined) {
        return undefined;
    }
    const selection = await (0, environments_1.promptForEnvironment)(quickPick.dependencies, {
        quickPickPrompt: quickPick.selectMsg,
        filter: (x) => quickPick.filter === undefined || quickPick.filter(getAvailableCommands(x)),
        onNoAvailableEnvironments: quickPick.fallback,
    });
    // The list result from the quickpick does not include connection info. Check for this case and
    // query connection info if it's required.
    if (selection && options.needConnectionDetails) {
        return await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchCodespaceDetailsByName(selection.name);
    }
    return selection;
}
exports.getCodespaceFromCommandOptions = getCodespaceFromCommandOptions;
/**
 * @param options the options provided to the command
 * @param quickPick If set, user will be prompted to choose from a list of environments
 * @param quickPick.selectMsg Message to display for choosing the environment
 * @param quickPick.filter An optional filter based on available environment commands
 * @param quickPick.fallback Invoked if there are no environments that pass the filter
 */
async function getCodespaceDetailsFromCommandOptions(options, quickPick) {
    options.needConnectionDetails = true;
    const result = (await getCodespaceFromCommandOptions(options, quickPick));
    return result;
}
exports.getCodespaceDetailsFromCommandOptions = getCodespaceDetailsFromCommandOptions;
function getAvailableCommands(codespace) {
    let attributes = {};
    if (!codespace) {
        return attributes;
    }
    const connectedEnvironment = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
    const connected = connectedEnvironment && codespace.environment_id === connectedEnvironment.environment_id;
    attributes = {
        connectToEnabled: !connected &&
            (codespace.state === Available ||
                codespace.state === Shutdown ||
                codespace.state === Starting ||
                codespace.state === Provisioning ||
                codespace.state === Queued ||
                codespace.state === ShuttingDown) &&
            !codespace.pending_operation,
        createDevContainerEnabled: connected,
        deleteEnabled: !connected,
        disconnectFromEnabled: connected,
        exportEnabled: !connected &&
            (codespace.state === Available ||
                codespace.state === ShuttingDown ||
                codespace.state === Shutdown ||
                codespace.state === Starting ||
                codespace.state === Queued ||
                codespace.state === Unavailable) &&
            !codespace.pending_operation,
        openInBrowserEnabled: (codespace.state === Available ||
            codespace.state === Shutdown ||
            codespace.state === Provisioning ||
            codespace.state === Starting ||
            codespace.state === Queued ||
            codespace.state === Rebuilding) &&
            !codespace.pending_operation,
        openInNewWindowEnabled: !connected &&
            (codespace.state === Available || codespace.state === Shutdown) &&
            !codespace.pending_operation,
        shutdownEnabled: (codespace.state === Available ||
            codespace.state === ShuttingDown ||
            codespace.state === Starting ||
            codespace.state === Exporting ||
            codespace.state === Unavailable ||
            codespace.state === Queued ||
            codespace.state === Rebuilding) &&
            !codespace.pending_operation,
        viewCreationLogEnabled: connected,
        changeMachineTypeEnabled: (codespace.state === Available ||
            codespace.state === ShuttingDown ||
            codespace.state === Shutdown ||
            codespace.state === Starting ||
            codespace.state === Exporting ||
            codespace.state === Unavailable ||
            codespace.state === Queued ||
            codespace.state === Rebuilding) &&
            !codespace.pending_operation,
    };
    return attributes;
}
exports.getAvailableCommands = getAvailableCommands;


/***/ }),

/***/ 51000:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteEnvironment = void 0;
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
async function deleteEnvironment(codespace, confirmMsg, yesMsg, dependencies) {
    const pick = await dependencies.notificationUtil.showWarningMessage(confirmMsg, { modal: true }, yesMsg);
    if (pick === yesMsg) {
        await dependencies.getApiProvider().environments.deleteCodespace(codespace);
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.removeCodespaceById(codespace.environment_id);
    }
}
exports.deleteEnvironment = deleteEnvironment;


/***/ }),

/***/ 7821:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Instance = exports.EnvironmentPolling = void 0;
const environmentInfo_1 = __webpack_require__(42802);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const vscode_command_framework_1 = __webpack_require__(89813);
const vscs_utils_1 = __webpack_require__(19745);
/** Every how often the interval that polls individual items will run. */
const POLLING_INTERVAL_MS = 10000;
/** How long to wait between HTTP polling requests */
const POLL_RATE_MS = 1000;
class EnvironmentPolling {
    constructor() {
        this.pollItems = [];
        this.CODESPACE_STOP_POLLING_STATES = [
            environmentInfo_1.StateInfo.Deleted,
            environmentInfo_1.StateInfo.Failed,
            environmentInfo_1.StateInfo.Shutdown,
            environmentInfo_1.StateInfo.ShuttingDown,
            environmentInfo_1.StateInfo.Unavailable,
        ];
        EnvironmentPolling.singleton = this;
    }
    init(dependencies, logger = vscode_command_framework_1.traceSource.withName('EnvironmentPolling')) {
        this.dependencies = dependencies;
        this.logger = logger;
        this.dependencies.getApiProvider().onSignInChanged(() => {
            this.setPollItems([]);
        });
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.onCodespacesChanged(((codespaces) => {
            const provisioningCodespaces = codespaces
                .filter((x) => x.state === environmentInfo_1.StateInfo.Provisioning)
                .map((x) => x.environment_id);
            this.setPollItems(provisioningCodespaces);
        }).bind(this));
    }
    static get Instance() {
        return EnvironmentPolling.singleton
            ? EnvironmentPolling.singleton
            : new EnvironmentPolling();
    }
    /**
     * Used when creating a new codespace. This will poll the server and won't stop until the codespace is ready.
     *
     * @param codespace The codespace to poll
     * @returns ICodespaceDetails if created or undefined if deleted.
     * @throws CommandError if any network error
     */
    async pollUntilReady(codespace, callbackAfterTimeout, timeoutSeconds) {
        let callbackCalled = false;
        let callbackTime = 0;
        if (timeoutSeconds) {
            callbackTime = Date.now() + timeoutSeconds * 1000;
        }
        (0, vscs_utils_1.assertDefined)(this.dependencies, 'No `dependencies` found, please call `init` first.');
        while (true) {
            const details = await this.dependencies
                .getApiProvider()
                .environments.getCodespaceByName(codespace.name);
            (0, vscs_utils_1.assertDefined)(details, 'Codespace info not found.');
            if (this.isReady(details)) {
                CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(details);
                return details;
            }
            if (this.shouldStopPolling(details)) {
                CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(details);
                return;
            }
            await this.dependencies.util.delay(POLL_RATE_MS);
            if (!callbackCalled && callbackAfterTimeout && Date.now() >= callbackTime) {
                callbackCalled = true;
                callbackAfterTimeout();
            }
        }
    }
    /**
     * Used when resuming a codespace. This will poll the server and won't stop until the codespace is ready or rebuilding.
     *
     * @param codespaceId
     * @returns ICodespaceDetails if created or undefined if deleted.
     * @throws CommandError if any network error
     */
    async pollUntilRebuildingOrReady(codespaceId, callbackAfterTimeout, timeoutSeconds) {
        let codespace = undefined;
        let callbackCalled = false;
        let callbackTime = 0;
        if (timeoutSeconds) {
            callbackTime = Date.now() + timeoutSeconds * 1000;
        }
        while (!codespace) {
            (0, vscs_utils_1.assertDefined)(this.dependencies, 'No `dependencies` found.');
            const data = await this.dependencies
                .getApiProvider()
                .environments.getCodespace(codespaceId);
            if (!data) {
                return data;
            }
            if (data.state === environmentInfo_1.StateInfo.Rebuilding) {
                return data;
            }
            if (this.isReady(data)) {
                return data;
            }
            if (this.shouldStopPolling(data)) {
                return undefined;
            }
            await this.dependencies.util.delay(POLL_RATE_MS);
            if (!callbackCalled && callbackAfterTimeout && Date.now() >= callbackTime) {
                callbackCalled = true;
                callbackAfterTimeout();
            }
        }
        return codespace;
    }
    /**
     * Used when shutting down a codespace. Polls for shutdown status.
     *
     * @param codespaceId
     * @returns ICodespaceDetails if shutdown or undefined if deleted
     * @throws CommandError if any network error
     */
    async pollUntilShutdown(codespaceId) {
        let codespace;
        (0, vscs_utils_1.assertDefined)(this.dependencies, 'No `dependencies` found, please call `init` first.');
        (0, vscs_utils_1.assertDefined)(this.logger, 'No `logger` found, please call `init` first.');
        while (!codespace) {
            const data = await this.dependencies
                .getApiProvider()
                .environments.getCodespace(codespaceId);
            if (!data) {
                this.logger.info('Environment got deleted before completion');
                return data;
            }
            if (data.state !== environmentInfo_1.StateInfo.ShuttingDown) {
                return data;
            }
            await this.dependencies.util.delay(POLL_RATE_MS);
        }
        return codespace;
    }
    /**
     * Used for on the fly creation, polls for 10 minutes
     * until the request is picked up or timed out.
     *
     * @param environmentId
     * @returns EnvironmentDetailsInfo if sessionId is present or if it failed to create.
     *          Or undefined if it timed out
     * @throws CommandError if any network error
     */
    async pollUntilSessionId(codespace) {
        let codespaceInfo = undefined;
        let endPoll = Date.now() + 10 * vscs_utils_1.TIME_MINUTE_MS;
        (0, vscs_utils_1.assertDefined)(this.dependencies, 'No `dependencies` found, please call `init` first.');
        (0, vscs_utils_1.assertDefined)(this.logger, 'No `logger` found, please call `init` first.');
        if (!codespace) {
            return;
        }
        if (codespace.connection.sessionId) {
            return codespace;
        }
        while (Date.now() < endPoll) {
            codespace = await this.dependencies.getApiProvider().environments.getCodespace(codespace.environment_id);
            if (!codespace) {
                this.logger.info('Environment got deleted before completion');
                return codespace;
            }
            if (codespace.connection.sessionId || codespace.state === environmentInfo_1.StateInfo.Failed) {
                return codespace;
            }
            await this.dependencies.util.delay(POLL_RATE_MS);
        }
        return codespaceInfo;
    }
    /*Method that handles the polling of single items*/
    async pollProvisioningItems() {
        const completedItems = [];
        (0, vscs_utils_1.assertDefined)(this.dependencies, 'No `dependencies` found, please call `init` first.');
        for (let item of this.pollItems) {
            const polledItem = await this.dependencies
                .getApiProvider()
                .environments.getCodespace(item);
            if (polledItem) {
                if (polledItem.state === environmentInfo_1.StateInfo.Available ||
                    polledItem.state === environmentInfo_1.StateInfo.Failed) {
                    completedItems.push(item);
                }
            }
        }
        const newPollItems = this.pollItems.filter((x) => !completedItems.includes(x));
        this.setPollItems(newPollItems);
    }
    /*We set the items that need to be polled (it can be 0) and activate/deactivate the interval if needed*/
    setPollItems(items) {
        this.pollItems = items;
        if (this.pollItems.length > 0) {
            if (!this.pollingInterval) {
                this.pollingInterval = setInterval(() => this.pollProvisioningItems(), POLLING_INTERVAL_MS);
            }
        }
        else {
            if (this.pollingInterval)
                clearInterval(this.pollingInterval);
        }
    }
    isReady(data) {
        return data.state === environmentInfo_1.StateInfo.Available;
    }
    shouldStopPolling(data) {
        if (!data.environment_id) {
            return false;
        }
        return this.CODESPACE_STOP_POLLING_STATES.includes(data.state);
    }
}
exports.EnvironmentPolling = EnvironmentPolling;
const Instance = EnvironmentPolling.Instance;
exports.Instance = Instance;


/***/ }),

/***/ 16766:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvironmentSetup = void 0;
const nls = __webpack_require__(52730);
const environmentInfo_1 = __webpack_require__(42802);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const telemetryString_1 = __webpack_require__(91257);
const EnvironmentPolling_1 = __webpack_require__(7821);
const injectMessageParameters_1 = __webpack_require__(30393);
const opentelemetry = __webpack_require__(30775);
const OpenTelemetryProvider_1 = __webpack_require__(34396);
const progress_1 = __webpack_require__(96274);
const localize = nls.loadMessageBundle();
class EnvironmentSetup {
    constructor(dependencies) {
        this.dependencies = dependencies;
    }
    async startCodespace(telemetryEvent, codespace, progressReporter = undefined) {
        if (!codespace || !codespace.environment_id) {
            this.dependencies.notificationUtil.showWarningMessage(localize('error.unableToGetEnvInfo', 'Unable to get codespace information'));
            return undefined;
        }
        const span = opentelemetry.trace
            .getTracer(OpenTelemetryProvider_1.openTelemetryTracerName)
            .startSpan(OpenTelemetryProvider_1.OpenTelemetrySpans.resumeCodespace);
        span.setAttribute(OpenTelemetryProvider_1.openTelemetryCodespaceId, codespace.environment_id);
        const startTime = Date.now();
        let details;
        details = await this.callStartCodespace(codespace, progressReporter);
        // Mark time taken to provision resources for start.
        span.end();
        telemetryEvent.addMeasure(telemetryString_1.TelemetryMeasureNames.PROVISIONING_DURATION, Date.now() - startTime);
        if (details) {
            CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(details);
        }
        return details;
    }
    async callStartCodespace(codespace, progressReporter = undefined) {
        codespace = await this.dependencies
            .getApiProvider()
            .environments.startEnvironment(codespace);
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(codespace);
        if (!progressReporter) {
            return await EnvironmentPolling_1.EnvironmentPolling.Instance.pollUntilReady(codespace);
        }
        let codespaceDetails = await EnvironmentPolling_1.EnvironmentPolling.Instance.pollUntilRebuildingOrReady(codespace.environment_id);
        if (codespaceDetails) {
            CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.setCurrentCodespace(codespaceDetails);
            if (codespaceDetails.state === environmentInfo_1.StateInfo.Rebuilding) {
                progressReporter.update(progress_1.ProgressOptions.RebuildCodespace);
                codespaceDetails = await EnvironmentPolling_1.EnvironmentPolling.Instance.pollUntilReady(codespace);
            }
            else if (codespaceDetails.state === environmentInfo_1.StateInfo.Starting) {
                codespaceDetails = await EnvironmentPolling_1.EnvironmentPolling.Instance.pollUntilReady(codespace);
            }
        }
        return codespaceDetails;
    }
    async shutdownCodespace(codespace) {
        if (!codespace || !codespace.environment_id) {
            this.dependencies.notificationUtil.showWarningMessage(localize('error.unableToGetEnvInfo', 'Unable to get codespace information'));
            return false;
        }
        let title = localize('message.environmentSetup.title.shuttingDownEnvironment', "Stopping codespace '{}'");
        title = (0, injectMessageParameters_1.injectMessageParameters)(title, codespace.display_name);
        await this.dependencies.notificationUtil.withProgress({
            title,
            location: this.dependencies.notificationUtil.notificationProgressLocation,
        }, async () => {
            codespace = await this.dependencies
                .getApiProvider()
                .environments.shutdownCodespace(codespace);
            CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(codespace);
            const shutdownCodespace = await EnvironmentPolling_1.EnvironmentPolling.Instance.pollUntilShutdown(codespace.environment_id);
            if (shutdownCodespace) {
                CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(shutdownCodespace);
            }
        });
        return true;
    }
}
exports.EnvironmentSetup = EnvironmentSetup;


/***/ }),

/***/ 98750:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Instance = exports.ActivationTasks = void 0;
// When running in the browser we don't run activation tasks post reload.
class ActivationTasks {
    static get Instance() {
        if (!ActivationTasks.singleton) {
            return {};
        }
        return ActivationTasks.singleton;
    }
    static init(globalPath, dependencies) {
        ActivationTasks.singleton = new ActivationTasks();
    }
    putTask(task, details) { }
    runTasks() {
        return Promise.resolve();
    }
}
exports.ActivationTasks = ActivationTasks;
const Instance = ActivationTasks.Instance;
exports.Instance = Instance;


/***/ }),

/***/ 74315:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.registerCommands = void 0;
const vscode_command_framework_1 = __webpack_require__(89813);
const GetEnvironmentsList_1 = __webpack_require__(28825);
const ShowDetails_1 = __webpack_require__(81925);
const SignIn_1 = __webpack_require__(36027);
const AddNewEnvironment_1 = __webpack_require__(4485);
const DeleteEnvironment_1 = __webpack_require__(15967);
const Refresh_1 = __webpack_require__(6166);
const DocumentationLink_1 = __webpack_require__(42849);
const FeedbackLink_1 = __webpack_require__(74776);
const GetStartedLink_1 = __webpack_require__(477);
const IssuesLink_1 = __webpack_require__(93600);
const ReportIssue_1 = __webpack_require__(13368);
const SendFeedback_1 = __webpack_require__(77099);
const SetActiveRepository_1 = __webpack_require__(62409);
const Export_1 = __webpack_require__(65577);
const OpenInBrowser_1 = __webpack_require__(83740);
const ShutdownEnvironment_1 = __webpack_require__(27381);
function registerCommands(context) {
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.addEnvironment" /* addEnvironment */, AddNewEnvironment_1.AddNewEnvironment);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.environmentsList" /* environmentsList */, GetEnvironmentsList_1.GetEnvironmentsList);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.deleteEnvironment" /* deleteEnvironment */, DeleteEnvironment_1.DeleteEnvironment);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.signIn" /* signIn */, SignIn_1.SignIn);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.refresh" /* refresh */, Refresh_1.Refresh);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.getStartedLink" /* getStartedLink */, GetStartedLink_1.GetStartedLink);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.feedbackLink" /* feedbackLink */, FeedbackLink_1.FeedbackLink);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.sendFeedback" /* sendFeedback */, SendFeedback_1.SendFeedback);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.documentationLink" /* documentationLink */, DocumentationLink_1.DocumentationLink);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.issuesLink" /* issuesLink */, IssuesLink_1.IssuesLink);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.reportIssue" /* reportIssue */, ReportIssue_1.ReportIssue);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.showDetails" /* showDetailsCommand */, ShowDetails_1.ShowDetails);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.continueInCodespace" /* continueInCodespace */, AddNewEnvironment_1.AddNewEnvironment);
    vscode_command_framework_1.vslsCommands.API.registerCommand("_codespaces.setActiveRepository" /* setActiveRepository */, SetActiveRepository_1.SetActiveRepository);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.export" /* export */, Export_1.Export);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.connect" /* connect */, OpenInBrowser_1.OpenInBrowser);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.shutdownEnvironment" /* shutdownEnvironment */, ShutdownEnvironment_1.ShutdownEnvironment);
    return Promise.resolve();
}
exports.registerCommands = registerCommands;


/***/ }),

/***/ 34396:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPerformanceValues = exports.OpenTelemetryProvider = exports.OpenTelemetrySpans = exports.performanceListKey = exports.openTelemetryCodespaceId = exports.openTelemetrySpanName = exports.openTelemetryTracerName = void 0;
exports.openTelemetryTracerName = 'codespaces tracer';
exports.openTelemetrySpanName = 'opentelemetry-span';
exports.openTelemetryCodespaceId = 'codespaceId';
exports.performanceListKey = 'performanceListKey';
var OpenTelemetrySpans;
(function (OpenTelemetrySpans) {
    OpenTelemetrySpans["connectCodespace"] = "connectCodespace";
    OpenTelemetrySpans["createCodespace"] = "createCodespace";
    OpenTelemetrySpans["resumeCodespace"] = "resumeCodespace";
    OpenTelemetrySpans["githubAPICall"] = "githubAPICall";
})(OpenTelemetrySpans = exports.OpenTelemetrySpans || (exports.OpenTelemetrySpans = {}));
// The open telemetry package that we use for desktop depends on some node functionality.
// This is a no-op implementation for the browser.
class OpenTelemetryProvider {
    static init(context) { }
}
exports.OpenTelemetryProvider = OpenTelemetryProvider;
function getPerformanceValues(context, codespaceId) {
    return undefined;
}
exports.getPerformanceValues = getPerformanceValues;


/***/ }),

/***/ 2448:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.registerResolver = void 0;
function registerResolver(context, packageJSON, allowedPortPrivacySettingsByCodespace) {
    // There's no resolver in the web.
}
exports.registerResolver = registerResolver;


/***/ }),

/***/ 99387:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setupTelemetryLogging = void 0;
// The desktop implementation allows logging telemetry to a file.
// It could be useful to explore implementing this by writing to indexed db.
function setupTelemetryLogging() {
    return Promise.resolve();
}
exports.setupTelemetryLogging = setupTelemetryLogging;


/***/ }),

/***/ 89983:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isRunningInWebWorker = exports.isNodeInstalled = void 0;
async function isNodeInstalled() {
    return false;
}
exports.isNodeInstalled = isNodeInstalled;
exports.isRunningInWebWorker = true;


/***/ }),

/***/ 52730:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessageFormat = exports.BundleFormat = exports.config = exports.loadMessageBundle = void 0;
// vscode-nls is used to localize the extension. VSCode doesn't support that in the browser.
// This is a dummy implementation which return the same message so that it works for one language.
function loadMessageBundle() {
    function localize(key, message) {
        return message;
    }
    return localize;
}
exports.loadMessageBundle = loadMessageBundle;
function config(init) { }
exports.config = config;
// This is matching the name from the vscode-nls library.
// eslint-disable-next-line
exports.BundleFormat = {
    standalone: 1,
};
// This is matching the name from the vscode-nls library.
// eslint-disable-next-line
exports.MessageFormat = {
    both: 1,
};


/***/ }),

/***/ 33329:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OctokitProvider = void 0;
const rest_1 = __webpack_require__(44318);
const configuration_1 = __webpack_require__(25828);
class OctokitProvider {
    constructor(tokenProvider, dependencies) {
        this.tokenProvider = tokenProvider;
        this.dependencies = dependencies;
        this.cachedOctoKit = undefined;
    }
    async getOctokit() {
        if (!this.cachedOctoKit) {
            const auth = await this.tokenProvider.getGitHubToken();
            if (!auth) {
                throw new Error('Unable to retrieve GitHub token');
            }
            this.cachedOctoKit = new rest_1.Octokit({
                auth,
                baseUrl: (0, configuration_1.getInternalConfig)('baseUrl'),
                userAgent: this.dependencies.extensionsUtil.getUserAgent(),
            });
        }
        return this.cachedOctoKit;
    }
}
exports.OctokitProvider = OctokitProvider;


/***/ }),

/***/ 33783:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitHubApi = void 0;
const nls = __webpack_require__(52730);
const axios_retry_1 = __webpack_require__(79);
const request_error_1 = __webpack_require__(35370);
const vscs_utils_1 = __webpack_require__(19745);
const IGitHubApi_1 = __webpack_require__(85463);
const throwResponseError_1 = __webpack_require__(2076);
const vscode_command_framework_1 = __webpack_require__(89813);
const constants_1 = __webpack_require__(74780);
const injectMessageParameters_1 = __webpack_require__(30393);
const configuration_1 = __webpack_require__(25828);
const TVscsTarget_1 = __webpack_require__(27050);
const areOrgSamlTokensMissing_1 = __webpack_require__(37947);
const localize = nls.loadMessageBundle();
class GitHubApi {
    constructor(tokenProvider, octokitProvider, dependencies) {
        this.tokenProvider = tokenProvider;
        this.octokitProvider = octokitProvider;
        this.dependencies = dependencies;
        this.userReposCache = [];
        this.githubRequestIdHeader = 'x-github-request-id';
        this.logger = vscode_command_framework_1.traceSource.withName('API');
        this.userAgent = this.dependencies.extensionsUtil.getUserAgent();
    }
    async removeSelectedRepositoryFromUserSecret(secretName, repositoryId) {
        const throwCommandError = (status, errorMessage) => {
            const message = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToRemoveRepoFromUserSecret', 'Unable to remove the repo from user secret. Error status: {}, message: {}'), status, errorMessage);
            throw new vscode_command_framework_1.CommandError({ message });
        };
        await (0, vscs_utils_1.withRetries)(async (retriesLeft) => {
            const trace = this.logger.createChild(`retries-left-${retriesLeft}`);
            const route = `DELETE /user/codespaces/secrets/${secretName}/repositories/${repositoryId}`;
            trace.info(`making octokit request for route "${route}"`);
            const octokit = await this.octokitProvider.getOctokit();
            try {
                await octokit.request(route, {
                    secret_name: secretName,
                    repository_id: repositoryId,
                });
            }
            catch (err) {
                trace.error(`request to remove repo from the user secrets failed ${err}`);
                if (err instanceof request_error_1.RequestError) {
                    throwCommandError(err.status, err.message);
                }
                else {
                    throwCommandError(499);
                }
            }
        }, {
            isAggregateError: false,
            retryDelay: 0.25 * vscs_utils_1.TIME_SECOND_MS,
        });
    }
    async addSelectedRepositoryToUserSecret(secretName, repositoryId) {
        const throwCommandError = (status, errorMessage) => {
            const message = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToAddRepoToUserSecret', 'Unable to add the repo to user secret. Error status: {}, message: {}'), status, errorMessage);
            throw new vscode_command_framework_1.CommandError({ message });
        };
        return await (0, vscs_utils_1.withRetries)(async (retriesLeft) => {
            const trace = this.logger.createChild(`retries-left-${retriesLeft}`);
            const route = `PUT /user/codespaces/secrets/${secretName}/repositories/${repositoryId}`;
            trace.info(`making octokit request for route "${route}"`);
            const octokit = await this.octokitProvider.getOctokit();
            try {
                await octokit.request(route, {
                    secret_name: secretName,
                    repository_id: repositoryId,
                });
            }
            catch (err) {
                trace.error(`request to add repo to the user secrets failed ${err}`);
                if (err instanceof request_error_1.RequestError) {
                    throwCommandError(err.status, err.message);
                }
                else {
                    throwCommandError(499);
                }
            }
        }, {
            isAggregateError: false,
            retryDelay: 0.25 * vscs_utils_1.TIME_SECOND_MS,
        });
    }
    async deleteUserSecret(secretName) {
        const throwCommandError = (status, errorMessage) => {
            const message = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToDeleteUserSecret', 'Unable to delete the user secret. Error status: {}, message: {}'), status, errorMessage);
            throw new vscode_command_framework_1.CommandError({ message });
        };
        return await (0, vscs_utils_1.withRetries)(async (retriesLeft) => {
            const trace = this.logger.createChild(`retries-left-${retriesLeft}`);
            const route = `DELETE /user/codespaces/secrets/${secretName}`;
            trace.info(`making octokit request for route "${route}"`);
            const octokit = await this.octokitProvider.getOctokit();
            try {
                await octokit.request(route, {
                    secret_name: secretName,
                });
            }
            catch (err) {
                trace.error(`request to delete the user secrets failed ${err}`);
                if (err instanceof request_error_1.RequestError) {
                    throwCommandError(err.status, err.message);
                }
                else {
                    throwCommandError(499);
                }
            }
        }, {
            isAggregateError: false,
            retryDelay: 0.25 * vscs_utils_1.TIME_SECOND_MS,
        });
    }
    async getSelectedRepositoriesForUserSecret(secretName) {
        const throwCommandError = (status, errorMessage) => {
            const message = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToFetchSelectedRepositoriesForUserSecret', 'Unable to fetch selected repositories for the user secret. Error status: {}, message: {}'), status, errorMessage);
            throw new vscode_command_framework_1.CommandError({ message });
        };
        return await (0, vscs_utils_1.withRetries)(async (retriesLeft) => {
            const trace = this.logger.createChild(`retries-left-${retriesLeft}`);
            const route = `GET /user/codespaces/secrets/${secretName}/repositories`;
            trace.info(`making octokit request for route "${route}"`);
            const octokit = await this.octokitProvider.getOctokit();
            try {
                const response = await octokit.request(route, {});
                return response.data.repositories;
            }
            catch (err) {
                trace.error(`request to fetch selected repositories for the user secrets failed ${err}`);
                if (err instanceof request_error_1.RequestError) {
                    return throwCommandError(err.status, err.message);
                }
                return throwCommandError(499);
            }
        }, {
            isAggregateError: false,
            retryDelay: 0.25 * vscs_utils_1.TIME_SECOND_MS,
        });
    }
    async listUserSecrets() {
        const throwCommandError = (status, errorMessage) => {
            const message = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToFetchUserSecrets', 'Unable to fetch the user secrets. Error status: {}, message: {}'), status, errorMessage);
            throw new vscode_command_framework_1.CommandError({ message });
        };
        return await (0, vscs_utils_1.withRetries)(async (retriesLeft) => {
            const trace = this.logger.createChild(`retries-left-${retriesLeft}`);
            const route = 'GET /user/codespaces/secrets';
            trace.info(`making octokit request for route "${route}"`);
            const octokit = await this.octokitProvider.getOctokit();
            try {
                const response = await octokit.request(route, {});
                return response.data.secrets;
            }
            catch (err) {
                trace.error(`request to fetch user secrets failed ${err}`);
                if (err instanceof request_error_1.RequestError) {
                    return throwCommandError(err.status, err.message);
                }
                return throwCommandError(499);
            }
        }, {
            isAggregateError: false,
            retryDelay: 0.25 * vscs_utils_1.TIME_SECOND_MS,
        });
    }
    async createOrUpdateUserSecret(secretName, encryptedValue, keyId, selectedRepositoryIds) {
        const throwCommandError = (status, errorMessage) => {
            const message = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.failedToCreateUserSecret', 'Failed to create/update user secret. Error status: {}, message: {}'), status, errorMessage);
            throw new vscode_command_framework_1.CommandError({ message });
        };
        await (0, vscs_utils_1.withRetries)(async (retriesLeft) => {
            const trace = this.logger.createChild(`retries-left-${retriesLeft}`);
            const route = `PUT /user/codespaces/secrets/${secretName}`;
            trace.info(`making octokit request for route "${route}"`);
            const octokit = await this.octokitProvider.getOctokit();
            try {
                const requestBody = selectedRepositoryIds
                    ? {
                        secret_name: secretName,
                        encrypted_value: encryptedValue,
                        key_id: keyId,
                        selected_repository_ids: selectedRepositoryIds,
                    }
                    : {
                        secret_name: secretName,
                        encrypted_value: encryptedValue,
                        key_id: keyId,
                    };
                await octokit.request(route, requestBody);
            }
            catch (err) {
                trace.error(`request to create/update user secret failed ${err}`);
                if (err instanceof request_error_1.RequestError) {
                    throwCommandError(err.status, err.message);
                }
                else {
                    throwCommandError(499);
                }
            }
        }, {
            isAggregateError: false,
            retryDelay: 0.25 * vscs_utils_1.TIME_SECOND_MS,
        });
    }
    async getSecretsPublicKeyForUser() {
        const throwCommandError = (status, errorMessage) => {
            const message = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToGetSecretsPublicKeyForUser', 'Unable to fetch the public key for encrypting the secret. Error status: {}, message: {}'), status, errorMessage);
            throw new vscode_command_framework_1.CommandError({ message });
        };
        return await (0, vscs_utils_1.withRetries)(async (retriesLeft) => {
            const trace = this.logger.createChild(`retries-left-${retriesLeft}`);
            const route = 'GET /user/codespaces/secrets/public-key';
            trace.info(`making octokit request for route "${route}"`);
            const octokit = await this.octokitProvider.getOctokit();
            try {
                const response = await octokit.request(route, {});
                return response.data;
            }
            catch (err) {
                trace.error(`request to get secrets public key for secret encryption failed ${err}`);
                if (err instanceof request_error_1.RequestError) {
                    return throwCommandError(err.status, err.message);
                }
                return throwCommandError(499);
            }
        }, {
            isAggregateError: false,
            retryDelay: 0.25 * vscs_utils_1.TIME_SECOND_MS,
        });
    }
    async listCodespaces() {
        const throwCommandError = (status, correlationArgId, code) => {
            const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToListCodespaces', 'List codespaces request failed with status {}. Correlation ID: {}'), status, correlationArgId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `list codespaces request failed with status ${status}`,
                code,
            });
        };
        let codespaces = [];
        let missingCodespacesDueToSaml = false;
        // The user might have a lot of codespaces, so we need to loop over them in pages.
        // Load 30 at a time, and stop looping when we get to the end of the list, which is
        // either an empty list or a result set that is smaller than the page size we asked for.
        const pageSize = 30;
        let page = 1;
        while (true) {
            const response = await this.tryMakeRequest(this.makeFullApiUri(`/user/codespaces?page=${page}&per_page=${pageSize}`), 'GET');
            if (!response) {
                this.logger.error('listCodespaces error. No response received.');
                throwCommandError(499, undefined, vscode_command_framework_1.CommandErrorCode.NETWORK_ERROR);
            }
            const correlationId = response.headers[this.githubRequestIdHeader];
            if (response.status !== 200) {
                this.logger.error(`listCodespaces error. Correlation ID: ${correlationId}`);
                throwStub(() => throwCommandError(response.status, correlationId));
            }
            codespaces.push(...response.data.codespaces);
            if ((0, areOrgSamlTokensMissing_1.areOrgSamlTokensMissing)(response)) {
                missingCodespacesDueToSaml = true;
            }
            if (response.data.codespaces.length < pageSize) {
                // result set is smaller than the page size. We are at the end.
                return { codespaces, areOrgSamlTokensMissing: missingCodespacesDueToSaml };
            }
            page++;
        }
    }
    async getCodespaceByName(name) {
        const url = this.makeFullApiUri(`/user/codespaces/${name}`);
        return this.getCodespaceByUrl(url);
    }
    async getCodespace(codespace) {
        return this.getCodespaceByUrl(codespace.url);
    }
    async getSupportedClientVersion() {
        const extensionClientName = 'vscode_extension';
        const url = this.makeFullApiUri(`/codespaces_internal/supported_versions/${extensionClientName}`);
        // make sure an auth token is not added to the request
        const response = await this.tryMakeRequest(url, 'GET', undefined, undefined, {});
        if (response.status === 200) {
            return response.data;
        }
        this.logger.error(`getSupportedClientVersion unexpected status ${response.status}`);
        //fail silently
        return;
    }
    async setTelemetryLevel(telemetryLevel) {
        const url = this.makeFullApiUri('/vscs_internal/user-settings');
        const response = await this.tryMakeRequest(url, 'PATCH', {
            telemetry_level: telemetryLevel,
        });
        if (response.status > 300) {
            let detailedMessage = `Update user telemetry level failed with status ${response.status}`;
            if (response.status === 422 && response.data.errors instanceof Array) {
                detailedMessage = (0, injectMessageParameters_1.injectMessageParameters)('Malformed request: {} with errors {}', response.data.message, response.data.errors.toString());
            }
            throw new vscode_command_framework_1.CommandError({
                message: detailedMessage,
            });
        }
        return;
    }
    async getCodespaceByUrl(url) {
        const throwCommandError = (status, correlationArgId, code) => {
            const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToGetCodespace', 'Get codespace request failed with status {}. Correlation ID: {}'), status, correlationArgId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `get codespace request failed with status ${status}`,
                code,
            });
        };
        /**
         * Make the request with retries.
         */
        return await (0, vscs_utils_1.withRetries)(async (retriesLeft) => {
            var _a;
            const trace = this.logger.createChild(`retries-left-${retriesLeft}`);
            trace.info(`making GET request for "${url}"`);
            // Add extra query params to get additional internal info and force a live refresh
            url = url + '?internal=true&refresh=true';
            const response = await this.tryMakeRequest(url, 'GET');
            if (!response) {
                trace.error('getCodespace error. No response received.');
                return throwCommandError(499, undefined, vscode_command_framework_1.CommandErrorCode.NETWORK_ERROR);
            }
            if (response.status === 200) {
                return response.data;
            }
            if (response.status === 404) {
                return;
            }
            const correlationId = (_a = response.headers) === null || _a === void 0 ? void 0 : _a[this.githubRequestIdHeader];
            trace.error(`getCodespace error. Correlation ID: ${correlationId}`);
            return throwCommandError(response.status, correlationId);
        }, {
            isAggregateError: false,
            retryDelay: 0.25 * vscs_utils_1.TIME_SECOND_MS,
        });
    }
    async createCodespace(repo, ref, options = {}) {
        var _a, _b, _c;
        const body = {
            ref,
            machine: options.skuName,
            devcontainer_path: options.devcontainerPath,
            multi_repo_permissions_opt_out: options.multiRepoPermissionsOptOut,
        };
        const vscsTarget = await this.getVscsTarget();
        if (vscsTarget) {
            body.vscs_target = vscsTarget;
            if (vscsTarget === IGitHubApi_1.VscsTarget.Local) {
                const vscsTargetUrl = await this.getVscsTargetUrl();
                if (vscsTargetUrl) {
                    body.vscs_target_url = vscsTargetUrl;
                }
            }
        }
        const vscsRegion = await this.getVscsRegion();
        if (vscsRegion) {
            body.location = vscsRegion;
        }
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/repos/${repo.owner}/${repo.name}/codespaces`), 'POST', body);
        if (response.status < 300) {
            return response.data;
        }
        if (response.status === 402) {
            const learnMore = { title: localize('button.learnMore', 'Learn more') };
            const billingMessage = ((_a = response.data) === null || _a === void 0 ? void 0 : _a.message) || 'Billing Error';
            this.dependencies.notificationUtil
                .showErrorMessage(billingMessage, learnMore)
                .then(async (msgItem) => {
                if (msgItem === learnMore) {
                    await this.dependencies.extensionsUtil.openLinkInBrowser('https://aka.ms/codespaces-billing-limit');
                }
            });
            throw new vscode_command_framework_1.CommandError({
                userMessage: billingMessage,
            }).withSuppressUserNotification(true);
        }
        const errorDetails = ((_b = response.data) === null || _b === void 0 ? void 0 : _b.message) || 'Unknown Error';
        const correlationId = response.headers[this.githubRequestIdHeader];
        if (response.status === 401 && response.data.hasOwnProperty('allow_permissions_url')) {
            // Prompt to accept permissions in the GitHub UI.
            const allowPermissionsUrl = (_c = response.data) === null || _c === void 0 ? void 0 : _c.allow_permissions_url;
            throw new vscode_command_framework_1.CommandError({
                message: errorDetails,
                userMessage: allowPermissionsUrl,
                code: vscode_command_framework_1.CommandErrorCode.REQUESTING_PERMISSIONS,
            }).withSuppressUserNotification(true);
        }
        const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToCreateCodespace', 'Request failed with status {}: {}. Correlation ID: {}'), response.status, errorDetails, correlationId);
        const code = response.status === 403
            ? vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED
            : vscode_command_framework_1.CommandErrorCode.REMOTE_DEPENDENCY;
        this.logger.error(`createCodespace error. Correlation ID: ${correlationId}`);
        throw new vscode_command_framework_1.CommandError({
            userMessage,
            message: `Create codespace request failed with status ${response.status}: ${errorDetails}`,
            code,
        });
    }
    async deleteCodespace(codespaceName) {
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/user/codespaces/${codespaceName}`), 'DELETE');
        const correlationId = response.headers[this.githubRequestIdHeader];
        if (response.status < 300) {
            return;
        }
        this.logger.error(`deleteCodespace error. Correlation ID: ${correlationId}`);
        const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToDeleteCodespace', 'Delete codespace request failed with status {}: {}. Correlation ID: {}'), response.status, response.data.message, correlationId);
        throw new vscode_command_framework_1.CommandError({
            userMessage,
            message: `delete codespace request failed: ${response.status}`,
        });
    }
    async stopCodespace(codespace) {
        const throwCommandError = (status, message, correlationArgId, code) => {
            // The error is from GH
            const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToStopCodespace', 'Stop codespace request failed with status {}: {}. Correlation ID: {}'), status, message, correlationArgId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `Stop codespace request failed with status ${status}: ${message}`,
                code,
            });
        };
        try {
            const response = await this.makeRequest(codespace.stop_url, 'POST', undefined, undefined);
            // On success, the response will be environment record from the VSCS FE
            return response.data;
        }
        catch (e) {
            const correlationId = e.response.headers[this.githubRequestIdHeader];
            this.logger.error(`stopCodespace error. Correlation ID: ${correlationId}`);
            if (e.response.status === 403) {
                throwCommandError(403, vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED, codespace);
            }
            if (e.response.status === 404) {
                throwCommandError(403, 'codespace not found.', codespace);
            }
            (0, throwResponseError_1.throwResponseError)(e, { nlsParameters: [codespace.name] });
        }
    }
    async startCodespace(codespace) {
        var _a;
        const throwCommandError = (status, message, correlationArgId, code) => {
            // The error is from GH
            const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToStartCodespace', 'Start codespace request failed with status {}: {}. Correlation ID: {}'), status, message, correlationArgId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `Start codespace request failed with status ${status}: ${message}`,
                code,
            });
        };
        try {
            const response = await this.makeRequest(codespace.start_url, 'POST', undefined, undefined);
            if (!response) {
                this.logger.error('startCodespace error. No response received.');
                throwCommandError(499, 'no response', undefined, vscode_command_framework_1.CommandErrorCode.NETWORK_ERROR);
            }
            // On success, the response will be environment record from the VSCS FE
            return response.data;
        }
        catch (e) {
            const correlationId = e.response.headers[this.githubRequestIdHeader];
            this.logger.error(`startCodespace error. Correlation ID: ${correlationId}`);
            this.checkMachinePolicyCode(e.response.status, e.response.data.message, codespace);
            this.checkSpendingLimitCode(e.response.status, codespace);
            if ((_a = e.response.data) === null || _a === void 0 ? void 0 : _a.message) {
                const code = e.response.status >= 400 && e.response.status < 500
                    ? vscode_command_framework_1.CommandErrorCode.BAD_REQUEST
                    : undefined;
                throwStub(() => throwCommandError(e.response.status, e.response.data.message, correlationId, code));
            }
            else {
                // The error is from VSCS
                (0, throwResponseError_1.throwResponseError)(e, { nlsParameters: [codespace.name] });
            }
        }
    }
    async forkCodespaceRepository(codespace) {
        var _a;
        try {
            const username = await this.getUsername();
            const response = await this.makeRequest(this.makeFullApiUri(`/vscs_internal/user/${username}/codespaces/${codespace.name}/fork_repo`), 'POST', undefined, undefined);
            if (!response) {
                this.logger.error('Forking codespace repo failed. No response received.');
                return;
            }
            return response.data;
        }
        catch (e) {
            const correlationId = (_a = e.response) === null || _a === void 0 ? void 0 : _a.headers[this.githubRequestIdHeader];
            this.logger.error(`Forking codespace repo failed. Correlation ID: ${correlationId}. Error: {e.message}`);
        }
        return;
    }
    async exportCodespace(codespace) {
        var _a, _b;
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/user/codespaces/${codespace.name}/exports`), 'POST');
        if (!response) {
            this.logger.error('Exporting codespace failed. No response received.');
            return;
        }
        if (response.status === 404) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToExport', 'Export changes failed because the codespace could not be found.'),
                message: 'Export changes failed because the codespace could not be found.',
            });
        }
        if (response.status === 422) {
            if (((_a = response.data) === null || _a === void 0 ? void 0 : _a.message) === 'An export of that codespace is already in progress') {
                throw new vscode_command_framework_1.CommandError({
                    userMessage: localize('error.exportInProgress', 'An export is already in progress.'),
                    message: 'An export is already in progress.',
                });
            }
            if (((_b = response.data) === null || _b === void 0 ? void 0 : _b.message) === 'Codespace must be provisioned') {
                throw new vscode_command_framework_1.CommandError({
                    userMessage: localize('error.codespaceNeedsProvisioning', 'Cannot export changes until codespace finishes provisioning.'),
                    message: 'Cannot export changes until codespace finishes provisioning.',
                });
            }
        }
        // Success!
        if ((response === null || response === void 0 ? void 0 : response.status) === 202) {
            return response.data;
        }
        // Handle any other errors.
        throw new vscode_command_framework_1.CommandError({
            userMessage: localize('error.exportUnknownError', 'An error occurred when exporting this codespace.'),
            message: 'An error occurred when exporting this codespace.',
        });
    }
    async getLatestExportDetails(exportUrl) {
        const response = await this.tryMakeRequest(exportUrl, 'GET');
        if ((response === null || response === void 0 ? void 0 : response.status) === 200) {
            return response.data;
        }
        return;
    }
    async getAvailableMachinesForRepo(repo, ref) {
        const target = await this.getVscsTarget();
        const targetQueryParam = target ? `&vscs_target=${target}` : '';
        const vscsRegion = await this.getVscsRegion();
        const locationParam = vscsRegion ? `&location=${vscsRegion}` : '';
        const url = this.makeFullApiUri(`/repos/${repo.owner}/${repo.name}/codespaces/machines?&ref=${encodeURIComponent(ref)}${targetQueryParam}${locationParam}`);
        return await this.listMachinesInternal(url);
    }
    getAvailableMachinesForCodespace(codespace) {
        return this.listMachinesInternal(codespace.machines_url);
    }
    async updateMachine(codespaceUrl, machine) {
        const body = {
            machine: machine,
        };
        const response = await this.tryMakeRequest(codespaceUrl, 'PATCH', body);
        if (response.status < 300) {
            return true;
        }
        else {
            const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToUpdateMachineType', 'Failed to update machine type with status {}'), response.status);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `update machine type request failed with status ${response.status}`,
            });
        }
    }
    async updateRecentFoldersList(codespace, newList) {
        const body = {
            recent_folders: newList.RecentFolderPaths,
        };
        const response = await this.tryMakeRequest(codespace.url, 'PATCH', body);
        if (response.status < 300) {
            return response.data;
        }
        else {
            const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToUpdateRecentFolders', 'Failed to update recent folders with status {}'), response.status);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `update recent folders request failed with status ${response.status}`,
            });
        }
    }
    async getCascadeToken(codespace) {
        return (await this.makeTokenRequest(codespace, false)).token;
    }
    async getRepo(owner, repo) {
        const octokit = await this.octokitProvider.getOctokit();
        const response = await octokit.repos.get({ owner, repo });
        if (response.status === 200) {
            const { id, default_branch } = response.data;
            return { id, owner, name: repo, defaultBranch: default_branch };
        }
        const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToGetRepo', 'Get repo request failed with status {}'), response.status);
        throw new vscode_command_framework_1.CommandError({
            userMessage,
            message: `get repo request failed with status ${response.status}`,
        });
    }
    async isCreationAllowed(owner, repo) {
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/repos/${owner}/${repo}/codespaces/machines`), 'GET');
        if (response.status !== 200) {
            return false;
        }
        return response.data.total_count > 0;
    }
    async getBranch(owner, repo, branch) {
        const octokit = await this.octokitProvider.getOctokit();
        const response = await octokit.repos.getBranch({
            owner,
            repo,
            branch,
        });
        if (response.status === 200) {
            return { name: branch };
        }
        const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToGetBranch', 'Get branch request failed with status {}'), response.status);
        throw new vscode_command_framework_1.CommandError({
            userMessage,
            message: `get branch request failed with status ${response.status}`,
        });
    }
    async listBranchNames(owner, repo) {
        const octokit = await this.octokitProvider.getOctokit();
        const response = await octokit.repos.listBranches({
            per_page: 100,
            owner,
            repo,
        });
        if (response.status === 200) {
            return response.data.map((br) => br.name);
        }
        const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToListBranches', 'List branches request failed with status {}'), response.status);
        throw new vscode_command_framework_1.CommandError({
            userMessage,
            message: `list branches request failed with status ${response.status}`,
        });
    }
    async listDevContainers(repoId, ref) {
        const throwCommandError = (status, correlationArgId, code) => {
            const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableTolistDevContainers', 'List devcontainer definitions request failed with status {}. Correlation ID: {}'), status, correlationArgId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `list devcontainer definitions request failed with status ${status}`,
                code,
            });
        };
        let devcontainers = [];
        // Cap list at 100 results - if there's a use case for a repo having more devcontainers,
        // then maybe it makes the most sense to update the list-devcontainers endpoint to support
        // ngram string matches so you could type part of the file path to narrow the result set.
        const pageSize = 100;
        const page = 1;
        const path = `/repositories/${repoId}/codespaces/devcontainers`;
        const params = `ref=${ref}&page=${page}&per_page=${pageSize}`;
        const response = await this.tryMakeRequest(this.makeFullApiUri(`${path}?${params}`), 'GET');
        if (!response) {
            this.logger.error('listDevContainers error. No response received.');
            throwCommandError(499, undefined, vscode_command_framework_1.CommandErrorCode.NETWORK_ERROR);
        }
        const correlationId = response.headers[this.githubRequestIdHeader];
        // TODO: remove this 404 swallow block once codespaces_multi_devcontainer feature flag is removed
        if (response.status === 404) {
            this.logger.warning('listDevContainers returned 404 possibly because user ' +
                'does not have feature flag enabled; returning empty list');
            return [];
        }
        if (response.status !== 200) {
            this.logger.error(`listDevContainers error. Correlation ID: ${correlationId}`);
            throwStub(() => throwCommandError(response.status, correlationId));
        }
        // TODO: remove this workaround to lack of api versioning once codespaces_multi_devcontainer feature flag is removed
        let responseDevcontainers = response.data.devcontainers;
        if (responseDevcontainers.length !== 0 && typeof responseDevcontainers[0] === 'string') {
            responseDevcontainers = responseDevcontainers.map((devcontainer) => {
                return { path: devcontainer, name: undefined };
            });
        }
        devcontainers.push(...responseDevcontainers);
        return devcontainers;
    }
    async listRepos(query) {
        const octokit = await this.octokitProvider.getOctokit();
        const toRepo = (item) => ({
            id: item.id,
            owner: item.owner.login,
            name: item.name,
            defaultBranch: item.default_branch,
            description: item.description,
        });
        let queryResult = [];
        if (!query) {
            const user = await octokit.users.getAuthenticated({});
            const username = user.data.login;
            const res = await octokit.repos.listForUser({
                username,
                sort: 'updated',
                per_page: 100,
            });
            this.userReposCache = res.data.map(toRepo);
        }
        else {
            queryResult = (await octokit.search.repos({ q: query, sort: 'updated' })).data.items.map(toRepo);
        }
        const repoToString = (r) => `${r.owner}/${r.name}`;
        const userRepos = new Set(this.userReposCache.map(repoToString));
        return [
            ...this.userReposCache,
            ...queryResult.filter((r) => !userRepos.has(repoToString(r))),
        ];
    }
    async getAnalyticsTrackingId() {
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/codespaces_internal/analytics_tracking_id`), 'GET');
        if (response.status !== 200) {
            return '';
        }
        return response.data.analytics_tracking_id || '';
    }
    async listMachinesInternal(url) {
        const response = await this.tryMakeRequest(url, 'GET');
        const correlationId = response.headers[this.githubRequestIdHeader];
        if (response.status < 300) {
            if (response.data.error) {
                const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToListMachines', '{} Correlation ID: {}'), response.data.error, correlationId);
                throw new vscode_command_framework_1.CommandError({
                    userMessage,
                    message: `list machines failed with status ${response.status}`,
                });
            }
            return response.data.machines.map((s) => ({
                name: s.name,
                displayName: s.display_name,
                os: s.operating_system,
                storage_in_bytes: s.storage_in_bytes,
                prebuildAvailability: s.prebuild_availability,
            }));
        }
        this.logger.error(`ListMachines error. Correlation ID: ${correlationId}`);
        throw new vscode_command_framework_1.CommandError({
            message: `Error retrieving available machine types. Status code: ${response.status}. Correlation ID: ${correlationId}`,
        });
    }
    async getUsername() {
        const name = await this.tokenProvider.getUsername();
        if (!name) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToGetGitHubUsername', 'Unable to retrieve GitHub username'),
                message: 'Unable to retrieve GitHub username',
            });
        }
        return name;
    }
    async getVscsTarget() {
        const isInternalUser = this.dependencies.extensionsUtil.getIsInternalUser();
        if (!isInternalUser) {
            return;
        }
        const target = (0, configuration_1.getInternalConfig)('vscsTarget');
        // Production should be implied instead of explicitly used in API calls
        // If the user has set production in the config file, just silently skip it
        // to make normal API calls without the target specified.
        if (target === TVscsTarget_1.TVscsTarget.Production) {
            return;
        }
        return target;
    }
    async getVscsTargetUrl() {
        const isInternalUser = this.dependencies.extensionsUtil.getIsInternalUser();
        if (!isInternalUser) {
            return;
        }
        return (0, configuration_1.getInternalConfig)('vscsTargetUrl');
    }
    async getVscsRegion() {
        const isInternalUser = this.dependencies.extensionsUtil.getIsInternalUser();
        if (!isInternalUser) {
            return;
        }
        return (0, configuration_1.getInternalConfig)('vscsRegion');
    }
    async makeTokenRequest(codespace, repoToken) {
        const throwCommandError = (status, correlationArgId, code) => {
            const userMessage = (0, injectMessageParameters_1.injectMessageParameters)(localize('error.unableToExchangeGithubToken', 'Codespace token exchange request failed with status {}. Correlation ID: {}'), status, correlationArgId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `Codespace token exchange request failed with status ${status}`,
                code,
            });
        };
        const username = await this.getUsername();
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/vscs_internal/user/${username}/codespaces/${codespace.name}/token`), 'POST', {
            mint_repository_token: repoToken,
        }, {
            // Normally retries only happen for idempotent requests (not POST).
            // Setup the retry condition to have the same underlying checks
            // except for the HTTP request method.
            retryCondition: (e) => (0, axios_retry_1.isRetryableError)(e) || (0, axios_retry_1.isNetworkError)(e),
        });
        if (!response) {
            throwCommandError(499, undefined, vscode_command_framework_1.CommandErrorCode.NETWORK_ERROR);
        }
        this.checkSpendingLimitCode(response.status, codespace);
        if (response.status === 200) {
            return response.data;
        }
        const correlationId = response.headers[this.githubRequestIdHeader];
        this.logger.error(`Token exchange request failed. Correlation ID: ${correlationId}`);
        throwStub(() => throwCommandError(response.status, correlationId));
    }
    async getGitHubTokenOrThrow() {
        const token = await this.tokenProvider.getGitHubToken();
        if (!token) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToGetGitHubToken', 'Unable to retrieve GitHub token'),
                message: 'Not authenticated',
                code: vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED,
            });
        }
        return token;
    }
    makeFullApiUri(endpoint) {
        const base = (0, configuration_1.getInternalConfig)('baseUrl');
        return `${base}${endpoint}`;
    }
    async tryMakeRequest(uri, method, body, retryConfig, config) {
        try {
            return await this.makeRequest(uri, method, body, retryConfig, config);
        }
        catch (err) {
            return err.response;
        }
    }
    async makeRequest(uri, method, body, retryConfig, config) {
        if (!config) {
            const token = await this.getGitHubTokenOrThrow();
            config = {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            };
        }
        if (!config.headers) {
            config.headers = {};
        }
        config.headers.Accept = 'application/vnd.github.v3+json';
        config.headers['User-Agent'] = this.userAgent;
        if (retryConfig) {
            config['axios-retry'] = retryConfig;
        }
        switch (method) {
            case 'GET':
                return await this.dependencies.httpClientUtil.get(uri, config);
            case 'POST':
                return await this.dependencies.httpClientUtil.post(uri, body, config);
            case 'PATCH':
                return await this.dependencies.httpClientUtil.patch(uri, body, config);
            case 'DELETE':
                return await this.dependencies.httpClientUtil.delete(uri, config);
            default:
                throw new Error('Unsupported HTTP method');
        }
    }
    checkSpendingLimitCode(responseCode, codespace) {
        if (responseCode === 402) {
            const reviewItem = { title: localize('button.learnMore', 'Learn more') };
            const exportItem = { title: localize('button.export', 'Export changes') };
            const localizedErrorMessage = localize('error.spendingLimitHit', 'There seems to be a billing problem with this codespace.');
            this.dependencies.notificationUtil
                .showErrorMessage(localizedErrorMessage, reviewItem, exportItem)
                .then(async (msgItem) => {
                if (msgItem === exportItem) {
                    await this.dependencies.commandUtil.executeCommand("github.codespaces.export" /* export */, {
                        name: codespace.name,
                    });
                }
                else if (msgItem === reviewItem) {
                    await this.dependencies.extensionsUtil.openLinkInBrowser('https://aka.ms/codespaces-billing-limit');
                }
            });
            throw new vscode_command_framework_1.CommandError({
                code: vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED,
                message: constants_1.GH_SPENDING_LIMIT_IDENTIFIER,
                userMessage: localizedErrorMessage,
            }).withSuppressUserNotification(true);
        }
    }
    checkMachinePolicyCode(responseCode, errorMessage, codespace) {
        if (responseCode === 403 && /machine type/.test(errorMessage)) {
            const changeMachineItem = {
                title: localize('button.changeMachineType', 'Change machine type'),
            };
            const exportItem = { title: localize('button.export', 'Export changes') };
            const localizedErrorMessage = localize('error.machinePolicyViolation', "This codespace is using a machine type disallowed by your organization or enterprise's settings.");
            this.dependencies.notificationUtil
                .showErrorMessage(localizedErrorMessage, changeMachineItem, exportItem)
                .then(async (msgItem) => {
                if (msgItem === exportItem) {
                    await this.dependencies.commandUtil.executeCommand("github.codespaces.export" /* export */, {
                        name: codespace.name,
                    });
                }
                else if (msgItem === changeMachineItem) {
                    await this.dependencies.commandUtil.executeCommand("github.codespaces.changeMachineType" /* changeSku */);
                }
            });
            throw new vscode_command_framework_1.CommandError({
                code: vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED,
                message: constants_1.GH_MACHINE_POLICY_IDENTIFIER,
                userMessage: localizedErrorMessage,
            }).withSuppressUserNotification(true);
        }
    }
}
exports.GitHubApi = GitHubApi;
function throwStub(invoke) {
    invoke();
}


/***/ }),

/***/ 56745:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitHubApiProvider = void 0;
const nls = __webpack_require__(52730);
const vso_workspace_core_1 = __webpack_require__(91714);
const githubEnvironmentsApi_1 = __webpack_require__(17181);
const vscode_jsonrpc_1 = __webpack_require__(83730);
const githubApi_1 = __webpack_require__(33783);
const OctokitProvider_1 = __webpack_require__(33329);
const githubAuthentication_1 = __webpack_require__(64211);
const vscode_1 = __webpack_require__(89496);
const vscode_command_framework_1 = __webpack_require__(89813);
const localize = nls.loadMessageBundle();
class GitHubApiProvider {
    constructor(dependencies) {
        this.dependencies = dependencies;
        this.onSignInChangeEmitter = new vscode_jsonrpc_1.Emitter();
        this.initializationComplete = false;
        this.onSignInChanged = this.onSignInChangeEmitter.event;
        this.logger = vscode_command_framework_1.traceSource.withName('API');
        this.tokenProvider = new githubAuthentication_1.GitHubAuthentication(() => this.onAuthenticationChanged());
        this.github = new githubApi_1.GitHubApi(this.tokenProvider, new OctokitProvider_1.OctokitProvider(this.tokenProvider, this.dependencies), this.dependencies);
        this.environments = new githubEnvironmentsApi_1.GitHubEnvironmentsApi(this.github, dependencies.util, dependencies.httpClientUtil);
    }
    async init() {
        if (this.initializationComplete) {
            return;
        }
        const githubAuthExtension = vscode_1.extensions.getExtension('vscode.github-authentication');
        await (githubAuthExtension === null || githubAuthExtension === void 0 ? void 0 : githubAuthExtension.activate());
        // Only use a cached token if it exists so that we do not pop open a modal sign in dialog during activation
        await this.signIn(true);
        this.initializationComplete = true;
    }
    async signIn(cacheOnlySignIn = false, forceNewAuthSession = false) {
        if (this.isSignedIn() && !forceNewAuthSession) {
            return;
        }
        let signInSuccess;
        try {
            if (cacheOnlySignIn) {
                // Calling `hasCachedToken` results in a side effect that loads
                // the existing session from the authentication provider.
                signInSuccess = await this.tokenProvider.hasCachedToken();
            }
            else {
                signInSuccess = await this.tokenProvider.signIn(forceNewAuthSession);
            }
        }
        catch (err) {
            this.logger.warning(`Failed to sign in: ${err.message}`);
            signInSuccess = false;
        }
        if (!signInSuccess) {
            this.logger.info(`Signing out due to unsuccessful sign in attempt`);
            await this.signOut();
            return;
        }
        this.logger.info(`Successfully signed in`);
        this.onAuthenticationChanged();
    }
    async signOut() {
        if (!this.isSignedIn()) {
            return;
        }
        await this.tokenProvider.signOut();
        this.onAuthenticationChanged();
    }
    isSignedIn() {
        return this.tokenProvider.isSignedIn();
    }
    getSession() {
        return this.tokenProvider.getSession();
    }
    async getWorkspaceApi(codespace, trace) {
        const token = await this.github.getCascadeToken(codespace);
        if (!token) {
            throw new Error(localize('error.cascadeTokenExchangeFailed', 'Unable to exchange a cascade token.'));
        }
        return new vso_workspace_core_1.WorkspaceApi(codespace.connection.serviceUri, () => token, trace);
    }
    getTelemetryId() {
        return this.github.getAnalyticsTrackingId();
    }
    getAccessToken() {
        return this.tokenProvider.getGitHubToken();
    }
    getUsername() {
        return this.tokenProvider.getUsername();
    }
    onAuthenticationChanged() {
        if (!this.initializationComplete) {
            // This avoids updating the value while connecting to a remote session which causes an error
            return;
        }
        this.onSignInChangeEmitter.fire(undefined);
    }
}
exports.GitHubApiProvider = GitHubApiProvider;


/***/ }),

/***/ 17181:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitHubEnvironmentsApi = void 0;
const nls = __webpack_require__(52730);
const vscode_command_framework_1 = __webpack_require__(89813);
const IGitHubApi_1 = __webpack_require__(85463);
const localize = nls.loadMessageBundle();
class GitHubEnvironmentsApi {
    constructor(api, util, httpClient) {
        this.api = api;
        this.util = util;
        this.httpClient = httpClient;
        this.vssaasRequestId = 'vssaas-request-id';
        this.logger = vscode_command_framework_1.traceSource.withName('API');
    }
    getRepo(owner, repo) {
        return this.api.getRepo(owner, repo);
    }
    isCreationAllowed(owner, repo) {
        return this.api.isCreationAllowed(owner, repo);
    }
    getBranch(owner, repo, branch) {
        return this.api.getBranch(owner, repo, branch);
    }
    getMachinesForCreation(repo, ref) {
        return this.api.getAvailableMachinesForRepo(repo, ref);
    }
    getAvailableMachines(codespace) {
        return this.api.getAvailableMachinesForCodespace(codespace);
    }
    listRepos(query) {
        if (query && query.includes('/')) {
            const [user, repo] = query.split('/');
            const repoPrefix = repo ? `${repo}+` : '';
            query = `${repoPrefix}user:${user}`;
        }
        return this.api.listRepos(query);
    }
    listCodespaces() {
        return this.api.listCodespaces();
    }
    updateMachine(codespaceUrl, machine) {
        return this.api.updateMachine(codespaceUrl, machine);
    }
    listBranchNames(owner, name) {
        return this.api.listBranchNames(owner, name);
    }
    listDevContainers(repoId, ref) {
        return this.api.listDevContainers(repoId, ref);
    }
    async getCodespaceByName(name) {
        return this.api.getCodespaceByName(name);
    }
    async getCodespace(environmentId) {
        const codespaces = (await this.api.listCodespaces()).codespaces;
        const codespaceInfo = codespaces.find((ws) => ws.environment_id === environmentId);
        if (!codespaceInfo) {
            return undefined;
        }
        return await this.api.getCodespace(codespaceInfo);
    }
    setTelemetryLevel(telemetryLevel) {
        return this.api.setTelemetryLevel(telemetryLevel);
    }
    async getSupportedClientVersion() {
        return await this.api.getSupportedClientVersion();
    }
    async provisionCodespace(repo, repoRef, options = {}) {
        const codespaceMetadata = await this.api.createCodespace(repo, repoRef, options);
        let codespace = await this.api.getCodespace(codespaceMetadata);
        // Poll for up to 2 minutes for environment info to appear on GitHub codespace record
        const timeout = Date.now() + 2 * 60 * 1000;
        while (!(codespace === null || codespace === void 0 ? void 0 : codespace.environment_id) && Date.now() < timeout) {
            await this.util.delay(1000);
            codespace = await this.api.getCodespace(codespaceMetadata);
        }
        if (!codespace) {
            throw new vscode_command_framework_1.CommandError({
                message: 'Error retrieving details for newly provisioned codespace',
                userMessage: localize('error.unableToGetCreatedCodespace', 'Unable to retrieve details for created codespace'),
            });
        }
        return codespace;
    }
    deleteCodespace(codespace) {
        return this.api.deleteCodespace(codespace.name);
    }
    async shutdownCodespace(codespace) {
        return await this.api.stopCodespace(codespace);
    }
    async startEnvironment(codespace) {
        await this.api.startCodespace(codespace);
        const result = await this.api.getCodespace(codespace);
        if (!result) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToStartCodespace', 'Unable to start the codespace.'),
                message: 'Error retrieving codespace details after starting',
            });
        }
        return result;
    }
    async forkCodespaceRepository(codespace) {
        return this.api.forkCodespaceRepository(codespace);
    }
    async updateRecentFoldersList(codespace, newList) {
        const result = await this.api.updateRecentFoldersList(codespace, newList);
        if (!result) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToStartCodespace', 'Unable to update recent folders.'),
                message: 'Error retrieving codespace details after update',
            });
        }
        return result;
    }
    async primePortForwardingConnection(codespace, port) {
        const token = await this.api.getCascadeToken(codespace);
        if (!token) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToGetCascadeToken', 'Unable to retrieve a cascade token.'),
                message: 'GitHubEnvironmentApi found no cached tokens',
                code: vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED,
            });
        }
        const endpointTemplate = this.getPortForwardingUrlTemplate(codespace);
        const managementEndpoint = endpointTemplate.replace('{0}', 'management');
        await this.httpClient
            .post(`${managementEndpoint}/api/v1/PortForwardingConnections`, {
            id: codespace.environment_id,
            port,
        }, {
            headers: { Authorization: `Bearer ${token}` },
        })
            .catch((err) => {
            this.logger.error(`connection priming error.`, err);
        });
        return this.getPortForwardingServiceAddress(codespace, port);
    }
    async getPortForwardingServiceAddress(codespace, port) {
        const endpointTemplate = this.getPortForwardingUrlTemplate(codespace);
        const portHostname = endpointTemplate.replace('{0}', `${codespace.name}-${port}`);
        return portHostname;
    }
    getPortForwardingUrlTemplate(codespace) {
        switch (codespace.vscs_target) {
            case IGitHubApi_1.VscsTarget.Local:
                return 'https://{0}.githubpreview.localhost';
            case IGitHubApi_1.VscsTarget.Development:
            case IGitHubApi_1.VscsTarget.LatestDev:
                return 'https://{0}.dev.githubpreview.dev';
            case IGitHubApi_1.VscsTarget.Ppe:
            case IGitHubApi_1.VscsTarget.LatestPpe:
                return 'https://{0}.ppe.githubpreview.dev';
            case IGitHubApi_1.VscsTarget.Production:
            case IGitHubApi_1.VscsTarget.LatestProd:
                return 'https://{0}.githubpreview.dev';
            default:
                return 'https://{0}.githubpreview.dev';
        }
    }
    async exportCodespace(codespace) {
        return this.api.exportCodespace(codespace);
    }
    async getLatestExportDetails(exportUrl) {
        return this.api.getLatestExportDetails(exportUrl);
    }
}
exports.GitHubEnvironmentsApi = GitHubEnvironmentsApi;


/***/ }),

/***/ 64211:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitHubAuthentication = void 0;
const vscode_command_framework_1 = __webpack_require__(89813);
const vscodeNativeAuthTokenProvider_1 = __webpack_require__(78885);
const configuration_1 = __webpack_require__(25828);
const scopes = ['read:user', 'user:email', 'repo', 'codespace'];
class GitHubAuthentication extends vscodeNativeAuthTokenProvider_1.VsCodeNativeAuthTokenProvider {
    constructor(changeEvent, logger) {
        logger = logger !== null && logger !== void 0 ? logger : vscode_command_framework_1.traceSource.withName('Authentication');
        super('github', scopes, logger);
        this.changeEvent = changeEvent;
        this.gitHubUser = (0, configuration_1.getInternalConfig)('gitHubUser');
    }
    async signOut() {
        await super.signOut();
        this.changeEvent();
    }
    async signIn(forceNewAuthSession = false) {
        const result = await super.signIn(forceNewAuthSession);
        this.changeEvent();
        return result;
    }
    async getUsername() {
        var _a, _b;
        if (this.gitHubUser) {
            return this.gitHubUser.username;
        }
        const sessionUsername = (_b = (_a = this.session) === null || _a === void 0 ? void 0 : _a.account) === null || _b === void 0 ? void 0 : _b.label;
        if (sessionUsername) {
            return sessionUsername;
        }
        return undefined;
    }
    getGitHubToken() {
        if (this.gitHubUser) {
            return Promise.resolve(this.gitHubUser.token);
        }
        return super.getAccessToken();
    }
}
exports.GitHubAuthentication = GitHubAuthentication;


/***/ }),

/***/ 78885:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VsCodeNativeAuthTokenProvider = void 0;
const vscode = __webpack_require__(89496);
const vs_ssh_1 = __webpack_require__(92126);
class VsCodeNativeAuthTokenProvider {
    constructor(providerId, scopes, logger, vscodeAPIAuth = vscode.authentication) {
        this.providerId = providerId;
        this.scopes = scopes;
        this.logger = logger;
        this.vscodeAPIAuth = vscodeAPIAuth;
        this.scopes = this.scopes.sort();
        this.vscodeAPIAuth.onDidChangeSessions(this.handleOnDidChangeSessions.bind(this));
        this.tryLoadSession(false).catch(); // Optimistically try to sign in, but not an error if it doesn't work
    }
    async handleOnDidChangeSessions() {
        // update session based on whether user has vscode auth sessions registered in vscode auth api
        const session = this.session;
        const vscodeAuthSessionExists = await this.tryLoadSession(false, true, false);
        if (session && !vscodeAuthSessionExists) {
            await this.signOut();
        }
        else if (!session && vscodeAuthSessionExists) {
            await this.signIn();
        }
    }
    async tryLoadSession(forceLogin, skipCachedSessionCheck = false, forceNewAuthSession = false) {
        try {
            if (this.session && !forceLogin && !skipCachedSessionCheck) {
                return true;
            }
            if (forceNewAuthSession) {
                // create new session (w org SAML tokens)
                this.session = await this.vscodeAPIAuth.getSession(this.providerId, this.scopes, {
                    forceNewSession: true,
                });
            }
            else {
                this.session = await this.vscodeAPIAuth.getSession(this.providerId, this.scopes, {
                    createIfNone: forceLogin,
                    clearSessionPreference: forceLogin,
                    silent: !forceLogin,
                });
            }
            if (this.session) {
                return true;
            }
            else {
                this.logger.info('Did not find existing login session');
            }
        }
        catch (err) {
            // Log error, but just return false
            this.logger.warning(`Failed to load session: ${err.message}`);
        }
        return false;
    }
    isSignedIn() {
        return this.session !== undefined;
    }
    getSession() {
        if (!this.session) {
            return undefined;
        }
        return Object.assign(Object.assign({}, this.session), { providerId: this.providerId });
    }
    async signIn(forceNewAuthSession = false) {
        if (this.isSignedIn() && !forceNewAuthSession) {
            this.logger.verbose(`Already signed in`);
            return true;
        }
        if (this.loginPromise && !forceNewAuthSession) {
            this.logger.verbose(`Existing login in progress. Waiting for completion...`);
            return await this.loginPromise.promise;
        }
        this.loginPromise = new vs_ssh_1.PromiseCompletionSource();
        await this.tryLoadSession(true, false, forceNewAuthSession);
        // We should now be signed in. If we are, then everything is good.
        if (this.isSignedIn()) {
            this.logger.info(`Successfully signed in`);
            this.loginPromise.resolve(true);
            return true;
        }
        this.logger.error(`Failed to sign in: no token available`);
        this.loginPromise.resolve(false);
        // Clear out promise so the user can retry the login, similar to manual sign out
        this.loginPromise = undefined;
        return false;
    }
    signOut() {
        var _a;
        this.session = undefined;
        (_a = this.loginPromise) === null || _a === void 0 ? void 0 : _a.reject(new Error('Logged Out'));
        this.loginPromise = undefined;
        this.logger.info(`Successfully signed out`);
        return Promise.resolve();
    }
    async hasCachedToken() {
        return !!(await this.getAccessToken());
    }
    /*
     * Gets the credential from the native auth platform which probably is not a Cascade token.
     */
    async getAccessToken() {
        var _a;
        if (!this.isSignedIn()) {
            await this.tryLoadSession(false);
        }
        return (_a = this.session) === null || _a === void 0 ? void 0 : _a.accessToken;
    }
}
exports.VsCodeNativeAuthTokenProvider = VsCodeNativeAuthTokenProvider;


/***/ }),

/***/ 4485:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddNewEnvironment = void 0;
const vscode_command_framework_1 = __webpack_require__(89813);
const telemetryString_1 = __webpack_require__(91257);
const CodespaceCreation_1 = __webpack_require__(13751);
const titles = __webpack_require__(96620);
/**
 * Defers loading the dependencies to avoid a hard dependency on the 'vscode' module.
 */
function dependency() {
    return (__webpack_require__(35477).dependencies);
}
function prompts() {
    return (__webpack_require__(35477).userPrompts);
}
let AddNewEnvironment = class AddNewEnvironment extends vscode_command_framework_1.CommandBase {
    constructor(dependencies = dependency()) {
        super();
        this.dependencies = dependencies;
    }
    async invoke(options, context) {
        const codespaceCreation = new CodespaceCreation_1.CodespaceCreation(this.dependencies);
        // The remote hub extension can call this command for a given repo\ref and will pass that in
        // via options. If provided, use them without prompting the user.
        const repoName = options.url || undefined;
        const ref = options.ref || undefined;
        await codespaceCreation.createNewCodespace(context.telemetryEvent, prompts().codespaceCreation(), repoName, ref);
    }
};
AddNewEnvironment = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.addNewEnvironment, telemetryString_1.TelemetryEventNames.ADD_ENVIRONMENT_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.ADD_ENVIRONMENT, telemetryString_1.TelemetryEventNames.ADD_ENVIRONMENT_FAULT, titles.addNewEnvironment, 1)
], AddNewEnvironment);
exports.AddNewEnvironment = AddNewEnvironment;


/***/ }),

/***/ 15967:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteEnvironment = void 0;
const nls = __webpack_require__(52730);
const titles = __webpack_require__(96620);
const vscode_command_framework_1 = __webpack_require__(89813);
const telemetryString_1 = __webpack_require__(91257);
const EnvironmentDeletion_1 = __webpack_require__(51000);
const EnvironmentCommands_1 = __webpack_require__(76506);
const injectMessageParameters_1 = __webpack_require__(30393);
const localize = nls.loadMessageBundle();
/**
 * Defers loading the dependencies to avoid a hard dependency on the 'vscode' module.
 */
function dependency() {
    return (__webpack_require__(35477).dependencies);
}
let DeleteEnvironment = class DeleteEnvironment extends vscode_command_framework_1.CommandBase {
    constructor(dependencies = dependency()) {
        super();
        this.dependencies = dependencies;
    }
    async invoke(options, context) {
        const selectMsg = localize('command.deleteEnvironment.selectedEnvironment', 'Select a codespace to delete');
        const yesMsg = localize('command.deleteEnvironment.deleteButton', 'Delete');
        const codespace = await (0, EnvironmentCommands_1.getCodespaceFromCommandOptions)(options, {
            dependencies: this.dependencies,
            selectMsg,
            filter: (commands) => !!commands.deleteEnabled,
            fallback: async () => {
                const message = localize('info.noEnvironmentsAvailable', 'There are no codespaces available.');
                await this.dependencies.notificationUtil.showInformationMessage(message, false);
            },
        });
        if (!codespace) {
            return;
        }
        let confirmMsg = localize('command.deleteEnvironment.confirmDelete', "Are you sure you want to delete codespace '{}'?");
        confirmMsg = (0, injectMessageParameters_1.injectMessageParameters)(confirmMsg, codespace.display_name);
        if (codespace.git_status.has_unpushed_changes) {
            confirmMsg = localize('command.deleteEnvironment.confirmDeleteHasChanges', "You have uncommitted or unpushed git changes. Are you sure you want to delete codespace '{}'?");
            confirmMsg = (0, injectMessageParameters_1.injectMessageParameters)(confirmMsg, codespace.display_name);
        }
        await (0, EnvironmentDeletion_1.deleteEnvironment)(codespace, confirmMsg, yesMsg, this.dependencies);
    }
};
DeleteEnvironment = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.deleteEnvironment, telemetryString_1.TelemetryEventNames.DELETE_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.DELETE, telemetryString_1.TelemetryEventNames.DELETE_FAULT, titles.deleteEnvironment, 1)
], DeleteEnvironment);
exports.DeleteEnvironment = DeleteEnvironment;


/***/ }),

/***/ 42849:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DocumentationLink = void 0;
const titles = __webpack_require__(96620);
const vscode_command_framework_1 = __webpack_require__(89813);
const telemetryString_1 = __webpack_require__(91257);
let DocumentationLink = class DocumentationLink extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        return 'https://docs.github.com/codespaces';
    }
};
DocumentationLink = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.documentationLink, telemetryString_1.TelemetryEventNames.DOCUMENTATION_LINK_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.DOCUMENTATION_LINK, telemetryString_1.TelemetryEventNames.DOCUMENTATION_LINK_FAULT, titles.documentationLink, 1)
], DocumentationLink);
exports.DocumentationLink = DocumentationLink;


/***/ }),

/***/ 65577:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Export = void 0;
const titles = __webpack_require__(96620);
const nls = __webpack_require__(52730);
const telemetryString_1 = __webpack_require__(91257);
const vscode_command_framework_1 = __webpack_require__(89813);
const EnvironmentCommands_1 = __webpack_require__(76506);
const injectMessageParameters_1 = __webpack_require__(30393);
const vscs_utils_1 = __webpack_require__(19745);
const localize = nls.loadMessageBundle();
const POLL_RATE_MS = 1000;
const EXPORT_STATE_SUCCEEDED = 'succeeded';
const EXPORT_STATE_FAILED = 'failed';
/**
 * Defers loading the dependencies to avoid a hard dependency on the 'vscode' module.
 */
function dependency() {
    return (__webpack_require__(35477).dependencies);
}
let Export = class Export extends vscode_command_framework_1.CommandBase {
    constructor(dependencies = dependency()) {
        super();
        this.dependencies = dependencies;
    }
    async invoke(options, context) {
        const codespace = await (0, EnvironmentCommands_1.getCodespaceFromCommandOptions)(options, {
            selectMsg: localize('info.selectExportEnvironment', 'Select the codespace to export changes from'),
            dependencies: this.dependencies,
            fallback: async () => {
                let errorMessage = localize('info.export.noEnvironmentsAvailable', 'There are no codespaces available.');
                throw new vscs_utils_1.CancellationError(errorMessage);
                return;
            },
        });
        if (!codespace) {
            return;
        }
        let exportBranch;
        const message = (0, injectMessageParameters_1.injectMessageParameters)(localize('info.message.createBranch', 'Unpushed changes will be exported to a new branch'));
        const createBranch = localize('option.createBranch', 'Create Branch');
        const cancel = {
            title: localize('option.cancel', 'Cancel'),
            isCloseAffordance: true,
        };
        const selection = await this.dependencies.notificationUtil.showInformationMessage(message, false, { modal: true, useCustom: true }, cancel, createBranch);
        if (selection !== createBranch) {
            return;
        }
        let title = localize('message.export.title.exportingEnvironment', 'Exporting changes...');
        let browserUrlToExportedBranch;
        let didExportFail = false;
        await this.dependencies.notificationUtil.withProgress({
            title,
            location: this.dependencies.notificationUtil.notificationProgressLocation,
        }, async () => {
            const codespaceExport = await this.dependencies
                .getApiProvider()
                .environments.exportCodespace(codespace);
            if (codespaceExport) {
                let endPoll = Date.now() + 180000;
                let details = await this.getExportDetails(codespaceExport.export_url);
                while ((details === null || details === void 0 ? void 0 : details.state) !== EXPORT_STATE_SUCCEEDED &&
                    (details === null || details === void 0 ? void 0 : details.state) !== EXPORT_STATE_FAILED) {
                    if (Date.now() >= endPoll) {
                        didExportFail = true;
                        return;
                    }
                    await this.dependencies.util.delay(POLL_RATE_MS);
                    details = await this.getExportDetails(codespaceExport.export_url);
                }
                browserUrlToExportedBranch = details.html_url;
                exportBranch = details.branch;
                if (details.state === EXPORT_STATE_FAILED) {
                    didExportFail = true;
                }
            }
            else {
                didExportFail = true;
            }
            return;
        });
        if (didExportFail) {
            await this.dependencies.notificationUtil.showErrorMessage((0, injectMessageParameters_1.injectMessageParameters)(localize('error.codespaceFailure', 'Your codespace export did not complete. Please try again.')));
            return;
        }
        const redirect = localize('button.redirect', 'Open branch on GitHub');
        const redirectNowButton = { title: redirect };
        title = localize('message.redirectToGithub', 'Changes successfully exported to a branch: {} ');
        title = (0, injectMessageParameters_1.injectMessageParameters)(title, exportBranch);
        await this.dependencies.notificationUtil
            .showInformationMessage(title, false, redirectNowButton)
            .then(async (clickedButton) => {
            if (clickedButton === redirectNowButton) {
                if (browserUrlToExportedBranch) {
                    await this.dependencies.extensionsUtil.openLinkInBrowser(browserUrlToExportedBranch);
                }
                else {
                    const errMsg = localize('error.noExportedWebUrl', 'No web url associated with exported branch.');
                    await this.dependencies.notificationUtil.showWarningMessage(errMsg);
                }
            }
        });
    }
    async getExportDetails(exportUrl) {
        return await this.dependencies
            .getApiProvider()
            .environments.getLatestExportDetails(exportUrl);
    }
};
Export = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.exportEnvironment, telemetryString_1.TelemetryEventNames.EXPORT_ENVIRONMENT_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.EXPORT_ENVIRONMENT, telemetryString_1.TelemetryEventNames.EXPORT_ENVIRONMENT_FAULT, titles.exportEnvironment, 1)
], Export);
exports.Export = Export;


/***/ }),

/***/ 74776:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeedbackLink = void 0;
const titles = __webpack_require__(96620);
const vscode_command_framework_1 = __webpack_require__(89813);
const telemetryString_1 = __webpack_require__(91257);
let FeedbackLink = class FeedbackLink extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        return 'https://aka.ms/ghcs-feedback';
    }
};
FeedbackLink = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.feedbackLink, telemetryString_1.TelemetryEventNames.FEEDBACK_LINK_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.FEEDBACK_LINK, telemetryString_1.TelemetryEventNames.FEEDBACK_LINK_FAULT, titles.feedbackLink, 1)
], FeedbackLink);
exports.FeedbackLink = FeedbackLink;


/***/ }),

/***/ 28825:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetEnvironmentsList = void 0;
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const vscode_command_framework_1 = __webpack_require__(89813);
class GetEnvironmentsList extends vscode_command_framework_1.CommandBase {
    async invoke() {
        return await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchEnvironmentsList();
    }
}
exports.GetEnvironmentsList = GetEnvironmentsList;


/***/ }),

/***/ 477:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetStartedLink = void 0;
const titles = __webpack_require__(96620);
const vscode_command_framework_1 = __webpack_require__(89813);
const telemetryString_1 = __webpack_require__(91257);
let GetStartedLink = class GetStartedLink extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        return 'https://docs.github.com/github/developing-online-with-codespaces/developing-in-a-codespace';
    }
};
GetStartedLink = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.getStartedLink, telemetryString_1.TelemetryEventNames.GET_STARTED_LINK_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.GET_STARTED_LINK, telemetryString_1.TelemetryEventNames.GET_STARTED_LINK_FAULT, titles.getStartedLink, 1)
], GetStartedLink);
exports.GetStartedLink = GetStartedLink;


/***/ }),

/***/ 93600:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IssuesLink = void 0;
const titles = __webpack_require__(96620);
const vscode_command_framework_1 = __webpack_require__(89813);
const telemetryString_1 = __webpack_require__(91257);
let IssuesLink = class IssuesLink extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        return 'https://aka.ms/ghcs-support';
    }
};
IssuesLink = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.issuesLink, telemetryString_1.TelemetryEventNames.ISSUES_LINK_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.ISSUES_LINK, telemetryString_1.TelemetryEventNames.ISSUES_LINK_FAULT, titles.issuesLink, 1)
], IssuesLink);
exports.IssuesLink = IssuesLink;


/***/ }),

/***/ 83740:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OpenInBrowser = void 0;
const nls = __webpack_require__(52730);
const titles = __webpack_require__(96620);
const vscode_command_framework_1 = __webpack_require__(89813);
const telemetryString_1 = __webpack_require__(91257);
const dependencies_1 = __webpack_require__(35477);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const EnvironmentCommands_1 = __webpack_require__(76506);
const localize = nls.loadMessageBundle();
let OpenInBrowser = class OpenInBrowser extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        if (!context.telemetryEvent) {
            throw new Error('Calling commands before command framework initialized.');
        }
        if (!dependencies_1.dependencies.getApiProvider().isSignedIn()) {
            throw new vscode_command_framework_1.CancellationError();
        }
        // If connected to a codespace, open that one. Otherwise prompt with the list.
        let codespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
        if (!codespace) {
            codespace = await (0, EnvironmentCommands_1.getCodespaceFromCommandOptions)(options, {
                selectMsg: localize('info.selectEnvironment', 'Select the codespace to connect to'),
                filter: (commands) => !!commands.openInBrowserEnabled,
                fallback: async () => {
                    const message = localize('info.noEnvironmentsAvailableCreateOption', 'There are no codespaces available. Would you like to create one?');
                    const createButton = localize('button.create', 'Create');
                    const pick = await dependencies_1.dependencies.notificationUtil.showInformationMessage(message, false, createButton);
                    if (pick === createButton) {
                        dependencies_1.dependencies.commandUtil.executeCommand("github.codespaces.addEnvironment" /* addEnvironment */);
                    }
                },
                dependencies: dependencies_1.dependencies,
            });
        }
        if (codespace) {
            if (codespace.web_url) {
                await dependencies_1.dependencies.extensionsUtil.openLinkInBrowser(codespace.web_url);
            }
            else {
                const message = localize('error.noCodespaceWebUrl', 'No web url associated with current codespace.');
                await dependencies_1.dependencies.notificationUtil.showWarningMessage(message);
            }
        }
    }
};
OpenInBrowser = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.openInBrowser, telemetryString_1.TelemetryEventNames.OPEN_IN_BROWSER),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.OPEN_IN_BROWSER, telemetryString_1.TelemetryEventNames.OPEN_IN_BROWSER_FAULT, titles.openInBrowser, 1)
], OpenInBrowser);
exports.OpenInBrowser = OpenInBrowser;


/***/ }),

/***/ 6166:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Refresh = void 0;
const vscode_command_framework_1 = __webpack_require__(89813);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
class Refresh extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.updateCodespacesDetails();
    }
}
exports.Refresh = Refresh;


/***/ }),

/***/ 13368:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReportIssue = void 0;
const titles = __webpack_require__(96620);
const vscode_command_framework_1 = __webpack_require__(89813);
const telemetryString_1 = __webpack_require__(91257);
const dependencies_1 = __webpack_require__(35477);
let ReportIssue = class ReportIssue extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        const webUrl = new URL(`https://aka.ms/ghcs-support`);
        await dependencies_1.dependencies.extensionsUtil.openLinkInBrowser(webUrl.toString());
    }
};
ReportIssue = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.reportIssue, telemetryString_1.TelemetryEventNames.REPORT_ISSUES_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.REPORT_ISSUES, telemetryString_1.TelemetryEventNames.REPORT_ISSUES_FAULT, titles.reportIssue, 1)
], ReportIssue);
exports.ReportIssue = ReportIssue;


/***/ }),

/***/ 77099:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SendFeedback = void 0;
const titles = __webpack_require__(96620);
const vscode_command_framework_1 = __webpack_require__(89813);
const telemetryString_1 = __webpack_require__(91257);
const dependencies_1 = __webpack_require__(35477);
let SendFeedback = class SendFeedback extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        const webUrl = new URL(`https://aka.ms/ghcs-feedback`);
        await dependencies_1.dependencies.extensionsUtil.openLinkInBrowser(webUrl.toString());
    }
};
SendFeedback = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.sendFeedback, telemetryString_1.TelemetryEventNames.SEND_FEEDBACK_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.SEND_FEEDBACK, telemetryString_1.TelemetryEventNames.SEND_FEEDBACK_FAULT, titles.sendFeedback, 1)
], SendFeedback);
exports.SendFeedback = SendFeedback;


/***/ }),

/***/ 62409:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetActiveRepository = void 0;
const vscode_command_framework_1 = __webpack_require__(89813);
const dependencies_1 = __webpack_require__(35477);
class SetActiveRepository extends vscode_command_framework_1.CommandBase {
    async invoke(options) {
        vscode_command_framework_1.traceSource.info(`Setting active repository to ${options === null || options === void 0 ? void 0 : options.owner}/${options === null || options === void 0 ? void 0 : options.name}`);
        const creationAllowed = await this.isCreationAllowedAsync(options);
        vscode_command_framework_1.traceSource.info(`Creation allowed for ${options === null || options === void 0 ? void 0 : options.owner}/${options === null || options === void 0 ? void 0 : options.name}: ${creationAllowed}`);
        // The Remote Hub extension needs us to pass context to it for determining visibility of the
        // "Continue on Codespaces" option. This is required since VS Code APIs only allow setting
        // context and not reading context, so we need to coordinate directly across the extensions.
        dependencies_1.dependencies.commandUtil
            .executeCommand("remoteHub.setContext" /* remoteHubSetContext */, "continueOn:codespaces" /* ContinueOnCodespaces */, creationAllowed)
            .then(() => { }, (reason) => {
            // Command is not registered. Swallow exception and keep going.
        });
    }
    async isCreationAllowedAsync(repository) {
        if (!(repository === null || repository === void 0 ? void 0 : repository.owner) || !(repository === null || repository === void 0 ? void 0 : repository.name)) {
            return false;
        }
        const apiProvider = dependencies_1.dependencies.getApiProvider();
        if (!apiProvider.isSignedIn()) {
            return false;
        }
        return await apiProvider.environments.isCreationAllowed(repository.owner, repository.name);
    }
}
exports.SetActiveRepository = SetActiveRepository;


/***/ }),

/***/ 81925:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowDetails = void 0;
const vscode_command_framework_1 = __webpack_require__(89813);
const dependencies_1 = __webpack_require__(35477);
class ShowDetails extends vscode_command_framework_1.CommandBase {
    async invoke() {
        await dependencies_1.dependencies.commandUtil.executeCommand('workbench.view.remote');
    }
}
exports.ShowDetails = ShowDetails;


/***/ }),

/***/ 27381:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShutdownEnvironment = void 0;
const nls = __webpack_require__(52730);
const titles = __webpack_require__(96620);
const vscode_command_framework_1 = __webpack_require__(89813);
const vscs_utils_1 = __webpack_require__(19745);
const telemetryString_1 = __webpack_require__(91257);
const dependencies_1 = __webpack_require__(35477);
const EnvironmentSetup_1 = __webpack_require__(16766);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const ActivationTasks_1 = __webpack_require__(98750);
const commandContext_1 = __webpack_require__(15071);
const injectMessageParameters_1 = __webpack_require__(30393);
const EnvironmentCommands_1 = __webpack_require__(76506);
const localize = nls.loadMessageBundle();
let ShutdownEnvironment = class ShutdownEnvironment extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        const environmentSetup = new EnvironmentSetup_1.EnvironmentSetup(dependencies_1.dependencies);
        const connectedEnvironment = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
        const connectedEnvironmentId = connectedEnvironment
            ? connectedEnvironment.environment_id
            : '';
        let codespaceToStop;
        if (context.commandText === "github.codespaces.disconnectSuspend" /* disconnectSuspend */ && connectedEnvironment) {
            return await this.stopCodespace(connectedEnvironment, environmentSetup, true);
        }
        if (options.name) {
            const codespace = await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchCodespaceDetailsByName(options.name);
            (0, vscs_utils_1.assertDefined)(codespace, new vscode_command_framework_1.CommandError({
                message: `Codespace ${options.name} not found`,
            }));
            codespaceToStop = codespace;
        }
        else if (options.id) {
            await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchEnvironmentsList();
            const codespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCachedCodespaceDetailsById(options.id);
            (0, vscs_utils_1.assertDefined)(codespace, new vscode_command_framework_1.CommandError({
                message: `Codespace with Id ${options.id} not found`,
            }));
            codespaceToStop = codespace;
        }
        else {
            const selectMsg = localize('command.shutdownEnvironment.selectEnvironment', 'Select a codespace to stop');
            const environment = await (0, EnvironmentCommands_1.getCodespaceFromCommandOptions)(options, {
                dependencies: dependencies_1.dependencies,
                selectMsg,
                filter: (commands) => !!commands.shutdownEnabled,
                fallback: async () => {
                    const message = localize('info.noEnvironmentsAvailable', 'There are no codespaces available.');
                    await dependencies_1.dependencies.notificationUtil.showInformationMessage(message, false);
                },
            });
            if (!environment) {
                return false;
            }
            else {
                codespaceToStop = environment;
            }
        }
        if (!options.forceDisconnect) {
            if (connectedEnvironmentId === codespaceToStop.environment_id) {
                const disconnectButton = localize('command.shutdownEnvironment.disconnectShutdownButton', 'Disconnect and stop');
                let disconnectMessage = localize('command.shutdownEnvironment.confirmDisconnectShutdown', "You are currently connected to codespace '{}', do you want to disconnect and stop?");
                disconnectMessage = (0, injectMessageParameters_1.injectMessageParameters)(disconnectMessage, codespaceToStop.display_name);
                const selection = await dependencies_1.dependencies.notificationUtil.showWarningMessage(disconnectMessage, { modal: true }, disconnectButton);
                if (selection === disconnectButton) {
                    return await this.stopCodespace(codespaceToStop, environmentSetup, true);
                }
                return false;
            }
        }
        return await this.stopCodespace(codespaceToStop, environmentSetup, options.forceDisconnect);
    }
    async stopCodespace(codespace, environmentSetup, needDisconnect) {
        const isRunninginWeb = (0, commandContext_1.getCommandContext)("codespaces:running-in-web" /* IsRunningInWeb */);
        if (needDisconnect && !isRunninginWeb) {
            ActivationTasks_1.ActivationTasks.Instance.putTask("Suspend" /* Suspend */, { name: codespace.name });
            await dependencies_1.dependencies.commandUtil.executeCommand("github.codespaces.disconnectEnvironment" /* disconnectEnvironment */);
            return true;
        }
        else {
            return await environmentSetup.shutdownCodespace(codespace);
        }
    }
};
ShutdownEnvironment = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.shutdownEnvironment, telemetryString_1.TelemetryEventNames.SHUTDOWN_ENVIRONMENT_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.SHUTDOWN_ENVIRONMENT, telemetryString_1.TelemetryEventNames.SHUTDOWN_ENVIRONMENT_FAULT, titles.shutdownEnvironment, 1)
], ShutdownEnvironment);
exports.ShutdownEnvironment = ShutdownEnvironment;


/***/ }),

/***/ 36027:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SignIn = void 0;
const titles = __webpack_require__(96620);
const vscode_command_framework_1 = __webpack_require__(89813);
const telemetryString_1 = __webpack_require__(91257);
const dependencies_1 = __webpack_require__(35477);
let SignIn = class SignIn extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        if (!dependencies_1.dependencies.getApiProvider().isSignedIn()) {
            await dependencies_1.dependencies.getApiProvider().signIn();
        }
    }
};
SignIn = __decorate([
    (0, vscode_command_framework_1.errorNotificationCommandDecorator)(titles.signIn, telemetryString_1.TelemetryEventNames.SIGNIN_FAULT),
    (0, vscode_command_framework_1.telemetryCommandDecorator)(telemetryString_1.TelemetryEventNames.SIGNIN, telemetryString_1.TelemetryEventNames.SIGNIN_FAULT, titles.signIn, 1)
], SignIn);
exports.SignIn = SignIn;


/***/ }),

/***/ 7752:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setupCommandEnablement = exports.isCommandEnabled = void 0;
const IExtensionSupportManager_1 = __webpack_require__(43443);
const commandContext_1 = __webpack_require__(15071);
const commandEnablement = {
    connect: false,
    changeMachineType: false,
    disconnectEnvironment: false,
    deleteEnvironment: false,
    addEnvironment: false,
    environmentsList: false,
    signIn: false,
    getPorts: false,
    exportLogs: false,
    refresh: false,
    openInNewWindow: false,
    openInBrowser: false,
    openInInsiders: false,
    openInStable: false,
    shutdownEnvironment: false,
    disconnectSuspend: false,
    changeSku: false,
    reloadServer: false,
    removeRecentFolder: false,
    goHome: false,
    createDevContainer: false,
    rebuildEnvironment: false,
    labelPortAndUpdateConfig: false,
    export: false,
    viewCreationLog: false,
    showDetails: false,
    goToRepo: false,
    myCodespaces: false,
    manageUserSecrets: false,
};
// These are values that are computed once during extension activation and then never re-computed.
// They should not change over the life of a session.
const immutableValues = ['goToRepo', 'myCodespaces'];
const commandEnablementKeys = Object.keys(commandEnablement).map((k) => k);
function isCommandEnabled(command) {
    return commandEnablement[command];
}
exports.isCommandEnabled = isCommandEnabled;
async function setupCommandEnablement(dependencies) {
    const extensionSupportStatus = dependencies.extensionSupportManager.getExtensionSupportStatus();
    // Compute values for immutable enablement flags
    if (dependencies.configurationManager.isRunningInWeb) {
        const commands = await dependencies.commandUtil.getCommands();
        // The web embedder might register these commands. If so, then we enable the context for them.
        commandEnablement.goToRepo = commands.includes("_codespaces.embedder.goToRepo" /* goToRepo */);
        commandEnablement.myCodespaces = commands.includes("_codespaces.embedder.myCodespaces" /* myCodespaces */);
    }
    // Update the rest of the flags and setup change handlers for future changes
    await updateEnablement(dependencies);
    (0, commandContext_1.onCommandContextChanged)(async ({ key }) => {
        if ((await extensionSupportStatus) === IExtensionSupportManager_1.ExtensionSupportStatus.Unsupported) {
            //do not allow command enablement if unsupported
            return;
        }
        if (key.startsWith("codespaces:command-enabled:" /* CommandEnabledPrefix */)) {
            return;
        }
        await updateEnablement(dependencies);
    });
    // Now we should have had enough time to make this check.
    if ((await extensionSupportStatus) === IExtensionSupportManager_1.ExtensionSupportStatus.Unsupported) {
        // on break do not enable any commands. Make sure to disable some default
        disableAllCommands();
        await setCommandContextValuesForEnablement(dependencies);
        return;
    }
}
exports.setupCommandEnablement = setupCommandEnablement;
async function updateEnablement(dependencies) {
    const isSignedIn = dependencies.getApiProvider().isSignedIn();
    if (!isSignedIn) {
        disableAllCommands();
        if (!isSignedIn) {
            commandEnablement.signIn = true;
        }
        await setCommandContextValuesForEnablement(dependencies);
        return;
    }
    enableAllCommands();
    const isRunningInWeb = (0, commandContext_1.getCommandContext)("codespaces:running-in-web" /* IsRunningInWeb */);
    const isConnected = (0, commandContext_1.getCommandContext)("codespaces:connectionState" /* ConnectionState */) === 'Connected';
    commandEnablement.openInStable = isRunningInWeb;
    commandEnablement.openInInsiders = isRunningInWeb;
    commandEnablement.openInNewWindow = !isRunningInWeb;
    commandEnablement.openInBrowser = !isRunningInWeb;
    commandEnablement.manageUserSecrets = !isRunningInWeb;
    commandEnablement.signIn = !isRunningInWeb && !isSignedIn;
    const isGoHomeFileMenuItemEnabled = (0, commandContext_1.getCommandContext)("codespaces:is-go-home-file-menu-item-enabled" /* IsGoHomeFileMenuItemEnabled */);
    commandEnablement.goHome = isRunningInWeb && isGoHomeFileMenuItemEnabled;
    if (isConnected) {
        commandEnablement.addEnvironment = false;
    }
    else {
        commandEnablement.viewCreationLog = false;
    }
    await setCommandContextValuesForEnablement(dependencies);
}
function enableAllCommands() {
    commandEnablementKeys.forEach((key) => {
        if (!immutableValues.includes(key)) {
            commandEnablement[key] = true;
        }
    });
}
function disableAllCommands() {
    commandEnablementKeys.forEach((key) => {
        if (!immutableValues.includes(key)) {
            commandEnablement[key] = false;
        }
    });
}
async function setCommandContextValuesForEnablement(dependencies) {
    await Promise.all(commandEnablementKeys.map(async (key) => {
        const contextKey = `${"codespaces:command-enabled:" /* CommandEnabledPrefix */}${key}`;
        const isEnabled = commandEnablement[key];
        await (0, commandContext_1.setCommandContext)(contextKey, isEnabled);
    }));
}


/***/ }),

/***/ 25828:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadSystemConfig = exports.getFeatureFlag = exports.getEnvironmentOverrides = exports.getIsInternalUser = exports.getInternalConfig = void 0;
const os_1 = __webpack_require__(54167);
const path_1 = __webpack_require__(67425);
const fs_1 = __webpack_require__(99110);
const stripJsonComments = __webpack_require__(81409);
const vscode_command_framework_1 = __webpack_require__(89813);
const utils_1 = __webpack_require__(89983);
const parseVscsTarget_1 = __webpack_require__(11149);
const USER_SETTINGS_FILE = 'codespaces-settings.json';
const USER_SETTINGS_FILE_OVERRIDE = 'CODESPACES_SETTINGS_FILE';
const internalConfig = {
    devExtension: false,
    clientLogsQuantity: 5,
    experimentalFeatures: {
        enableEnsureAgentIsRunning: false,
        useHubAgent: true,
        windowsElevatedPorts: false,
    },
    logTelemetry: false,
    baseUrl: 'https://api.github.com',
    serviceUri: 'https://prod.liveshare.vsengsaas.visualstudio.com/api/v1.2',
};
let internalConfigOverride;
function getInternalConfig(key) {
    if (!internalConfigOverride) {
        internalConfigOverride = loadSystemConfig();
    }
    const environmentOverrides = getEnvironmentOverrides();
    if (environmentOverrides[key] != null) {
        return environmentOverrides[key];
    }
    if (internalConfigOverride[key] != null) {
        return internalConfigOverride[key];
    }
    return internalConfig[key];
}
exports.getInternalConfig = getInternalConfig;
function getIsInternalUser() {
    return !!getInternalConfig('isInternal');
}
exports.getIsInternalUser = getIsInternalUser;
function getEnvironmentOverrides() {
    const configuration = {};
    const name = process.env.CODESPACE_NAME;
    if (name) {
        configuration.codespaceName = name;
    }
    const baseUrl = process.env.GITHUB_API_URL;
    if (baseUrl) {
        configuration.baseUrl = baseUrl;
    }
    return configuration;
}
exports.getEnvironmentOverrides = getEnvironmentOverrides;
function getFeatureFlag(key) {
    const featureConfig = getInternalConfig('experimentalFeatures');
    return featureConfig[key];
}
exports.getFeatureFlag = getFeatureFlag;
function loadSystemConfig() {
    if (utils_1.isRunningInWebWorker) {
        // Cannot read from the user's home directory from a web extension. Bypass the local config file option in web.
        return {};
    }
    try {
        let systemOverridePath = process.env[USER_SETTINGS_FILE_OVERRIDE];
        if (systemOverridePath === undefined) {
            systemOverridePath = (0, path_1.join)((0, os_1.homedir)(), USER_SETTINGS_FILE);
        }
        // We are allowing comments in global system settings for cloudEnv extensions.
        const configText = (0, fs_1.readFileSync)(systemOverridePath, { encoding: 'utf-8' });
        const json = JSON.parse(stripJsonComments(configText));
        // If not `object` or `null`, return the default config, otherwise get TGenericObject
        if (!json || typeof json !== 'object' || json === null) {
            return {};
        }
        const jsonObject = json;
        // Parse VSCS Target and Region for valid values
        return Object.assign({}, internalConfig, jsonObject, {
            vscsTarget: (0, parseVscsTarget_1.parseVscsTarget)(jsonObject.vscsTarget),
        }, {
            experimentalFeatures: Object.assign({}, internalConfig.experimentalFeatures, jsonObject.experimentalFeatures),
        });
    }
    catch (e) {
        if (e.code !== 'ENOENT') {
            vscode_command_framework_1.traceSource.error('failed to load system config', e);
        }
        return {};
    }
}
exports.loadSystemConfig = loadSystemConfig;


/***/ }),

/***/ 27050:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TVscsTarget = void 0;
var TVscsTarget;
(function (TVscsTarget) {
    TVscsTarget["Local"] = "local";
    TVscsTarget["Development"] = "development";
    TVscsTarget["Ppe"] = "ppe";
    TVscsTarget["Canary"] = "canary";
    TVscsTarget["Production"] = "production";
    TVscsTarget["LatestDev"] = "latestdev";
    TVscsTarget["LatestPpe"] = "latestppe";
    TVscsTarget["LatestProd"] = "latestprod";
})(TVscsTarget = exports.TVscsTarget || (exports.TVscsTarget = {}));


/***/ }),

/***/ 11149:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseVscsTarget = void 0;
const vscs_utils_1 = __webpack_require__(19745);
const TVscsTarget_1 = __webpack_require__(27050);
// Parse `vscsTarget` value.
const parseVscsTarget = (value) => {
    // If `null` or `undefined`, use the default prod.
    if (!value) {
        return TVscsTarget_1.TVscsTarget.Production;
    }
    // Make sure the value is at least a string, throw for any other type.
    (0, vscs_utils_1.assert)(typeof value === 'string', `Unexpected type of "vscsTarget", got "${typeof value}" but "string" expected.`);
    // The value must be one of the enum values.
    if (Object.values(TVscsTarget_1.TVscsTarget).includes(value)) {
        return value;
    }
    // String, but value is not from the set, throw.
    throw new Error(`"${value}" is not valid "vscsTarget" value, see "VscsTarget" enum for all acceptable values.`);
};
exports.parseVscsTarget = parseVscsTarget;


/***/ }),

/***/ 74780:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LIVESHARE_PROD_URL = exports.CLIENT_ENVIRONMENT_SETTINGS_FILE = exports.POST_CREATE_OUTPUT_FILE = exports.RESOURCE_USAGE_FILE = exports.TELEMETRY_EVENTS_MAX_CLIENT_LOGS_SIZE = exports.ALLOWED_FORWARDING_HOSTS = exports.IPV6_ANY_ADDRESS = exports.DEFAULT_FORWARDING_HOST = exports.GH_PENDING_OPERATION_IDENTIFIER = exports.GH_MACHINE_POLICY_IDENTIFIER = exports.GH_SPENDING_LIMIT_IDENTIFIER = exports.DEFAULT_EXTENSIONS = exports.GITHUB_EXTENSION_NAME = void 0;
exports.GITHUB_EXTENSION_NAME = 'GitHub.codespaces';
exports.DEFAULT_EXTENSIONS = [exports.GITHUB_EXTENSION_NAME, 'GitHub.vscode-pull-request-github'];
exports.GH_SPENDING_LIMIT_IDENTIFIER = 'GH_SPENDING_LIMIT';
exports.GH_MACHINE_POLICY_IDENTIFIER = 'GH_MACHINE_POLICY';
exports.GH_PENDING_OPERATION_IDENTIFIER = 'GH_PENDING_OPERATION';
exports.DEFAULT_FORWARDING_HOST = '127.0.0.1';
exports.IPV6_ANY_ADDRESS = '0:0:0:0:0:0:0:0';
exports.ALLOWED_FORWARDING_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', exports.IPV6_ANY_ADDRESS];
exports.TELEMETRY_EVENTS_MAX_CLIENT_LOGS_SIZE = 5000;
exports.RESOURCE_USAGE_FILE = 'resource-usage.json';
exports.POST_CREATE_OUTPUT_FILE = 'postCreateOutput.json';
exports.CLIENT_ENVIRONMENT_SETTINGS_FILE = 'client-environment-settings.json';
exports.LIVESHARE_PROD_URL = 'https://prod.liveshare.vsengsaas.visualstudio.com';


/***/ }),

/***/ 94218:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectionState = exports.ExplorerState = void 0;
var ExplorerState;
(function (ExplorerState) {
    ExplorerState["Initialized"] = "Initialized";
    ExplorerState["NotInitialized"] = "NotInitialized";
})(ExplorerState = exports.ExplorerState || (exports.ExplorerState = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState["NotConnected"] = "NotConnected";
    ConnectionState["Connected"] = "Connected";
})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));


/***/ }),

/***/ 15071:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCommandContext = exports.setCommandContext = exports.onCommandContextChanged = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
const changeEmitter = new vscode_jsonrpc_1.Emitter();
exports.onCommandContextChanged = changeEmitter.event;
const contextValues = {};
const setCommandContext = async (key, value) => {
    const currentValue = contextValues[key];
    if (!currentValue || currentValue !== value) {
        contextValues[key] = value;
        // Defers loading the dependencies to avoid a hard dependency on the 'vscode' module.
        const vscode = await Promise.resolve().then(() => __webpack_require__(89496));
        await vscode.commands.executeCommand('setContext', key, value);
        changeEmitter.fire({ key, value });
    }
};
exports.setCommandContext = setCommandContext;
const getCommandContext = (key) => {
    return contextValues[key];
};
exports.getCommandContext = getCommandContext;


/***/ }),

/***/ 35477:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.userPrompts = exports.dependencies = void 0;
const vscode_command_framework_1 = __webpack_require__(89813);
const axios_1 = __webpack_require__(14206);
const axios_retry_1 = __webpack_require__(79);
const vscs_utils_1 = __webpack_require__(19745);
const config_1 = __webpack_require__(99311);
const commandUtil_1 = __webpack_require__(80171);
const extensionsUtil_1 = __webpack_require__(98787);
const util_1 = __webpack_require__(66194);
const codespaceCreation_1 = __webpack_require__(2389);
const githubApiProvider_1 = __webpack_require__(56745);
const skuChangePrompt_1 = __webpack_require__(15317);
const extensionSupport_1 = __webpack_require__(8053);
const secretManagementPrompts_1 = __webpack_require__(67080);
class Dependencies {
    constructor() {
        this.notificationUtil = vscode_command_framework_1.NotificationUtil;
        this.commandUtil = commandUtil_1.CommandUtil.Instance;
        this.extensionsUtil = new extensionsUtil_1.ExtensionsUtil(this);
        this.util = util_1.Util.Instance;
        this.httpClientUtil = axios_1.default;
        this.configurationManager = new config_1.ConfigurationManager();
        this.extensionSupportManager = new extensionSupport_1.ExtensionSupportManager(this.getApiProvider, this.extensionsUtil);
        // hold the private resolver reference
        this.resolverRef = null;
    }
    getApiProvider() {
        // Warning: this needs to be lazy initialized so that the logger instance
        // which is used in the GitHubApiProvider constructor (and downstream objects)
        // is setup AFTER the extension is activated and the trace logging infrastructure
        // is initialized. If you change this to be non-lazy, lots of trace logs will
        // disappear.
        if (!Dependencies.apiProviderSingleton) {
            Dependencies.apiProviderSingleton = new githubApiProvider_1.GitHubApiProvider(this);
        }
        return Dependencies.apiProviderSingleton;
    }
    /**
     * Method to get the resolver reference, throws
     * if not yet initialized.
     */
    get resolver() {
        (0, vscs_utils_1.assertDefined)(this.resolverRef, 'No Resolver reference found.');
        return this.resolverRef;
    }
    /**
     * Register the resolver reference on this
     * dependencies instance.
     */
    registerResolver(resolver) {
        this.resolverRef = resolver;
        return this;
    }
}
exports.dependencies = new Dependencies();
exports.userPrompts = {
    codespaceCreation: () => new codespaceCreation_1.CodespaceCreationPrompt(exports.dependencies),
    skuChangePrompt: (codespace) => new skuChangePrompt_1.SkuChangePrompt(exports.dependencies, codespace),
    secretManagement: (currentSecrets) => new secretManagementPrompts_1.SecretManagementPrompt(exports.dependencies, currentSecrets),
};
// Add default retry policy (can be overridden per-request)
(0, axios_retry_1.default)(axios_1.default, { retryDelay: axios_retry_1.default.exponentialDelay });
// Add an axios interceptor to disable its built-in proxy support in all requests.
// This allows VS Code proxy settings to take effect via patched node http/https APIs.
// The axios proxy setting has no effect when running inside a browser.
axios_1.default.interceptors.request.use((config) => {
    return Object.assign(Object.assign({}, config), { proxy: false });
});


/***/ }),

/***/ 51850:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TTelemetryLevel = exports.TConfigConnectionTypes = exports.TDevContainerChangeNotificationTypes = exports.OS = exports.ConfigurationKey = void 0;
var ConfigurationKey;
(function (ConfigurationKey) {
    /* Extension config name */
    ConfigurationKey["configName"] = "github.codespaces";
    /* Extension settings */
    ConfigurationKey["defaultExtensions"] = "defaultExtensions";
    /* Use PFS for Https settings */
    ConfigurationKey["usePortForwardingServiceForHTTPS"] = "usePortForwardingServiceForHTTPS";
    /* Performance Explorer settings */
    ConfigurationKey["showPerformanceExplorer"] = "showPerformanceExplorer";
    ConfigurationKey["createCodespaceInNewWindow"] = "createCodespaceInNewWindow";
    /* VS Code workbench config section */
    ConfigurationKey["workbench"] = "workbench";
    /* VS Code theme */
    ConfigurationKey["theme"] = "colorTheme";
    /* VS Code telemetry setting */
    ConfigurationKey["telemetry"] = "telemetry";
    /* Telemetry Level default key */
    ConfigurationKey["telemetryLevel"] = "telemetryLevel";
    /* Connection type used by the new resolver flow. */
    ConfigurationKey["ConnectionType"] = "connectionType";
    /* Notification preference used for devcontainer changes */
    ConfigurationKey["DevcontainerChangedNotificationStyle"] = "devcontainerChangedNotificationStyle";
})(ConfigurationKey = exports.ConfigurationKey || (exports.ConfigurationKey = {}));
var OS;
(function (OS) {
    OS[OS["Linux"] = 0] = "Linux";
    OS[OS["OSX"] = 1] = "OSX";
    OS[OS["Windows"] = 2] = "Windows";
})(OS = exports.OS || (exports.OS = {}));
var TDevContainerChangeNotificationTypes;
(function (TDevContainerChangeNotificationTypes) {
    TDevContainerChangeNotificationTypes["None"] = "none";
    TDevContainerChangeNotificationTypes["Notification"] = "notification";
    TDevContainerChangeNotificationTypes["Modal"] = "modal";
})(TDevContainerChangeNotificationTypes = exports.TDevContainerChangeNotificationTypes || (exports.TDevContainerChangeNotificationTypes = {}));
var TConfigConnectionTypes;
(function (TConfigConnectionTypes) {
    TConfigConnectionTypes["MainThread"] = "main thread";
    TConfigConnectionTypes["SeparateThread"] = "separate thread";
    TConfigConnectionTypes["Any"] = "any";
})(TConfigConnectionTypes = exports.TConfigConnectionTypes || (exports.TConfigConnectionTypes = {}));
var TTelemetryLevel;
(function (TTelemetryLevel) {
    TTelemetryLevel["all"] = "all";
    TTelemetryLevel["error"] = "error";
    TTelemetryLevel["crash"] = "crash";
    TTelemetryLevel["off"] = "off";
})(TTelemetryLevel = exports.TTelemetryLevel || (exports.TTelemetryLevel = {}));


/***/ }),

/***/ 68568:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PrebuildAvailability = void 0;
var PrebuildAvailability;
(function (PrebuildAvailability) {
    PrebuildAvailability["none"] = "none";
    PrebuildAvailability["blob"] = "blob";
    PrebuildAvailability["pool"] = "pool";
})(PrebuildAvailability = exports.PrebuildAvailability || (exports.PrebuildAvailability = {}));


/***/ }),

/***/ 43443:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtensionSupportStatus = void 0;
var ExtensionSupportStatus;
(function (ExtensionSupportStatus) {
    ExtensionSupportStatus["Unsupported"] = "Unsupported";
    ExtensionSupportStatus["Deprecated"] = "Deprecated";
    ExtensionSupportStatus["Supported"] = "Supported";
})(ExtensionSupportStatus = exports.ExtensionSupportStatus || (exports.ExtensionSupportStatus = {}));


/***/ }),

/***/ 85463:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VscsTarget = exports.OwnerType = void 0;
var OwnerType;
(function (OwnerType) {
    OwnerType["User"] = "User";
    OwnerType["Organization"] = "Organization";
})(OwnerType = exports.OwnerType || (exports.OwnerType = {}));
var VscsTarget;
(function (VscsTarget) {
    VscsTarget["Local"] = "local";
    VscsTarget["Development"] = "development";
    VscsTarget["Ppe"] = "ppe";
    VscsTarget["Canary"] = "canary";
    VscsTarget["Production"] = "production";
    VscsTarget["LatestDev"] = "latestdev";
    VscsTarget["LatestPpe"] = "latestppe";
    VscsTarget["LatestProd"] = "latestprod";
})(VscsTarget = exports.VscsTarget || (exports.VscsTarget = {}));


/***/ }),

/***/ 42802:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvironmentMessageCodes = exports.StateInfo = exports.BillableOwnerType = void 0;
var BillableOwnerType;
(function (BillableOwnerType) {
    BillableOwnerType["User"] = "User";
    BillableOwnerType["Organization"] = "Organization";
})(BillableOwnerType = exports.BillableOwnerType || (exports.BillableOwnerType = {}));
var StateInfo;
(function (StateInfo) {
    StateInfo["Provisioning"] = "Provisioning";
    StateInfo["Deleted"] = "Deleted";
    StateInfo["Available"] = "Available";
    StateInfo["Unavailable"] = "Unavailable";
    StateInfo["Shutdown"] = "Shutdown";
    StateInfo["ShuttingDown"] = "ShuttingDown";
    StateInfo["Failed"] = "Failed";
    StateInfo["Starting"] = "Starting";
    StateInfo["Exporting"] = "Exporting";
    StateInfo["Queued"] = "Queued";
    StateInfo["Updating"] = "Updating";
    StateInfo["Rebuilding"] = "Rebuilding";
})(StateInfo = exports.StateInfo || (exports.StateInfo = {}));
var EnvironmentMessageCodes;
(function (EnvironmentMessageCodes) {
    EnvironmentMessageCodes[EnvironmentMessageCodes["unknown"] = 0] = "unknown";
    EnvironmentMessageCodes[EnvironmentMessageCodes["exceededQuota"] = 1] = "exceededQuota";
    EnvironmentMessageCodes[EnvironmentMessageCodes["environmentNameAlreadyExists"] = 2] = "environmentNameAlreadyExists";
    EnvironmentMessageCodes[EnvironmentMessageCodes["environmentDoesNotExist"] = 3] = "environmentDoesNotExist";
    EnvironmentMessageCodes[EnvironmentMessageCodes["environmentNotAvailable"] = 6] = "environmentNotAvailable";
    EnvironmentMessageCodes[EnvironmentMessageCodes["environmentNotShutdown"] = 7] = "environmentNotShutdown";
    EnvironmentMessageCodes[EnvironmentMessageCodes["unableToAllocateResources"] = 8] = "unableToAllocateResources";
    EnvironmentMessageCodes[EnvironmentMessageCodes["unableToAllocateResourcesWhileStarting"] = 9] = "unableToAllocateResourcesWhileStarting";
    EnvironmentMessageCodes[EnvironmentMessageCodes["requestedAutoShutdownDelayMinutesIsInvalid"] = 10] = "requestedAutoShutdownDelayMinutesIsInvalid";
    EnvironmentMessageCodes[EnvironmentMessageCodes["unableToUpdateSku"] = 11] = "unableToUpdateSku";
    EnvironmentMessageCodes[EnvironmentMessageCodes["requestedSkuIsInvalid"] = 12] = "requestedSkuIsInvalid";
    EnvironmentMessageCodes[EnvironmentMessageCodes["heartbeatUnhealthy"] = 13] = "heartbeatUnhealthy";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCreationFailed"] = 14] = "customContainersCreationFailed";
    // CLI MESSAGES
    EnvironmentMessageCodes[EnvironmentMessageCodes["shutdownFailed"] = 1001] = "shutdownFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["cMBMutexFailure"] = 1002] = "cMBMutexFailure";
    EnvironmentMessageCodes[EnvironmentMessageCodes["cMBGeneralError"] = 1003] = "cMBGeneralError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["startEnvironmentHandlerFailedToStartContainer"] = 1004] = "startEnvironmentHandlerFailedToStartContainer";
    EnvironmentMessageCodes[EnvironmentMessageCodes["startEnvironmentHandlerRequiredParameterMissing"] = 1005] = "startEnvironmentHandlerRequiredParameterMissing";
    EnvironmentMessageCodes[EnvironmentMessageCodes["startEnvironmentHandlerKitchensinkMissing"] = 1006] = "startEnvironmentHandlerKitchensinkMissing";
    EnvironmentMessageCodes[EnvironmentMessageCodes["startEnvironmentHandlerLiveshareLoginFailed"] = 1007] = "startEnvironmentHandlerLiveshareLoginFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["startEnvironmentHandlerMoreThanOneContainerFoundOnRestart"] = 1008] = "startEnvironmentHandlerMoreThanOneContainerFoundOnRestart";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersGeneralError"] = 1100] = "customContainersGeneralError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersKitchensinkCreationFailed"] = 1121] = "customContainersKitchensinkCreationFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersKitchensinkStartFailed"] = 1122] = "customContainersKitchensinkStartFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCloneFailed"] = 1151] = "customContainersCloneFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersPrivateClonetimeout"] = 1152] = "customContainersPrivateClonetimeout";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCouldNotPullImage"] = 1153] = "customContainersCouldNotPullImage";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCouldNotBuildUserImage"] = 1154] = "customContainersCouldNotBuildUserImage";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCouldNotCreateUserContainer"] = 1155] = "customContainersCouldNotCreateUserContainer";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCouldNotRunUserContainer"] = 1156] = "customContainersCouldNotRunUserContainer";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCLICopyFailed"] = 1157] = "customContainersCLICopyFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersDependenciesFailed"] = 1158] = "customContainersDependenciesFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCLIStartFailed"] = 1158] = "customContainersCLIStartFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersIncorrectUserID"] = 1159] = "customContainersIncorrectUserID";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersComposeGeneralError"] = 1200] = "customContainersComposeGeneralError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersComposeValidationError"] = 1201] = "customContainersComposeValidationError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersComposeConfigError"] = 1202] = "customContainersComposeConfigError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersWrongServiceError"] = 1203] = "customContainersWrongServiceError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersComposeUpError"] = 1204] = "customContainersComposeUpError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainerInvalidDevContainer"] = 1205] = "customContainerInvalidDevContainer";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersComposeUnsupportedVersion"] = 1206] = "customContainersComposeUnsupportedVersion";
})(EnvironmentMessageCodes = exports.EnvironmentMessageCodes || (exports.EnvironmentMessageCodes = {}));


/***/ }),

/***/ 92710:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initAsync = exports.getExpService = void 0;
const vscs_utils_1 = __webpack_require__(19745);
const ExperimentationTelemetry_1 = __webpack_require__(71944);
/**
 * Defers loading the dependencies to avoid a hard dependency on the 'vscode' module.
 */
function dependency() {
    return (__webpack_require__(35477).dependencies);
}
function getExperimentationServiceHelper() {
    return (__webpack_require__(99956)/* .getExperimentationServiceAsync */ .SP);
}
function getExpTargetPopulation() {
    return (__webpack_require__(99956)/* .TargetPopulation */ .aU);
}
function getTargetPopulation(dependencies = dependency()) {
    const targetPopulation = getExpTargetPopulation();
    if (dependencies.extensionsUtil.getIsInternalUser()) {
        return targetPopulation.Internal;
    }
    else {
        return targetPopulation.Public;
    }
}
let expService;
function getExpService() {
    (0, vscs_utils_1.assertDefined)(expService, 'No Exp service defined, please call initAsync first.');
    return expService;
}
exports.getExpService = getExpService;
exports.initAsync = (0, vscs_utils_1.once)(async (extensionName, extensionVersion, context, dependencies) => {
    /**
     * If the new resolver flow explicitly disabled, don't send Exp telemetry.
     */
    const telemetry = new ExperimentationTelemetry_1.ExperimentationTelemetry();
    const getExperimentationServiceAsync = getExperimentationServiceHelper();
    expService = await getExperimentationServiceAsync(extensionName, extensionVersion, getTargetPopulation(), telemetry, context.globalState);
});


/***/ }),

/***/ 71944:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExperimentationTelemetry = void 0;
const vso_telemetry_1 = __webpack_require__(76811);
/**
 * Telemetry class used by Exp service.
 */
class ExperimentationTelemetry {
    setSharedProperty(name, value) {
        vso_telemetry_1.Telemetry.addContextProperty(name, value);
    }
    postEvent(eventName, props) {
        const event = new vso_telemetry_1.TelemetryEvent(eventName);
        for (let [property, value] of props) {
            event.addProperty(property, value);
        }
        event.send();
    }
}
exports.ExperimentationTelemetry = ExperimentationTelemetry;


/***/ }),

/***/ 87329:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.performance = void 0;
const vscs_performance_1 = __webpack_require__(73438);
exports.performance = (0, vscs_performance_1.initializePerformanceInstance)('extension:start');


/***/ }),

/***/ 84292:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodespacesProtocolHandler = void 0;
const nls = __webpack_require__(52730);
const vscode_command_framework_1 = __webpack_require__(89813);
const vscs_utils_1 = __webpack_require__(19745);
const uuid = __webpack_require__(32286);
const parseQueryString_1 = __webpack_require__(22465);
const localize = nls.loadMessageBundle();
class CodespacesProtocolHandler {
    constructor(dependencies, logger) {
        this.dependencies = dependencies;
        this.logger = logger !== null && logger !== void 0 ? logger : vscode_command_framework_1.traceSource.withName('ProtocolHandler');
    }
    handleUri(uri) {
        const query = (0, parseQueryString_1.parseQueryString)(uri.query);
        switch (uri.path) {
            case '/connect':
                this.logger.info(`Received connect event: ${uri.toString()}`);
                this.connectHandler(query);
                break;
            default:
                this.logger.info(`Received event: ${uri.toString()}`);
                break;
        }
    }
    connectHandler(query) {
        const { name, correlationId } = query;
        (0, vscs_utils_1.assert)((name === null || name === void 0 ? void 0 : name.trim().length) > 0, localize('error.unknownProtocolFormat', 'Unknown protocol format'));
        this.logger.info(`Connecting to codespace ${name}`);
        try {
            this.dependencies.commandUtil.executeCommand("github.codespaces.connect" /* connect */, {
                name,
                uriHandlerCorrelationId: correlationId,
            });
        }
        catch (err) {
            this.logger.error('Failed to connect to codespace', err);
        }
    }
    static buildConnectionUri(scheme, codespace) {
        const params = {
            name: encodeURIComponent(codespace.name),
            correlationId: uuid.v4(),
        };
        const paramsStr = Object.keys(params)
            .map((key) => `${key}=${params[key]}`)
            .join('&');
        return `${scheme}://GitHub.codespaces/connect?${paramsStr}`;
    }
    dispose() { }
}
exports.CodespacesProtocolHandler = CodespacesProtocolHandler;


/***/ }),

/***/ 53404:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLiveShareRelayTunnelClient = void 0;
const tunnels_connections_1 = __webpack_require__(29605);
const vscs_utils_1 = __webpack_require__(19745);
exports.getLiveShareRelayTunnelClient = (0, vscs_utils_1.once)(() => {
    return new tunnels_connections_1.LiveShareRelayTunnelClient();
});


/***/ }),

/***/ 51517:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TelemetryContext = void 0;
const vscode_1 = __webpack_require__(89496);
const vso_telemetry_1 = __webpack_require__(76811);
const configuration_1 = __webpack_require__(25828);
const telemetryString_1 = __webpack_require__(91257);
class TelemetryContext {
    static initialize(dependencies, context, packageJSON) {
        if (!TelemetryContext.initialized) {
            const isRunningInWeb = dependencies.configurationManager.isRunningInWeb;
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.PARTNER_NAME, 'GitHub');
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.IS_INTERNAL, (0, configuration_1.getIsInternalUser)());
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.EXTENSION_VERSION, packageJSON.version);
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.USE_HUB_WORKSPACE_AGENT, true);
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.IS_LOCAL, context.extensionMode === vscode_1.ExtensionMode.Development);
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.IS_RUNNING_IN_WEB, isRunningInWeb);
            TelemetryContext.initialized = true;
        }
    }
}
exports.TelemetryContext = TelemetryContext;
TelemetryContext.initialized = false;


/***/ }),

/***/ 91257:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TelemetryCommonPropertyNames = exports.TelemetryMeasureNames = exports.TelemetryPropertyNames = exports.TelemetryEventNames = exports.CODESPACES_COMMON_PROPERTY_PREFIX = exports.CODESPACES_PROPERTY_PREFIX = exports.CODESPACES_OLD_PROPERTY_PREFIX = void 0;
const FAULT_PREFIX = 'Fault/';
exports.CODESPACES_OLD_PROPERTY_PREFIX = 'cloud-env.';
exports.CODESPACES_PROPERTY_PREFIX = 'codespaces.';
exports.CODESPACES_COMMON_PROPERTY_PREFIX = 'codespaces.common.';
class TelemetryEventNames {
}
exports.TelemetryEventNames = TelemetryEventNames;
TelemetryEventNames.ADD_ENVIRONMENT = 'add-environment';
TelemetryEventNames.ADD_ENVIRONMENT_FAULT = FAULT_PREFIX + 'add-environment-fault';
TelemetryEventNames.CHANGE_SKU = 'change-sku';
TelemetryEventNames.CHANGE_SKU_FAULT = FAULT_PREFIX + 'change-sku';
TelemetryEventNames.CREATE_DEVCONTAINER = 'create-devcontainer';
TelemetryEventNames.CREATE_DEVCONTAINER_FAULT = FAULT_PREFIX + 'create-devcontainer-fault';
TelemetryEventNames.CONNECT = 'connect';
TelemetryEventNames.CONNECT_FAULT = FAULT_PREFIX + 'connect-fault';
TelemetryEventNames.CONNECT_INFO = 'connect-info';
TelemetryEventNames.CONNECT_LOGS_INFO = 'connect-logs-info';
TelemetryEventNames.CONNECT_HUB_LOGS_INFO = 'connect-hub_logs-info';
TelemetryEventNames.RESOLVE_INFO = 'resolve-info';
TelemetryEventNames.TUNNEL_OPEN_INFO = 'tunnel-open-info';
TelemetryEventNames.DOWNLOAD_EXPORTED_ENVIRONMENT = 'download-exported-environment';
TelemetryEventNames.DOWNLOAD_EXPORTED_ENVIRONMENT_FAULT = FAULT_PREFIX + 'download-exported-environment-fault';
TelemetryEventNames.DELETE = 'delete';
TelemetryEventNames.DELETE_FAULT = FAULT_PREFIX + 'delete-fault';
TelemetryEventNames.DISCONNECT = 'disconnect';
TelemetryEventNames.DISCONNECT_FAULT = FAULT_PREFIX + 'disconnect-fault';
TelemetryEventNames.DOCUMENTATION_LINK = 'documentation-link';
TelemetryEventNames.DOCUMENTATION_LINK_FAULT = FAULT_PREFIX + 'documentation-link-fault';
TelemetryEventNames.FEEDBACK_LINK = 'feedback-link';
TelemetryEventNames.FEEDBACK_LINK_FAULT = FAULT_PREFIX + 'feedback-link-fault';
TelemetryEventNames.SEND_FEEDBACK = 'send-feedback';
TelemetryEventNames.SEND_FEEDBACK_FAULT = FAULT_PREFIX + 'send-feedback-fault';
TelemetryEventNames.FORK_REPOSITORY = 'fork-repository';
TelemetryEventNames.FORK_REPOSITORY_FAULT = FAULT_PREFIX + 'fork-repository-fault';
TelemetryEventNames.GET_EXPORT_ENVIRONMENT_URL = 'get-exported-environment-url';
TelemetryEventNames.GET_EXPORT_ENVIRONMENT_URL_FAULT = FAULT_PREFIX + 'get-exported-environment-url-fault';
TelemetryEventNames.GET_STARTED_LINK = 'get-started-link';
TelemetryEventNames.GET_STARTED_LINK_FAULT = FAULT_PREFIX + 'get-started-link-fault';
TelemetryEventNames.EXPORT_ENVIRONMENT = 'export-environment';
TelemetryEventNames.EXPORT_ENVIRONMENT_FAULT = FAULT_PREFIX + 'export-environment-fault';
TelemetryEventNames.REBUILD_ENVIRONMENT = 'rebuild-environment';
TelemetryEventNames.REBUILD_ENVIRONMENT_FAULT = FAULT_PREFIX + 'rebuild-environment-fault';
TelemetryEventNames.GO_HOME = 'go-home';
TelemetryEventNames.GO_HOME_FAULT = FAULT_PREFIX + 'go-home-fault';
TelemetryEventNames.ISSUES_LINK = 'issues-link';
TelemetryEventNames.ISSUES_LINK_FAULT = FAULT_PREFIX + 'issues-link-fault';
TelemetryEventNames.REPORT_ISSUES = 'report-issues';
TelemetryEventNames.REPORT_ISSUES_FAULT = FAULT_PREFIX + 'report-issues-fault';
TelemetryEventNames.SHUTDOWN_ENVIRONMENT = 'shutdown-environment';
TelemetryEventNames.SHUTDOWN_ENVIRONMENT_FAULT = FAULT_PREFIX + 'shutdown-environment-fault';
TelemetryEventNames.EXPORT_LOGS = 'export-logs';
TelemetryEventNames.EXPORT_LOGS_FAULT = FAULT_PREFIX + 'export-logs-fault';
TelemetryEventNames.EXTENSION_ACTIVATION = 'extension-activation';
TelemetryEventNames.PORT_FORWARDER = 'port-forwarder';
TelemetryEventNames.PORT_FORWARDER_FAULT = FAULT_PREFIX + 'delete-forwarder-fault';
TelemetryEventNames.SHOW_WHATS_NEW_INFO = 'show-whats-new-info';
TelemetryEventNames.VIEW_CREATION_LOG = 'view-creation-log';
TelemetryEventNames.VIEW_CREATION_LOG_FAULT = 'view-creation-log-fault';
TelemetryEventNames.SIGNIN = 'signin';
TelemetryEventNames.SIGNIN_FAULT = FAULT_PREFIX + 'signin-fault';
TelemetryEventNames.OPEN_EXTENSION = 'open-extension';
TelemetryEventNames.OPEN_EXTENSION_FAULT = FAULT_PREFIX + 'open-extension-fault';
TelemetryEventNames.OPEN_IN_NEW_WINDOW = 'open-new-window';
TelemetryEventNames.OPEN_IN_NEW_WINDOW_FAULT = FAULT_PREFIX + 'open-new-window-fault';
TelemetryEventNames.OPEN_IN_BROWSER = 'open-browser';
TelemetryEventNames.OPEN_IN_BROWSER_FAULT = FAULT_PREFIX + 'open-browser-fault';
TelemetryEventNames.OPEN_IN_INSIDERS = 'open-vscode-insiders';
TelemetryEventNames.OPEN_IN_INSIDERS_FAULT = FAULT_PREFIX + 'open-vscode-insiders-fault';
TelemetryEventNames.OPEN_IN_STABLE = 'open-vscode-stable';
TelemetryEventNames.OPEN_IN_STABLE_FAULT = FAULT_PREFIX + 'open-vscode-stable-fault';
TelemetryEventNames.OPEN_IN_VISUALSTUDIO = 'open-vscode-visualstudio';
TelemetryEventNames.OPEN_IN_VISUALSTUDIO_FAULT = 'open-vscode-visualstudio-fault';
TelemetryEventNames.CANCEL_ORYX_BUILD = 'cancel-oryx-build';
TelemetryEventNames.CANCEL_ORYX_BUILD_FAULT = 'cancel-oryx-build-fault';
TelemetryEventNames.ACTIVITY_MONITOR = 'activity-monitor';
TelemetryEventNames.ACTIVITY_MONITOR_FAULT = 'activity-monitor-fault';
TelemetryEventNames.MANAGE_USER_SECRETS = 'manage-user-secrets';
TelemetryEventNames.MANAGE_USER_SECRETS_FAULT = 'manage-user-secrets-fault';
TelemetryEventNames.START_LOCAL_PORT_FORWARDER = 'start-local-port-forwarder';
TelemetryEventNames.LATENCY_UPDATE = 'latency-update';
TelemetryEventNames.SET_TUNNEL_PRIVACY_OPTIONS = 'set-tunnel-privacy-options';
class TelemetryPropertyNames {
}
exports.TelemetryPropertyNames = TelemetryPropertyNames;
TelemetryPropertyNames.ENVIRONMENT_TYPE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'environment-type';
TelemetryPropertyNames.IS_INTERNAL = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-internal';
TelemetryPropertyNames.API_ENDPOINT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'api-endpoint';
TelemetryPropertyNames.CODESPACE_API_ENDPOINT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-api-endpoint';
TelemetryPropertyNames.CODESPACE_ENVIRONMENT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-environment';
TelemetryPropertyNames.IS_TEST_ENVIRONMENT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-test-environment';
TelemetryPropertyNames.LIVESHARE_API_ENDPOINT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'liveshare-api-endpoint';
TelemetryPropertyNames.LIVESHARE_SERVICE_URI = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'liveshare-service-uri';
TelemetryPropertyNames.VSCS_API_ENDPOINT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'vscs-api-endpoint';
TelemetryPropertyNames.VSCS_ENVIRONMENT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'vscs-environment';
TelemetryPropertyNames.USE_HUB_WORKSPACE_AGENT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'use-hub-workspace-agent';
TelemetryPropertyNames.EXTENSION_VERSION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'extension-version';
TelemetryPropertyNames.IS_NODE_INSTALLED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-node-installed';
TelemetryPropertyNames.IS_RUNNING_IN_WEB = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-running-in-web';
TelemetryPropertyNames.SERVICE_ENDPOINT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'service-endpoint';
TelemetryPropertyNames.URI_HANDLER_CORRELATION_ID = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'uri-handler-correlation-id';
TelemetryPropertyNames.MORE_INFO_CLICKED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'more-info-clicked';
TelemetryPropertyNames.BROWSER_OPENED_SUCCESS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'browser-opened-success';
TelemetryPropertyNames.TELEMETRY_ID = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'telemetry_id';
TelemetryPropertyNames.PARTNER_NAME = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'partner-name';
TelemetryPropertyNames.ORGANIZATION_ID = exports.CODESPACES_PROPERTY_PREFIX + 'organization-id';
TelemetryPropertyNames.PERFORMANCE_EXPLORER_ENABLED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'performance-explorer-enabled';
TelemetryPropertyNames.CONNECTION_NUMBER = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'connection-number';
TelemetryPropertyNames.CONNECTION_TYPE_SETTINGS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'connection-type-settings';
TelemetryPropertyNames.RESOLVE_ATTEMPT_NUMBER = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'resolve-number';
TelemetryPropertyNames.RESOLVE_RETRY_NUMBER = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'resolve-retry-number';
TelemetryPropertyNames.RESOLVE_CONNECTION_TYPE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'resolve-connection-type';
TelemetryPropertyNames.IS_LOCAL = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-local';
TelemetryPropertyNames.IS_PRODUCTION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-production';
TelemetryPropertyNames.CODESPACE_ID = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-id';
TelemetryPropertyNames.CODESPACE_STATE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-state';
TelemetryPropertyNames.INITIAL_CODESPACE_STATE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'initial-codespace-state';
TelemetryPropertyNames.CODESPACE_LOCATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-location';
TelemetryPropertyNames.GITHUB_USERNAME = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'github-owner-login';
TelemetryPropertyNames.GITHUB_REPO = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'github-repo-nwo';
TelemetryPropertyNames.GITHUB_BRANCH = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'github-branch';
TelemetryPropertyNames.IS_ACTIVITY_MONITOR_ACTIVATED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'started-activity-monitor';
TelemetryPropertyNames.CLIENT_LOGS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'client-logs';
TelemetryPropertyNames.CLIENT_LOGS_TYPE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'client-logs-type';
TelemetryPropertyNames.CLIENT_LOGS_SLICE_NUMBER = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'client-logs-slice-number';
TelemetryPropertyNames.CLIENT_LOGS_CORRELATION_ID = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'client-logs-correlation-id';
TelemetryPropertyNames.HUB_CLIENT_LOGS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'hub-client-logs';
TelemetryPropertyNames.PORT_CONNECTION_IS_ESTABLISHED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'port-connection-is-established';
TelemetryPropertyNames.PORT_PRIVACY = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'port-privacy';
TelemetryPropertyNames.NEW_PORT_PRIVACY = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'new-port-privacy';
TelemetryPropertyNames.PORT_SERVER_KIND = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'port-server-kind';
TelemetryPropertyNames.SOURCE_PORT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'source-port';
TelemetryPropertyNames.LOCAL_PORT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'local-port';
TelemetryPropertyNames.TUNNEL_HOST = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-host';
TelemetryPropertyNames.TUNNEL_CLEAR_HOST = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-clear-host';
TelemetryPropertyNames.TUNNEL_CONNECTION_STATUS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-connection-status';
TelemetryPropertyNames.TUNNEL_NEW_CONNECTION_STATUS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-new-connection-status';
TelemetryPropertyNames.TUNNEL_ELEVATION_REQUIRED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-elevation-required';
TelemetryPropertyNames.TUNNEL_PROTOCOL_TYPE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-protocol-type';
TelemetryPropertyNames.TUNNEL_USE_PFS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-use-pfs';
TelemetryPropertyNames.TUNNEL_REUSE_EXISTING = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-reuse-existing-tunnel';
TelemetryPropertyNames.TUNNEL_RETRY_NUMBER = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-retry-number';
TelemetryPropertyNames.TUNNEL_CODESPACE_STATE = exports.CODESPACES_PROPERTY_PREFIX + 'tunnel-codespace-state';
TelemetryPropertyNames.ALLOWED_TUNNEL_PRIVACY_OPTIONS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-privacy-options';
TelemetryPropertyNames.TUNNEL_USE_BASIS = exports.CODESPACES_PROPERTY_PREFIX + 'tunnel-use-basis';
TelemetryPropertyNames.TUNNEL_BASIS_FAILED = exports.CODESPACES_PROPERTY_PREFIX + 'tunnel-basis-failed';
TelemetryPropertyNames.TUNNEL_VSCS_TARGET = exports.CODESPACES_PROPERTY_PREFIX + 'tunnel-vscs-target';
class TelemetryMeasureNames {
}
exports.TelemetryMeasureNames = TelemetryMeasureNames;
TelemetryMeasureNames.AUTO_FORWARDING_PORT_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'auto-forwarding-port-duration';
TelemetryMeasureNames.CREATE_ENV_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'create-env-duration';
TelemetryMeasureNames.JOIN_WORKSPACE_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'join-workspace-duration';
TelemetryMeasureNames.JOIN_WORKSPACE_START_TIME = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'join-workspace-start-time';
TelemetryMeasureNames.RESOLVE_ATTEMPT_START_TIME = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'resolve-attempt-start-time';
TelemetryMeasureNames.CODESPACE_INFO_FETCH_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-info-fetch-duration';
TelemetryMeasureNames.ENVIRONMENT_AGE_MINUTES = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'environment-age-minutes';
TelemetryMeasureNames.ENV_CONFIG_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'env-config-duration';
TelemetryMeasureNames.FORWARD_VSCODE_SERVER_PORT_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'forward-vscode-server-port-duration';
TelemetryMeasureNames.GET_WORKSPACE_INFO_FAULT_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'get-workspace-info-fault-duration';
TelemetryMeasureNames.FORWARD_EXISTING_PORT_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'forward-existing-port-duration';
TelemetryMeasureNames.PROVISIONING_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'provisioning-duration';
TelemetryMeasureNames.START_VSCODE_SERVER_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'start-vscode-server-duration';
TelemetryMeasureNames.START_ENV_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'start-env-duration';
TelemetryMeasureNames.LATENCY_AVG = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'latency-average';
TelemetryMeasureNames.LATENCY_MIN = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'latency-min';
TelemetryMeasureNames.LATENCY_MAX = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'latency-max';
class TelemetryCommonPropertyNames {
}
exports.TelemetryCommonPropertyNames = TelemetryCommonPropertyNames;
TelemetryCommonPropertyNames.IS_INTERNAL = exports.CODESPACES_COMMON_PROPERTY_PREFIX + 'is-internal';
TelemetryCommonPropertyNames.IS_LOCAL_BUILD = exports.CODESPACES_COMMON_PROPERTY_PREFIX + 'is-local-build';
TelemetryCommonPropertyNames.NODE_ENVIRONMENT = exports.CODESPACES_COMMON_PROPERTY_PREFIX + 'node-environment';


/***/ }),

/***/ 72953:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mainTrace = void 0;
const vscode_command_framework_1 = __webpack_require__(89813);
const vscs_utils_1 = __webpack_require__(19745);
exports.mainTrace = vscode_command_framework_1.traceSource.createChild(`extension:${(0, vscs_utils_1.randomString)(2)}`);


/***/ }),

/***/ 44214:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewItem = exports.View = void 0;
/**
 * Identifiers for Cloud Environment tree views.
 */
var View;
(function (View) {
    View["Environments"] = "github.codespaces.explorer";
    View["EnvironmentPerformance"] = "github.codespaces.performanceExplorer";
})(View = exports.View || (exports.View = {}));
/**
 * Identifiers for Cloud Environment tree view items.
 */
var ViewItem;
(function (ViewItem) {
    ViewItem["ServiceUnavailable"] = "serviceUnavailable";
    // Environment Types
    ViewItem["CloudHostedEnvironments"] = "cloudHostedEnvironments";
    ViewItem["CodespaceRecentPath"] = "codespaceRecentPath";
    ViewItem["Folder"] = "folder";
    //session item groups
    ViewItem["ConnectToEnvironment"] = "environments.connectToEnvironment";
    ViewItem["CreateEnvironment"] = "environments.createEnvironment";
    ViewItem["RegisterEnvironment"] = "environments.registerEnvironment";
    ViewItem["SignIn"] = "environments.signIn";
    ViewItem["Environment"] = "environments.environment";
    ViewItem["SelectedEnvironment"] = "environments.selectedEnvironment";
    ViewItem["Ports"] = "Environments.ports";
    ViewItem["ForwardedPorts"] = "Environments.forwardedPorts";
    ViewItem["DisplayName"] = "Environments.displayName";
    ViewItem["RepoName"] = "Environments.repo";
    ViewItem["MachineType"] = "Environments.machineType";
    ViewItem["Branch"] = "Environments.branch";
    ViewItem["CreatedAt"] = "Environments.createdAt";
    ViewItem["SkuDisplayName"] = "Environments.skuDisplayName";
    ViewItem["IdleTimeout"] = "Environments.idleTimeout";
    ViewItem["VscsTarget"] = "Environments.vscsTarget";
    ViewItem["CodespaceCpuUsage"] = "EnvironmentPerformance.codespaceCpuUsage";
    ViewItem["ClientCpuUsage"] = "EnvironmentPerformance.clientCpuUsage";
    ViewItem["MemoryUsed"] = "EnvironmentPerformance.memoryUsed";
    ViewItem["FileShareDiskUsed"] = "EnvironmentPerformance.fileShareDiskUsed";
    ViewItem["DockerLibDiskUsed"] = "EnvironmentPerformance.dockerLibDiskUsed";
    ViewItem["EnvironmentID"] = "EnvironmentPerformance.id";
    ViewItem["EnvironmentRegion"] = "EnvironmentPerformance.region";
    ViewItem["SessionID"] = "EnvironmentPerformance.sessionId";
    ViewItem["SessionDisconnections"] = "EnvironmentPerformance.sessionDisconnections";
    ViewItem["SessionBytesIn"] = "EnvironmentPerformance.sessionBytesIn";
    ViewItem["SessionBytesOut"] = "EnvironmentPerformance.sessionBytesOut";
    ViewItem["SessionLatencyCurrent"] = "EnvironmentPerformance.sessionLatencyCurrent";
    ViewItem["SessionLatencyDetails"] = "EnvironmentPerformance.sessionLatencyDetails";
    ViewItem["CreateCodespaceTime"] = "EnvironmentPerformance.createCodespaceTime";
    ViewItem["ResumeCodespaceTime"] = "EnvironmentPerformance.resumeCodespaceTime";
    ViewItem["NotConnected"] = "EnvironmentPerformance.notConnected";
    ViewItem["DontAskAgain"] = "help.dontAskAgain";
    ViewItem["GoodFeedback"] = "help.goodFeedback";
    ViewItem["BadFeedback"] = "help.badFeedback";
    ViewItem["Thankyou"] = "help.thankyou";
    ViewItem["Survey"] = "help.survey";
    ViewItem["SessionFeedbackQuestion"] = "help.sessionFeedback";
    ViewItem["TweetUsYourFeedback"] = "help.tweetUsYourFeedback";
    ViewItem["ReportAProblem"] = "help.reportAProblem";
    ViewItem["MoreInfo"] = "help.moreinfo";
    ViewItem["other"] = "other";
})(ViewItem = exports.ViewItem || (exports.ViewItem = {}));


/***/ }),

/***/ 47665:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvironmentDetailsExplorer = void 0;
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(52730);
const luxon_1 = __webpack_require__(50463);
const vscode_command_framework_1 = __webpack_require__(89813);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const CloudEnvViews_1 = __webpack_require__(44214);
const commandConstants_1 = __webpack_require__(94218);
const commandContext_1 = __webpack_require__(15071);
const IGitHubApi_1 = __webpack_require__(85463);
const TreeViewItem_1 = __webpack_require__(50740);
const environments_1 = __webpack_require__(25298);
const injectMessageParameters_1 = __webpack_require__(30393);
const util_1 = __webpack_require__(66194);
const localize = nls.loadMessageBundle();
class EnvironmentDetailsExplorer {
    constructor() {
        // Event registered by vscode to update the tree view
        this.changeEventEmitter = new vscode.EventEmitter();
        this.onDidChangeTreeData = this.changeEventEmitter.event;
        this.refresh = () => {
            this.changeEventEmitter.fire(undefined);
        };
        this.logger = vscode_command_framework_1.traceSource.withName('RemoteExplorer');
        this.updateEnvironmentDetails().catch((e) => this.logger.error('Failed update environment details on explorer initialization', e));
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.onCodespacesChanged(this.updateEnvironmentDetails.bind(this));
    }
    async updateEnvironmentDetails() {
        try {
            this.logger.info('Updating codespace details');
            this.selectedCodespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
            if (this.selectedCodespace) {
                await this.updateConnectedEnv();
            }
            else {
                this.emptyEnvDetails();
            }
            this.refresh();
        }
        catch (e) {
            // Callers aren't awaiting this async method, so any errors thrown here would be unhandled.
            this.logger.error('Failed to update environment details: ' + e.message, e);
        }
    }
    emptyEnvDetails() {
        this.selectedCodespace = undefined;
    }
    async updateConnectedEnv() {
        await (0, commandContext_1.setCommandContext)("codespaces:connectionState" /* ConnectionState */, this.selectedCodespace ? commandConstants_1.ConnectionState.Connected : commandConstants_1.ConnectionState.NotConnected);
    }
    getTreeItem(element) {
        return element;
    }
    async getChildren(element) {
        if (!this.selectedCodespace) {
            await this.updateConnectedEnv();
        }
        return this.selectedCodespace
            ? this.getEnvironmentDetails()
            : this.getDefaultRootChildren();
    }
    async getEnvironmentDetails() {
        let result = [];
        if (!this.selectedCodespace) {
            return [];
        }
        if (this.selectedCodespace.vscs_target &&
            this.selectedCodespace.vscs_target !== IGitHubApi_1.VscsTarget.Production) {
            const vscsTargetLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envDetailsView.vscsTarget', 'VSCS Target: {}'), util_1.Util.Instance.formatDisplayStringForTarget(this.selectedCodespace.vscs_target, this.selectedCodespace.vscs_target));
            result.push(new TreeViewItem_1.TreeViewItem(vscsTargetLabel, {
                type: CloudEnvViews_1.ViewItem.VscsTarget,
            }).withIconPath(new vscode.ThemeIcon('server-environment')));
        }
        result.push(new TreeViewItem_1.TreeViewItem(this.selectedCodespace.repository.full_name, {
            type: CloudEnvViews_1.ViewItem.RepoName,
        }).withIconPath(new vscode.ThemeIcon('repo')));
        if (this.selectedCodespace.display_name) {
            result.push(new TreeViewItem_1.TreeViewItem(this.selectedCodespace.display_name, {
                type: CloudEnvViews_1.ViewItem.DisplayName,
            }).withIconPath(new vscode.ThemeIcon('tag')));
        }
        if (this.selectedCodespace.git_status.ref) {
            let pendingChangeSuffix = '';
            if (this.selectedCodespace.git_status.has_uncommitted_changes) {
                pendingChangeSuffix = '*';
            }
            const branchLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envDetailsView.branch', '{} • {}↓ {}↑'), `${this.selectedCodespace.git_status.ref}${pendingChangeSuffix}`, this.selectedCodespace.git_status.behind, this.selectedCodespace.git_status.ahead);
            result.push(new TreeViewItem_1.TreeViewItem(branchLabel, {
                type: CloudEnvViews_1.ViewItem.Branch,
            }).withIconPath(new vscode.ThemeIcon('source-control')));
        }
        result.push(new TreeViewItem_1.TreeViewItem(this.selectedCodespace.machine.display_name, {
            type: CloudEnvViews_1.ViewItem.MachineType,
        }).withIconPath(new vscode.ThemeIcon('vm')));
        const idleTimeoutLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envDetailsView.idleTimeout', 'Idle timeout {}'), (0, environments_1.formatIdleTimeoutForDisplay)(this.selectedCodespace.idle_timeout_minutes));
        result.push(new TreeViewItem_1.TreeViewItem(idleTimeoutLabel, {
            type: CloudEnvViews_1.ViewItem.IdleTimeout,
        }).withIconPath(new vscode.ThemeIcon('server-process')));
        if (this.selectedCodespace.created_at) {
            const createdLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envDetailsView.createdAt', 'Created {}'), luxon_1.DateTime.fromISO(this.selectedCodespace.created_at).toRelative());
            result.push(new TreeViewItem_1.TreeViewItem(createdLabel, {
                type: CloudEnvViews_1.ViewItem.CreatedAt,
            }).withIconPath(new vscode.ThemeIcon('book')));
        }
        return result;
    }
    async getDefaultRootChildren() {
        //We should not ever see this in ui because the Codespace Details pane should be hidden if there is not a selected environment
        const result = [];
        const label = `Connect to codespace...`;
        const newEnv = new TreeViewItem_1.TreeViewItem(label, { type: CloudEnvViews_1.ViewItem.ConnectToEnvironment }, vscode.TreeItemCollapsibleState.None).withCommand({
            title: 'Connect to codespace...',
            command: "github.codespaces.connect" /* connect */,
        });
        result.push(newEnv);
        return result;
    }
}
exports.EnvironmentDetailsExplorer = EnvironmentDetailsExplorer;


/***/ }),

/***/ 16577:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvironmentExplorer = void 0;
const vscode = __webpack_require__(89496);
const path = __webpack_require__(67425);
const nls = __webpack_require__(52730);
const TreeViewItem_1 = __webpack_require__(50740);
const CloudEnvViews_1 = __webpack_require__(44214);
const vscode_command_framework_1 = __webpack_require__(89813);
const commandConstants_1 = __webpack_require__(94218);
const commandContext_1 = __webpack_require__(15071);
const TreeViewItemOptions_1 = __webpack_require__(68026);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const util_1 = __webpack_require__(66194);
const injectMessageParameters_1 = __webpack_require__(30393);
const localize = nls.loadMessageBundle();
class EnvironmentExplorer {
    constructor(dependencies) {
        this.dependencies = dependencies;
        // Event registered by vscode to update the tree view
        this.changeEventEmitter = new vscode.EventEmitter();
        this.onDidChangeTreeData = this.changeEventEmitter.event;
        this.codespaces = [];
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.onCodespacesChanged(this.updateEnvironmentList.bind(this));
        dependencies.getApiProvider().onSignInChanged(this.updateInitializationStatus.bind(this));
        this.updateInitializationStatus().catch();
    }
    refresh() {
        this.changeEventEmitter.fire(undefined);
    }
    updateEnvironmentList(codespaces) {
        this.codespaces = codespaces;
        this.refresh();
    }
    async updateInitializationStatus() {
        try {
            await this.resetInitializationForExplorerState();
            if (this.dependencies.getApiProvider().isSignedIn()) {
                this.codespaces = await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchEnvironmentsList();
                this.refresh();
            }
            else {
                this.emptyEnv();
            }
        }
        catch (e) {
            this.refresh();
            // Callers aren't awaiting this async method, so any errors thrown here would be unhandled.
            vscode_command_framework_1.traceSource.error('Failed to update codespaces list: ' + e.message, e);
        }
        finally {
            await this.initializedCompletedForExplorerState();
        }
    }
    emptyEnv() {
        this.codespaces = [];
        this.refresh();
    }
    getTreeItem(element) {
        return element;
    }
    async getContextForWelcomeView() {
        const signedIn = this.dependencies.getApiProvider().isSignedIn();
        const noCodespaces = signedIn && this.codespaces.length === 0;
        await (0, commandContext_1.setCommandContext)(`${"codespaces:views-welcome:" /* ViewsWelcome */}${'not-signed-in'}`, !signedIn);
        await (0, commandContext_1.setCommandContext)(`${"codespaces:views-welcome:" /* ViewsWelcome */}${'no-codespaces'}`, noCodespaces);
    }
    async getChildren(element) {
        let treeViewList = new Map();
        if (await this.isExplorerInitialized()) {
            await this.getContextForWelcomeView();
        }
        if ((element === null || element === void 0 ? void 0 : element.options.type) === CloudEnvViews_1.ViewItem.CodespaceRecentPath) {
            return this.makeRecentPathsList(element.id);
        }
        // If this is not the first render, return the children of existing trees.
        if (element && element.children) {
            return element.children;
        }
        if (treeViewList.size > 0) {
            const result = [];
            treeViewList.forEach((item) => {
                result.push(item);
            });
            return result;
        }
        else {
            return this.makeTreeViewList(treeViewList, util_1.Util.Instance.sortedCodespacesList(this.codespaces));
        }
    }
    makeTreeViewList(treeViewList, codespaces) {
        let currentUser = undefined;
        codespaces.map((codespace) => {
            var _a;
            currentUser = codespace.owner.login;
            const owner = (_a = codespace.billable_owner.login) !== null && _a !== void 0 ? _a : 'Unknown';
            if (treeViewList.has(owner)) {
                const treeViewChild = this.buildCodespaceTreeViewItem(codespace);
                const treeView = treeViewList.get(owner);
                if (treeView === undefined) {
                    vscode_command_framework_1.traceSource.error(`unable to find the codespaces treeView for codespace id ${codespace.environment_id}`);
                    return;
                }
                const children = treeView.children !== undefined ? treeView.children : [];
                children.push(treeViewChild);
                treeView.children = children;
                treeViewList.set(owner, treeView);
            }
            else {
                const parent = this.buildOwnerTreeViewItem(treeViewList, codespace, owner);
                treeViewList.set(owner, parent);
            }
        });
        // Sorting codespaces by their owners.
        treeViewList = new Map([...treeViewList.entries()].sort((a, b) => {
            if (a[0] === currentUser && b[0] !== currentUser) {
                return -1;
            }
            if (a[0] !== currentUser && b[0] === currentUser) {
                return 1;
            }
            else {
                return 0;
            }
        }));
        return [...treeViewList.values()];
    }
    // Build a treeView based on owner of the repo.
    buildOwnerTreeViewItem(treeViewList, selectedCodespace, owner) {
        const parent = new TreeViewItem_1.TreeViewItem(owner, { type: CloudEnvViews_1.ViewItem.Folder }, vscode.TreeItemCollapsibleState.Expanded);
        let child = [];
        child.push(this.buildCodespaceTreeViewItem(selectedCodespace));
        parent.children = child;
        treeViewList.set(owner, parent);
        return parent;
    }
    // Build a treeView for each codespace.
    buildCodespaceTreeViewItem(selectedCodespace) {
        var _a;
        const iconsRoot = this.dependencies.extensionsUtil.getRelativeExtensionUri('images/');
        const currentCodespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
        const currentCodespaceId = currentCodespace ? currentCodespace.environment_id : undefined;
        const recentPaths = this.getRecentPathsForDisplay(selectedCodespace);
        const hasRecentPaths = recentPaths.length > 0;
        const options = TreeViewItemOptions_1.TreeViewItemOptionsFactory.fromCodespace(selectedCodespace, currentCodespaceId, hasRecentPaths);
        const formattedName = util_1.Util.Instance.formatDisplayStringForTarget((_a = selectedCodespace.repository.full_name) !== null && _a !== void 0 ? _a : 'Unknown', selectedCodespace.vscs_target);
        const treeItem = new TreeViewItem_1.TreeViewItem(formattedName, options, hasRecentPaths
            ? vscode.TreeItemCollapsibleState.Expanded
            : vscode.TreeItemCollapsibleState.None);
        const descriptionParts = [];
        if (selectedCodespace.display_name) {
            descriptionParts.push(selectedCodespace.display_name);
        }
        if (selectedCodespace.git_status.ref) {
            descriptionParts.push(selectedCodespace.git_status.ref);
            const ahead = selectedCodespace.git_status.ahead;
            const behind = selectedCodespace.git_status.behind;
            if (ahead !== 0 || behind !== 0) {
                descriptionParts.push(`${behind}↓ ${ahead}↑`);
            }
        }
        const description = descriptionParts.join(' • ');
        const tooltip = new vscode.MarkdownString(options.tooltip, true);
        let iconPath;
        if (options.builtInIcon) {
            iconPath = options.builtInIcon;
        }
        else {
            iconPath = {
                dark: vscode.Uri.joinPath(iconsRoot, 'dark', options.iconFile),
                light: vscode.Uri.joinPath(iconsRoot, 'light', options.iconFile),
            };
        }
        return treeItem
            .withIconPath(iconPath)
            .withTooltip(tooltip)
            .withDescription(description)
            .withId(selectedCodespace.environment_id);
    }
    makeRecentPathsList(codespaceId) {
        const iconsRoot = this.dependencies.extensionsUtil.getRelativeExtensionUri('images/');
        const codespace = this.codespaces.find((e) => e.environment_id === codespaceId);
        if (!codespace) {
            return [];
        }
        const paths = this.getRecentPathsForDisplay(codespace);
        return paths.map((recentPath) => {
            const options = TreeViewItemOptions_1.TreeViewItemOptionsFactory.recentPathOptions(recentPath);
            const extension = path.extname(recentPath);
            let name = path.basename(recentPath, extension);
            if (extension === '.code-workspace') {
                name = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.codespaceExplorer.workspaceSuffix', '{} (Workspace)'), name);
            }
            const treeItem = new TreeViewItem_1.TreeViewItem(name, options)
                .withIconPath({
                dark: vscode.Uri.joinPath(iconsRoot, 'dark', options.iconFile),
                light: vscode.Uri.joinPath(iconsRoot, 'light', options.iconFile),
            })
                .withTooltip(options.tooltip)
                .withFilepath(recentPath)
                .withCodespaceId(codespace.environment_id);
            return treeItem;
        });
    }
    getRecentPathsForDisplay(codespace) {
        // Only display the folders if there is more than one in the list
        if (codespace.recent_folders && codespace.recent_folders.length > 1) {
            return codespace.recent_folders;
        }
        return [];
    }
    async initializedCompletedForExplorerState() {
        await (0, commandContext_1.setCommandContext)("codespaces:explorerState" /* ExplorerState */, commandConstants_1.ExplorerState.Initialized);
    }
    async resetInitializationForExplorerState() {
        await (0, commandContext_1.setCommandContext)("codespaces:explorerState" /* ExplorerState */, commandConstants_1.ExplorerState.NotInitialized);
    }
    async isExplorerInitialized() {
        return ((await (0, commandContext_1.getCommandContext)("codespaces:explorerState" /* ExplorerState */)) === commandConstants_1.ExplorerState.Initialized);
    }
}
exports.EnvironmentExplorer = EnvironmentExplorer;


/***/ }),

/***/ 53388:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvironmentPerformanceExplorer = void 0;
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(52730);
const CloudEnvViews_1 = __webpack_require__(44214);
const TreeViewItem_1 = __webpack_require__(50740);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const vscode_command_framework_1 = __webpack_require__(89813);
const injectMessageParameters_1 = __webpack_require__(30393);
const commandContext_1 = __webpack_require__(15071);
const OpenTelemetryProvider_1 = __webpack_require__(34396);
const vso_telemetry_1 = __webpack_require__(76811);
const dependencies_1 = __webpack_require__(35477);
const localize = nls.loadMessageBundle();
class EnvironmentPerformanceExplorer {
    constructor() {
        this.changeEventEmitter = new vscode.EventEmitter();
        this.onDidChangeTreeData = this.changeEventEmitter.event;
        this.refresh = () => {
            this.changeEventEmitter.fire(undefined);
        };
        this.logger = vscode_command_framework_1.traceSource.withName('RemoteExplorer');
        this.updateEnvironmentDetails();
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.onCodespacesChanged(this.updateEnvironmentDetails.bind(this));
        this.firstChild = this.createFirstTreeItem();
        this.setCommandContextListener();
    }
    setContext(context) {
        this.context = context;
    }
    setTreeView(treeView) {
        this.treeView = treeView;
    }
    getTreeView() {
        return this.treeView;
    }
    static get Instance() {
        if (!this.singleton) {
            this.singleton = new EnvironmentPerformanceExplorer();
        }
        return this.singleton;
    }
    setCommandContextListener() {
        // set listener for changes in the command context
        (0, commandContext_1.onCommandContextChanged)(({ key }) => {
            if (key === "codespaces:connectionState" /* ConnectionState */) {
                // update first tree item upon connecting to environment
                this.firstChild = this.createFirstTreeItem();
            }
        });
    }
    updateEnvironmentDetails() {
        try {
            this.logger.info('Updating codespace performance info');
            this.selectedCodespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
            if (!this.selectedCodespace) {
                this.emptyEnvDetails();
            }
            this.refresh();
        }
        catch (e) {
            this.logger.error('Failed to update codespace performance info: ' + e.message, e);
        }
    }
    updateDisconnectionNumber(disconnections) {
        this.disconnections = disconnections;
        this.refresh();
    }
    updateBytesIn(bytesIn) {
        this.bytesIn = bytesIn;
        this.refresh();
    }
    updateBytesOut(bytesOut) {
        this.bytesOut = bytesOut;
        this.refresh();
    }
    updateLatency(latency) {
        this.latencyCurrent = latency.current;
        this.latencyAvg = latency.average;
        this.latencyMin = latency.min;
        this.latencyMax = latency.max;
        this.refresh();
    }
    updatePerformanceRpcData(perfData) {
        this.codespaceCpu = perfData.cpuUsage;
        this.memoryUsed = perfData.memoryUsed;
        this.dockerLibDiskUsed = perfData.dockerLibDiskUsed;
        this.refresh();
    }
    updateClientCpu(clientCpu) {
        this.clientCpu = clientCpu;
        this.refresh();
    }
    getCurrentLatency() {
        return this.latencyCurrent;
    }
    emptyEnvDetails() {
        this.selectedCodespace = undefined;
    }
    formatBytes(bytes, precision = 2) {
        const base = 1024;
        const kiloBytes = base;
        const megaBytes = Math.pow(base, 2);
        const gigaBytes = Math.pow(base, 3);
        if (bytes < kiloBytes) {
            return (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.bytes', '{} Bytes'), bytes);
        }
        else if (bytes < megaBytes) {
            return (bytes / kiloBytes).toFixed(precision) + ' KB';
        }
        else if (bytes < gigaBytes) {
            return (bytes / megaBytes).toFixed(precision) + ' MB';
        }
        else {
            return (bytes / gigaBytes).toFixed(precision) + ' GB';
        }
    }
    createFirstTreeItem() {
        if (this.selectedCodespace && this.selectedCodespace.environment_id) {
            const idLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.envId', 'Codespace ID: {}'), this.selectedCodespace.environment_id);
            return new TreeViewItem_1.TreeViewItem(idLabel, {
                type: CloudEnvViews_1.ViewItem.EnvironmentID,
                attributes: {
                    copyIdToClipboardEnabled: true,
                },
            }).withCodespaceId(this.selectedCodespace.environment_id);
        }
        else {
            const label = !this.selectedCodespace
                ? localize('text.envPerformanceView.noCodespaceConnected', 'No codespace connected.')
                : localize('error.envPerformanceView.noEnvError', 'Environment Unavailable.');
            return new TreeViewItem_1.TreeViewItem(label, { type: CloudEnvViews_1.ViewItem.NotConnected }, vscode.TreeItemCollapsibleState.None);
        }
    }
    getFirstTreeItem() {
        return this.firstChild;
    }
    getTreeItem(element) {
        return element;
    }
    async getParent(element) {
        return undefined;
    }
    async getChildren(element) {
        if (element && element.children) {
            return element.children;
        }
        else {
            return this.selectedCodespace
                ? this.getEnvironmentPerformanceInfo()
                : this.getDefaultRootChildren();
        }
    }
    async getEnvironmentPerformanceInfo() {
        let result = [];
        this.firstChild = this.createFirstTreeItem();
        result.push(this.firstChild);
        if (!this.selectedCodespace) {
            return result;
        }
        const regionLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.region', 'Codespace Region: {}'), this.selectedCodespace.location);
        result.push(new TreeViewItem_1.TreeViewItem(regionLabel, {
            type: CloudEnvViews_1.ViewItem.EnvironmentRegion,
        }));
        const sessionIdLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.sessionId', 'Session ID: {}'), vso_telemetry_1.Telemetry.getContextProperty(vso_telemetry_1.TelemetryPropertyNames.SESSION_ID));
        result.push(new TreeViewItem_1.TreeViewItem(sessionIdLabel, {
            type: CloudEnvViews_1.ViewItem.SessionID,
            attributes: {
                copyIdToClipboardEnabled: true,
            },
        }).withSessionId(vso_telemetry_1.Telemetry.getContextProperty(vso_telemetry_1.TelemetryPropertyNames.SESSION_ID)));
        const disconnectionsLabel = this.disconnections != null
            ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.disconnections', 'Session Disconnections: {}'), this.disconnections)
            : localize('text.envPerformanceView.disconnectionsError', 'Disconnection data unavailable');
        result.push(new TreeViewItem_1.TreeViewItem(disconnectionsLabel, {
            type: CloudEnvViews_1.ViewItem.SessionDisconnections,
        }));
        // Only show connection and client cpu metrics if we're not in the web portal
        if (!dependencies_1.dependencies.configurationManager.isRunningInWeb) {
            const bytesInLabel = this.bytesIn != null
                ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.bytesIn', 'Total Session Bytes In: {}'), this.formatBytes(this.bytesIn))
                : localize('text.envPerformanceView.bytesInError', 'Total Session Bytes In: -');
            result.push(new TreeViewItem_1.TreeViewItem(bytesInLabel, {
                type: CloudEnvViews_1.ViewItem.SessionBytesIn,
            }));
            const bytesOutLabel = this.bytesOut != null
                ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.bytesOut', 'Total Session Bytes Out: {}'), this.formatBytes(this.bytesOut))
                : localize('text.envPerformanceView.bytesOutError', 'Total Session Bytes Out: -');
            result.push(new TreeViewItem_1.TreeViewItem(bytesOutLabel, {
                type: CloudEnvViews_1.ViewItem.SessionBytesOut,
            }));
            const latencyLabel = this.latencyCurrent != null
                ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.latencyLabel', 'Latency: {} ms'), this.latencyCurrent.toFixed(2))
                : localize('text.envPerformanceView.latencyLabelError', 'Latency: -');
            const latencyAvgLabel = this.latencyAvg
                ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.latencyAvgLabel', 'Session Average: {} ms'), this.latencyAvg.toFixed(2))
                : localize('text.envPerformanceView.latencyAvgError', 'Session Average: -');
            const latencyMinLabel = this.latencyMin
                ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.latencyMinLabel', 'Session Min: {} ms'), this.latencyMin.toFixed(2))
                : localize('text.envPerformanceView.latencyMinError', 'Session Min: -');
            const latencyMaxLabel = this.latencyMax
                ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.latencyMaxLabel', 'Session Max: {} ms'), this.latencyMax.toFixed(2))
                : localize('text.envPerformanceView.latencyMaxError', 'Session Max: -');
            const childrenOptions = { type: CloudEnvViews_1.ViewItem.SessionLatencyDetails };
            const latencyId = 'latency-collapsible-treeitem';
            const latencyTreeItem = new TreeViewItem_1.TreeViewItem(latencyLabel, { type: CloudEnvViews_1.ViewItem.SessionLatencyCurrent }, vscode.TreeItemCollapsibleState.Collapsed, [
                new TreeViewItem_1.TreeViewItem(latencyAvgLabel, childrenOptions),
                new TreeViewItem_1.TreeViewItem(latencyMinLabel, childrenOptions),
                new TreeViewItem_1.TreeViewItem(latencyMaxLabel, childrenOptions),
            ]).withId(latencyId);
            result.push(latencyTreeItem);
            const clientCpuLabel = this.clientCpu
                ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.clientCpuUsage', 'Client CPU Used: {}'), this.clientCpu)
                : localize('text.envPerformanceView.clientCpuLoading', 'Client CPU Used: -');
            result.push(new TreeViewItem_1.TreeViewItem(clientCpuLabel, {
                type: CloudEnvViews_1.ViewItem.ClientCpuUsage,
            }));
        }
        const codespaceCpuLabel = this.codespaceCpu && this.codespaceCpu !== 'unavailable'
            ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.codespaceCpuUsage', 'Codespace CPU Used: {}'), this.codespaceCpu)
            : localize('text.envPerformanceView.codespaceCpuLoading', 'Codespace CPU Used: -');
        result.push(new TreeViewItem_1.TreeViewItem(codespaceCpuLabel, {
            type: CloudEnvViews_1.ViewItem.CodespaceCpuUsage,
        }));
        const memoryUsedLabel = this.memoryUsed && this.memoryUsed !== 'unavailable'
            ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.memoryUsed', 'Memory Used: {}'), this.memoryUsed)
            : localize('text.envPerformanceView.memoryLoading', 'Memory Used: -');
        result.push(new TreeViewItem_1.TreeViewItem(memoryUsedLabel, {
            type: CloudEnvViews_1.ViewItem.MemoryUsed,
        }));
        const dockerLibDiskUsedLabel = this.dockerLibDiskUsed && this.dockerLibDiskUsed !== 'unavailable'
            ? (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.dockerLibDiskUsed', 'Disk Used: {}'), this.dockerLibDiskUsed)
            : localize('text.envPerformanceView.dockerLibDiskUsedLoading', 'Disk Used: -');
        result.push(new TreeViewItem_1.TreeViewItem(dockerLibDiskUsedLabel, {
            type: CloudEnvViews_1.ViewItem.DockerLibDiskUsed,
        }));
        if (this.context) {
            const performanceValuesObject = (0, OpenTelemetryProvider_1.getPerformanceValues)(this.context, this.selectedCodespace.environment_id);
            if (performanceValuesObject) {
                const performanceValues = performanceValuesObject.performanceValues;
                if (performanceValues) {
                    if (performanceValues.createCodespaceTime) {
                        const createCodespaceTimeLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.createCodespaceTime', 'Create Codespace Time: {}'), performanceValues.createCodespaceTime);
                        result.push(new TreeViewItem_1.TreeViewItem(createCodespaceTimeLabel, {
                            type: CloudEnvViews_1.ViewItem.CreateCodespaceTime,
                        }));
                    }
                    if (performanceValues.resumeCodespaceTime) {
                        const resumeCodespaceTimeLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.envPerformanceView.resumeCodespaceTime', 'Start Codespace Time: {}'), performanceValues.resumeCodespaceTime);
                        result.push(new TreeViewItem_1.TreeViewItem(resumeCodespaceTimeLabel, {
                            type: CloudEnvViews_1.ViewItem.ResumeCodespaceTime,
                        }));
                    }
                }
            }
        }
        return result;
    }
    async getDefaultRootChildren() {
        const result = [];
        this.firstChild = this.createFirstTreeItem();
        result.push(this.firstChild);
        return result;
    }
}
exports.EnvironmentPerformanceExplorer = EnvironmentPerformanceExplorer;


/***/ }),

/***/ 50740:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeViewItem = void 0;
const vscode = __webpack_require__(89496);
class TreeViewItem extends vscode.TreeItem {
    constructor(label, options, collapsibleState, children) {
        super(label, collapsibleState || vscode.TreeItemCollapsibleState.None);
        this.options = options;
        const availableCommands = options.attributes || {};
        const formattedCommands = Object.entries(availableCommands)
            .filter(([k, v]) => v)
            .map(([k]) => k)
            .join('.');
        this.contextValue = formattedCommands
            ? `${options.type}_${formattedCommands}`
            : options.type;
        this.children = children;
    }
    withCommand(command) {
        this.command = command;
        return this;
    }
    withId(id) {
        this.id = id;
        return this;
    }
    withIconPath(iconPath) {
        this.iconPath = iconPath;
        return this;
    }
    withTooltip(tooltip) {
        this.tooltip = tooltip;
        return this;
    }
    withDescription(description) {
        this.description = description;
        return this;
    }
    withCodespaceId(id) {
        this.codespaceId = id;
        return this;
    }
    withFilepath(path) {
        this.path = path;
        return this;
    }
    withSessionId(id) {
        this.sessionId = id;
        return this;
    }
}
exports.TreeViewItem = TreeViewItem;


/***/ }),

/***/ 68026:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeViewItemOptionsFactory = void 0;
const os = __webpack_require__(54167);
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(52730);
const luxon_1 = __webpack_require__(50463);
const CloudEnvViews_1 = __webpack_require__(44214);
const environmentInfo_1 = __webpack_require__(42802);
const IGitHubApi_1 = __webpack_require__(85463);
const EnvironmentCommands_1 = __webpack_require__(76506);
const environments_1 = __webpack_require__(25298);
const injectMessageParameters_1 = __webpack_require__(30393);
const util_1 = __webpack_require__(66194);
const { Available, Shutdown, Failed } = environmentInfo_1.StateInfo;
const localize = nls.loadMessageBundle();
class TreeViewItemOptionsFactory {
    static fromCodespace(codespace, connectedCodespaceId, hasRecentPaths) {
        let attributes = (0, EnvironmentCommands_1.getAvailableCommands)(codespace);
        let details = [];
        let iconFile = 'availableEnv.svg';
        let builtInIcon = undefined;
        if (codespace.pending_operation) {
            builtInIcon = new vscode.ThemeIcon('loading~spin');
            details.push(`$(loading~spin) ${codespace.pending_operation_disabled_reason}`);
        }
        else if (codespace.state === Shutdown) {
            iconFile = 'pause.svg';
        }
        else if (codespace.state === Failed) {
            iconFile = 'error.svg';
        }
        else if (codespace.state !== Available) {
            iconFile = 'spinner.svg';
        }
        if (codespace.environment_id === connectedCodespaceId) {
            iconFile = '/selectedEnv.svg';
        }
        if (codespace.vscs_target && codespace.vscs_target !== IGitHubApi_1.VscsTarget.Production) {
            const vscsTargetLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.codespaceDetailsView.vscsTarget', '$(server-environment) VSCS target: {}'), util_1.Util.Instance.formatDisplayStringForTarget(codespace.vscs_target, codespace.vscs_target));
            details.push(vscsTargetLabel);
        }
        details.push(`$(repo) ${codespace.repository.full_name}`);
        if (codespace.display_name) {
            details.push(`$(tag) ${codespace.display_name}`);
        }
        // branch name, ahead and behind number of commits
        if (codespace.git_status.ref) {
            const ahead = codespace.git_status.ahead;
            const behind = codespace.git_status.behind;
            let pendingChangeSuffix = '';
            if (codespace.git_status.has_uncommitted_changes) {
                pendingChangeSuffix = '*';
            }
            const aheadBehind = ahead !== 0 || behind !== 0 ? ` • ${behind}$(arrow-down) ${ahead}$(arrow-up)` : '';
            details.push(`$(source-control) ${codespace.git_status.ref}${pendingChangeSuffix}${aheadBehind}`);
        }
        details.push(`$(vm) ${codespace.machine.display_name}`);
        const idleTimeoutLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.codespaceDetailsView.idleTimeout', '$(server-process) Idle timeout {}'), (0, environments_1.formatIdleTimeoutForDisplay)(codespace.idle_timeout_minutes));
        details.push(idleTimeoutLabel);
        if (codespace.last_used_at) {
            const lastUsedLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.codespaceDetailsView.lastUsed', '$(clock) Last used {}'), luxon_1.DateTime.fromISO(codespace.last_used_at).toRelative());
            details.push(lastUsedLabel);
        }
        if (codespace.created_at) {
            const createdLabel = (0, injectMessageParameters_1.injectMessageParameters)(localize('text.codespaceDetailsView.created', '$(book) Created {}'), luxon_1.DateTime.fromISO(codespace.created_at).toRelative());
            details.push(createdLabel);
        }
        if (hasRecentPaths) {
            return {
                attributes,
                iconFile,
                builtInIcon,
                type: CloudEnvViews_1.ViewItem.CodespaceRecentPath,
                tooltip: details.join(os.EOL + os.EOL),
            };
        }
        return {
            attributes,
            iconFile,
            builtInIcon,
            type: CloudEnvViews_1.ViewItem.Environment,
            tooltip: details.join(os.EOL + os.EOL),
        };
    }
    static recentPathOptions(tooltip, deleteEnabled = true) {
        const attributes = {
            connectToEnabled: true,
            removePathEnabled: deleteEnabled,
            exportEnabled: false,
        };
        const iconFile = 'folder.svg';
        return {
            attributes,
            iconFile,
            type: CloudEnvViews_1.ViewItem.Folder,
            tooltip: tooltip,
        };
    }
}
exports.TreeViewItemOptionsFactory = TreeViewItemOptionsFactory;


/***/ }),

/***/ 67260:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserPrompt = void 0;
class UserPrompt {
}
exports.UserPrompt = UserPrompt;


/***/ }),

/***/ 2389:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodespaceCreationPrompt = void 0;
const vscode_command_framework_1 = __webpack_require__(89813);
const util_1 = __webpack_require__(66194);
const nls = __webpack_require__(52730);
const UserPrompt_1 = __webpack_require__(67260);
const localize = nls.loadMessageBundle();
const defaultSkuExternal = 'standardLinux32gb';
const defaultSkuInternal = 'standardLinux';
let repositories;
class CodespaceCreationPrompt extends UserPrompt_1.UserPrompt {
    constructor(dependencies) {
        super();
        this.dependencies = dependencies;
    }
    async run(options) {
        var _a, _b, _c;
        const fullRepoName = ((_a = options === null || options === void 0 ? void 0 : options.values) === null || _a === void 0 ? void 0 : _a.fullRepoName)
            ? this.repoOrUrlToRepo(options.values.fullRepoName)
            : await this.promptForRepoName();
        const [owner, repoName] = fullRepoName.split('/');
        const repo = await this.dependencies.getApiProvider().environments.getRepo(owner, repoName);
        const ref = (_c = (_b = options === null || options === void 0 ? void 0 : options.values) === null || _b === void 0 ? void 0 : _b.ref) !== null && _c !== void 0 ? _c : (await this.promptForBranch(repo));
        const devcontainerPath = await this.promptForDevContainer(repo, ref);
        const skuName = await this.promptForSku(repo, ref);
        return {
            fullRepoName,
            repo,
            ref,
            devcontainerPath,
            sku: skuName,
        };
    }
    repoOrUrlToRepo(repoOrUrl) {
        return repoOrUrl
            .trim()
            .replace(/^.*?github\.com\//, '') // Remove leading https://github.com
            .replace(/\.git$/, '');
    }
    async promptForRepoName() {
        const state = { rateLimitMsgShown: false };
        let timeout;
        const onUpdatedInput = (input) => new Promise((resolve) => {
            clearTimeout(timeout);
            timeout = setTimeout(async () => resolve(this.fetchRepoItems(input, state, false)), input.endsWith('/') ? 0 : 250);
        });
        const acceptNonMatchingInput = async (input) => {
            try {
                const [owner, repo] = this.repoOrUrlToRepo(input).split('/');
                await this.dependencies.getApiProvider().environments.getRepo(owner, repo);
                return true;
            }
            catch (_a) {
                return false;
            }
        };
        const prompt = localize('message.codespaceCreation.selectRepo', 'Select a repo to create your codespace');
        const fetchingPrompt = localize('message.codespaceCreation.loadingRepos', 'Loading your repositories...');
        const quickPick = this.dependencies.notificationUtil.createQuickPickWithRefresh(fetchingPrompt, prompt, onUpdatedInput, acceptNonMatchingInput);
        let pickItems = await this.fetchRepoItems('', state, true);
        quickPick.setItems(pickItems);
        const selection = await quickPick.valuePromise;
        if (!selection) {
            throw new vscode_command_framework_1.CancellationError();
        }
        return typeof selection === 'string' ? this.repoOrUrlToRepo(selection) : selection.label;
    }
    async fetchRepoItems(query, state, cache) {
        query = query && this.repoOrUrlToRepo(query);
        repositories =
            cache && repositories
                ? repositories
                : await this.dependencies
                    .getApiProvider()
                    .environments.listRepos(query)
                    .catch((e) => {
                    if (e.message.includes('rate limit') && !state.rateLimitMsgShown) {
                        state.rateLimitMsgShown = true;
                        const message = localize('message.codespaceCreation.rateLimitExceeded', 'Search rate limit exceeded. You can wait or specify the repository by full name or URL.');
                        this.dependencies.notificationUtil.showInformationMessage(message, false);
                    }
                    return [];
                });
        return repositories.map((r) => ({
            label: `${r.owner}/${r.name}`,
            description: r.description,
        }));
    }
    async promptForDevContainer(repo, ref) {
        const devcontainers = await this.dependencies
            .getApiProvider()
            .environments.listDevContainers(repo.id, ref);
        const defaultPath1 = '.devcontainer/devcontainer.json';
        const defaultPath2 = '.devcontainer.json';
        if (devcontainers.length === 0) {
            // don't show the picker, nothing to pick
            return undefined;
        }
        else if (devcontainers.length === 1 &&
            [defaultPath1, defaultPath2].includes(devcontainers[0].path)) {
            // the repo has a single default devcontainer; don't show the picker, just use it
            return devcontainers[0].path;
        }
        const codespacesDefaultLabel = localize('message.codespaceCreation.defaultDevContainerLabel', 'Default Codespaces configuration');
        const defaultDesc = localize('message.codespaceCreation.defaultDevContainerDescription', 'Default');
        // the repo has multiple devcontainers or a single non-default devcontainer
        // so, find the default devcontainer, if there is one
        let defaultDevcontainer = devcontainers.find((d) => d.path === defaultPath1);
        if (defaultDevcontainer === undefined) {
            defaultDevcontainer = devcontainers.find((d) => d.path === defaultPath2);
        }
        // create items, leaving out default devcontainer (if it exists) for now
        let items = devcontainers
            .filter((d) => d !== defaultDevcontainer)
            .map((d) => ({ label: d.path }));
        // create default item to add to top of the list, either repo default or codespaces default
        const defaultItem = {
            label: defaultDevcontainer !== undefined
                ? defaultDevcontainer.path
                : codespacesDefaultLabel,
            description: defaultDesc,
            picked: true,
            alwaysShow: true,
        };
        items = [defaultItem, ...items];
        const placeHolder = localize('message.codespaceCreation.selectDevcontainer', 'Select the devcontainer for your codespace');
        const pickedItem = await this.dependencies.notificationUtil.showQuickPick(items, {
            placeHolder,
            ignoreFocusOut: true,
        });
        if (!pickedItem) {
            throw new vscode_command_framework_1.CancellationError();
        }
        return pickedItem.label === codespacesDefaultLabel ? undefined : pickedItem.label;
    }
    async promptForSku(repo, ref) {
        const placeHolder = localize('message.codespaceCreation.selectSku', 'Select the instance type for your codespace');
        let skus = await this.dependencies
            .getApiProvider()
            .environments.getMachinesForCreation(repo, ref);
        if (skus.length === 0) {
            // we should not hit this anymore as we already check the response we get from github in "listMachines",
            // however, we check this for any unknown reason.
            const quotaErrorMessage = localize('message.codespaceCreation.emptyMachines', 'There are currently no machine types available for this repository.');
            throw new vscode_command_framework_1.CancellationError(quotaErrorMessage);
        }
        // If the user only has one choice for the machine type, do not bother prompting, just use it
        if (skus.length === 1) {
            return skus[0];
        }
        const skuNames = skus.map((sku) => ({
            label: sku.displayName,
            description: util_1.Util.Instance.getMachineTypeDescription(sku.prebuildAvailability),
            picked: sku.name === defaultSkuExternal || sku.name === defaultSkuInternal,
            sku,
        }));
        // If none of the skus are selected by default, make the first item selected
        if (!skuNames.some((x) => x.picked)) {
            skuNames[0].picked = true;
        }
        const pickedItem = await this.dependencies.notificationUtil.showQuickPick(skuNames, {
            placeHolder,
            ignoreFocusOut: true,
        });
        if (!pickedItem) {
            throw new vscode_command_framework_1.CancellationError();
        }
        return pickedItem.sku;
    }
    async promptForBranch(repo) {
        const loadingMessage = localize('message.codespaceCreation.loadingBranches', 'Loading branches...');
        const message = localize('message.codespaceCreation.selectBranch', "Select the branch you'd like to use for the codespace");
        const defaultBranchItem = {
            label: repo.defaultBranch,
            description: localize('message.codespaceCreation.defaultBranch', 'Default Branch'),
            alwaysShow: true,
        };
        let originalBranchItems = [];
        let listWithDefaultBranch = [defaultBranchItem];
        let timeout;
        const onUpdatedInput = (input) => new Promise((resolve) => {
            clearTimeout(timeout);
            timeout = setTimeout(async () => {
                // If GitHub previously paged back the list of branches (100 results),
                // call into the API to verify whether the user-provided branch exists
                if (originalBranchItems.length === 100 &&
                    !listWithDefaultBranch.some((item) => item.label.includes(input))) {
                    try {
                        await this.dependencies
                            .getApiProvider()
                            .environments.getBranch(repo.owner, repo.name, input);
                        listWithDefaultBranch.push({ label: input, picked: true });
                    }
                    catch (e) {
                        // don't add to list
                    }
                }
                resolve(listWithDefaultBranch);
            }, 200);
        });
        const quickPick = this.dependencies.notificationUtil.createQuickPickWithRefresh(loadingMessage, message, onUpdatedInput);
        const branchNames = await this.dependencies
            .getApiProvider()
            .environments.listBranchNames(repo.owner, repo.name);
        originalBranchItems = branchNames.map((name) => ({
            label: name,
            picked: name === repo.defaultBranch,
        }));
        listWithDefaultBranch = [
            defaultBranchItem,
            ...originalBranchItems.filter((item) => item.label !== defaultBranchItem.label),
        ];
        quickPick.setItems(listWithDefaultBranch);
        const branch = await quickPick.valuePromise;
        if (!branch) {
            throw new vscode_command_framework_1.CancellationError();
        }
        if (typeof branch === 'string') {
            return branch;
        }
        return branch.label;
    }
}
exports.CodespaceCreationPrompt = CodespaceCreationPrompt;


/***/ }),

/***/ 66005:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.buildQuickpick = exports.promptForEnvironment = void 0;
const vscode_command_framework_1 = __webpack_require__(89813);
const luxon_1 = __webpack_require__(50463);
const nls = __webpack_require__(52730);
const injectMessageParameters_1 = __webpack_require__(30393);
const util_1 = __webpack_require__(66194);
const localize = nls.loadMessageBundle();
async function promptForEnvironment(dependencies, options) {
    const { quickPickPrompt = 'Select a codespace', filter = () => true, onNoAvailableEnvironments = () => { }, } = options || {};
    const loadingPrompt = localize('message.codespaceConnection.loadingCodespaces', 'Loading your codespaces...');
    const quickPick = dependencies.notificationUtil.createQuickPickWithRefresh(loadingPrompt, quickPickPrompt);
    const { codespaces } = await dependencies.getApiProvider().environments.listCodespaces();
    const filteredCodespaces = util_1.Util.Instance.sortedCodespacesList(codespaces.filter(filter));
    if (filteredCodespaces.length === 0) {
        quickPick.cancel();
        await onNoAvailableEnvironments();
        return undefined;
    }
    const pickItems = filteredCodespaces.map((env) => buildQuickpick(env));
    quickPick.setItems(pickItems);
    const selection = await quickPick.valuePromise;
    if (!selection || typeof selection === 'string') {
        throw new vscode_command_framework_1.CancellationError();
    }
    return filteredCodespaces.find((env) => env.environment_id === selection.id);
}
exports.promptForEnvironment = promptForEnvironment;
function buildQuickpick(codespace) {
    const detailParts = [];
    if (codespace.display_name) {
        detailParts.push(codespace.display_name);
    }
    if (codespace.git_status.ref) {
        let pendingChangeSuffix = '';
        if (codespace.git_status.has_uncommitted_changes) {
            pendingChangeSuffix = '*';
        }
        detailParts.push(`${codespace.git_status.ref}${pendingChangeSuffix}`);
    }
    const ahead = codespace.git_status.ahead;
    const behind = codespace.git_status.behind;
    if (ahead !== 0 || behind !== 0) {
        detailParts.push(`${behind}$(arrow-down) ${ahead}$(arrow-up)`);
    }
    detailParts.push(codespace.machine.display_name);
    return {
        label: `${labelIcon(codespace)} ${codespace.repository.full_name}`,
        id: codespace.environment_id,
        description: description(codespace),
        detail: detailParts.join(' · '),
    };
}
exports.buildQuickpick = buildQuickpick;
function labelIcon(codespace) {
    if (codespace.state === 'Available') {
        return '$(vm-running)';
    }
    else {
        return '$(vm)';
    }
}
function description(codespace) {
    if (codespace.last_used_at) {
        return (0, injectMessageParameters_1.injectMessageParameters)(localize('text.environmentPrompt.lastUsed', 'Last used {}'), luxon_1.DateTime.fromISO(codespace.last_used_at).toRelative());
    }
    else {
        return '';
    }
}


/***/ }),

/***/ 67080:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SecretManagementPrompt = exports.SecretAction = exports.vscode = void 0;
const nls = __webpack_require__(52730);
const injectMessageParameters_1 = __webpack_require__(30393);
const UserPrompt_1 = __webpack_require__(67260);
const luxon_1 = __webpack_require__(50463);
const localize = nls.loadMessageBundle();
// Defer hard dependency on vscode
const vscode = () => {
    return __webpack_require__(89496);
};
exports.vscode = vscode;
var SecretAction;
(function (SecretAction) {
    SecretAction["Create"] = "Create";
    SecretAction["Update"] = "Update";
    SecretAction["Delete"] = "Delete";
    SecretAction["ManageOnGitHub"] = "ManageOnGitHub";
    SecretAction["RemoveRepo"] = "RemoveRepo";
    SecretAction["AddToRepo"] = "AddToRepo";
})(SecretAction = exports.SecretAction || (exports.SecretAction = {}));
class SecretManagementPrompt extends UserPrompt_1.UserPrompt {
    constructor(dependencies, currentSecrets) {
        super();
        this.dependencies = dependencies;
        this.currentSecrets = currentSecrets;
    }
    async run() {
        const [secretAction, secret] = await this.promptForSecretAction();
        return this.processSecretAction(secretAction, secret);
    }
    async processSecretAction(secretAction, secret) {
        switch (secretAction) {
            case SecretAction.Create:
                return this.create();
            case SecretAction.Update:
                return this.update(secret);
            case SecretAction.Delete:
                return this.delete(secret);
            case SecretAction.ManageOnGitHub:
                return { secretAction: SecretAction.ManageOnGitHub };
            case SecretAction.AddToRepo:
                if (!secret) {
                    return;
                }
                return { secretAction: SecretAction.AddToRepo, secretName: secret.name };
            case SecretAction.RemoveRepo:
                if (!secret) {
                    return;
                }
                return { secretAction: SecretAction.RemoveRepo, secretName: secret.name };
            default:
                return;
        }
    }
    async delete(secret) {
        if (!secret) {
            return;
        }
        return this.deleteWithConfirmation(secret);
    }
    async deleteWithConfirmation(secret) {
        const confirmation = await this.confirmDeletion();
        if (confirmation) {
            return {
                secretAction: SecretAction.Delete,
                secretName: secret.name,
            };
        }
        return;
    }
    async create() {
        var _a;
        const secretName = await this.promptForSecretName();
        if (!secretName) {
            return;
        }
        // Update if already exists
        const existingSecret = (_a = this.currentSecrets) === null || _a === void 0 ? void 0 : _a.find((x) => x.name === secretName);
        if (existingSecret) {
            const confirmation = await this.confirmUpdateOnCreation(existingSecret);
            if (confirmation) {
                const [secretAction, secret] = await this.modifySecretsPrompt(existingSecret);
                return this.processSecretAction(secretAction, secret);
            }
            return;
        }
        const secretValue = await this.promptForSecretValue();
        return { secretAction: SecretAction.Create, secretName, secretValue };
    }
    async update(secret) {
        if (!secret) {
            return;
        }
        const secretValue = await this.promptForSecretValue();
        return {
            secretAction: SecretAction.Update,
            secretName: secret.name,
            secretValue,
        };
    }
    async promptForSecretName() {
        const placeHolder = localize('messages.userSecrets.inputSecretName', 'Enter Secret Name');
        const secretKeyValidCharRegexErrorMessage = localize('errors.userSecrets.secretNameError', 'Secret names can only contain alphanumeric characters ([a-z], [A-Z], [0-9]) or underscores (_). Spaces are not allowed. Must start with a letter ([a-z], [A-Z]) or underscores (_).');
        const secretNameRequiredMessage = localize('errors.userSecrets.secretNameRequiredError', 'Secret name is required and must not start with GITHUB');
        const secretKeyValidCharRegex = /^[A-Za-z_][A-Za-z0-9_]+$/;
        const secretName = await this.dependencies.notificationUtil.showInputBox({
            placeHolder,
            ignoreFocusOut: true,
            validateInput: (value) => {
                if (!value || value.toUpperCase().startsWith('GITHUB')) {
                    return secretNameRequiredMessage;
                }
                if (!value.match(secretKeyValidCharRegex)) {
                    return secretKeyValidCharRegexErrorMessage;
                }
                return; // valid
            },
        });
        return secretName === null || secretName === void 0 ? void 0 : secretName.toUpperCase();
    }
    async promptForSecretValue() {
        const placeHolder = localize('messages.userSecrets.inputSecretValue', 'Enter Secret Value');
        const secretValueErrorMessage = localize('errors.userSecrets.secretValueError', 'Secret value is required');
        const secretValue = await this.dependencies.notificationUtil.showInputBox({
            placeHolder,
            password: true,
            ignoreFocusOut: true,
            validateInput: (value) => {
                if (!value) {
                    return secretValueErrorMessage;
                }
                return; // valid
            },
        });
        return secretValue;
    }
    async promptForSecretAction() {
        var _a;
        const createSecretStr = localize('messages.userSecrets.createSecret', 'Add a new secret');
        const manageOnGitHubStr = localize('messages.userSecrets.manageOnGitHub', 'Manage on GitHub.com');
        const seperator = {
            label: '',
            kind: -1,
            id: '',
        };
        const pickItems = [
            {
                label: `$(plus) ${createSecretStr}`,
                id: createSecretStr,
            },
            seperator,
        ];
        if (this.currentSecrets) {
            const secretsToPick = this.currentSecrets
                .sort((a, b) => (a.name < b.name ? -1 : 1))
                .map((x) => {
                const descriptionParts = [];
                if (x.hasCurrentRepoSelected) {
                    const addedToRepo = localize('messages.userSecrets.addedToRepo', 'Added to current repository');
                    descriptionParts.push(addedToRepo);
                }
                const updatedOnStr = (0, injectMessageParameters_1.injectMessageParameters)(localize('messages.userSecrets.updatedOn', 'Updated {}'), luxon_1.DateTime.fromISO(x.updated_at).toRelative());
                descriptionParts.push(updatedOnStr);
                return {
                    label: `$(lock) ${x.name}`,
                    id: x.name,
                    description: descriptionParts.join(' · '),
                };
            });
            pickItems.push(...secretsToPick);
        }
        pickItems.push(seperator);
        pickItems.push({
            label: `$(github) ${manageOnGitHubStr}`,
            id: manageOnGitHubStr,
        });
        const placeHolder = localize('messages.userSecrets.startPrompt', 'Secrets are environment variables that are encrypted and only exposed to codespaces you create.');
        const pickedItem = await this.dependencies.notificationUtil.showQuickPick(pickItems, {
            placeHolder,
            ignoreFocusOut: true,
        });
        if (!(pickedItem === null || pickedItem === void 0 ? void 0 : pickedItem.id)) {
            return [undefined, undefined];
        }
        if (pickedItem.id === createSecretStr) {
            return [SecretAction.Create, undefined];
        }
        if (pickedItem.id === manageOnGitHubStr) {
            return [SecretAction.ManageOnGitHub, undefined];
        }
        const selectedSecret = (_a = this.currentSecrets) === null || _a === void 0 ? void 0 : _a.find((x) => x.name === pickedItem.id);
        return this.modifySecretsPrompt(selectedSecret);
    }
    async modifySecretsPrompt(secret) {
        if (!secret) {
            return [undefined, undefined];
        }
        const addToCurrentRepoStr = localize('messages.userSecrets.addToCurrentRepo', 'Add this secret to the current repository');
        const removeRepoActionStr = localize('messages.userSecrets.removecurrentrepo', 'Remove this secret from the current repository');
        const updateValueStr = secret.hasCurrentRepoSelected
            ? localize('messages.userSecrets.updateValue', 'Update the secret value')
            : localize('messages.userSecrets.updateValueAndAddToCurrentRepo', 'Update the value and add this secret to the current repository');
        const deleteStr = localize('messages.userSecrets.delete', 'Delete the secret');
        const actionMap = new Map();
        actionMap.set(addToCurrentRepoStr, SecretAction.AddToRepo);
        actionMap.set(removeRepoActionStr, SecretAction.RemoveRepo);
        actionMap.set(updateValueStr, SecretAction.Update);
        actionMap.set(deleteStr, SecretAction.Delete);
        const placeHolder = localize('messages.userSecrets.modifyChoice', 'What would you like to do?');
        const quickPickItems = [];
        if (!secret.hasCurrentRepoSelected) {
            quickPickItems.push(addToCurrentRepoStr);
        }
        else {
            quickPickItems.push(removeRepoActionStr);
        }
        quickPickItems.push(updateValueStr);
        quickPickItems.push(deleteStr);
        const pickedItem = await this.dependencies.notificationUtil.showQuickPick(quickPickItems, {
            placeHolder,
            ignoreFocusOut: true,
        });
        if (!pickedItem) {
            return [undefined, undefined];
        }
        return [actionMap.get(pickedItem), secret];
    }
    async confirmDeletion() {
        const yes = localize('messages.userSecrets.yes', 'Yes');
        const message = localize('messages.userSecrets.deleteWarning', 'Deleting the secret will remove it from all the repositories. Do you want to proceed?');
        const pickedItem = await this.dependencies.notificationUtil.showWarningMessage(message, { modal: true, useCustom: true }, yes);
        return pickedItem === yes;
    }
    async confirmUpdateOnCreation(secret) {
        const update = localize('messages.userSecrets.update', 'Update');
        const message = (0, injectMessageParameters_1.injectMessageParameters)(localize('messages.userSecrets.updateWarning', 'Secret with name {} already exists. Do you want to update it?'), secret.name);
        const pickedItem = await this.dependencies.notificationUtil.showWarningMessage(message, { modal: true, useCustom: true }, update);
        return pickedItem === update;
    }
}
exports.SecretManagementPrompt = SecretManagementPrompt;


/***/ }),

/***/ 15317:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SkuChangePrompt = void 0;
const UserPrompt_1 = __webpack_require__(67260);
const nls = __webpack_require__(52730);
const vscode_command_framework_1 = __webpack_require__(89813);
const EnvironmentCommands_1 = __webpack_require__(76506);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const environmentInfo_1 = __webpack_require__(42802);
const localize = nls.loadMessageBundle();
class SkuChangePrompt extends UserPrompt_1.UserPrompt {
    constructor(deps, codespace) {
        super();
        this.deps = deps;
        this.codespace = codespace;
    }
    async run() {
        let disconnectRequired = false;
        let shutdownRequired = true;
        let storageTransition = false;
        let connectedToCodespace = true;
        let codespace = this.codespace;
        if (!codespace) {
            codespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
        }
        if (!codespace) {
            connectedToCodespace = false;
            shutdownRequired = false;
            codespace = await this.promptForEnvironment();
        }
        else if (codespace && codespace.state === environmentInfo_1.StateInfo.Shutdown) {
            disconnectRequired = true;
            shutdownRequired = false;
        }
        if (!codespace || !codespace.environment_id) {
            throw new vscode_command_framework_1.CancellationError();
        }
        const sku = await this.promptForSku(codespace);
        if (!sku || codespace.machine.name === sku.name) {
            return {
                codespace: undefined,
                sku: undefined,
                disconnectRequired: false,
                shutdownRequired: false,
                storageTransition: false,
            };
        }
        if (codespace.machine.storage_in_bytes !== sku.storage_in_bytes) {
            storageTransition = true;
            if (connectedToCodespace) {
                disconnectRequired = true;
            }
        }
        return {
            codespace,
            sku,
            disconnectRequired,
            shutdownRequired,
            storageTransition,
        };
    }
    async promptForEnvironment() {
        return await (0, EnvironmentCommands_1.getCodespaceFromCommandOptions)({}, {
            selectMsg: localize('info.changeSku.selectEnvironment', 'Select the codespace to update'),
            filter: (commands) => !!commands.changeMachineTypeEnabled,
            dependencies: this.deps,
            fallback: async () => {
                const message = localize('info.changeSku.noEnvironmentsAvailable', 'There are no codespaces available.');
                throw new vscode_command_framework_1.CancellationError(message);
                // Make the compiler happy.
                return;
            },
        });
    }
    getCurrentSku(codespace) {
        return codespace.machine.name;
    }
    async promptForSku(codespace) {
        const placeHolder = localize('messages.changeSku.selectSku', 'Select the new machine type for your codespace');
        const currentSku = this.getCurrentSku(codespace);
        let skus = await this.deps.getApiProvider().environments.getAvailableMachines(codespace);
        if (!skus) {
            return;
        }
        const skuNames = skus.map((sku) => ({
            label: sku.name === currentSku
                ? `${sku.displayName} (Current machine type)`
                : sku.displayName,
            picked: sku.name === currentSku,
            sku,
        }));
        const pickedItem = await this.deps.notificationUtil.showQuickPick(skuNames, {
            placeHolder,
            ignoreFocusOut: true,
        });
        if (!pickedItem) {
            return;
        }
        return pickedItem.sku;
    }
}
exports.SkuChangePrompt = SkuChangePrompt;


/***/ }),

/***/ 26016:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getChaosMonkey = exports.initChaosMonkey = exports.ChaosMonkey = exports.ChaosMonkeyVariables = void 0;
const vscs_utils_1 = __webpack_require__(19745);
var ChaosMonkeyVariables;
(function (ChaosMonkeyVariables) {
    ChaosMonkeyVariables["SharedServersRpcRequestTimeout"] = "get shared servers RPC request timeout";
})(ChaosMonkeyVariables = exports.ChaosMonkeyVariables || (exports.ChaosMonkeyVariables = {}));
const sharedServersPortInvocationMap = new Map();
const TARGET_PORTS = [33333, 44444];
const getSharedServersRpcRequestTimeoutNumber = async (isInternalUser, port) => {
    var _a;
    if (!isInternalUser) {
        return;
    }
    if (!TARGET_PORTS.includes(port)) {
        return;
    }
    const existingRecord = (_a = sharedServersPortInvocationMap.get(port)) !== null && _a !== void 0 ? _a : 0;
    sharedServersPortInvocationMap.set(port, existingRecord + 1);
    switch (existingRecord) {
        case 1: {
            return 0;
        }
        default: {
            return;
        }
    }
};
/**
 *
 * This class aimed to be a singleton that can produce some set of values for a previously defined variable
 * in the `ChaosMonkeyVariables`. The primary motivation for this is to be able to wreak havoc in some
 * of the users' flows to simulate an error or unfavorable condition.
 *
 * For instance, consider a flow that allows forwarding a local port. This port sharing flow uses an established
 * connection and first calls the` getSharedServers` RPC method. Now imagine that the `getSharedServers` call
 * hangs (actual case atm) or the connection is unstable; how do we know the experience for the end-users
 * in those cases? Or, if we want to repro some failing behavior, how do we do that? The `ChaosMonkey` allows
 * to define some variable(potentially random) that can be used in some of your app logic (in this case, in
 * the port-forwarding flow), which will make the target flow fail or become unstable, hence simulating
 * real-world unfavorable scenarios that users might encounter.
 *
 * Example:
 * ```
 * const chaosMonkey = getChaosMonkey(); // (0)
 * const portsTimeout = await chaosMonkey.getVariable(ChaosMonkeyVariables.SharedServersRpcRequestTimeout, port); // (1)
 * const sharedServer = await this.connection.startForwardingPort(port, clearHost, portsTimeout); // (2)
 * ```
 *
 * We get the `ChaosMonkey` singleton in the example above at (0). Then, in (1), we get the `portsTimeout` variable and
 * use it as a timeout in the `connection.startForwardingPort` call (2), which we know may hang. The `getVariable` call(1)
 * returns `0` at the second call if a port is `equal` to `33333` and returns `no timeout` otherwise.
 * Hence we can easily simulate the case when the user tries to change the `33333` port after a previously successful
 * operation on the port (second call); that change causes the timeout error and eventually reconnection logic to kick in.
 * The user would expect the port change to be applied after reconnection completes. Do we meet the expectation
 * at the moment? The `ChaosMonkey` makes it easy to check if we do!
 *
 * **Note:** To make it more flexible, this logic should be and will be exposed as vscode command for internal users only,
 * instead of the per-variable custom logic as in the `getSharedServersRpcRequestTimeoutNumber` above. That logic will be
 * added in subsequent commits.
 *
 */
class ChaosMonkey extends vscs_utils_1.DisposableClass {
    constructor(trace, isInternalUser) {
        super(trace.createChild('chaos-monkey'));
        this.isInternalUser = isInternalUser;
    }
    async getVariable(name, ...args) {
        const result = await this.getVariableImpl(name, ...args);
        this.trace.info(`"${name}" => "${result}"`);
        return result;
    }
    async getVariableImpl(name, ...args) {
        switch (name) {
            case ChaosMonkeyVariables.SharedServersRpcRequestTimeout: {
                return await getSharedServersRpcRequestTimeoutNumber(this.isInternalUser, args[0]);
            }
            default: {
                (0, vscs_utils_1.assertNever)(name, `Unknown ChaosMonkey variable "${name}".`);
            }
        }
    }
}
exports.ChaosMonkey = ChaosMonkey;
let chaosMonkey = null;
const initChaosMonkey = async (trace, isInternalUser) => {
    (0, vscs_utils_1.assert)(chaosMonkey === null, 'ChaosMonkey already initialized.');
    chaosMonkey = new ChaosMonkey(trace, isInternalUser);
    return chaosMonkey;
};
exports.initChaosMonkey = initChaosMonkey;
const getChaosMonkey = () => {
    (0, vscs_utils_1.assertDefined)(chaosMonkey, 'ChaosMonkey is not yet initialized, please call `await initChaosMonkey(trace);` first.');
    return chaosMonkey;
};
exports.getChaosMonkey = getChaosMonkey;


/***/ }),

/***/ 37947:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.areOrgSamlTokensMissing = void 0;
/**
 * Check if any Org Saml tokens are missing in user's login session.
 */
const areOrgSamlTokensMissing = (response) => {
    var _a, _b;
    const githubSsoHeader = (_a = response.headers) === null || _a === void 0 ? void 0 : _a['x-github-sso'];
    return (_b = githubSsoHeader === null || githubSsoHeader === void 0 ? void 0 : githubSsoHeader.includes('partial-results')) !== null && _b !== void 0 ? _b : false;
};
exports.areOrgSamlTokensMissing = areOrgSamlTokensMissing;


/***/ }),

/***/ 80171:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Instance = exports.CommandUtil = void 0;
const vscode = __webpack_require__(89496);
class CommandUtil {
    static get Instance() {
        if (!CommandUtil.singleton) {
            CommandUtil.singleton = new CommandUtil();
        }
        return CommandUtil.singleton;
    }
    getCommands() {
        return vscode.commands.getCommands();
    }
    executeCommand(command, ...rest) {
        return vscode.commands.executeCommand(command, ...rest);
    }
}
exports.CommandUtil = CommandUtil;
const Instance = CommandUtil.Instance;
exports.Instance = Instance;


/***/ }),

/***/ 99311:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigurationManager = void 0;
const vscode = __webpack_require__(89496);
const constants_1 = __webpack_require__(74780);
const IConfigurationManager_1 = __webpack_require__(51850);
class ConfigurationManager {
    constructor() {
        this.configChangeEmitters = new Map();
        vscode.workspace.onDidChangeConfiguration((e) => {
            for (let [fullKey, emitter] of this.configChangeEmitters.entries()) {
                if (e.affectsConfiguration(fullKey)) {
                    // take a key of form "section.setting.value" and split into "section" and "setting.value"
                    const splitLocation = fullKey.indexOf('.');
                    const section = fullKey.substr(0, splitLocation);
                    const key = fullKey.substr(splitLocation + 1);
                    emitter.fire(this.getConfigValue(key, section));
                }
            }
        });
    }
    onDidChangeConfigValue(key, configName = IConfigurationManager_1.ConfigurationKey.configName) {
        const fullKey = `${configName}.${key}`;
        let configChangeEmitter = this.configChangeEmitters.get(fullKey);
        if (!configChangeEmitter) {
            configChangeEmitter = new vscode.EventEmitter();
            this.configChangeEmitters.set(fullKey, configChangeEmitter);
        }
        return configChangeEmitter.event;
    }
    getDefaultExtensions() {
        const extensionConfig = vscode.workspace.getConfiguration(IConfigurationManager_1.ConfigurationKey.configName);
        const settings = extensionConfig.inspect(IConfigurationManager_1.ConfigurationKey.defaultExtensions);
        if (settings && Array.isArray(settings.globalValue)) {
            return settings.globalValue;
        }
        return constants_1.DEFAULT_EXTENSIONS;
    }
    getConfigValue(key, configName = IConfigurationManager_1.ConfigurationKey.configName) {
        const extensionConfig = vscode.workspace.getConfiguration(configName);
        return extensionConfig.get(key);
    }
    async setConfigValue(key, value, configName = IConfigurationManager_1.ConfigurationKey.configName) {
        const extensionConfig = vscode.workspace.getConfiguration(configName);
        await extensionConfig.update(key, value, vscode.ConfigurationTarget.Global);
    }
    get isRunningInWeb() {
        var _a, _b;
        const webUIKind = (_b = (_a = vscode.UIKind) === null || _a === void 0 ? void 0 : _a.Web) !== null && _b !== void 0 ? _b : -1;
        return !!(vscode.env.uiKind === webUIKind);
    }
}
exports.ConfigurationManager = ConfigurationManager;


/***/ }),

/***/ 25298:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatIdleTimeoutForDisplay = void 0;
const nls = __webpack_require__(52730);
const injectMessageParameters_1 = __webpack_require__(30393);
const localize = nls.loadMessageBundle();
function formatIdleTimeoutForDisplay(timeoutInMinutes) {
    const hours = Math.floor(timeoutInMinutes / 60);
    const mins = timeoutInMinutes % 60;
    if (hours > 0 && mins > 0) {
        if (hours > 1) {
            return (0, injectMessageParameters_1.injectMessageParameters)(localize('message.idleTimeoutHoursAndMinutesFormat', '{} hours and {} minutes'), hours, mins);
        }
        return (0, injectMessageParameters_1.injectMessageParameters)(localize('message.idleTimeoutOneHourAndMinutesFormat', '1 hour and {} minutes'), mins);
    }
    else if (hours > 1) {
        return (0, injectMessageParameters_1.injectMessageParameters)(localize('message.idleTimeoutHoursFormat', '{} hours'), hours);
    }
    else if (hours === 1) {
        return localize('message.idleTimeoutOneHourFormat', '1 hour');
    }
    else {
        return (0, injectMessageParameters_1.injectMessageParameters)(localize('message.idleTimeoutMinutesFormat', '{} minutes'), mins);
    }
}
exports.formatIdleTimeoutForDisplay = formatIdleTimeoutForDisplay;


/***/ }),

/***/ 77337:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateTelemetryFlag = void 0;
const IConfigurationManager_1 = __webpack_require__(51850);
async function updateTelemetryFlag(githubApiProvider, newTelemetryLevel) {
    if (newTelemetryLevel) {
        const telemetryLevel = IConfigurationManager_1.TTelemetryLevel[newTelemetryLevel];
        if (telemetryLevel !== undefined) {
            await githubApiProvider.setTelemetryLevel(telemetryLevel);
            return true;
        }
    }
    return false;
}
exports.updateTelemetryFlag = updateTelemetryFlag;


/***/ }),

/***/ 8053:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtensionSupportManager = void 0;
const semver_1 = __webpack_require__(38873);
const IExtensionSupportManager_1 = __webpack_require__(43443);
class ExtensionSupportManager {
    constructor(getApiProvider, extensionsUtil) {
        this.getApiProvider = getApiProvider;
        this.extensionsUtil = extensionsUtil;
    }
    async readExtensionSupportStatus() {
        const currentExtensionVersion = new semver_1.SemVer(this.extensionsUtil.getCurrentExtensionVersion());
        return this.getApiProvider()
            .environments.getSupportedClientVersion()
            .then((supportedClientVersions) => {
            if (supportedClientVersions !== undefined) {
                const warningLevel = new semver_1.SemVer(supportedClientVersions.min_warn);
                const breakingLevel = new semver_1.SemVer(supportedClientVersions.min_break);
                if (currentExtensionVersion.compare(breakingLevel) < 0) {
                    // breaking < current (we support current >= breaking)
                    return IExtensionSupportManager_1.ExtensionSupportStatus.Unsupported;
                }
                else if (currentExtensionVersion.compare(warningLevel) < 0) {
                    // warning < current (we support current >= warning)
                    return IExtensionSupportManager_1.ExtensionSupportStatus.Deprecated;
                }
            }
            return IExtensionSupportManager_1.ExtensionSupportStatus.Supported;
        })
            .catch((error) => {
            // this will occur when the user does not sign in
            return IExtensionSupportManager_1.ExtensionSupportStatus.Supported;
        });
    }
    getExtensionSupportStatus() {
        if (!this.extensionSupportStatus) {
            this.extensionSupportStatus = this.readExtensionSupportStatus();
        }
        return this.extensionSupportStatus;
    }
}
exports.ExtensionSupportManager = ExtensionSupportManager;


/***/ }),

/***/ 98787:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(48764)["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtensionsUtil = void 0;
const vscode = __webpack_require__(89496);
const configuration_1 = __webpack_require__(25828);
class ExtensionsUtil {
    constructor(dependencies) {
        this.dependencies = dependencies;
    }
    getCurrentExtensionVersion() {
        var _a;
        return (_a = this.getExtensionContext()) === null || _a === void 0 ? void 0 : _a.extension.packageJSON.version;
    }
    getUserAgent() {
        var _a;
        const extensionVersion = (_a = this.getCurrentExtensionVersion()) !== null && _a !== void 0 ? _a : 'Unknown';
        return `Codespaces/${extensionVersion} VSCode/${vscode.version}`;
    }
    getWorkspaceFile() {
        return vscode.workspace.workspaceFile;
    }
    getWorkspaceFolders() {
        return vscode.workspace.workspaceFolders;
    }
    createUriFromFile(path) {
        return vscode.Uri.file(path);
    }
    /**
     * Launches the environment by running 'vscode.openFolder' command with connection uri.
     */
    async openRemoteFolder(codespaceName, sessionPath, newWindow) {
        const folderUri = this.dependencies.util.getEnvironmentConnectionUri(codespaceName, sessionPath);
        const newUri = vscode.Uri.parse(folderUri);
        await vscode.commands.executeCommand('vscode.openFolder', newUri, newWindow);
    }
    getIsInternalUser() {
        return (0, configuration_1.getIsInternalUser)();
    }
    async openLinkInBrowser(url) {
        await vscode.env.openExternal(vscode.Uri.parse(url));
    }
    async writeFileAsync(pathUri, data) {
        return vscode.workspace.fs.writeFile(pathUri, Buffer.from(data, 'utf8'));
    }
    async readFileAsync(pathUri) {
        return vscode.workspace.fs.readFile(pathUri);
    }
    setExtensionContext(context) {
        this.extensionContext = context;
    }
    getExtensionContext() {
        return this.extensionContext;
    }
    getRelativeExtensionUri(relativePath) {
        if (!this.extensionContext) {
            throw new Error('ExtensionContext not set');
        }
        return vscode.Uri.joinPath(this.extensionContext.extensionUri, relativePath);
    }
}
exports.ExtensionsUtil = ExtensionsUtil;


/***/ }),

/***/ 30393:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.injectMessageParameters = void 0;
const injectMessageParameters = (message, ...args) => {
    for (let i = 0; i < args.length; i++) {
        message = message.replace('{}', args[i]);
    }
    return message;
};
exports.injectMessageParameters = injectMessageParameters;


/***/ }),

/***/ 24645:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLocalizedServiceMessage = void 0;
const nls = __webpack_require__(52730);
const environmentInfo_1 = __webpack_require__(42802);
const localize = nls.loadMessageBundle();
function getLocalizedServiceMessage(messageCode) {
    return localizeServiceMessage(messageCode);
}
exports.getLocalizedServiceMessage = getLocalizedServiceMessage;
function localizeServiceMessage(errorCode) {
    switch (errorCode) {
        case environmentInfo_1.EnvironmentMessageCodes.exceededQuota:
            return localize('error.environment.exceededQuota', 'You have exceeded the codespace quota.');
        case environmentInfo_1.EnvironmentMessageCodes.environmentNameAlreadyExists:
            return localize('error.environment.environmentNameAlreadyExists', 'Codespace {} already exists.');
        case environmentInfo_1.EnvironmentMessageCodes.environmentDoesNotExist:
            return localize('error.environment.environmentDoesNotExist', 'Codespace {} does not exist.');
        case environmentInfo_1.EnvironmentMessageCodes.environmentNotAvailable:
            return localize('error.environment.environmentNotAvailable', 'Codespace {} is not in available state.');
        case environmentInfo_1.EnvironmentMessageCodes.environmentNotShutdown:
            return localize('error.environment.environmentNotShutdown', 'Codespace {} is not stopped.');
        case environmentInfo_1.EnvironmentMessageCodes.unableToAllocateResources:
            return localize('error.environment.unableToAllocateResources', 'Please try again in a few minutes.');
        case environmentInfo_1.EnvironmentMessageCodes.unableToAllocateResourcesWhileStarting:
            return localize('error.environment.unableToAllocateResourcesWhileStarting', 'Please try again in a few minutes.');
        case environmentInfo_1.EnvironmentMessageCodes.requestedAutoShutdownDelayMinutesIsInvalid:
            return localize('error.environment.requestedAutoShutdownDelayMinutesIsInvalid', 'Requested auto-stop delay is invalid.');
        case environmentInfo_1.EnvironmentMessageCodes.unableToUpdateSku:
            return localize('error.environment.unableToUpdateSku', "Codespace's current instance type does not support any changes.");
        case environmentInfo_1.EnvironmentMessageCodes.requestedSkuIsInvalid:
            return localize('error.environment.requestedSkuIsInvalid', "Codespace's current instance type does not support the requested instance type.");
        case environmentInfo_1.EnvironmentMessageCodes.heartbeatUnhealthy:
            return localize('error.environment.heartbeatUnhealthy', 'The codespace was reported as unhealthy, stop and restart the codespace.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCreationFailed:
            return localize('error.environment.customContainersCreationFailed', 'The codespace creation based on devcontainer.json failed, please review the console for more details.');
        // CLI MESSAGES
        case environmentInfo_1.EnvironmentMessageCodes.shutdownFailed:
            return localize('error.environment.shutdownFailed', 'Error Code: 1001');
        case environmentInfo_1.EnvironmentMessageCodes.cMBMutexFailure:
            return localize('error.environment.cMBMutexFailure', 'Error Code: 1002');
        case environmentInfo_1.EnvironmentMessageCodes.cMBGeneralError:
            return localize('error.environment.cMBGeneralError', 'Error Code: 1003');
        case environmentInfo_1.EnvironmentMessageCodes.startEnvironmentHandlerFailedToStartContainer:
            return localize('error.environment.startEnvironmentHandlerFailedToStartContainer', 'Failed to start container. ');
        case environmentInfo_1.EnvironmentMessageCodes.startEnvironmentHandlerRequiredParameterMissing:
            return localize('error.environment.startEnvironmentHandlerRequiredParameterMissing', 'Error Code: 1005');
        case environmentInfo_1.EnvironmentMessageCodes.startEnvironmentHandlerKitchensinkMissing:
            return localize('error.environment.startEnvironmentHandlerKitchensinkMissing', 'Error Code: 1006');
        case environmentInfo_1.EnvironmentMessageCodes.startEnvironmentHandlerLiveshareLoginFailed:
            return localize('error.environment.startEnvironmentHandlerLiveshareLoginFailed', 'Error Code: 1007');
        case environmentInfo_1.EnvironmentMessageCodes.startEnvironmentHandlerMoreThanOneContainerFoundOnRestart:
            return localize('error.environment.startEnvironmentHandlerMoreThanOneContainerFoundOnRestart', 'Error Code: 1008');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersGeneralError:
            return localize('error.environment.customContainersGeneralError', 'Unknown error in codespace creation.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersKitchensinkCreationFailed:
            return localize('error.environment.customContainersKitchensinkCreationFailed', 'Failed to create container with standard image.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersKitchensinkStartFailed:
            return localize('error.environment.customContainersKitchensinkStartFailed', 'Failed to start standard container.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCloneFailed:
            return localize('error.environment.customContainersCloneFailed', 'The repository could not be cloned.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersPrivateClonetimeout:
            return localize('error.environment.customContainersPrivateClonetimeout', 'Timeout waiting while attempting to clone a private repository. ');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCouldNotPullImage:
            return localize('error.environment.customContainersCouldNotPullImage', 'Could not pull the image referenced in the DockerFile');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCouldNotBuildUserImage:
            return localize('error.environment.customContainersCouldNotBuildUserImage', 'The custom container could not be built.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCouldNotCreateUserContainer:
            return localize('error.environment.customContainersCouldNotCreateUserContainer', 'The custom container failed to create.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCouldNotRunUserContainer:
            return localize('error.environment.customContainersCouldNotRunUserContainer', 'The custom container failed to run.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCLICopyFailed:
            return localize('error.environment.customContainersCLICopyFailed', 'Failed to copy the GitHub Codespaces Agent to the custom container.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersDependenciesFailed:
            return localize('error.environment.customContainersDependenciesFailed', 'The GitHub Codespaces Agent dependencies failed to install in the custom container.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCLIStartFailed:
            return localize('error.environment.customContainersCLIStartFailed', 'The GitHub Codespaces Agent failed to start in the custom container.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersIncorrectUserID:
            return localize('error.environment.customContainersIncorrectUserID', 'The dockerfile or image references a user id instead of a username. Please configure the remoteUser or containerUser property in devcontainer.json');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersComposeGeneralError:
            return localize('error.environment.customContainersComposeGeneralError', 'Unknown error running docker compose.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersComposeValidationError:
            return localize('error.environment.customContainersComposeValidationError', 'Docker Compose support requires a docker-compose file and the service property to be set in devcontainer.json');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersComposeConfigError:
            return localize('error.environment.customContainersComposeConfigError', 'Error inspecting docker-compose file for services. Please check your docker-compose file for issues.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersWrongServiceError:
            return localize('error.environment.customContainersWrongServiceError', 'The specified service was not found in the docker-compose file.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersComposeUpError:
            return localize('error.environment.customContainersComposeUpError', 'Running docker-compose up failed. Please inspect the logs for more information.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainerInvalidDevContainer:
            return localize('error.environment.customContainerInvalidDevContainer', 'There was an issue reading devContainer.json, please verify the file.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersComposeUnsupportedVersion:
            return localize('error.environment.customContainersComposeUnsupportedVersion', 'Unsupported version inside docker-compose files. Minimum version is 3.');
        default:
            return localize('error.environment.unknown', 'Unknown error, please try again.');
    }
}


/***/ }),

/***/ 22465:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseQueryString = void 0;
function parseQueryString(queryString) {
    const query = {};
    if (!queryString || queryString.length === 0) {
        return query;
    }
    const pairs = queryString.split('&');
    for (let i = 0; i < pairs.length; i++) {
        const pair = pairs[i];
        const splitIdx = pair.indexOf('=');
        const name = decodeURIComponent(pair.substr(0, splitIdx));
        const value = decodeURIComponent(pair.substr(splitIdx + 1, pair.length));
        query[name] = value;
    }
    return query;
}
exports.parseQueryString = parseQueryString;


/***/ }),

/***/ 96274:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserProgressReporter = exports.ProgressType = exports.ProgressOptions = void 0;
const environmentInfo_1 = __webpack_require__(42802);
const nls = __webpack_require__(52730);
const localize = nls.loadMessageBundle();
var ProgressOptions;
(function (ProgressOptions) {
    ProgressOptions[ProgressOptions["Connecting"] = 1] = "Connecting";
    ProgressOptions[ProgressOptions["Starting"] = 2] = "Starting";
    ProgressOptions[ProgressOptions["ConnectingServer"] = 3] = "ConnectingServer";
    ProgressOptions[ProgressOptions["Done"] = 4] = "Done";
    ProgressOptions[ProgressOptions["ResumingCodespace"] = 5] = "ResumingCodespace";
    ProgressOptions[ProgressOptions["BuildCodespace"] = 6] = "BuildCodespace";
    ProgressOptions[ProgressOptions["ShuttingDown"] = 7] = "ShuttingDown";
    ProgressOptions[ProgressOptions["RebuildCodespace"] = 8] = "RebuildCodespace";
})(ProgressOptions = exports.ProgressOptions || (exports.ProgressOptions = {}));
var ProgressType;
(function (ProgressType) {
    ProgressType[ProgressType["Default"] = 0] = "Default";
    ProgressType[ProgressType["Resume"] = 1] = "Resume";
    ProgressType[ProgressType["Creation"] = 2] = "Creation";
    ProgressType[ProgressType["ShuttingDown"] = 3] = "ShuttingDown";
})(ProgressType = exports.ProgressType || (exports.ProgressType = {}));
const progressDefaultMark = [
    ProgressOptions.Connecting,
    ProgressOptions.Starting,
    ProgressOptions.ConnectingServer,
    ProgressOptions.Done,
];
const resumeProgressMark = [
    ProgressOptions.ResumingCodespace,
    ProgressOptions.RebuildCodespace,
].concat(progressDefaultMark);
const creationProgressMark = [ProgressOptions.BuildCodespace].concat(progressDefaultMark);
const shuttingDownProgressMark = [
    ProgressOptions.ShuttingDown,
    ProgressOptions.ResumingCodespace,
].concat(progressDefaultMark);
const progressMap = new Map([
    [
        ProgressOptions.Connecting,
        {
            message: localize('progress.joiningWorkspace', 'Connecting to codespace...'),
            weight: 5,
        },
    ],
    [
        ProgressOptions.Starting,
        {
            message: localize('progress.startingServer', 'Starting remote server...'),
            weight: 4,
        },
    ],
    [
        ProgressOptions.ConnectingServer,
        {
            message: localize('progress.connectingToServer', 'Connecting to remote server...'),
            weight: 0.6,
        },
    ],
    [
        ProgressOptions.ResumingCodespace,
        {
            message: localize('progress.resumingCodespace', 'Starting codespace...'),
            weight: 10,
        },
    ],
    [
        ProgressOptions.BuildCodespace,
        {
            message: localize('progress.buildingCodespace', '[Building codespace...](command:github.codespaces.viewCreationLog)'),
            weight: 12,
        },
    ],
    [
        ProgressOptions.RebuildCodespace,
        {
            message: localize('progress.rebuildingCodespace', '[Rebuilding codespace...](command:github.codespaces.viewCreationLog)'),
            weight: 5,
        },
    ],
    [
        ProgressOptions.ShuttingDown,
        {
            message: localize('progress.shuttingDown', 'Shutting down codespace...'),
            weight: 5,
        },
    ],
]);
class UserProgressReporter {
    constructor(progress, codespace, logger) {
        this.progress = progress;
        this.logger = logger;
        this.currentMarkIndex = -1;
        this.currentFakeProgress = 0;
        this.fakeTick = 0;
        if (codespace.state === environmentInfo_1.StateInfo.Provisioning ||
            codespace.state === environmentInfo_1.StateInfo.Rebuilding ||
            (codespace.state === environmentInfo_1.StateInfo.Queued && !codespace.connection.sessionPath)) {
            this.totalWeight = this.calculateWeight(creationProgressMark);
            this.progressMark = creationProgressMark;
            this.type = ProgressType.Creation;
        }
        else if (codespace.pending_operation ||
            codespace.state === environmentInfo_1.StateInfo.Starting ||
            codespace.state === environmentInfo_1.StateInfo.Queued ||
            codespace.state === environmentInfo_1.StateInfo.Shutdown) {
            this.totalWeight = this.calculateWeight(resumeProgressMark);
            this.progressMark = resumeProgressMark;
            this.type = ProgressType.Resume;
        }
        else if (codespace.state === environmentInfo_1.StateInfo.ShuttingDown) {
            this.totalWeight = this.calculateWeight(shuttingDownProgressMark);
            this.progressMark = shuttingDownProgressMark;
            this.type = ProgressType.ShuttingDown;
        }
        else {
            this.totalWeight = this.calculateWeight(progressDefaultMark);
            this.progressMark = progressDefaultMark;
            this.type = ProgressType.Default;
        }
        this.startFakeProgress();
    }
    update(newMark) {
        var _a, _b, _c, _d;
        const progressItem = progressMap.get(newMark);
        const newIndex = this.progressMark.indexOf(newMark);
        if (newIndex <= this.currentMarkIndex) {
            throw new Error(`Progress can't move backwards`);
        }
        if (newMark === ProgressOptions.Done) {
            this.stopFakeProgress();
        }
        this.currentMarkIndex = newIndex;
        const prevMark = this.progressMark[newIndex - 1];
        if (!prevMark) {
            return;
        }
        const prevWeight = (_b = (_a = progressMap.get(prevMark)) === null || _a === void 0 ? void 0 : _a.weight) !== null && _b !== void 0 ? _b : 0;
        const increment = Math.max((prevWeight / this.totalWeight) * 100 - this.currentFakeProgress, 0);
        this.progress.report({ message: (_c = progressItem === null || progressItem === void 0 ? void 0 : progressItem.message) !== null && _c !== void 0 ? _c : 'Done', increment });
        this.logger.info(`Progress: ` + ((_d = progressItem === null || progressItem === void 0 ? void 0 : progressItem.message) !== null && _d !== void 0 ? _d : 'Done'));
        this.fakeTick = 0;
        this.currentFakeProgress = 0;
    }
    updateMessage(step, message) {
        if (!step) {
            return;
        }
        const progressItem = progressMap.get(step);
        if (progressItem) {
            progressItem.message = message;
        }
    }
    startFakeProgress() {
        this.fakeProgressTimer = setInterval(() => {
            this.addFakeProgress();
        }, 100);
    }
    stopFakeProgress() {
        clearInterval(this.fakeProgressTimer);
    }
    addFakeProgress() {
        const curMark = this.progressMark[this.currentMarkIndex];
        const curMarkDetails = progressMap.get(curMark);
        if (curMarkDetails === null || curMarkDetails === void 0 ? void 0 : curMarkDetails.weight) {
            // Higher = more linear/slower increase
            const N = 13;
            // Goes from 0 to 1.
            const newProportion = (Math.atan(this.fakeTick / N) * 2) / Math.PI;
            // The total weight to increase to, goes up to 90% of the current weight.
            const newCurrentFakeProgress = ((newProportion * curMarkDetails.weight * 0.9) / this.totalWeight) * 100;
            // The increment to increase by.
            const newFakeIncrement = newCurrentFakeProgress - this.currentFakeProgress;
            const message = curMarkDetails.message;
            this.progress.report({ message, increment: newFakeIncrement });
            this.currentFakeProgress = newCurrentFakeProgress;
            this.fakeTick++;
        }
    }
    get progressType() {
        return this.type;
    }
    calculateWeight(progressMark) {
        return Array.from(progressMap.entries())
            .map((entry) => {
            if (progressMark.includes(entry[0])) {
                return entry[1].weight;
            }
            return 0;
        })
            .reduce((sum, w) => sum + w, 0);
    }
}
exports.UserProgressReporter = UserProgressReporter;


/***/ }),

/***/ 2076:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.throwResponseError = void 0;
const nls = __webpack_require__(52730);
const environmentInfo_1 = __webpack_require__(42802);
const vscode_command_framework_1 = __webpack_require__(89813);
const injectMessageParameters_1 = __webpack_require__(30393);
const localizeServiceMessage_1 = __webpack_require__(24645);
const localize = nls.loadMessageBundle();
/**
 * Throws a standard error message for the given http response object.
 * This function always throws.
 * Usage: `return throwResponseError(error);`
 *
 * @param options.nlsParameters Parameters to the NLS string, if the response body has a recognized number code
 * @param options.userMessage The user message to display if an NLS string is not found (no http response, no code, or unknown code)
 * @param options.showHttpStatus Whether to append the http status code to the user-facing message, ex: "(404)" or "(no response)" if response not received.
 */
function throwResponseError(error, options = {}) {
    const { response, request, message } = error;
    const { nlsParameters = [], showHttpStatus } = options;
    let userMessage = options.userMessage || (0, localizeServiceMessage_1.getLocalizedServiceMessage)(environmentInfo_1.EnvironmentMessageCodes.unknown);
    if (response) {
        const statusSuffix = showHttpStatus ? ` (${response.status})` : '';
        const responseUrl = response.request && response.request.res && response.request.res.responseUrl;
        const host = responseUrl ? new URL(responseUrl).host : 'unknown';
        if (response.data) {
            userMessage = getUserErrorMessage(response.data, nlsParameters) || userMessage;
        }
        throw new vscode_command_framework_1.CommandError({
            code: vscode_command_framework_1.CommandErrorCode.REMOTE_DEPENDENCY,
            message: `Axios response: message[${message}] host[${host}] status[${response.status}] data[${response.data}]`,
            userMessage: `${userMessage}${statusSuffix}`,
        });
    }
    else {
        throw new vscode_command_framework_1.CommandError({
            code: vscode_command_framework_1.CommandErrorCode.REMOTE_DEPENDENCY,
            message: `${request ? 'Axios received no response' : 'Axios failed to create request'}: message[${message}]`,
            userMessage,
        });
    }
}
exports.throwResponseError = throwResponseError;
function getUserErrorMessage(errorData, nlsParameters) {
    if (!errorData) {
        return undefined;
    }
    if (typeof errorData === 'number') {
        return getUserErrorMessageForSingleCode(errorData, nlsParameters);
    }
    if (Array.isArray(errorData)) {
        if (errorData.length === 0) {
            return undefined;
        }
        if (typeof errorData[0] !== 'number') {
            return undefined;
        }
        if (errorData.length === 1) {
            return getUserErrorMessageForSingleCode(errorData[0], nlsParameters);
        }
        else {
            return getUserErrorMessageForMultipleCodes(errorData, nlsParameters);
        }
    }
    return undefined;
}
function getUserErrorMessageForSingleCode(errorCode, nlsParameters) {
    try {
        let errorMessage = (0, localizeServiceMessage_1.getLocalizedServiceMessage)(errorCode);
        return (0, injectMessageParameters_1.injectMessageParameters)(errorMessage, ...nlsParameters);
    }
    catch (e) {
        vscode_command_framework_1.traceSource.error(e.message, e);
        return undefined;
    }
}
function getUserErrorMessageForMultipleCodes(errorCodes, nlsParameters) {
    try {
        const errMessage = errorCodes
            .map((c) => c)
            .map((k) => {
            let errorMsg = (0, localizeServiceMessage_1.getLocalizedServiceMessage)(k);
            errorMsg = (0, injectMessageParameters_1.injectMessageParameters)(errorMsg, ...nlsParameters);
            return errorMsg;
        })
            .join(' ');
        let userMessage = localize('error.environment.multipleErrors', 'Multiple errors reported. ({})');
        userMessage = (0, injectMessageParameters_1.injectMessageParameters)(userMessage, errMessage);
        return userMessage;
    }
    catch (e) {
        vscode_command_framework_1.traceSource.error(e.message, e);
        return undefined;
    }
}


/***/ }),

/***/ 66194:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Instance = exports.Util = void 0;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const constants_1 = __webpack_require__(74780);
const commandContext_1 = __webpack_require__(15071);
const IGitHubApi_1 = __webpack_require__(85463);
const IEnvironmentsApi_1 = __webpack_require__(68568);
class Util {
    static get Instance() {
        if (!Util.singleton) {
            Util.singleton = new Util();
        }
        return Util.singleton;
    }
    /**
     * Helper function to get connection uri for vscode-remote
     */
    getEnvironmentConnectionUri(codespaceName, sessionPath) {
        const forwardSlashPath = sessionPath.replace(/\\/g, '/').replace(/^\//, '');
        return `vscode-remote://codespaces+${codespaceName}/${forwardSlashPath}`;
    }
    /**
     * Causes a delay.
     * @param duration
     */
    delay(duration) {
        return new Promise((resolve) => {
            setTimeout(resolve, duration);
        });
    }
    /**
     * Get LiveShare endpoint URL.
     */
    getLiveShareBaseEndpointUrl(codespace) {
        var _a;
        const url = (_a = codespace === null || codespace === void 0 ? void 0 : codespace.connection.serviceUri) !== null && _a !== void 0 ? _a : constants_1.LIVESHARE_PROD_URL;
        return new URL(url);
    }
    formatDisplayStringForTarget(message, target) {
        if (!target || target === IGitHubApi_1.VscsTarget.Production) {
            return message;
        }
        if (target === IGitHubApi_1.VscsTarget.Ppe) {
            return message + ' ✨';
        }
        return message + ' 🚧';
    }
    getRemoteURI(filePath) {
        const isRunningInWeb = (0, commandContext_1.getCommandContext)("codespaces:running-in-web" /* IsRunningInWeb */);
        return isRunningInWeb ? filePath : `vscode-remote://${filePath}`;
    }
    /*
     ** This function would sort the codespaces based on the last time they were used.
     ** last used codespace should be on top.
     */
    sortedCodespacesList(codespaces) {
        return codespaces.sort((first, second) => {
            if (first.last_used_at === undefined || second.last_used_at === undefined) {
                return 1;
            }
            if (new Date(first.last_used_at) < new Date(second.last_used_at)) {
                return 1;
            }
            else if (first.last_used_at === second.last_used_at) {
                return 0;
            }
            else {
                return -1;
            }
        });
    }
    getMachineTypeDescription(prebuildAvailability) {
        switch (prebuildAvailability) {
            case IEnvironmentsApi_1.PrebuildAvailability.blob:
            case IEnvironmentsApi_1.PrebuildAvailability.pool:
                return `$(zap)Prebuild ready`;
            default:
                return undefined;
        }
    }
}
exports.Util = Util;
const Instance = Util.Instance;
exports.Instance = Instance;


/***/ }),

/***/ 91984:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fileAccess = void 0;
class BrowserFileAccess {
}
exports.fileAccess = new BrowserFileAccess();


/***/ }),

/***/ 28421:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLastFiles = void 0;
function getLastFiles(dirPath, maxFiles) {
    throw new Error('not implemented');
}
exports.getLastFiles = getLastFiles;


/***/ }),

/***/ 32960:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createLogFileListener = exports.getLogLocation = exports.setLogLocation = void 0;
function setLogLocation(logFilePath) { }
exports.setLogLocation = setLogLocation;
function getLogLocation() {
    return undefined;
}
exports.getLogLocation = getLogLocation;
function createLogFileListener() {
    return Promise.resolve(undefined);
}
exports.createLogFileListener = createLogFileListener;


/***/ }),

/***/ 41666:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.telemetryReporterFactory = void 0;
const sharedTelemetryFactory_1 = __webpack_require__(41734);
Object.defineProperty(exports, "telemetryReporterFactory", ({ enumerable: true, get: function () { return sharedTelemetryFactory_1.sharedTelemetryFactory; } }));


/***/ }),

/***/ 41734:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sharedTelemetryFactory = void 0;
exports.sharedTelemetryFactory = {
    create: (extensionPackage) => {
        // Defer import of `vscode-extension-telemetry` package.
        const telemetryReporterClass = (__webpack_require__(34263)/* ["default"] */ .Z);
        const props = extensionPackage;
        const { name, version, aiKey } = props;
        if (!aiKey) {
            throw new Error('The `aiKey` property needs to be set in the `package.json`.');
        }
        const telemetryReporter = new telemetryReporterClass(name, version, aiKey);
        return {
            sendTelemetryEvent: (eventName, properties, measurements) => {
                telemetryReporter.sendTelemetryEvent(eventName, properties, measurements);
            },
            sendTelemetryErrorEvent: (eventName, properties, measurements, errorProps) => {
                telemetryReporter.sendTelemetryErrorEvent(eventName, properties, measurements, errorProps);
            },
            dispose: () => telemetryReporter.dispose(),
        };
    },
};


/***/ }),

/***/ 68884:
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.3.2 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));


/***/ }),

/***/ 32842:
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (Array.isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};


/***/ }),

/***/ 27459:
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return Object.keys(obj).map(function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (Array.isArray(obj[k])) {
        return obj[k].map(function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};


/***/ }),

/***/ 4764:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.decode = exports.parse = __webpack_require__(32842);
exports.encode = exports.stringify = __webpack_require__(27459);


/***/ }),

/***/ 84760:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(68884);
var util = __webpack_require__(70569);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(4764);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ 70569:
/***/ ((module) => {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),

/***/ 17451:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!__webpack_require__.g.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = __webpack_require__.g.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}


/***/ }),

/***/ 56579:
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ 7673:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



var isArgumentsObject = __webpack_require__(47740);
var isGeneratorFunction = __webpack_require__(18265);
var whichTypedArray = __webpack_require__(52505);
var isTypedArray = __webpack_require__(50387);

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});


/***/ }),

/***/ 71323:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(27061);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = __webpack_require__(7673);

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(56579);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(70087);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),

/***/ 32286:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "NIL": () => (/* reexport */ nil),
  "parse": () => (/* reexport */ esm_browser_parse),
  "stringify": () => (/* reexport */ esm_browser_stringify),
  "v1": () => (/* reexport */ esm_browser_v1),
  "v3": () => (/* reexport */ esm_browser_v3),
  "v4": () => (/* reexport */ esm_browser_v4),
  "v5": () => (/* reexport */ esm_browser_v5),
  "validate": () => (/* reexport */ esm_browser_validate),
  "version": () => (/* reexport */ esm_browser_version)
});

;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/rng.js
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/regex.js
/* harmony default export */ const regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/validate.js


function validate(uuid) {
  return typeof uuid === 'string' && regex.test(uuid);
}

/* harmony default export */ const esm_browser_validate = (validate);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!esm_browser_validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const esm_browser_stringify = (stringify);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/v1.js

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || rng)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || esm_browser_stringify(b);
}

/* harmony default export */ const esm_browser_v1 = (v1);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/parse.js


function parse(uuid) {
  if (!esm_browser_validate(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ const esm_browser_parse = (parse);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/v35.js



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = esm_browser_parse(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return esm_browser_stringify(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/md5.js
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

/* harmony default export */ const esm_browser_md5 = (md5);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/v3.js


var v3 = v35('v3', 0x30, esm_browser_md5);
/* harmony default export */ const esm_browser_v3 = (v3);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/v4.js



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return esm_browser_stringify(rnds);
}

/* harmony default export */ const esm_browser_v4 = (v4);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/sha1.js
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ const esm_browser_sha1 = (sha1);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/v5.js


var v5 = v35('v5', 0x50, esm_browser_sha1);
/* harmony default export */ const esm_browser_v5 = (v5);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/nil.js
/* harmony default export */ const nil = ('00000000-0000-0000-0000-000000000000');
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/version.js


function version(uuid) {
  if (!esm_browser_validate(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ const esm_browser_version = (version);
;// CONCATENATED MODULE: ../node_modules/uuid/dist/esm-browser/index.js










/***/ }),

/***/ 79336:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const events_1 = __webpack_require__(16559);
const Is = __webpack_require__(98352);
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
    });
    function is(value) {
        let candidate = value;
        return candidate && (candidate === CancellationToken.None
            || candidate === CancellationToken.Cancelled
            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));
    }
    CancellationToken.is = is;
})(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
const shortcutEvent = Object.freeze(function (callback, context) {
    let handle = setTimeout(callback.bind(context), 0);
    return { dispose() { clearTimeout(handle); } };
});
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this._emitter = undefined;
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
    }
}
class CancellationTokenSource {
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else {
            this._token.cancel();
        }
    }
    dispose() {
        this.cancel();
    }
}
exports.CancellationTokenSource = CancellationTokenSource;


/***/ }),

/***/ 16559:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Disposable;
(function (Disposable) {
    function create(func) {
        return {
            dispose: func
        };
    }
    Disposable.create = create;
})(Disposable = exports.Disposable || (exports.Disposable = {}));
var Event;
(function (Event) {
    const _disposable = { dispose() { } };
    Event.None = function () { return _disposable; };
})(Event = exports.Event || (exports.Event = {}));
class CallbackList {
    add(callback, context = null, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = null) {
        if (!this._callbacks) {
            return;
        }
        var foundCallbackWithDifferentContext = false;
        for (var i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    invoke(...args) {
        if (!this._callbacks) {
            return [];
        }
        var ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (var i = 0, len = callbacks.length; i < len; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            }
            catch (e) {
                console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    dispose() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
class Emitter {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = (listener, thisArgs, disposables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                    this._options.onFirstListenerAdd(this);
                }
                this._callbacks.add(listener, thisArgs);
                let result;
                result = {
                    dispose: () => {
                        this._callbacks.remove(listener, thisArgs);
                        result.dispose = Emitter._noop;
                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                            this._options.onLastListenerRemove(this);
                        }
                    }
                };
                if (Array.isArray(disposables)) {
                    disposables.push(result);
                }
                return result;
            };
        }
        return this._event;
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    }
    dispose() {
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
    }
}
Emitter._noop = function () { };
exports.Emitter = Emitter;


/***/ }),

/***/ 98352:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;


/***/ }),

/***/ 22299:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Touch;
(function (Touch) {
    Touch.None = 0;
    Touch.First = 1;
    Touch.Last = 2;
})(Touch = exports.Touch || (exports.Touch = {}));
class LinkedMap {
    constructor() {
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        return item.value;
    }
    set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== Touch.None) {
                this.touch(item, touch);
            }
        }
        else {
            item = { key, value, next: undefined, previous: undefined };
            switch (touch) {
                case Touch.None:
                    this.addItemLast(item);
                    break;
                case Touch.First:
                    this.addItemFirst(item);
                    break;
                case Touch.Last:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
    }
    delete(key) {
        const item = this._map.get(key);
        if (!item) {
            return false;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return true;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        let current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            current = current.next;
        }
    }
    forEachReverse(callbackfn, thisArg) {
        let current = this._tail;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            current = current.previous;
        }
    }
    values() {
        let result = [];
        let current = this._head;
        while (current) {
            result.push(current.value);
            current = current.next;
        }
        return result;
    }
    keys() {
        let result = [];
        let current = this._head;
        while (current) {
            result.push(current.key);
            current = current.next;
        }
        return result;
    }
    /* JSON RPC run on es5 which has no Symbol.iterator
    public keys(): IterableIterator<K> {
        let current = this._head;
        let iterator: IterableIterator<K> = {
            [Symbol.iterator]() {
                return iterator;
            },
            next():IteratorResult<K> {
                if (current) {
                    let result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                } else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }

    public values(): IterableIterator<V> {
        let current = this._head;
        let iterator: IterableIterator<V> = {
            [Symbol.iterator]() {
                return iterator;
            },
            next():IteratorResult<V> {
                if (current) {
                    let result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                } else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    */
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        }
        else if (!this._head) {
            throw new Error('Invalid list');
        }
        else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        }
        else if (!this._tail) {
            throw new Error('Invalid list');
        }
        else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        }
        else if (item === this._head) {
            this._head = item.next;
        }
        else if (item === this._tail) {
            this._tail = item.previous;
        }
        else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if ((touch !== Touch.First && touch !== Touch.Last)) {
            return;
        }
        if (touch === Touch.First) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
        }
        else if (touch === Touch.Last) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
        }
    }
}
exports.LinkedMap = LinkedMap;


/***/ }),

/***/ 83730:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="./thenable.ts" />

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Is = __webpack_require__(98352);
const messages_1 = __webpack_require__(79121);
exports.RequestType = messages_1.RequestType;
exports.RequestType0 = messages_1.RequestType0;
exports.RequestType1 = messages_1.RequestType1;
exports.RequestType2 = messages_1.RequestType2;
exports.RequestType3 = messages_1.RequestType3;
exports.RequestType4 = messages_1.RequestType4;
exports.RequestType5 = messages_1.RequestType5;
exports.RequestType6 = messages_1.RequestType6;
exports.RequestType7 = messages_1.RequestType7;
exports.RequestType8 = messages_1.RequestType8;
exports.RequestType9 = messages_1.RequestType9;
exports.ResponseError = messages_1.ResponseError;
exports.ErrorCodes = messages_1.ErrorCodes;
exports.NotificationType = messages_1.NotificationType;
exports.NotificationType0 = messages_1.NotificationType0;
exports.NotificationType1 = messages_1.NotificationType1;
exports.NotificationType2 = messages_1.NotificationType2;
exports.NotificationType3 = messages_1.NotificationType3;
exports.NotificationType4 = messages_1.NotificationType4;
exports.NotificationType5 = messages_1.NotificationType5;
exports.NotificationType6 = messages_1.NotificationType6;
exports.NotificationType7 = messages_1.NotificationType7;
exports.NotificationType8 = messages_1.NotificationType8;
exports.NotificationType9 = messages_1.NotificationType9;
const messageReader_1 = __webpack_require__(9909);
exports.MessageReader = messageReader_1.MessageReader;
exports.StreamMessageReader = messageReader_1.StreamMessageReader;
exports.IPCMessageReader = messageReader_1.IPCMessageReader;
exports.SocketMessageReader = messageReader_1.SocketMessageReader;
const messageWriter_1 = __webpack_require__(35841);
exports.MessageWriter = messageWriter_1.MessageWriter;
exports.StreamMessageWriter = messageWriter_1.StreamMessageWriter;
exports.IPCMessageWriter = messageWriter_1.IPCMessageWriter;
exports.SocketMessageWriter = messageWriter_1.SocketMessageWriter;
const events_1 = __webpack_require__(16559);
exports.Disposable = events_1.Disposable;
exports.Event = events_1.Event;
exports.Emitter = events_1.Emitter;
const cancellation_1 = __webpack_require__(79336);
exports.CancellationTokenSource = cancellation_1.CancellationTokenSource;
exports.CancellationToken = cancellation_1.CancellationToken;
const linkedMap_1 = __webpack_require__(22299);
__export(__webpack_require__(17339));
__export(__webpack_require__(63105));
var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
})(CancelNotification || (CancelNotification = {}));
exports.NullLogger = Object.freeze({
    error: () => { },
    warn: () => { },
    info: () => { },
    log: () => { }
});
var Trace;
(function (Trace) {
    Trace[Trace["Off"] = 0] = "Off";
    Trace[Trace["Messages"] = 1] = "Messages";
    Trace[Trace["Verbose"] = 2] = "Verbose";
})(Trace = exports.Trace || (exports.Trace = {}));
(function (Trace) {
    function fromString(value) {
        value = value.toLowerCase();
        switch (value) {
            case 'off':
                return Trace.Off;
            case 'messages':
                return Trace.Messages;
            case 'verbose':
                return Trace.Verbose;
            default:
                return Trace.Off;
        }
    }
    Trace.fromString = fromString;
    function toString(value) {
        switch (value) {
            case Trace.Off:
                return 'off';
            case Trace.Messages:
                return 'messages';
            case Trace.Verbose:
                return 'verbose';
            default:
                return 'off';
        }
    }
    Trace.toString = toString;
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceFormat;
(function (TraceFormat) {
    TraceFormat["Text"] = "text";
    TraceFormat["JSON"] = "json";
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
(function (TraceFormat) {
    function fromString(value) {
        value = value.toLowerCase();
        if (value === 'json') {
            return TraceFormat.JSON;
        }
        else {
            return TraceFormat.Text;
        }
    }
    TraceFormat.fromString = fromString;
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
var SetTraceNotification;
(function (SetTraceNotification) {
    SetTraceNotification.type = new messages_1.NotificationType('$/setTraceNotification');
})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
var LogTraceNotification;
(function (LogTraceNotification) {
    LogTraceNotification.type = new messages_1.NotificationType('$/logTraceNotification');
})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
var ConnectionErrors;
(function (ConnectionErrors) {
    /**
     * The connection is closed.
     */
    ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
    /**
     * The connection got disposed.
     */
    ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
    /**
     * The connection is already in listening mode.
     */
    ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
class ConnectionError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ConnectionError.prototype);
    }
}
exports.ConnectionError = ConnectionError;
var ConnectionStrategy;
(function (ConnectionStrategy) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
    }
    ConnectionStrategy.is = is;
})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["New"] = 1] = "New";
    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
})(ConnectionState || (ConnectionState = {}));
function _createMessageConnection(messageReader, messageWriter, logger, strategy) {
    let sequenceNumber = 0;
    let notificationSquenceNumber = 0;
    let unknownResponseSquenceNumber = 0;
    const version = '2.0';
    let starRequestHandler = undefined;
    let requestHandlers = Object.create(null);
    let starNotificationHandler = undefined;
    let notificationHandlers = Object.create(null);
    let timer;
    let messageQueue = new linkedMap_1.LinkedMap();
    let responsePromises = Object.create(null);
    let requestTokens = Object.create(null);
    let trace = Trace.Off;
    let traceFormat = TraceFormat.Text;
    let tracer;
    let state = ConnectionState.New;
    let errorEmitter = new events_1.Emitter();
    let closeEmitter = new events_1.Emitter();
    let unhandledNotificationEmitter = new events_1.Emitter();
    let disposeEmitter = new events_1.Emitter();
    function createRequestQueueKey(id) {
        return 'req-' + id.toString();
    }
    function createResponseQueueKey(id) {
        if (id === null) {
            return 'res-unknown-' + (++unknownResponseSquenceNumber).toString();
        }
        else {
            return 'res-' + id.toString();
        }
    }
    function createNotificationQueueKey() {
        return 'not-' + (++notificationSquenceNumber).toString();
    }
    function addMessageToQueue(queue, message) {
        if (messages_1.isRequestMessage(message)) {
            queue.set(createRequestQueueKey(message.id), message);
        }
        else if (messages_1.isResponseMessage(message)) {
            queue.set(createResponseQueueKey(message.id), message);
        }
        else {
            queue.set(createNotificationQueueKey(), message);
        }
    }
    function cancelUndispatched(_message) {
        return undefined;
    }
    function isListening() {
        return state === ConnectionState.Listening;
    }
    function isClosed() {
        return state === ConnectionState.Closed;
    }
    function isDisposed() {
        return state === ConnectionState.Disposed;
    }
    function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(undefined);
        }
        // If the connection is disposed don't sent close events.
    }
    ;
    function readErrorHandler(error) {
        errorEmitter.fire([error, undefined, undefined]);
    }
    function writeErrorHandler(data) {
        errorEmitter.fire(data);
    }
    messageReader.onClose(closeHandler);
    messageReader.onError(readErrorHandler);
    messageWriter.onClose(closeHandler);
    messageWriter.onError(writeErrorHandler);
    function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
            return;
        }
        timer = setImmediate(() => {
            timer = undefined;
            processMessageQueue();
        });
    }
    function processMessageQueue() {
        if (messageQueue.size === 0) {
            return;
        }
        let message = messageQueue.shift();
        try {
            if (messages_1.isRequestMessage(message)) {
                handleRequest(message);
            }
            else if (messages_1.isNotificationMessage(message)) {
                handleNotification(message);
            }
            else if (messages_1.isResponseMessage(message)) {
                handleResponse(message);
            }
            else {
                handleInvalidMessage(message);
            }
        }
        finally {
            triggerMessageQueue();
        }
    }
    let callback = (message) => {
        try {
            // We have received a cancellation message. Check if the message is still in the queue
            // and cancel it if allowed to do so.
            if (messages_1.isNotificationMessage(message) && message.method === CancelNotification.type.method) {
                let key = createRequestQueueKey(message.params.id);
                let toCancel = messageQueue.get(key);
                if (messages_1.isRequestMessage(toCancel)) {
                    let response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                    if (response && (response.error !== void 0 || response.result !== void 0)) {
                        messageQueue.delete(key);
                        response.id = toCancel.id;
                        traceSendingResponse(response, message.method, Date.now());
                        messageWriter.write(response);
                        return;
                    }
                }
            }
            addMessageToQueue(messageQueue, message);
        }
        finally {
            triggerMessageQueue();
        }
    };
    function handleRequest(requestMessage) {
        if (isDisposed()) {
            // we return here silently since we fired an event when the
            // connection got disposed.
            return;
        }
        function reply(resultOrError, method, startTime) {
            let message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            }
            else {
                message.result = resultOrError === void 0 ? null : resultOrError;
            }
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        function replyError(error, method, startTime) {
            let message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        function replySuccess(result, method, startTime) {
            // The JSON RPC defines that a response must either have a result or an error
            // So we can't treat undefined as a valid response result.
            if (result === void 0) {
                result = null;
            }
            let message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        traceReceivedRequest(requestMessage);
        let element = requestHandlers[requestMessage.method];
        let type;
        let requestHandler;
        if (element) {
            type = element.type;
            requestHandler = element.handler;
        }
        let startTime = Date.now();
        if (requestHandler || starRequestHandler) {
            let cancellationSource = new cancellation_1.CancellationTokenSource();
            let tokenKey = String(requestMessage.id);
            requestTokens[tokenKey] = cancellationSource;
            try {
                let handlerResult;
                if (requestMessage.params === void 0 || (type !== void 0 && type.numberOfParams === 0)) {
                    handlerResult = requestHandler
                        ? requestHandler(cancellationSource.token)
                        : starRequestHandler(requestMessage.method, cancellationSource.token);
                }
                else if (Is.array(requestMessage.params) && (type === void 0 || type.numberOfParams > 1)) {
                    handlerResult = requestHandler
                        ? requestHandler(...requestMessage.params, cancellationSource.token)
                        : starRequestHandler(requestMessage.method, ...requestMessage.params, cancellationSource.token);
                }
                else {
                    handlerResult = requestHandler
                        ? requestHandler(requestMessage.params, cancellationSource.token)
                        : starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                }
                let promise = handlerResult;
                if (!handlerResult) {
                    delete requestTokens[tokenKey];
                    replySuccess(handlerResult, requestMessage.method, startTime);
                }
                else if (promise.then) {
                    promise.then((resultOrError) => {
                        delete requestTokens[tokenKey];
                        reply(resultOrError, requestMessage.method, startTime);
                    }, error => {
                        delete requestTokens[tokenKey];
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error, requestMessage.method, startTime);
                        }
                        else if (error && Is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    });
                }
                else {
                    delete requestTokens[tokenKey];
                    reply(handlerResult, requestMessage.method, startTime);
                }
            }
            catch (error) {
                delete requestTokens[tokenKey];
                if (error instanceof messages_1.ResponseError) {
                    reply(error, requestMessage.method, startTime);
                }
                else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
            }
        }
        else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
    }
    function handleResponse(responseMessage) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        if (responseMessage.id === null) {
            if (responseMessage.error) {
                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
            }
            else {
                logger.error(`Received response message without id. No further error information provided.`);
            }
        }
        else {
            let key = String(responseMessage.id);
            let responsePromise = responsePromises[key];
            traceReceivedResponse(responseMessage, responsePromise);
            if (responsePromise) {
                delete responsePromises[key];
                try {
                    if (responseMessage.error) {
                        let error = responseMessage.error;
                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                    }
                    else if (responseMessage.result !== void 0) {
                        responsePromise.resolve(responseMessage.result);
                    }
                    else {
                        throw new Error('Should never happen.');
                    }
                }
                catch (error) {
                    if (error.message) {
                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                    }
                    else {
                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                    }
                }
            }
        }
    }
    function handleNotification(message) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        let type = undefined;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
            notificationHandler = (params) => {
                let id = params.id;
                let source = requestTokens[String(id)];
                if (source) {
                    source.cancel();
                }
            };
        }
        else {
            let element = notificationHandlers[message.method];
            if (element) {
                notificationHandler = element.handler;
                type = element.type;
            }
        }
        if (notificationHandler || starNotificationHandler) {
            try {
                traceReceivedNotification(message);
                if (message.params === void 0 || (type !== void 0 && type.numberOfParams === 0)) {
                    notificationHandler ? notificationHandler() : starNotificationHandler(message.method);
                }
                else if (Is.array(message.params) && (type === void 0 || type.numberOfParams > 1)) {
                    notificationHandler ? notificationHandler(...message.params) : starNotificationHandler(message.method, ...message.params);
                }
                else {
                    notificationHandler ? notificationHandler(message.params) : starNotificationHandler(message.method, message.params);
                }
            }
            catch (error) {
                if (error.message) {
                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                }
                else {
                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                }
            }
        }
        else {
            unhandledNotificationEmitter.fire(message);
        }
    }
    function handleInvalidMessage(message) {
        if (!message) {
            logger.error('Received empty message.');
            return;
        }
        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
        // Test whether we find an id to reject the promise
        let responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            let key = String(responseMessage.id);
            let responseHandler = responsePromises[key];
            if (responseHandler) {
                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
            }
        }
    }
    function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose && message.params) {
                data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
            }
            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('send-request', message);
        }
    }
    function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.params) {
                    data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Sending notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('send-notification', message);
        }
    }
    function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.error && message.error.data) {
                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${JSON.stringify(message.result, null, 4)}\n\n`;
                    }
                    else if (message.error === void 0) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        }
        else {
            logLSPMessage('send-response', message);
        }
    }
    function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose && message.params) {
                data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
            }
            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('receive-request', message);
        }
    }
    function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.params) {
                    data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Received notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('receive-notification', message);
        }
    }
    function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.error && message.error.data) {
                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${JSON.stringify(message.result, null, 4)}\n\n`;
                    }
                    else if (message.error === void 0) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            if (responsePromise) {
                let error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
            }
            else {
                tracer.log(`Received response ${message.id} without active response promise.`, data);
            }
        }
        else {
            logLSPMessage('receive-response', message);
        }
    }
    function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
            return;
        }
        const lspMessage = {
            isLSPMessage: true,
            type,
            message,
            timestamp: Date.now()
        };
        tracer.log(lspMessage);
    }
    function throwIfClosedOrDisposed() {
        if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
        }
        if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
        }
    }
    function throwIfListening() {
        if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
        }
    }
    function throwIfNotListening() {
        if (!isListening()) {
            throw new Error('Call listen() first.');
        }
    }
    function undefinedToNull(param) {
        if (param === void 0) {
            return null;
        }
        else {
            return param;
        }
    }
    function computeMessageParams(type, params) {
        let result;
        let numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
            case 0:
                result = null;
                break;
            case 1:
                result = undefinedToNull(params[0]);
                break;
            default:
                result = [];
                for (let i = 0; i < params.length && i < numberOfParams; i++) {
                    result.push(undefinedToNull(params[i]));
                }
                if (params.length < numberOfParams) {
                    for (let i = params.length; i < numberOfParams; i++) {
                        result.push(null);
                    }
                }
                break;
        }
        return result;
    }
    let connection = {
        sendNotification: (type, ...params) => {
            throwIfClosedOrDisposed();
            let method;
            let messageParams;
            if (Is.string(type)) {
                method = type;
                switch (params.length) {
                    case 0:
                        messageParams = null;
                        break;
                    case 1:
                        messageParams = params[0];
                        break;
                    default:
                        messageParams = params;
                        break;
                }
            }
            else {
                method = type.method;
                messageParams = computeMessageParams(type, params);
            }
            let notificationMessage = {
                jsonrpc: version,
                method: method,
                params: messageParams
            };
            traceSendingNotification(notificationMessage);
            messageWriter.write(notificationMessage);
        },
        onNotification: (type, handler) => {
            throwIfClosedOrDisposed();
            if (Is.func(type)) {
                starNotificationHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    notificationHandlers[type] = { type: undefined, handler };
                }
                else {
                    notificationHandlers[type.method] = { type, handler };
                }
            }
        },
        sendRequest: (type, ...params) => {
            throwIfClosedOrDisposed();
            throwIfNotListening();
            let method;
            let messageParams;
            let token = undefined;
            if (Is.string(type)) {
                method = type;
                switch (params.length) {
                    case 0:
                        messageParams = null;
                        break;
                    case 1:
                        // The cancellation token is optional so it can also be undefined.
                        if (cancellation_1.CancellationToken.is(params[0])) {
                            messageParams = null;
                            token = params[0];
                        }
                        else {
                            messageParams = undefinedToNull(params[0]);
                        }
                        break;
                    default:
                        const last = params.length - 1;
                        if (cancellation_1.CancellationToken.is(params[last])) {
                            token = params[last];
                            if (params.length === 2) {
                                messageParams = undefinedToNull(params[0]);
                            }
                            else {
                                messageParams = params.slice(0, last).map(value => undefinedToNull(value));
                            }
                        }
                        else {
                            messageParams = params.map(value => undefinedToNull(value));
                        }
                        break;
                }
            }
            else {
                method = type.method;
                messageParams = computeMessageParams(type, params);
                let numberOfParams = type.numberOfParams;
                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
            }
            let id = sequenceNumber++;
            let result = new Promise((resolve, reject) => {
                let requestMessage = {
                    jsonrpc: version,
                    id: id,
                    method: method,
                    params: messageParams
                };
                let responsePromise = { method: method, timerStart: Date.now(), resolve, reject };
                traceSendingRequest(requestMessage);
                try {
                    messageWriter.write(requestMessage);
                }
                catch (e) {
                    // Writing the message failed. So we need to reject the promise.
                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : 'Unknown reason'));
                    responsePromise = null;
                }
                if (responsePromise) {
                    responsePromises[String(id)] = responsePromise;
                }
            });
            if (token) {
                token.onCancellationRequested(() => {
                    connection.sendNotification(CancelNotification.type, { id });
                });
            }
            return result;
        },
        onRequest: (type, handler) => {
            throwIfClosedOrDisposed();
            if (Is.func(type)) {
                starRequestHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    requestHandlers[type] = { type: undefined, handler };
                }
                else {
                    requestHandlers[type.method] = { type, handler };
                }
            }
        },
        trace: (_value, _tracer, sendNotificationOrTraceOptions) => {
            let _sendNotification = false;
            let _traceFormat = TraceFormat.Text;
            if (sendNotificationOrTraceOptions !== void 0) {
                if (Is.boolean(sendNotificationOrTraceOptions)) {
                    _sendNotification = sendNotificationOrTraceOptions;
                }
                else {
                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                }
            }
            trace = _value;
            traceFormat = _traceFormat;
            if (trace === Trace.Off) {
                tracer = undefined;
            }
            else {
                tracer = _tracer;
            }
            if (_sendNotification && !isClosed() && !isDisposed()) {
                connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
            }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        dispose: () => {
            if (isDisposed()) {
                return;
            }
            state = ConnectionState.Disposed;
            disposeEmitter.fire(undefined);
            let error = new Error('Connection got disposed.');
            Object.keys(responsePromises).forEach((key) => {
                responsePromises[key].reject(error);
            });
            responsePromises = Object.create(null);
            requestTokens = Object.create(null);
            messageQueue = new linkedMap_1.LinkedMap();
            // Test for backwards compatibility
            if (Is.func(messageWriter.dispose)) {
                messageWriter.dispose();
            }
            if (Is.func(messageReader.dispose)) {
                messageReader.dispose();
            }
        },
        listen: () => {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader.listen(callback);
        },
        inspect: () => {
            console.log("inspect");
        }
    };
    connection.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        tracer.log(params.message, trace === Trace.Verbose ? params.verbose : undefined);
    });
    return connection;
}
function isMessageReader(value) {
    return value.listen !== void 0 && value.read === void 0;
}
function isMessageWriter(value) {
    return value.write !== void 0 && value.end === void 0;
}
function createMessageConnection(input, output, logger, strategy) {
    if (!logger) {
        logger = exports.NullLogger;
    }
    let reader = isMessageReader(input) ? input : new messageReader_1.StreamMessageReader(input);
    let writer = isMessageWriter(output) ? output : new messageWriter_1.StreamMessageWriter(output);
    return _createMessageConnection(reader, writer, logger, strategy);
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ 9909:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
const events_1 = __webpack_require__(16559);
const Is = __webpack_require__(98352);
let DefaultSize = 8192;
let CR = Buffer.from('\r', 'ascii')[0];
let LF = Buffer.from('\n', 'ascii')[0];
let CRLF = '\r\n';
class MessageBuffer {
    constructor(encoding = 'utf8') {
        this.encoding = encoding;
        this.index = 0;
        this.buffer = Buffer.allocUnsafe(DefaultSize);
    }
    append(chunk) {
        var toAppend = chunk;
        if (typeof (chunk) === 'string') {
            var str = chunk;
            var bufferLen = Buffer.byteLength(str, this.encoding);
            toAppend = Buffer.allocUnsafe(bufferLen);
            toAppend.write(str, 0, bufferLen, this.encoding);
        }
        if (this.buffer.length - this.index >= toAppend.length) {
            toAppend.copy(this.buffer, this.index, 0, toAppend.length);
        }
        else {
            var newSize = (Math.ceil((this.index + toAppend.length) / DefaultSize) + 1) * DefaultSize;
            if (this.index === 0) {
                this.buffer = Buffer.allocUnsafe(newSize);
                toAppend.copy(this.buffer, 0, 0, toAppend.length);
            }
            else {
                this.buffer = Buffer.concat([this.buffer.slice(0, this.index), toAppend], newSize);
            }
        }
        this.index += toAppend.length;
    }
    tryReadHeaders() {
        let result = undefined;
        let current = 0;
        while (current + 3 < this.index && (this.buffer[current] !== CR || this.buffer[current + 1] !== LF || this.buffer[current + 2] !== CR || this.buffer[current + 3] !== LF)) {
            current++;
        }
        // No header / body separator found (e.g CRLFCRLF)
        if (current + 3 >= this.index) {
            return result;
        }
        result = Object.create(null);
        let headers = this.buffer.toString('ascii', 0, current).split(CRLF);
        headers.forEach((header) => {
            let index = header.indexOf(':');
            if (index === -1) {
                throw new Error('Message header must separate key and value using :');
            }
            let key = header.substr(0, index);
            let value = header.substr(index + 1).trim();
            result[key] = value;
        });
        let nextStart = current + 4;
        this.buffer = this.buffer.slice(nextStart);
        this.index = this.index - nextStart;
        return result;
    }
    tryReadContent(length) {
        if (this.index < length) {
            return null;
        }
        let result = this.buffer.toString(this.encoding, 0, length);
        let nextStart = length;
        this.buffer.copy(this.buffer, 0, nextStart);
        this.index = this.index - nextStart;
        return result;
    }
    get numberOfBytes() {
        return this.index;
    }
}
var MessageReader;
(function (MessageReader) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&
            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
    }
    MessageReader.is = is;
})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));
class AbstractMessageReader {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error) {
        this.errorEmitter.fire(this.asError(error));
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    get onPartialMessage() {
        return this.partialMessageEmitter.event;
    }
    firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Reader recevied error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageReader = AbstractMessageReader;
class StreamMessageReader extends AbstractMessageReader {
    constructor(readable, encoding = 'utf8') {
        super();
        this.readable = readable;
        this.buffer = new MessageBuffer(encoding);
        this._partialMessageTimeout = 10000;
    }
    set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
    }
    get partialMessageTimeout() {
        return this._partialMessageTimeout;
    }
    listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = undefined;
        this.callback = callback;
        this.readable.on('data', (data) => {
            this.onData(data);
        });
        this.readable.on('error', (error) => this.fireError(error));
        this.readable.on('close', () => this.fireClose());
    }
    onData(data) {
        this.buffer.append(data);
        while (true) {
            if (this.nextMessageLength === -1) {
                let headers = this.buffer.tryReadHeaders();
                if (!headers) {
                    return;
                }
                let contentLength = headers['Content-Length'];
                if (!contentLength) {
                    throw new Error('Header must provide a Content-Length property.');
                }
                let length = parseInt(contentLength);
                if (isNaN(length)) {
                    throw new Error('Content-Length value must be a number.');
                }
                this.nextMessageLength = length;
                // Take the encoding form the header. For compatibility
                // treat both utf-8 and utf8 as node utf8
            }
            var msg = this.buffer.tryReadContent(this.nextMessageLength);
            if (msg === null) {
                /** We haven't recevied the full message yet. */
                this.setPartialMessageTimer();
                return;
            }
            this.clearPartialMessageTimer();
            this.nextMessageLength = -1;
            this.messageToken++;
            var json = JSON.parse(msg);
            this.callback(json);
        }
    }
    clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
            clearTimeout(this.partialMessageTimer);
            this.partialMessageTimer = undefined;
        }
    }
    setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
            return;
        }
        this.partialMessageTimer = setTimeout((token, timeout) => {
            this.partialMessageTimer = undefined;
            if (token === this.messageToken) {
                this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                this.setPartialMessageTimer();
            }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
    }
}
exports.StreamMessageReader = StreamMessageReader;
class IPCMessageReader extends AbstractMessageReader {
    constructor(process) {
        super();
        this.process = process;
        let eventEmitter = this.process;
        eventEmitter.on('error', (error) => this.fireError(error));
        eventEmitter.on('close', () => this.fireClose());
    }
    listen(callback) {
        this.process.on('message', callback);
    }
}
exports.IPCMessageReader = IPCMessageReader;
class SocketMessageReader extends StreamMessageReader {
    constructor(socket, encoding = 'utf-8') {
        super(socket, encoding);
    }
}
exports.SocketMessageReader = SocketMessageReader;


/***/ }),

/***/ 35841:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
const events_1 = __webpack_require__(16559);
const Is = __webpack_require__(98352);
let ContentLength = 'Content-Length: ';
let CRLF = '\r\n';
var MessageWriter;
(function (MessageWriter) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&
            Is.func(candidate.onError) && Is.func(candidate.write);
    }
    MessageWriter.is = is;
})(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));
class AbstractMessageWriter {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Writer recevied error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageWriter = AbstractMessageWriter;
class StreamMessageWriter extends AbstractMessageWriter {
    constructor(writable, encoding = 'utf8') {
        super();
        this.writable = writable;
        this.encoding = encoding;
        this.errorCount = 0;
        this.writable.on('error', (error) => this.fireError(error));
        this.writable.on('close', () => this.fireClose());
    }
    write(msg) {
        let json = JSON.stringify(msg);
        let contentLength = Buffer.byteLength(json, this.encoding);
        let headers = [
            ContentLength, contentLength.toString(), CRLF,
            CRLF
        ];
        try {
            // Header must be written in ASCII encoding
            this.writable.write(headers.join(''), 'ascii');
            // Now write the content. This can be written in any encoding
            this.writable.write(json, this.encoding);
            this.errorCount = 0;
        }
        catch (error) {
            this.errorCount++;
            this.fireError(error, msg, this.errorCount);
        }
    }
}
exports.StreamMessageWriter = StreamMessageWriter;
class IPCMessageWriter extends AbstractMessageWriter {
    constructor(process) {
        super();
        this.process = process;
        this.errorCount = 0;
        this.queue = [];
        this.sending = false;
        let eventEmitter = this.process;
        eventEmitter.on('error', (error) => this.fireError(error));
        eventEmitter.on('close', () => this.fireClose);
    }
    write(msg) {
        if (!this.sending && this.queue.length === 0) {
            // See https://github.com/nodejs/node/issues/7657
            this.doWriteMessage(msg);
        }
        else {
            this.queue.push(msg);
        }
    }
    doWriteMessage(msg) {
        try {
            if (this.process.send) {
                this.sending = true;
                this.process.send(msg, undefined, undefined, (error) => {
                    this.sending = false;
                    if (error) {
                        this.errorCount++;
                        this.fireError(error, msg, this.errorCount);
                    }
                    else {
                        this.errorCount = 0;
                    }
                    if (this.queue.length > 0) {
                        this.doWriteMessage(this.queue.shift());
                    }
                });
            }
        }
        catch (error) {
            this.errorCount++;
            this.fireError(error, msg, this.errorCount);
        }
    }
}
exports.IPCMessageWriter = IPCMessageWriter;
class SocketMessageWriter extends AbstractMessageWriter {
    constructor(socket, encoding = 'utf8') {
        super();
        this.socket = socket;
        this.queue = [];
        this.sending = false;
        this.encoding = encoding;
        this.errorCount = 0;
        this.socket.on('error', (error) => this.fireError(error));
        this.socket.on('close', () => this.fireClose());
    }
    write(msg) {
        if (!this.sending && this.queue.length === 0) {
            // See https://github.com/nodejs/node/issues/7657
            this.doWriteMessage(msg);
        }
        else {
            this.queue.push(msg);
        }
    }
    doWriteMessage(msg) {
        let json = JSON.stringify(msg);
        let contentLength = Buffer.byteLength(json, this.encoding);
        let headers = [
            ContentLength, contentLength.toString(), CRLF,
            CRLF
        ];
        try {
            // Header must be written in ASCII encoding
            this.sending = true;
            this.socket.write(headers.join(''), 'ascii', (error) => {
                if (error) {
                    this.handleError(error, msg);
                }
                try {
                    // Now write the content. This can be written in any encoding
                    this.socket.write(json, this.encoding, (error) => {
                        this.sending = false;
                        if (error) {
                            this.handleError(error, msg);
                        }
                        else {
                            this.errorCount = 0;
                        }
                        if (this.queue.length > 0) {
                            this.doWriteMessage(this.queue.shift());
                        }
                    });
                }
                catch (error) {
                    this.handleError(error, msg);
                }
            });
        }
        catch (error) {
            this.handleError(error, msg);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
}
exports.SocketMessageWriter = SocketMessageWriter;


/***/ }),

/***/ 79121:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
const is = __webpack_require__(98352);
/**
 * Predefined error codes.
 */
var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON RPC
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    ErrorCodes.serverErrorStart = -32099;
    ErrorCodes.serverErrorEnd = -32000;
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    // Defined by the protocol.
    ErrorCodes.RequestCancelled = -32800;
    // Defined by VSCode library.
    ErrorCodes.MessageWriteError = 1;
    ErrorCodes.MessageReadError = 2;
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
    }
    toJson() {
        return {
            code: this.code,
            message: this.message,
            data: this.data,
        };
    }
}
exports.ResponseError = ResponseError;
/**
 * An abstract implementation of a MessageType.
 */
class AbstractMessageType {
    constructor(_method, _numberOfParams) {
        this._method = _method;
        this._numberOfParams = _numberOfParams;
    }
    get method() {
        return this._method;
    }
    get numberOfParams() {
        return this._numberOfParams;
    }
}
exports.AbstractMessageType = AbstractMessageType;
/**
 * Classes to type request response pairs
 */
class RequestType0 extends AbstractMessageType {
    constructor(method) {
        super(method, 0);
        this._ = undefined;
    }
}
exports.RequestType0 = RequestType0;
class RequestType extends AbstractMessageType {
    constructor(method) {
        super(method, 1);
        this._ = undefined;
    }
}
exports.RequestType = RequestType;
class RequestType1 extends AbstractMessageType {
    constructor(method) {
        super(method, 1);
        this._ = undefined;
    }
}
exports.RequestType1 = RequestType1;
class RequestType2 extends AbstractMessageType {
    constructor(method) {
        super(method, 2);
        this._ = undefined;
    }
}
exports.RequestType2 = RequestType2;
class RequestType3 extends AbstractMessageType {
    constructor(method) {
        super(method, 3);
        this._ = undefined;
    }
}
exports.RequestType3 = RequestType3;
class RequestType4 extends AbstractMessageType {
    constructor(method) {
        super(method, 4);
        this._ = undefined;
    }
}
exports.RequestType4 = RequestType4;
class RequestType5 extends AbstractMessageType {
    constructor(method) {
        super(method, 5);
        this._ = undefined;
    }
}
exports.RequestType5 = RequestType5;
class RequestType6 extends AbstractMessageType {
    constructor(method) {
        super(method, 6);
        this._ = undefined;
    }
}
exports.RequestType6 = RequestType6;
class RequestType7 extends AbstractMessageType {
    constructor(method) {
        super(method, 7);
        this._ = undefined;
    }
}
exports.RequestType7 = RequestType7;
class RequestType8 extends AbstractMessageType {
    constructor(method) {
        super(method, 8);
        this._ = undefined;
    }
}
exports.RequestType8 = RequestType8;
class RequestType9 extends AbstractMessageType {
    constructor(method) {
        super(method, 9);
        this._ = undefined;
    }
}
exports.RequestType9 = RequestType9;
class NotificationType extends AbstractMessageType {
    constructor(method) {
        super(method, 1);
        this._ = undefined;
    }
}
exports.NotificationType = NotificationType;
class NotificationType0 extends AbstractMessageType {
    constructor(method) {
        super(method, 0);
        this._ = undefined;
    }
}
exports.NotificationType0 = NotificationType0;
class NotificationType1 extends AbstractMessageType {
    constructor(method) {
        super(method, 1);
        this._ = undefined;
    }
}
exports.NotificationType1 = NotificationType1;
class NotificationType2 extends AbstractMessageType {
    constructor(method) {
        super(method, 2);
        this._ = undefined;
    }
}
exports.NotificationType2 = NotificationType2;
class NotificationType3 extends AbstractMessageType {
    constructor(method) {
        super(method, 3);
        this._ = undefined;
    }
}
exports.NotificationType3 = NotificationType3;
class NotificationType4 extends AbstractMessageType {
    constructor(method) {
        super(method, 4);
        this._ = undefined;
    }
}
exports.NotificationType4 = NotificationType4;
class NotificationType5 extends AbstractMessageType {
    constructor(method) {
        super(method, 5);
        this._ = undefined;
    }
}
exports.NotificationType5 = NotificationType5;
class NotificationType6 extends AbstractMessageType {
    constructor(method) {
        super(method, 6);
        this._ = undefined;
    }
}
exports.NotificationType6 = NotificationType6;
class NotificationType7 extends AbstractMessageType {
    constructor(method) {
        super(method, 7);
        this._ = undefined;
    }
}
exports.NotificationType7 = NotificationType7;
class NotificationType8 extends AbstractMessageType {
    constructor(method) {
        super(method, 8);
        this._ = undefined;
    }
}
exports.NotificationType8 = NotificationType8;
class NotificationType9 extends AbstractMessageType {
    constructor(method) {
        super(method, 9);
        this._ = undefined;
    }
}
exports.NotificationType9 = NotificationType9;
/**
 * Tests if the given message is a request message
 */
function isRequestMessage(message) {
    let candidate = message;
    return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
}
exports.isRequestMessage = isRequestMessage;
/**
 * Tests if the given message is a notification message
 */
function isNotificationMessage(message) {
    let candidate = message;
    return candidate && is.string(candidate.method) && message.id === void 0;
}
exports.isNotificationMessage = isNotificationMessage;
/**
 * Tests if the given message is a response message
 */
function isResponseMessage(message) {
    let candidate = message;
    return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
}
exports.isResponseMessage = isResponseMessage;


/***/ }),

/***/ 17339:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(27061);
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
const path_1 = __webpack_require__(67425);
const os_1 = __webpack_require__(54167);
const crypto_1 = __webpack_require__(9392);
const net_1 = __webpack_require__(77135);
const messageReader_1 = __webpack_require__(9909);
const messageWriter_1 = __webpack_require__(35841);
function generateRandomPipeName() {
    const randomSuffix = crypto_1.randomBytes(21).toString('hex');
    if (process.platform === 'win32') {
        return `\\\\.\\pipe\\vscode-jsonrpc-${randomSuffix}-sock`;
    }
    else {
        // Mac/Unix: use socket file
        return path_1.join(os_1.tmpdir(), `vscode-${randomSuffix}.sock`);
    }
}
exports.generateRandomPipeName = generateRandomPipeName;
function createClientPipeTransport(pipeName, encoding = 'utf-8') {
    let connectResolve;
    let connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
    });
    return new Promise((resolve, reject) => {
        let server = net_1.createServer((socket) => {
            server.close();
            connectResolve([
                new messageReader_1.SocketMessageReader(socket, encoding),
                new messageWriter_1.SocketMessageWriter(socket, encoding)
            ]);
        });
        server.on('error', reject);
        server.listen(pipeName, () => {
            server.removeListener('error', reject);
            resolve({
                onConnected: () => { return connected; }
            });
        });
    });
}
exports.createClientPipeTransport = createClientPipeTransport;
function createServerPipeTransport(pipeName, encoding = 'utf-8') {
    const socket = net_1.createConnection(pipeName);
    return [
        new messageReader_1.SocketMessageReader(socket, encoding),
        new messageWriter_1.SocketMessageWriter(socket, encoding)
    ];
}
exports.createServerPipeTransport = createServerPipeTransport;


/***/ }),

/***/ 63105:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
const net_1 = __webpack_require__(77135);
const messageReader_1 = __webpack_require__(9909);
const messageWriter_1 = __webpack_require__(35841);
function createClientSocketTransport(port, encoding = 'utf-8') {
    let connectResolve;
    let connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
    });
    return new Promise((resolve, reject) => {
        let server = net_1.createServer((socket) => {
            server.close();
            connectResolve([
                new messageReader_1.SocketMessageReader(socket, encoding),
                new messageWriter_1.SocketMessageWriter(socket, encoding)
            ]);
        });
        server.on('error', reject);
        server.listen(port, '127.0.0.1', () => {
            server.removeListener('error', reject);
            resolve({
                onConnected: () => { return connected; }
            });
        });
    });
}
exports.createClientSocketTransport = createClientSocketTransport;
function createServerSocketTransport(port, encoding = 'utf-8') {
    const socket = net_1.createConnection(port, '127.0.0.1');
    return [
        new messageReader_1.SocketMessageReader(socket, encoding),
        new messageWriter_1.SocketMessageWriter(socket, encoding)
    ];
}
exports.createServerSocketTransport = createServerSocketTransport;


/***/ }),

/***/ 99956:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
__webpack_unused_export__ = ({ value: true });
var VSCodeTasClient_1 = __webpack_require__(94269);
__webpack_unused_export__ = VSCodeTasClient_1.getExperimentationService;
exports.SP = VSCodeTasClient_1.getExperimentationServiceAsync;
var VSCodeFilterProvider_1 = __webpack_require__(93794);
exports.aU = VSCodeFilterProvider_1.TargetPopulation;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 94947:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
class MementoKeyValueStorage {
    constructor(mementoGlobalStorage) {
        this.mementoGlobalStorage = mementoGlobalStorage;
    }
    async getValue(key, defaultValue) {
        const value = await this.mementoGlobalStorage.get(key);
        return value || defaultValue;
    }
    setValue(key, value) {
        this.mementoGlobalStorage.update(key, value);
    }
}
exports.MementoKeyValueStorage = MementoKeyValueStorage;
//# sourceMappingURL=MementoKeyValueStorage.js.map

/***/ }),

/***/ 65176:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
class TelemetryDisabledExperimentationService {
    constructor() {
        this.initializePromise = Promise.resolve();
        this.initialFetch = Promise.resolve();
    }
    isFlightEnabled(flight) {
        return false;
    }
    isCachedFlightEnabled(flight) {
        return Promise.resolve(false);
    }
    isFlightEnabledAsync(flight) {
        return Promise.resolve(false);
    }
    getTreatmentVariable(configId, name) {
        return undefined;
    }
    getTreatmentVariableAsync(configId, name) {
        return Promise.resolve(undefined);
    }
}
exports["default"] = TelemetryDisabledExperimentationService;
//# sourceMappingURL=TelemetryDisabledExperimentationService.js.map

/***/ }),

/***/ 93794:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const vscode = __webpack_require__(89496);
/**
 * Here is where we are going to define the filters we will set.
 */
class VSCodeFilterProvider {
    constructor(extensionName, extensionVersion, targetPopulation) {
        this.extensionName = extensionName;
        this.extensionVersion = extensionVersion;
        this.targetPopulation = targetPopulation;
    }
    /**
     * Returns a version string that can be parsed into a .NET Build object
     * by removing the tag suffix (for example -dev).
     *
     * @param version Version string to be trimmed.
     */
    static trimVersionSuffix(version) {
        const regex = /\-[a-zA-Z0-9]+$/;
        const result = version.split(regex);
        return result[0];
    }
    getFilterValue(filter) {
        switch (filter) {
            case Filters.ApplicationVersion:
                return VSCodeFilterProvider.trimVersionSuffix(vscode.version);
            case Filters.Build:
                return vscode.env.appName;
            case Filters.ClientId:
                return vscode.env.machineId;
            case Filters.ExtensionName:
                return this.extensionName;
            case Filters.ExtensionVersion:
                return VSCodeFilterProvider.trimVersionSuffix(this.extensionVersion);
            case Filters.Language:
                return vscode.env.language;
            case Filters.TargetPopulation:
                return this.targetPopulation;
            default:
                return '';
        }
    }
    getFilters() {
        let filters = new Map();
        let filterValues = Object.values(Filters);
        for (let value of filterValues) {
            filters.set(value, this.getFilterValue(value));
        }
        return filters;
    }
}
exports.VSCodeFilterProvider = VSCodeFilterProvider;
/*
Based upon the official VSCode currently existing filters in the
ExP backend for the VSCode cluster.
https://experimentation.visualstudio.com/Analysis%20and%20Experimentation/_git/AnE.ExP.TAS.TachyonHost.Configuration?path=%2FConfigurations%2Fvscode%2Fvscode.json&version=GBmaster
"X-MSEdge-Market": "detection.market",
"X-FD-Corpnet": "detection.corpnet",
"X-VSCode–AppVersion": "appversion",
"X-VSCode-Build": "build",
"X-MSEdge-ClientId": "clientid",
"X-VSCode-ExtensionName": "extensionname",
"X-VSCode-ExtensionVersion": "extensionversion",
"X-VSCode-TargetPopulation": "targetpopulation",
"X-VSCode-Language": "language"
*/
/**
 * All available filters, can be updated.
 */
var Filters;
(function (Filters) {
    /**
     * The market in which the extension is distributed.
     */
    Filters["Market"] = "X-MSEdge-Market";
    /**
     * The corporation network.
     */
    Filters["CorpNet"] = "X-FD-Corpnet";
    /**
     * Version of the application which uses experimentation service.
     */
    Filters["ApplicationVersion"] = "X-VSCode-AppVersion";
    /**
     * Insiders vs Stable.
     */
    Filters["Build"] = "X-VSCode-Build";
    /**
     * Client Id which is used as primary unit for the experimentation.
     */
    Filters["ClientId"] = "X-MSEdge-ClientId";
    /**
     * Extension header.
     */
    Filters["ExtensionName"] = "X-VSCode-ExtensionName";
    /**
     * The version of the extension.
     */
    Filters["ExtensionVersion"] = "X-VSCode-ExtensionVersion";
    /**
     * The language in use by VS Code
     */
    Filters["Language"] = "X-VSCode-Language";
    /**
     * The target population.
     * This is used to separate internal, early preview, GA, etc.
     */
    Filters["TargetPopulation"] = "X-VSCode-TargetPopulation";
})(Filters = exports.Filters || (exports.Filters = {}));
/**
 * Specifies the target population for the experimentation filter.
 */
var TargetPopulation;
(function (TargetPopulation) {
    TargetPopulation["Team"] = "team";
    TargetPopulation["Internal"] = "internal";
    TargetPopulation["Insiders"] = "insider";
    TargetPopulation["Public"] = "public";
})(TargetPopulation = exports.TargetPopulation || (exports.TargetPopulation = {}));
//# sourceMappingURL=VSCodeFilterProvider.js.map

/***/ }),

/***/ 94269:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const VSCodeFilterProvider_1 = __webpack_require__(93794);
const tas_client_1 = __webpack_require__(18939);
const vscode = __webpack_require__(89496);
const MementoKeyValueStorage_1 = __webpack_require__(94947);
const TelemetryDisabledExperimentationService_1 = __webpack_require__(65176);
const endpoint = 'https://default.exp-tas.com/vscode/ab';
const telemetryEventName = 'query-expfeature';
const featuresTelemetryPropertyName = 'VSCode.ABExp.Features';
const assignmentContextTelemetryPropertyName = 'abexp.assignmentcontext';
const storageKey = 'VSCode.ABExp.FeatureData';
const refetchInterval = 1000 * 60 * 30; // By default it's set up to 30 minutes.
/**
 *
 * @param extensionName The name of the extension.
 * @param extensionVersion The version of the extension.
 * @param telemetry Telemetry implementation.
 * @param targetPopulation An enum containing the target population ('team', 'internal', 'insiders', 'public').
 * @param memento The memento state to be used for cache.
 * @param filterProviders The filter providers.
 */
function getExperimentationService(extensionName, extensionVersion, targetPopulation, telemetry, memento, ...filterProviders) {
    if (!memento) {
        throw new Error('Memento storage was not provided.');
    }
    const config = vscode.workspace.getConfiguration('telemetry');
    const telemetryEnabled = vscode.env.isTelemetryEnabled === undefined
        ? config.get('enableTelemetry', true)
        : vscode.env.isTelemetryEnabled;
    if (!telemetryEnabled) {
        return new TelemetryDisabledExperimentationService_1.default();
    }
    const extensionFilterProvider = new VSCodeFilterProvider_1.VSCodeFilterProvider(extensionName, extensionVersion, targetPopulation);
    const providerList = [extensionFilterProvider, ...filterProviders];
    const keyValueStorage = new MementoKeyValueStorage_1.MementoKeyValueStorage(memento);
    return new tas_client_1.ExperimentationService({
        filterProviders: providerList,
        telemetry: telemetry,
        storageKey: storageKey,
        keyValueStorage: keyValueStorage,
        featuresTelemetryPropertyName: featuresTelemetryPropertyName,
        assignmentContextTelemetryPropertyName: assignmentContextTelemetryPropertyName,
        telemetryEventName: telemetryEventName,
        endpoint: endpoint,
        refetchInterval: refetchInterval,
    });
}
exports.getExperimentationService = getExperimentationService;
/**
 * Returns the experimentation service after waiting on initialize.
 *
 * @param extensionName The name of the extension.
 * @param extensionVersion The version of the extension.
 * @param telemetry Telemetry implementation.
 * @param targetPopulation An enum containing the target population ('team', 'internal', 'insiders', 'public').
 * @param memento The memento state to be used for cache.
 * @param filterProviders The filter providers.
 */
async function getExperimentationServiceAsync(extensionName, extensionVersion, targetPopulation, telemetry, memento, ...filterProviders) {
    const experimentationService = getExperimentationService(extensionName, extensionVersion, targetPopulation, telemetry, memento, ...filterProviders);
    await experimentationService.initializePromise;
    return experimentationService;
}
exports.getExperimentationServiceAsync = getExperimentationServiceAsync;
//# sourceMappingURL=VSCodeTasClient.js.map

/***/ }),

/***/ 50411:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _globalThis;
if (typeof globalThis === 'object') {
	_globalThis = globalThis;
} else {
	try {
		_globalThis = __webpack_require__(43697);
	} catch (error) {
	} finally {
		if (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }
		if (!_globalThis) { throw new Error('Could not determine global this'); }
	}
}

var NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;
var websocket_version = __webpack_require__(42630);


/**
 * Expose a W3C WebSocket class with just one or two arguments.
 */
function W3CWebSocket(uri, protocols) {
	var native_instance;

	if (protocols) {
		native_instance = new NativeWebSocket(uri, protocols);
	}
	else {
		native_instance = new NativeWebSocket(uri);
	}

	/**
	 * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
	 * class). Since it is an Object it will be returned as it is when creating an
	 * instance of W3CWebSocket via 'new W3CWebSocket()'.
	 *
	 * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
	 */
	return native_instance;
}
if (NativeWebSocket) {
	['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {
		Object.defineProperty(W3CWebSocket, prop, {
			get: function() { return NativeWebSocket[prop]; }
		});
	});
}

/**
 * Module exports.
 */
module.exports = {
    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,
    'version'      : websocket_version
};


/***/ }),

/***/ 42630:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(35232).version;


/***/ }),

/***/ 52505:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(98372);
var availableTypedArrays = __webpack_require__(40973);
var callBound = __webpack_require__(12737);

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(10698)();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = __webpack_require__(48828);
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof g[typedArray] === 'function') {
			var arr = new g[typedArray]();
			if (Symbol.toStringTag in arr) {
				var proto = getPrototypeOf(arr);
				var descriptor = gOPD(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf(proto);
					descriptor = gOPD(superProto, Symbol.toStringTag);
				}
				toStrTags[typedArray] = descriptor.get;
			}
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};

var isTypedArray = __webpack_require__(50387);

module.exports = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};


/***/ }),

/***/ 67477:
/***/ ((module) => {

// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}


/***/ }),

/***/ 99976:
/***/ ((module) => {

"use strict";

module.exports = function (Yallist) {
  Yallist.prototype[Symbol.iterator] = function* () {
    for (let walker = this.head; walker; walker = walker.next) {
      yield walker.value
    }
  }
}


/***/ }),

/***/ 7372:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Yallist

Yallist.Node = Node
Yallist.create = Yallist

function Yallist (list) {
  var self = this
  if (!(self instanceof Yallist)) {
    self = new Yallist()
  }

  self.tail = null
  self.head = null
  self.length = 0

  if (list && typeof list.forEach === 'function') {
    list.forEach(function (item) {
      self.push(item)
    })
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i])
    }
  }

  return self
}

Yallist.prototype.removeNode = function (node) {
  if (node.list !== this) {
    throw new Error('removing node which does not belong to this list')
  }

  var next = node.next
  var prev = node.prev

  if (next) {
    next.prev = prev
  }

  if (prev) {
    prev.next = next
  }

  if (node === this.head) {
    this.head = next
  }
  if (node === this.tail) {
    this.tail = prev
  }

  node.list.length--
  node.next = null
  node.prev = null
  node.list = null

  return next
}

Yallist.prototype.unshiftNode = function (node) {
  if (node === this.head) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var head = this.head
  node.list = this
  node.next = head
  if (head) {
    head.prev = node
  }

  this.head = node
  if (!this.tail) {
    this.tail = node
  }
  this.length++
}

Yallist.prototype.pushNode = function (node) {
  if (node === this.tail) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var tail = this.tail
  node.list = this
  node.prev = tail
  if (tail) {
    tail.next = node
  }

  this.tail = node
  if (!this.head) {
    this.head = node
  }
  this.length++
}

Yallist.prototype.push = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.unshift = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.pop = function () {
  if (!this.tail) {
    return undefined
  }

  var res = this.tail.value
  this.tail = this.tail.prev
  if (this.tail) {
    this.tail.next = null
  } else {
    this.head = null
  }
  this.length--
  return res
}

Yallist.prototype.shift = function () {
  if (!this.head) {
    return undefined
  }

  var res = this.head.value
  this.head = this.head.next
  if (this.head) {
    this.head.prev = null
  } else {
    this.tail = null
  }
  this.length--
  return res
}

Yallist.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.next
  }
}

Yallist.prototype.forEachReverse = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.prev
  }
}

Yallist.prototype.get = function (n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.next
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.getReverse = function (n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.prev
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.map = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.head; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.next
  }
  return res
}

Yallist.prototype.mapReverse = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.tail; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.prev
  }
  return res
}

Yallist.prototype.reduce = function (fn, initial) {
  var acc
  var walker = this.head
  if (arguments.length > 1) {
    acc = initial
  } else if (this.head) {
    walker = this.head.next
    acc = this.head.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i)
    walker = walker.next
  }

  return acc
}

Yallist.prototype.reduceReverse = function (fn, initial) {
  var acc
  var walker = this.tail
  if (arguments.length > 1) {
    acc = initial
  } else if (this.tail) {
    walker = this.tail.prev
    acc = this.tail.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i)
    walker = walker.prev
  }

  return acc
}

Yallist.prototype.toArray = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.next
  }
  return arr
}

Yallist.prototype.toArrayReverse = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.prev
  }
  return arr
}

Yallist.prototype.slice = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next
  }
  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.sliceReverse = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev
  }
  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
  if (start > this.length) {
    start = this.length - 1
  }
  if (start < 0) {
    start = this.length + start;
  }

  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next
  }

  var ret = []
  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value)
    walker = this.removeNode(walker)
  }
  if (walker === null) {
    walker = this.tail
  }

  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev
  }

  for (var i = 0; i < nodes.length; i++) {
    walker = insert(this, walker, nodes[i])
  }
  return ret;
}

Yallist.prototype.reverse = function () {
  var head = this.head
  var tail = this.tail
  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev
    walker.prev = walker.next
    walker.next = p
  }
  this.head = tail
  this.tail = head
  return this
}

function insert (self, node, value) {
  var inserted = node === self.head ?
    new Node(value, null, node, self) :
    new Node(value, node, node.next, self)

  if (inserted.next === null) {
    self.tail = inserted
  }
  if (inserted.prev === null) {
    self.head = inserted
  }

  self.length++

  return inserted
}

function push (self, item) {
  self.tail = new Node(item, self.tail, null, self)
  if (!self.head) {
    self.head = self.tail
  }
  self.length++
}

function unshift (self, item) {
  self.head = new Node(item, null, self.head, self)
  if (!self.tail) {
    self.tail = self.head
  }
  self.length++
}

function Node (value, prev, next, list) {
  if (!(this instanceof Node)) {
    return new Node(value, prev, next, list)
  }

  this.list = list
  this.value = value

  if (prev) {
    prev.next = this
    this.prev = prev
  } else {
    this.prev = null
  }

  if (next) {
    next.prev = this
    this.next = next
  } else {
    this.next = null
  }
}

try {
  // add if support for Symbol.iterator is present
  __webpack_require__(99976)(Yallist)
} catch (er) {}


/***/ }),

/***/ 30953:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];
var fs = __webpack_require__(69088);
var Transform = (__webpack_require__(83424).Transform);
var PassThrough = (__webpack_require__(83424).PassThrough);
var zlib = __webpack_require__(7819);
var util = __webpack_require__(71323);
var EventEmitter = (__webpack_require__(50343).EventEmitter);
var crc32 = __webpack_require__(47857);

exports.ZipFile = ZipFile;
exports.dateToDosDateTime = dateToDosDateTime;

util.inherits(ZipFile, EventEmitter);
function ZipFile() {
  this.outputStream = new PassThrough();
  this.entries = [];
  this.outputStreamCursor = 0;
  this.ended = false; // .end() sets this
  this.allDone = false; // set when we've written the last bytes
  this.forceZip64Eocd = false; // configurable in .end()
}

ZipFile.prototype.addFile = function(realPath, metadataPath, options) {
  var self = this;
  metadataPath = validateMetadataPath(metadataPath, false);
  if (options == null) options = {};

  var entry = new Entry(metadataPath, false, options);
  self.entries.push(entry);
  fs.stat(realPath, function(err, stats) {
    if (err) return self.emit("error", err);
    if (!stats.isFile()) return self.emit("error", new Error("not a file: " + realPath));
    entry.uncompressedSize = stats.size;
    if (options.mtime == null) entry.setLastModDate(stats.mtime);
    if (options.mode == null) entry.setFileAttributesMode(stats.mode);
    entry.setFileDataPumpFunction(function() {
      var readStream = fs.createReadStream(realPath);
      entry.state = Entry.FILE_DATA_IN_PROGRESS;
      readStream.on("error", function(err) {
        self.emit("error", err);
      });
      pumpFileDataReadStream(self, entry, readStream);
    });
    pumpEntries(self);
  });
};

ZipFile.prototype.addReadStream = function(readStream, metadataPath, options) {
  var self = this;
  metadataPath = validateMetadataPath(metadataPath, false);
  if (options == null) options = {};
  var entry = new Entry(metadataPath, false, options);
  self.entries.push(entry);
  entry.setFileDataPumpFunction(function() {
    entry.state = Entry.FILE_DATA_IN_PROGRESS;
    pumpFileDataReadStream(self, entry, readStream);
  });
  pumpEntries(self);
};

ZipFile.prototype.addBuffer = function(buffer, metadataPath, options) {
  var self = this;
  metadataPath = validateMetadataPath(metadataPath, false);
  if (buffer.length > 0x3fffffff) throw new Error("buffer too large: " + buffer.length + " > " + 0x3fffffff);
  if (options == null) options = {};
  if (options.size != null) throw new Error("options.size not allowed");
  var entry = new Entry(metadataPath, false, options);
  entry.uncompressedSize = buffer.length;
  entry.crc32 = crc32.unsigned(buffer);
  entry.crcAndFileSizeKnown = true;
  self.entries.push(entry);
  if (!entry.compress) {
    setCompressedBuffer(buffer);
  } else {
    zlib.deflateRaw(buffer, function(err, compressedBuffer) {
      setCompressedBuffer(compressedBuffer);
    });
  }
  function setCompressedBuffer(compressedBuffer) {
    entry.compressedSize = compressedBuffer.length;
    entry.setFileDataPumpFunction(function() {
      writeToOutputStream(self, compressedBuffer);
      writeToOutputStream(self, entry.getDataDescriptor());
      entry.state = Entry.FILE_DATA_DONE;

      // don't call pumpEntries() recursively.
      // (also, don't call process.nextTick recursively.)
      setImmediate(function() {
        pumpEntries(self);
      });
    });
    pumpEntries(self);
  }
};

ZipFile.prototype.addEmptyDirectory = function(metadataPath, options) {
  var self = this;
  metadataPath = validateMetadataPath(metadataPath, true);
  if (options == null) options = {};
  if (options.size != null) throw new Error("options.size not allowed");
  if (options.compress != null) throw new Error("options.compress not allowed");
  var entry = new Entry(metadataPath, true, options);
  self.entries.push(entry);
  entry.setFileDataPumpFunction(function() {
    writeToOutputStream(self, entry.getDataDescriptor());
    entry.state = Entry.FILE_DATA_DONE;
    pumpEntries(self);
  });
  pumpEntries(self);
};

var eocdrSignatureBuffer = bufferFrom([0x50, 0x4b, 0x05, 0x06]);

ZipFile.prototype.end = function(options, finalSizeCallback) {
  if (typeof options === "function") {
    finalSizeCallback = options;
    options = null;
  }
  if (options == null) options = {};
  if (this.ended) return;
  this.ended = true;
  this.finalSizeCallback = finalSizeCallback;
  this.forceZip64Eocd = !!options.forceZip64Format;
  if (options.comment) {
    if (typeof options.comment === "string") {
      this.comment = encodeCp437(options.comment);
    } else {
      // It should be a Buffer
      this.comment = options.comment;
    }
    if (this.comment.length > 0xffff) throw new Error("comment is too large");
    // gotta check for this, because the zipfile format is actually ambiguous.
    if (bufferIncludes(this.comment, eocdrSignatureBuffer)) throw new Error("comment contains end of central directory record signature");
  } else {
    // no comment.
    this.comment = EMPTY_BUFFER;
  }
  pumpEntries(this);
};

function writeToOutputStream(self, buffer) {
  self.outputStream.write(buffer);
  self.outputStreamCursor += buffer.length;
}

function pumpFileDataReadStream(self, entry, readStream) {
  var crc32Watcher = new Crc32Watcher();
  var uncompressedSizeCounter = new ByteCounter();
  var compressor = entry.compress ? new zlib.DeflateRaw() : new PassThrough();
  var compressedSizeCounter = new ByteCounter();
  readStream.pipe(crc32Watcher)
            .pipe(uncompressedSizeCounter)
            .pipe(compressor)
            .pipe(compressedSizeCounter)
            .pipe(self.outputStream, {end: false});
  compressedSizeCounter.on("end", function() {
    entry.crc32 = crc32Watcher.crc32;
    if (entry.uncompressedSize == null) {
      entry.uncompressedSize = uncompressedSizeCounter.byteCount;
    } else {
      if (entry.uncompressedSize !== uncompressedSizeCounter.byteCount) return self.emit("error", new Error("file data stream has unexpected number of bytes"));
    }
    entry.compressedSize = compressedSizeCounter.byteCount;
    self.outputStreamCursor += entry.compressedSize;
    writeToOutputStream(self, entry.getDataDescriptor());
    entry.state = Entry.FILE_DATA_DONE;
    pumpEntries(self);
  });
}

function pumpEntries(self) {
  if (self.allDone) return;
  // first check if finalSize is finally known
  if (self.ended && self.finalSizeCallback != null) {
    var finalSize = calculateFinalSize(self);
    if (finalSize != null) {
      // we have an answer
      self.finalSizeCallback(finalSize);
      self.finalSizeCallback = null;
    }
  }

  // pump entries
  var entry = getFirstNotDoneEntry();
  function getFirstNotDoneEntry() {
    for (var i = 0; i < self.entries.length; i++) {
      var entry = self.entries[i];
      if (entry.state < Entry.FILE_DATA_DONE) return entry;
    }
    return null;
  }
  if (entry != null) {
    // this entry is not done yet
    if (entry.state < Entry.READY_TO_PUMP_FILE_DATA) return; // input file not open yet
    if (entry.state === Entry.FILE_DATA_IN_PROGRESS) return; // we'll get there
    // start with local file header
    entry.relativeOffsetOfLocalHeader = self.outputStreamCursor;
    var localFileHeader = entry.getLocalFileHeader();
    writeToOutputStream(self, localFileHeader);
    entry.doFileDataPump();
  } else {
    // all cought up on writing entries
    if (self.ended) {
      // head for the exit
      self.offsetOfStartOfCentralDirectory = self.outputStreamCursor;
      self.entries.forEach(function(entry) {
        var centralDirectoryRecord = entry.getCentralDirectoryRecord();
        writeToOutputStream(self, centralDirectoryRecord);
      });
      writeToOutputStream(self, getEndOfCentralDirectoryRecord(self));
      self.outputStream.end();
      self.allDone = true;
    }
  }
}

function calculateFinalSize(self) {
  var pretendOutputCursor = 0;
  var centralDirectorySize = 0;
  for (var i = 0; i < self.entries.length; i++) {
    var entry = self.entries[i];
    // compression is too hard to predict
    if (entry.compress) return -1;
    if (entry.state >= Entry.READY_TO_PUMP_FILE_DATA) {
      // if addReadStream was called without providing the size, we can't predict the final size
      if (entry.uncompressedSize == null) return -1;
    } else {
      // if we're still waiting for fs.stat, we might learn the size someday
      if (entry.uncompressedSize == null) return null;
    }
    // we know this for sure, and this is important to know if we need ZIP64 format.
    entry.relativeOffsetOfLocalHeader = pretendOutputCursor;
    var useZip64Format = entry.useZip64Format();

    pretendOutputCursor += LOCAL_FILE_HEADER_FIXED_SIZE + entry.utf8FileName.length;
    pretendOutputCursor += entry.uncompressedSize;
    if (!entry.crcAndFileSizeKnown) {
      // use a data descriptor
      if (useZip64Format) {
        pretendOutputCursor += ZIP64_DATA_DESCRIPTOR_SIZE;
      } else {
        pretendOutputCursor += DATA_DESCRIPTOR_SIZE;
      }
    }

    centralDirectorySize += CENTRAL_DIRECTORY_RECORD_FIXED_SIZE + entry.utf8FileName.length + entry.fileComment.length;
    if (useZip64Format) {
      centralDirectorySize += ZIP64_EXTENDED_INFORMATION_EXTRA_FIELD_SIZE;
    }
  }

  var endOfCentralDirectorySize = 0;
  if (self.forceZip64Eocd ||
      self.entries.length >= 0xffff ||
      centralDirectorySize >= 0xffff ||
      pretendOutputCursor >= 0xffffffff) {
    // use zip64 end of central directory stuff
    endOfCentralDirectorySize += ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIZE + ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIZE;
  }
  endOfCentralDirectorySize += END_OF_CENTRAL_DIRECTORY_RECORD_SIZE + self.comment.length;
  return pretendOutputCursor + centralDirectorySize + endOfCentralDirectorySize;
}

var ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIZE = 56;
var ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIZE = 20;
var END_OF_CENTRAL_DIRECTORY_RECORD_SIZE = 22;
function getEndOfCentralDirectoryRecord(self, actuallyJustTellMeHowLongItWouldBe) {
  var needZip64Format = false;
  var normalEntriesLength = self.entries.length;
  if (self.forceZip64Eocd || self.entries.length >= 0xffff) {
    normalEntriesLength = 0xffff;
    needZip64Format = true;
  }
  var sizeOfCentralDirectory = self.outputStreamCursor - self.offsetOfStartOfCentralDirectory;
  var normalSizeOfCentralDirectory = sizeOfCentralDirectory;
  if (self.forceZip64Eocd || sizeOfCentralDirectory >= 0xffffffff) {
    normalSizeOfCentralDirectory = 0xffffffff;
    needZip64Format = true;
  }
  var normalOffsetOfStartOfCentralDirectory = self.offsetOfStartOfCentralDirectory;
  if (self.forceZip64Eocd || self.offsetOfStartOfCentralDirectory >= 0xffffffff) {
    normalOffsetOfStartOfCentralDirectory = 0xffffffff;
    needZip64Format = true;
  }
  if (actuallyJustTellMeHowLongItWouldBe) {
    if (needZip64Format) {
      return (
        ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIZE +
        ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIZE +
        END_OF_CENTRAL_DIRECTORY_RECORD_SIZE
      );
    } else {
      return END_OF_CENTRAL_DIRECTORY_RECORD_SIZE;
    }
  }

  var eocdrBuffer = bufferAlloc(END_OF_CENTRAL_DIRECTORY_RECORD_SIZE + self.comment.length);
  // end of central dir signature                       4 bytes  (0x06054b50)
  eocdrBuffer.writeUInt32LE(0x06054b50, 0);
  // number of this disk                                2 bytes
  eocdrBuffer.writeUInt16LE(0, 4);
  // number of the disk with the start of the central directory  2 bytes
  eocdrBuffer.writeUInt16LE(0, 6);
  // total number of entries in the central directory on this disk  2 bytes
  eocdrBuffer.writeUInt16LE(normalEntriesLength, 8);
  // total number of entries in the central directory   2 bytes
  eocdrBuffer.writeUInt16LE(normalEntriesLength, 10);
  // size of the central directory                      4 bytes
  eocdrBuffer.writeUInt32LE(normalSizeOfCentralDirectory, 12);
  // offset of start of central directory with respect to the starting disk number  4 bytes
  eocdrBuffer.writeUInt32LE(normalOffsetOfStartOfCentralDirectory, 16);
  // .ZIP file comment length                           2 bytes
  eocdrBuffer.writeUInt16LE(self.comment.length, 20);
  // .ZIP file comment                                  (variable size)
  self.comment.copy(eocdrBuffer, 22);

  if (!needZip64Format) return eocdrBuffer;

  // ZIP64 format
  // ZIP64 End of Central Directory Record
  var zip64EocdrBuffer = bufferAlloc(ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIZE);
  // zip64 end of central dir signature                                             4 bytes  (0x06064b50)
  zip64EocdrBuffer.writeUInt32LE(0x06064b50, 0);
  // size of zip64 end of central directory record                                  8 bytes
  writeUInt64LE(zip64EocdrBuffer, ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIZE - 12, 4);
  // version made by                                                                2 bytes
  zip64EocdrBuffer.writeUInt16LE(VERSION_MADE_BY, 12);
  // version needed to extract                                                      2 bytes
  zip64EocdrBuffer.writeUInt16LE(VERSION_NEEDED_TO_EXTRACT_ZIP64, 14);
  // number of this disk                                                            4 bytes
  zip64EocdrBuffer.writeUInt32LE(0, 16);
  // number of the disk with the start of the central directory                     4 bytes
  zip64EocdrBuffer.writeUInt32LE(0, 20);
  // total number of entries in the central directory on this disk                  8 bytes
  writeUInt64LE(zip64EocdrBuffer, self.entries.length, 24);
  // total number of entries in the central directory                               8 bytes
  writeUInt64LE(zip64EocdrBuffer, self.entries.length, 32);
  // size of the central directory                                                  8 bytes
  writeUInt64LE(zip64EocdrBuffer, sizeOfCentralDirectory, 40);
  // offset of start of central directory with respect to the starting disk number  8 bytes
  writeUInt64LE(zip64EocdrBuffer, self.offsetOfStartOfCentralDirectory, 48);
  // zip64 extensible data sector                                                   (variable size)
  // nothing in the zip64 extensible data sector


  // ZIP64 End of Central Directory Locator
  var zip64EocdlBuffer = bufferAlloc(ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIZE);
  // zip64 end of central dir locator signature                               4 bytes  (0x07064b50)
  zip64EocdlBuffer.writeUInt32LE(0x07064b50, 0);
  // number of the disk with the start of the zip64 end of central directory  4 bytes
  zip64EocdlBuffer.writeUInt32LE(0, 4);
  // relative offset of the zip64 end of central directory record             8 bytes
  writeUInt64LE(zip64EocdlBuffer, self.outputStreamCursor, 8);
  // total number of disks                                                    4 bytes
  zip64EocdlBuffer.writeUInt32LE(1, 16);


  return Buffer.concat([
    zip64EocdrBuffer,
    zip64EocdlBuffer,
    eocdrBuffer,
  ]);
}

function validateMetadataPath(metadataPath, isDirectory) {
  if (metadataPath === "") throw new Error("empty metadataPath");
  metadataPath = metadataPath.replace(/\\/g, "/");
  if (/^[a-zA-Z]:/.test(metadataPath) || /^\//.test(metadataPath)) throw new Error("absolute path: " + metadataPath);
  if (metadataPath.split("/").indexOf("..") !== -1) throw new Error("invalid relative path: " + metadataPath);
  var looksLikeDirectory = /\/$/.test(metadataPath);
  if (isDirectory) {
    // append a trailing '/' if necessary.
    if (!looksLikeDirectory) metadataPath += "/";
  } else {
    if (looksLikeDirectory) throw new Error("file path cannot end with '/': " + metadataPath);
  }
  return metadataPath;
}

var EMPTY_BUFFER = bufferAlloc(0);

// this class is not part of the public API
function Entry(metadataPath, isDirectory, options) {
  this.utf8FileName = bufferFrom(metadataPath);
  if (this.utf8FileName.length > 0xffff) throw new Error("utf8 file name too long. " + utf8FileName.length + " > " + 0xffff);
  this.isDirectory = isDirectory;
  this.state = Entry.WAITING_FOR_METADATA;
  this.setLastModDate(options.mtime != null ? options.mtime : new Date());
  if (options.mode != null) {
    this.setFileAttributesMode(options.mode);
  } else {
    this.setFileAttributesMode(isDirectory ? 0o40775 : 0o100664);
  }
  if (isDirectory) {
    this.crcAndFileSizeKnown = true;
    this.crc32 = 0;
    this.uncompressedSize = 0;
    this.compressedSize = 0;
  } else {
    // unknown so far
    this.crcAndFileSizeKnown = false;
    this.crc32 = null;
    this.uncompressedSize = null;
    this.compressedSize = null;
    if (options.size != null) this.uncompressedSize = options.size;
  }
  if (isDirectory) {
    this.compress = false;
  } else {
    this.compress = true; // default
    if (options.compress != null) this.compress = !!options.compress;
  }
  this.forceZip64Format = !!options.forceZip64Format;
  if (options.fileComment) {
    if (typeof options.fileComment === "string") {
      this.fileComment = bufferFrom(options.fileComment, "utf-8");
    } else {
      // It should be a Buffer
      this.fileComment = options.fileComment;
    }
    if (this.fileComment.length > 0xffff) throw new Error("fileComment is too large");
  } else {
    // no comment.
    this.fileComment = EMPTY_BUFFER;
  }
}
Entry.WAITING_FOR_METADATA = 0;
Entry.READY_TO_PUMP_FILE_DATA = 1;
Entry.FILE_DATA_IN_PROGRESS = 2;
Entry.FILE_DATA_DONE = 3;
Entry.prototype.setLastModDate = function(date) {
  var dosDateTime = dateToDosDateTime(date);
  this.lastModFileTime = dosDateTime.time;
  this.lastModFileDate = dosDateTime.date;
};
Entry.prototype.setFileAttributesMode = function(mode) {
  if ((mode & 0xffff) !== mode) throw new Error("invalid mode. expected: 0 <= " + mode + " <= " + 0xffff);
  // http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute/14727#14727
  this.externalFileAttributes = (mode << 16) >>> 0;
};
// doFileDataPump() should not call pumpEntries() directly. see issue #9.
Entry.prototype.setFileDataPumpFunction = function(doFileDataPump) {
  this.doFileDataPump = doFileDataPump;
  this.state = Entry.READY_TO_PUMP_FILE_DATA;
};
Entry.prototype.useZip64Format = function() {
  return (
    (this.forceZip64Format) ||
    (this.uncompressedSize != null && this.uncompressedSize > 0xfffffffe) ||
    (this.compressedSize != null && this.compressedSize > 0xfffffffe) ||
    (this.relativeOffsetOfLocalHeader != null && this.relativeOffsetOfLocalHeader > 0xfffffffe)
  );
}
var LOCAL_FILE_HEADER_FIXED_SIZE = 30;
var VERSION_NEEDED_TO_EXTRACT_UTF8 = 20;
var VERSION_NEEDED_TO_EXTRACT_ZIP64 = 45;
// 3 = unix. 63 = spec version 6.3
var VERSION_MADE_BY = (3 << 8) | 63;
var FILE_NAME_IS_UTF8 = 1 << 11;
var UNKNOWN_CRC32_AND_FILE_SIZES = 1 << 3;
Entry.prototype.getLocalFileHeader = function() {
  var crc32 = 0;
  var compressedSize = 0;
  var uncompressedSize = 0;
  if (this.crcAndFileSizeKnown) {
    crc32 = this.crc32;
    compressedSize = this.compressedSize;
    uncompressedSize = this.uncompressedSize;
  }

  var fixedSizeStuff = bufferAlloc(LOCAL_FILE_HEADER_FIXED_SIZE);
  var generalPurposeBitFlag = FILE_NAME_IS_UTF8;
  if (!this.crcAndFileSizeKnown) generalPurposeBitFlag |= UNKNOWN_CRC32_AND_FILE_SIZES;

  // local file header signature     4 bytes  (0x04034b50)
  fixedSizeStuff.writeUInt32LE(0x04034b50, 0);
  // version needed to extract       2 bytes
  fixedSizeStuff.writeUInt16LE(VERSION_NEEDED_TO_EXTRACT_UTF8, 4);
  // general purpose bit flag        2 bytes
  fixedSizeStuff.writeUInt16LE(generalPurposeBitFlag, 6);
  // compression method              2 bytes
  fixedSizeStuff.writeUInt16LE(this.getCompressionMethod(), 8);
  // last mod file time              2 bytes
  fixedSizeStuff.writeUInt16LE(this.lastModFileTime, 10);
  // last mod file date              2 bytes
  fixedSizeStuff.writeUInt16LE(this.lastModFileDate, 12);
  // crc-32                          4 bytes
  fixedSizeStuff.writeUInt32LE(crc32, 14);
  // compressed size                 4 bytes
  fixedSizeStuff.writeUInt32LE(compressedSize, 18);
  // uncompressed size               4 bytes
  fixedSizeStuff.writeUInt32LE(uncompressedSize, 22);
  // file name length                2 bytes
  fixedSizeStuff.writeUInt16LE(this.utf8FileName.length, 26);
  // extra field length              2 bytes
  fixedSizeStuff.writeUInt16LE(0, 28);
  return Buffer.concat([
    fixedSizeStuff,
    // file name (variable size)
    this.utf8FileName,
    // extra field (variable size)
    // no extra fields
  ]);
};
var DATA_DESCRIPTOR_SIZE = 16;
var ZIP64_DATA_DESCRIPTOR_SIZE = 24;
Entry.prototype.getDataDescriptor = function() {
  if (this.crcAndFileSizeKnown) {
    // the Mac Archive Utility requires this not be present unless we set general purpose bit 3
    return EMPTY_BUFFER;
  }
  if (!this.useZip64Format()) {
    var buffer = bufferAlloc(DATA_DESCRIPTOR_SIZE);
    // optional signature (required according to Archive Utility)
    buffer.writeUInt32LE(0x08074b50, 0);
    // crc-32                          4 bytes
    buffer.writeUInt32LE(this.crc32, 4);
    // compressed size                 4 bytes
    buffer.writeUInt32LE(this.compressedSize, 8);
    // uncompressed size               4 bytes
    buffer.writeUInt32LE(this.uncompressedSize, 12);
    return buffer;
  } else {
    // ZIP64 format
    var buffer = bufferAlloc(ZIP64_DATA_DESCRIPTOR_SIZE);
    // optional signature (unknown if anyone cares about this)
    buffer.writeUInt32LE(0x08074b50, 0);
    // crc-32                          4 bytes
    buffer.writeUInt32LE(this.crc32, 4);
    // compressed size                 8 bytes
    writeUInt64LE(buffer, this.compressedSize, 8);
    // uncompressed size               8 bytes
    writeUInt64LE(buffer, this.uncompressedSize, 16);
    return buffer;
  }
};
var CENTRAL_DIRECTORY_RECORD_FIXED_SIZE = 46;
var ZIP64_EXTENDED_INFORMATION_EXTRA_FIELD_SIZE = 28;
Entry.prototype.getCentralDirectoryRecord = function() {
  var fixedSizeStuff = bufferAlloc(CENTRAL_DIRECTORY_RECORD_FIXED_SIZE);
  var generalPurposeBitFlag = FILE_NAME_IS_UTF8;
  if (!this.crcAndFileSizeKnown) generalPurposeBitFlag |= UNKNOWN_CRC32_AND_FILE_SIZES;

  var normalCompressedSize = this.compressedSize;
  var normalUncompressedSize = this.uncompressedSize;
  var normalRelativeOffsetOfLocalHeader = this.relativeOffsetOfLocalHeader;
  var versionNeededToExtract;
  var zeiefBuffer;
  if (this.useZip64Format()) {
    normalCompressedSize = 0xffffffff;
    normalUncompressedSize = 0xffffffff;
    normalRelativeOffsetOfLocalHeader = 0xffffffff;
    versionNeededToExtract = VERSION_NEEDED_TO_EXTRACT_ZIP64;

    // ZIP64 extended information extra field
    zeiefBuffer = bufferAlloc(ZIP64_EXTENDED_INFORMATION_EXTRA_FIELD_SIZE);
    // 0x0001                  2 bytes    Tag for this "extra" block type
    zeiefBuffer.writeUInt16LE(0x0001, 0);
    // Size                    2 bytes    Size of this "extra" block
    zeiefBuffer.writeUInt16LE(ZIP64_EXTENDED_INFORMATION_EXTRA_FIELD_SIZE - 4, 2);
    // Original Size           8 bytes    Original uncompressed file size
    writeUInt64LE(zeiefBuffer, this.uncompressedSize, 4);
    // Compressed Size         8 bytes    Size of compressed data
    writeUInt64LE(zeiefBuffer, this.compressedSize, 12);
    // Relative Header Offset  8 bytes    Offset of local header record
    writeUInt64LE(zeiefBuffer, this.relativeOffsetOfLocalHeader, 20);
    // Disk Start Number       4 bytes    Number of the disk on which this file starts
    // (omit)
  } else {
    versionNeededToExtract = VERSION_NEEDED_TO_EXTRACT_UTF8;
    zeiefBuffer = EMPTY_BUFFER;
  }

  // central file header signature   4 bytes  (0x02014b50)
  fixedSizeStuff.writeUInt32LE(0x02014b50, 0);
  // version made by                 2 bytes
  fixedSizeStuff.writeUInt16LE(VERSION_MADE_BY, 4);
  // version needed to extract       2 bytes
  fixedSizeStuff.writeUInt16LE(versionNeededToExtract, 6);
  // general purpose bit flag        2 bytes
  fixedSizeStuff.writeUInt16LE(generalPurposeBitFlag, 8);
  // compression method              2 bytes
  fixedSizeStuff.writeUInt16LE(this.getCompressionMethod(), 10);
  // last mod file time              2 bytes
  fixedSizeStuff.writeUInt16LE(this.lastModFileTime, 12);
  // last mod file date              2 bytes
  fixedSizeStuff.writeUInt16LE(this.lastModFileDate, 14);
  // crc-32                          4 bytes
  fixedSizeStuff.writeUInt32LE(this.crc32, 16);
  // compressed size                 4 bytes
  fixedSizeStuff.writeUInt32LE(normalCompressedSize, 20);
  // uncompressed size               4 bytes
  fixedSizeStuff.writeUInt32LE(normalUncompressedSize, 24);
  // file name length                2 bytes
  fixedSizeStuff.writeUInt16LE(this.utf8FileName.length, 28);
  // extra field length              2 bytes
  fixedSizeStuff.writeUInt16LE(zeiefBuffer.length, 30);
  // file comment length             2 bytes
  fixedSizeStuff.writeUInt16LE(this.fileComment.length, 32);
  // disk number start               2 bytes
  fixedSizeStuff.writeUInt16LE(0, 34);
  // internal file attributes        2 bytes
  fixedSizeStuff.writeUInt16LE(0, 36);
  // external file attributes        4 bytes
  fixedSizeStuff.writeUInt32LE(this.externalFileAttributes, 38);
  // relative offset of local header 4 bytes
  fixedSizeStuff.writeUInt32LE(normalRelativeOffsetOfLocalHeader, 42);

  return Buffer.concat([
    fixedSizeStuff,
    // file name (variable size)
    this.utf8FileName,
    // extra field (variable size)
    zeiefBuffer,
    // file comment (variable size)
    this.fileComment,
  ]);
};
Entry.prototype.getCompressionMethod = function() {
  var NO_COMPRESSION = 0;
  var DEFLATE_COMPRESSION = 8;
  return this.compress ? DEFLATE_COMPRESSION : NO_COMPRESSION;
};

function dateToDosDateTime(jsDate) {
  var date = 0;
  date |= jsDate.getDate() & 0x1f; // 1-31
  date |= ((jsDate.getMonth() + 1) & 0xf) << 5; // 0-11, 1-12
  date |= ((jsDate.getFullYear() - 1980) & 0x7f) << 9; // 0-128, 1980-2108

  var time = 0;
  time |= Math.floor(jsDate.getSeconds() / 2); // 0-59, 0-29 (lose odd numbers)
  time |= (jsDate.getMinutes() & 0x3f) << 5; // 0-59
  time |= (jsDate.getHours() & 0x1f) << 11; // 0-23

  return {date: date, time: time};
}

function writeUInt64LE(buffer, n, offset) {
  // can't use bitshift here, because JavaScript only allows bitshifting on 32-bit integers.
  var high = Math.floor(n / 0x100000000);
  var low = n % 0x100000000;
  buffer.writeUInt32LE(low, offset);
  buffer.writeUInt32LE(high, offset + 4);
}

function defaultCallback(err) {
  if (err) throw err;
}

util.inherits(ByteCounter, Transform);
function ByteCounter(options) {
  Transform.call(this, options);
  this.byteCount = 0;
}
ByteCounter.prototype._transform = function(chunk, encoding, cb) {
  this.byteCount += chunk.length;
  cb(null, chunk);
};

util.inherits(Crc32Watcher, Transform);
function Crc32Watcher(options) {
  Transform.call(this, options);
  this.crc32 = 0;
}
Crc32Watcher.prototype._transform = function(chunk, encoding, cb) {
  this.crc32 = crc32.unsigned(chunk, this.crc32);
  cb(null, chunk);
};

var cp437 = '\u0000☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ';
if (cp437.length !== 256) throw new Error("assertion failure");
var reverseCp437 = null;

function encodeCp437(string) {
  if (/^[\x20-\x7e]*$/.test(string)) {
    // CP437, ASCII, and UTF-8 overlap in this range.
    return bufferFrom(string, "utf-8");
  }

  // This is the slow path.
  if (reverseCp437 == null) {
    // cache this once
    reverseCp437 = {};
    for (var i = 0; i < cp437.length; i++) {
      reverseCp437[cp437[i]] = i;
    }
  }

  var result = bufferAlloc(string.length);
  for (var i = 0; i < string.length; i++) {
    var b = reverseCp437[string[i]];
    if (b == null) throw new Error("character not encodable in CP437: " + JSON.stringify(string[i]));
    result[i] = b;
  }

  return result;
}

function bufferAlloc(size) {
  bufferAlloc = modern;
  try {
    return bufferAlloc(size);
  } catch (e) {
    bufferAlloc = legacy;
    return bufferAlloc(size);
  }
  function modern(size) {
    return Buffer.allocUnsafe(size);
  }
  function legacy(size) {
    return new Buffer(size);
  }
}
function bufferFrom(something, encoding) {
  bufferFrom = modern;
  try {
    return bufferFrom(something, encoding);
  } catch (e) {
    bufferFrom = legacy;
    return bufferFrom(something, encoding);
  }
  function modern(something, encoding) {
    return Buffer.from(something, encoding);
  }
  function legacy(something, encoding) {
    return new Buffer(something, encoding);
  }
}
function bufferIncludes(buffer, content) {
  bufferIncludes = modern;
  try {
    return bufferIncludes(buffer, content);
  } catch (e) {
    bufferIncludes = legacy;
    return bufferIncludes(buffer, content);
  }
  function modern(buffer, content) {
    return buffer.includes(content);
  }
  function legacy(buffer, content) {
    for (var i = 0; i <= buffer.length - content.length; i++) {
      for (var j = 0;; j++) {
        if (j === content.length) return true;
        if (buffer[i + j] !== content[j]) break;
      }
    }
    return false;
  }
}


/***/ }),

/***/ 24004:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOrCreatePerformance = exports.initializePerformanceInstance = exports.Performance = void 0;
const performance_ponyfill_1 = __webpack_require__(58265);
const vscode_jsonrpc_1 = __webpack_require__(83730);
const vscs_utils_1 = __webpack_require__(19745);
const WaterfallNode_1 = __webpack_require__(17895);
const PerformanceBlocks_1 = __webpack_require__(87522);
/**
 * Main performance measurement class. Meant do be used recusively,
 * e.g. every `createGroup` mathod call will return the instance of
 * the same class which is linked to the parent. This allows to create
 * callstack-like performance trees or waterfalls.
 */
class Performance {
    constructor(name, groupId, pathString = 'start') {
        this.name = name;
        this.groupId = groupId;
        this.pathString = pathString;
        this.groups = [];
        this.onAnyEventEmitter = new vscode_jsonrpc_1.Emitter();
        this.onAnyEvent = this.onAnyEventEmitter.event;
        /**
         * Create the child subgroup of the current group.
         * All the performance groups must have the reference to the top-level performance
         * class, since searching for any of the group/event ids should be possible from any
         * of the performance groups.
         */
        this.createGroup = (groupName, groupdId = Performance.groupCount++) => {
            const pathString = `${this.pathString}.${groupName}.${this.groupId}`;
            const newGroup = new Performance(groupName, groupdId, pathString);
            newGroup.setMainPerformance(this.main);
            newGroup.onAnyEvent((e) => {
                this.onAnyEventEmitter.fire(e);
            });
            this.groups.push(newGroup);
            return newGroup;
        };
        /**
         * Marks `start` or `end` point of a code block that need to be measured
         * in between. see `blocks.markBlock` method note for man example.
         */
        this.markBlock = (blockOptions) => {
            this.blocks.markBlock(blockOptions);
            return this;
        };
        /**
         * Marks `start` point of a code block that need to be measured
         * in between. see `blocks.markBlock` method note for man example.
         */
        this.markBlockStart = (blockOptions, ignoreExistingBlock = false) => {
            try {
                this.blocks.markBlockStart(blockOptions);
            }
            catch (e) {
                if (!ignoreExistingBlock) {
                    throw e;
                }
            }
            return this;
        };
        /**
         * Marks `end` point of a code block that need to be measured
         * in between. see `blocks.markBlock` method note for man example.
         */
        this.markBlockEnd = (blockOptions, ignoreExistingBlock = false) => {
            try {
                this.blocks.markBlockEnd(blockOptions);
            }
            catch (e) {
                if (!ignoreExistingBlock) {
                    throw e;
                }
            }
            return this;
        };
        /**
         * Convenience method for the `markBlock` method. Instead of calling
         * the `markBlock` twice, the `measure` can wrap the code block of interest
         * into an asynchronous function hence be called only once.
         */
        this.measure = (options, callback) => __awaiter(this, void 0, void 0, function* () {
            return yield this.blocks.measure(options, callback);
        });
        /**
         * Sync version of the `measure`.
         */
        this.measureSync = (options, callback) => {
            return this.blocks.measureSync(options, callback);
        };
        /**
         * Get waterfall of all the nested performance blocks, starting from the main
         * "start" root node that is initialized as singleton when app starts.
         */
        this.getWaterfall = () => {
            performance_ponyfill_1.performance.measure(this.pathString, this.pathString);
            const [measure] = performance_ponyfill_1.performance.getEntriesByName(this.pathString);
            const node = new WaterfallNode_1.WaterfallNode(this.groupId, this.name, this.pathString, measure, this.blocks.measures(), this.groups);
            return node;
        };
        /**
         * Get a measurement of a specific block by `id`.
         */
        this.getBlockMeasure = (id, waterfall) => {
            waterfall = waterfall !== null && waterfall !== void 0 ? waterfall : this.main.getWaterfall();
            if (waterfall.id === id) {
                return waterfall;
            }
            for (let group of waterfall.groups) {
                const result = this.getBlockMeasure(id, group);
                if (result) {
                    return result;
                }
            }
            return null;
        };
        this.getBlock = (id) => {
            return this.blocks.getBlock(id);
        };
        /**
         * Get block `startTime` by block `id` or `null` if block is not found.
         */
        this.getBlockStartTime = (id) => {
            const block = this.main.getBlockMeasure(id);
            if (!block) {
                return null;
            }
            const { measure } = block;
            return measure.startTime;
        };
        /**
         * Get block `endTime` by block `id` or `null` if block is not found.
         */
        this.getBlockEndTime = (id) => {
            const block = this.main.getBlockMeasure(id);
            if (!block) {
                return null;
            }
            const { measure } = block;
            return measure.startTime + measure.duration;
        };
        /**
         * Get block `durationTime` by block `id` or `null` if block is not found.
         */
        this.getBlockDurationTime = (id) => {
            const block = this.main.getBlockMeasure(id);
            if (!block) {
                return null;
            }
            const { measure } = block;
            return measure.duration;
        };
        this.blocks = new PerformanceBlocks_1.PerformanceBlocks(pathString);
        performance_ponyfill_1.performance.mark(pathString);
        // set self as "main" performance initialy
        this.mainPerformanceReference = this;
        this.blocks.onAnyEvent((e) => {
            this.onAnyEventEmitter.fire(e);
        });
    }
    setMainPerformance(performance) {
        this.mainPerformanceReference = performance;
    }
    get main() {
        if (!this.mainPerformanceReference) {
            throw new Error('No main performance found.');
        }
        return this.mainPerformanceReference;
    }
    /**
     * Subscribe to `start` or `end` events of a block by `id`.
     */
    onEvent(options, callback) {
        this.blocks.onEvent(options, (opts) => {
            const { id, type } = opts;
            if (type === 'start') {
                callback(opts);
                return this;
            }
            const node = this.getBlockMeasure(id);
            if (!node) {
                throw new Error(`Cannot find "${id}" block.`);
            }
            callback(opts, node);
        });
        return this;
    }
    /**
     * Subscribe to `start` or `end` events of a block by `id`.
     */
    onMeasure(options, callback) {
        this.blocks.onEvent(options, (opts) => {
            const { id, type } = opts;
            if (type === 'start') {
                callback(opts);
                return this;
            }
            const node = this.getBlockMeasure(id);
            if (!node) {
                throw new Error(`Cannot find "${id}" block.`);
            }
            callback(opts, node);
        });
        return this;
    }
}
exports.Performance = Performance;
Performance.groupCount = 0;
/**
 * Function to initialize the main performance singleton class, meant to be
 * called on the app startup.a
 */
const initializePerformanceInstance = (groupdId, PerformanceClass = Performance) => {
    const codespacePerformance = new PerformanceClass('start', groupdId);
    codespacePerformance.setMainPerformance(codespacePerformance);
    return codespacePerformance;
};
exports.initializePerformanceInstance = initializePerformanceInstance;
/**
 * Get or create an instance of Performance for the group ID (default is 'extension:start').
 * Throws an error if group ID is empty or undefined, or performance has already been initialized with a different group ID.
 *
 * @param groupId Group id, by default it is 'extension:start'
 * @returns Created or existing instance of Performance with the given group ID.
 */
exports.getOrCreatePerformance = (0, vscs_utils_1.onlyOnce)((groupId) => (0, exports.initializePerformanceInstance)(groupId), 'extension:start');
//# sourceMappingURL=Performance.js.map

/***/ }),

/***/ 87522:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PerformanceBlocks = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
const performance_ponyfill_1 = __webpack_require__(58265);
/**
 * Utility class to abstract methods around mesuaring performance blocks.
 */
class PerformanceBlocks {
    /**
     * The `pathString` param used to define a full path of a block in
     * the nested blocks tree. Hence the path includes the paths of all
     * parents of the current block in the nested tree.
     */
    constructor(pathString) {
        this.pathString = pathString;
        this.blocks = {};
        /**
         * Events for any block `start`/`end` event.
         */
        this.onAnyEventEmitter = new vscode_jsonrpc_1.Emitter();
        this.onAnyEvent = this.onAnyEventEmitter.event;
        /**
         * Mark a `start` or `end` of a code block to measure. Must include
         * a name and can include `id` in case the block measurements need to
         * be retrieved later.
         *
         * Example:
         *
         * ```typescript
         * performanceBlocks.markBlock({ name: 'fetching info', type: 'start' });
         * // .. do some work
         * performanceBlocks.markBlock({ name: 'fetching info', type: 'end' });
         * ```
         * If id is not defined, name for the `start` and `end` should be equal.
         * Each `start` or `end` block with the same `name`/`id` expected to be
         * called once.
         */
        this.markBlock = (blockOptions) => {
            const { id, name, type } = blockOptions;
            // get unique block id
            const blockPath = `${this.pathString}.block: ${id !== null && id !== void 0 ? id : name}`;
            // get unique block id for the side (`start`/`end`) of the block
            const pathStringSide = `${blockPath}-${type}`;
            if (this.blocks[blockPath] && this.blocks[blockPath][type]) {
                throw new Error(`The event "${pathStringSide}" already marked in this group.`);
            }
            performance_ponyfill_1.performance.mark(pathStringSide);
            const [measure] = performance_ponyfill_1.performance.getEntriesByName(pathStringSide);
            const currentBlock = this.blocks[blockPath] || {
                path: blockPath,
                id: type === 'start' ? id : undefined,
                name: type === 'start' ? name : undefined,
            };
            currentBlock[blockOptions.type] = Object.assign(Object.assign({}, blockOptions), { path: pathStringSide });
            this.blocks[blockPath] = currentBlock;
            // only elements with id can have event listeners
            if (id && measure !== undefined) {
                const event = { id, name, type, measure };
                /**
                 * For the `end` event types, the measure ``
                 */
                if (type === 'end') {
                    const [startMeasure] = performance_ponyfill_1.performance.getEntriesByName(`${blockPath}-start`);
                    if (!startMeasure) {
                        throw new Error(`No start block found for event ${id}`);
                    }
                    event.measure = Object.assign(Object.assign({}, measure), { duration: measure.startTime - startMeasure.startTime });
                }
                this.onAnyEventEmitter.fire(event);
                this.invokeBlock(event);
            }
            return this;
        };
        /**
         * Mark the beginning of the block, same as above with `type: 'start'`
         */
        this.markBlockStart = (blockOptions) => {
            return this.markBlock(Object.assign({ type: 'start' }, blockOptions));
        };
        /**
         * Mark the end of the block, same as above with `type: 'end'`
         */
        this.markBlockEnd = (blockOptions) => {
            return this.markBlock(Object.assign({ type: 'end' }, blockOptions));
        };
        this.getBlock = (id) => {
            const blockPath = `${this.pathString}.block: ${id}`;
            const block = this.blocks[blockPath];
            if (!block) {
                return undefined;
            }
            return block;
        };
        /**
         * Convenience method around the `markBlock` since that later has to be
         * called twice - once for `start` and once for `end`, we created this
         * wrapper method that does that for the user.
         */
        this.measure = (options, callback) => __awaiter(this, void 0, void 0, function* () {
            this.markBlock(Object.assign(Object.assign({}, options), { type: 'start' }));
            try {
                return yield callback();
            }
            finally {
                this.markBlock(Object.assign(Object.assign({}, options), { type: 'end' }));
            }
        });
        /**
         * Sync version of the `measure`.
         */
        this.measureSync = (options, callback) => {
            this.markBlock(Object.assign(Object.assign({}, options), { type: 'start' }));
            try {
                return callback();
            }
            finally {
                this.markBlock(Object.assign(Object.assign({}, options), { type: 'end' }));
            }
        };
        /**
         * Method to calculate(measure) all the currently tracked timing blocks.
         */
        this.measures = () => {
            const blocks = [];
            for (let [id, block] of Object.entries(this.blocks)) {
                const { start, end } = block;
                if (!start || !end) {
                    continue;
                }
                performance_ponyfill_1.performance.measure(block.path, `${start.path}`, `${end.path}`);
                const [measure] = performance_ponyfill_1.performance.getEntriesByName(block.path);
                if (!measure) {
                    throw new Error(`No measure found in Performance API for "${id}".`);
                }
                blocks.push({
                    id: block.id,
                    name: block.name,
                    measure,
                });
            }
            return blocks;
        };
        this.invokeBlock = (options) => {
            const blockCallbackId = this.getBlockCallbackId(options);
            const emitter = PerformanceBlocks.onEventEmitters[blockCallbackId];
            if (!emitter) {
                return;
            }
            emitter.fire(options);
        };
        this.getBlockCallbackId = (options) => {
            const { id, type } = options;
            return `${id}-${type}`;
        };
        /**
         * Method to define event listeners for the `start` or `end` block sides.
         */
        this.onEvent = (options, callback) => {
            const blockCallbackId = this.getBlockCallbackId(options);
            let emitter = PerformanceBlocks.onEventEmitters[blockCallbackId];
            if (!emitter) {
                emitter = new vscode_jsonrpc_1.Emitter();
                PerformanceBlocks.onEventEmitters[blockCallbackId] = emitter;
            }
            emitter.event(callback);
            return this;
        };
    }
}
exports.PerformanceBlocks = PerformanceBlocks;
PerformanceBlocks.onEventEmitters = {};
//# sourceMappingURL=PerformanceBlocks.js.map

/***/ }),

/***/ 17895:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WaterfallNode = void 0;
class WaterfallNode {
    constructor(id, name, path, rawMeasure, blocks, perfGoups) {
        this.id = id;
        this.name = name;
        this.path = path;
        this.rawMeasure = rawMeasure;
        this.perfGoups = perfGoups;
        this.groups = [];
        this.getTotalDuration = () => {
            let maxTime = 0;
            for (let group of this.groups) {
                const totalTime = group.measure.startTime + group.measure.duration;
                if (totalTime > maxTime) {
                    maxTime = totalTime;
                }
            }
            return maxTime;
        };
        // measure properties are not
        // iterable, need to copy by hand
        this.measure = {
            name: rawMeasure.name,
            duration: rawMeasure.duration,
            startTime: rawMeasure.startTime,
            entryType: rawMeasure.entryType,
        };
        for (let block of blocks) {
            this.groups.push(Object.assign(Object.assign({}, block), { groups: [] }));
        }
        for (let group of this.perfGoups) {
            this.groups.push(group.getWaterfall());
        }
        const duration = this.getTotalDuration() - this.measure.startTime;
        this.measure = Object.assign(Object.assign({}, this.measure), { duration });
    }
}
exports.WaterfallNode = WaterfallNode;
//# sourceMappingURL=WaterfallNode.js.map

/***/ }),

/***/ 73438:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mocks = exports.logPerformanceWaterfall = exports.getOrCreatePerformance = exports.initializePerformanceInstance = exports.Performance = void 0;
var Performance_1 = __webpack_require__(24004);
Object.defineProperty(exports, "Performance", ({ enumerable: true, get: function () { return Performance_1.Performance; } }));
Object.defineProperty(exports, "initializePerformanceInstance", ({ enumerable: true, get: function () { return Performance_1.initializePerformanceInstance; } }));
Object.defineProperty(exports, "getOrCreatePerformance", ({ enumerable: true, get: function () { return Performance_1.getOrCreatePerformance; } }));
var logPerformanceWaterfall_1 = __webpack_require__(17010);
Object.defineProperty(exports, "logPerformanceWaterfall", ({ enumerable: true, get: function () { return logPerformanceWaterfall_1.logPerformanceWaterfall; } }));
exports.mocks = __importStar(__webpack_require__(93571));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 17010:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.logPerformanceWaterfall = void 0;
const ansi_colors_1 = __importDefault(__webpack_require__(18594));
const sortByStartTime_1 = __webpack_require__(51106);
const logInternal = (type, name, startTime, duration, rootStartTime) => {
    const connectionTimes = `[${startTime}ms - ${startTime + duration}ms]`;
    console[type]([
        `${name}:`,
        ansi_colors_1.default.cyan(`${duration}ms`),
        ansi_colors_1.default.magenta(`+${startTime - rootStartTime}ms`),
        ansi_colors_1.default.gray(connectionTimes),
    ].join(' '));
};
const log = (name, startTime, duration, rootStartTime) => {
    logInternal('log', name, startTime, duration, rootStartTime);
};
const group = (name, startTime, duration, rootStartTime) => {
    logInternal('groupCollapsed', name, startTime, duration, rootStartTime);
};
const logEmptyNode = (node, rootStartTime) => {
    const { name, measure } = node;
    const { startTime, duration } = measure;
    log(name, Math.round(startTime), Math.round(duration), rootStartTime);
};
const logPerformanceWaterfall = (root, rootStartTime) => {
    const { measure, name } = root;
    const { startTime, duration } = measure;
    const roundStartTime = Math.round(startTime);
    rootStartTime = rootStartTime !== null && rootStartTime !== void 0 ? rootStartTime : Math.round(startTime);
    // log the `root` group
    group(name, roundStartTime, Math.round(duration), rootStartTime);
    // log either `group` or `block`
    for (let item of (0, sortByStartTime_1.sortByStartTime)([...root.groups])) {
        item.groups.length ? (0, exports.logPerformanceWaterfall)(item, rootStartTime) : logEmptyNode(item, rootStartTime);
    }
    // end the `root` group
    console.groupEnd();
};
exports.logPerformanceWaterfall = logPerformanceWaterfall;
//# sourceMappingURL=logPerformanceWaterfall.js.map

/***/ }),

/***/ 94576:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PerformanceMock = void 0;
const Performance_1 = __webpack_require__(24004);
class PerformanceMock extends Performance_1.Performance {
    /**
     * Expose the `groups` for tests.
     */
    get groupsMock() {
        return this.groups;
    }
}
exports.PerformanceMock = PerformanceMock;
//# sourceMappingURL=PerformanceMock.js.map

/***/ }),

/***/ 93571:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PerformanceMock = void 0;
var PerformanceMock_1 = __webpack_require__(94576);
Object.defineProperty(exports, "PerformanceMock", ({ enumerable: true, get: function () { return PerformanceMock_1.PerformanceMock; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 51106:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sortByStartTime = void 0;
const sortByStartTime = (items) => {
    const result = [...items].sort((item1, item2) => {
        return item1.measure.startTime - item2.measure.startTime;
    });
    return result;
};
exports.sortByStartTime = sortByStartTime;
//# sourceMappingURL=sortByStartTime.js.map

/***/ }),

/***/ 87957:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Channel = void 0;
const rpc = __importStar(__webpack_require__(83730));
/**
 * Implement IChannel with a set of callbacks and fire API.
 */
class Channel {
    constructor(send, close, adjustWindow, dispose) {
        this.send = send;
        this.onDataReceivedEmitter = new rpc.Emitter();
        this.onClosedEmitter = new rpc.Emitter();
        this.onDataReceived = this.onDataReceivedEmitter.event;
        this.onClosed = this.onClosedEmitter.event;
        const closeFunc = (error, cancellation) => Promise.resolve();
        this.close = close !== null && close !== void 0 ? close : closeFunc;
        const adjustWindowFunc = (messageLength) => { };
        this.adjustWindow = adjustWindow !== null && adjustWindow !== void 0 ? adjustWindow : adjustWindowFunc;
        const diposeFunc = () => { };
        this.dispose = dispose !== null && dispose !== void 0 ? dispose : diposeFunc;
    }
    fireDataReceived(data) {
        this.onDataReceivedEmitter.fire(data);
    }
    fireClosed(reason) {
        this.onClosedEmitter.fire(reason);
    }
}
exports.Channel = Channel;
//# sourceMappingURL=Channel.js.map

/***/ }),

/***/ 15304:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataFormat = exports.DataFormat = void 0;
/** Describes the kind of data to be formatted. */
var DataFormat;
(function (DataFormat) {
    DataFormat[DataFormat["Default"] = 'default'] = "Default";
    DataFormat[DataFormat["Email"] = 'email'] = "Email";
    DataFormat[DataFormat["Token"] = 'token'] = "Token";
    DataFormat[DataFormat["Path"] = 'path'] = "Path";
    DataFormat[DataFormat["Text"] = 'text'] = "Text";
    DataFormat[DataFormat["Uri"] = 'uri'] = "Uri";
    DataFormat[DataFormat["Omit"] = 'omit'] = "Omit";
    DataFormat[DataFormat["OmitDefault"] = 'omitDefault'] = "OmitDefault";
    DataFormat[DataFormat["Hide"] = 'hide'] = "Hide";
    DataFormat[DataFormat["SingleMember"] = 'singleMember'] = "SingleMember";
})(DataFormat = exports.DataFormat || (exports.DataFormat = {}));
/** Creates a decorator that saves the property format in a map attached to the class constructor. */
function dataFormat(...format) {
    return (target, propertyKey) => {
        if (!target.constructor.dataFormat) {
            target.constructor.dataFormat = {};
        }
        target.constructor.dataFormat[propertyKey] = format;
    };
}
exports.dataFormat = dataFormat;
//# sourceMappingURL=DataFormat.js.map

/***/ }),

/***/ 5954:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcClient = void 0;
const RpcConnectionErrors_1 = __webpack_require__(78161);
const RpcClientProxy_1 = __webpack_require__(40952);
const RpcServiceHandler_1 = __webpack_require__(56647);
const vscs_utils_1 = __webpack_require__(19745);
class RpcClientProxy extends RpcClientProxy_1.RpcClientProxyBase {
    constructor(rpcClient, logger) {
        super(logger);
        this.rpcClient = rpcClient;
    }
    ensureConnectionAsync() {
        return this.rpcClient.ensureConnectionAsync();
    }
}
class RpcClient extends RpcServiceHandler_1.RpcServiceHandler {
    constructor(connectionFactory, logger) {
        super(logger);
        this.connectionFactory = connectionFactory;
        this.connection = null;
        this.connectionFactoryMutex = new vscs_utils_1.Mutex();
        this.rpcClientProxy = new RpcClientProxy(this, logger);
        if (connectionFactory.dispose) {
            this.addToDisposables(connectionFactory);
        }
    }
    static fromRpcMessageStream(rpcMessageStreamCallback, logger, disposeCallback) {
        return new RpcClient({
            create: (rpcClient) => __awaiter(this, void 0, void 0, function* () {
                const rpcMessageStream = yield rpcMessageStreamCallback();
                const rpcConnection = rpcClient.createRpcConnection(rpcMessageStream, logger);
                rpcConnection.listen();
                return rpcConnection;
            }),
            dispose: () => {
                if (disposeCallback) {
                    disposeCallback();
                }
            },
        }, logger);
    }
    sendRequest(logger, serviceAndMethodName, progress, cancellationToken, ...args) {
        return this.rpcClientProxy.sendRequest(logger, serviceAndMethodName, progress, cancellationToken, ...args);
    }
    sendNotification(logger, serviceAndName, args) {
        return this.rpcClientProxy.sendNotification(logger, serviceAndName, args);
    }
    onConnect(handler) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureConnectionAsync();
            handler();
        });
    }
    onClose(handler) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureConnectionAsync();
            this.connection.onClose(handler);
        });
    }
    ensureConnectionInternal() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.connection) {
                yield this.connectionFactoryMutex.dispatch(() => __awaiter(this, void 0, void 0, function* () {
                    if (!this.connection) {
                        this.setConnection(yield this.connectionFactory.create(this));
                    }
                }));
            }
        });
    }
    ensureConnectionAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureConnectionInternal();
            return this.connection;
        });
    }
    setConnection(conection) {
        this.connection = conection;
        if (conection) {
            this.attachConnection(conection);
            this.addToDisposables(conection);
        }
    }
    attachConnection(connection) {
        connection.onClose(() => {
            this.trace.info(`RPC connection closed. disposed: "${this.isDisposed}"`);
            if (!this.isDisposed) {
                // The connection was closed unexpectedly (not due to extension deactivation).
                // Dispose with an error that causes further communication attemps to be
                // rejected with an appropriate exception.
                this.dispose(new RpcConnectionErrors_1.RpcConnectionClosedError());
            }
        });
        // add generic request support
        connection.onRequest((method, ...params) => {
            return this.onRequest(null, connection, method, ...params);
        });
        // Add progress and generic notification support.
        connection.onNotification((method, ...params) => {
            this.onNotification(connection, method, ...params);
        });
    }
}
exports.RpcClient = RpcClient;
//# sourceMappingURL=RpcClient.js.map

/***/ }),

/***/ 40952:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcClientProxy = exports.RpcClientProxyBase = void 0;
const vso_logging_1 = __webpack_require__(98287);
const vscs_utils_1 = __webpack_require__(19745);
class RpcClientProxyBase extends vscs_utils_1.DisposableClass {
    constructor(logger) {
        super(logger);
    }
    sendNotification(logger, serviceAndName, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.ensureConnectionAsync();
            // Event args may contain sensitive data, so only trace when obfuscation is disabled.
            const argsString = vso_logging_1.LoggerSettings.disableObfuscation ? JSON.stringify(args) : '';
            logger.verbose(`sendNotification-> ${serviceAndName}: ${argsString}`);
            if (Array.isArray(args)) {
                // Method-style notification: 0 or more arguments.
                connection.sendNotification(serviceAndName, ...args);
            }
            else {
                // Event-style notification: a single EventArgs argument.
                connection.sendNotification(serviceAndName, args);
            }
        });
    }
    sendRequest(logger, serviceAndMethodName, progress, cancellationToken, ...args) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const cancellationMessage = 'The request was cancelled.';
            let connectionCompleted = false;
            const connection = yield Promise.race([
                this.ensureConnectionAsync(),
                new Promise((resolve, reject) => {
                    if (cancellationToken) {
                        if (cancellationToken.isCancellationRequested) {
                            return reject(new vscs_utils_1.CancellationError(cancellationMessage));
                        }
                        cancellationToken.onCancellationRequested(() => {
                            if (!connectionCompleted) {
                                reject(new vscs_utils_1.CancellationError(cancellationMessage));
                            }
                        });
                    }
                }),
            ]);
            connectionCompleted = true;
            let argsString = '';
            if (vso_logging_1.LoggerSettings.disableObfuscation) {
                // Arguments may contain sensitive data, so only trace when obfuscation is disabled.
                argsString = JSON.stringify(args);
                argsString = argsString.substr(1, argsString.length - 2);
            }
            logger.verbose(`< ${serviceAndMethodName}(${argsString})`);
            const start = Date.now();
            let result;
            try {
                if (progress) {
                    // Attach the progress handler to the args; the write filter will detect and register it.
                    // Also attach the cancellation token so progress notifications can be cancelled.
                    progress.cancellation = cancellationToken;
                    args.progress = progress;
                }
                // The vscode-jsonrpc sendRequest() method can only detect a cancellation token argument
                // if it is not null.
                let sendPromise;
                if (cancellationToken) {
                    sendPromise = connection.sendRequest(serviceAndMethodName, args, cancellationToken);
                }
                else {
                    sendPromise = connection.sendRequest(serviceAndMethodName, args);
                }
                result = yield sendPromise;
            }
            catch (err) {
                if (this.isDisposed) {
                    // // This will either block (during deactivation) or throw a connection-closed error.
                    // await this.initPromise;
                }
                // The error 'data' property should be the remote stack trace.
                logger.error(`> ${serviceAndMethodName}() error: ` + ((_a = err.data) !== null && _a !== void 0 ? _a : ''));
                throw err;
            }
            const time = (Date.now() - start).toFixed(1);
            // Result may contain sensitive data, so only trace when obfuscation is disabled.
            if (vso_logging_1.LoggerSettings.disableObfuscation) {
                logger.verbose(`> ${serviceAndMethodName}() => ${JSON.stringify(result)} t:${time}`);
            }
            else {
                logger.verbose(`> ${serviceAndMethodName}() succeeded t:${time}`);
            }
            return result;
        });
    }
}
exports.RpcClientProxyBase = RpcClientProxyBase;
class RpcClientProxy extends RpcClientProxyBase {
    constructor(promise, logger) {
        super(logger);
        this.promise = promise;
        this.initPromise = Promise.resolve();
    }
    static fromRpcConnection(connection, logger) {
        return new RpcClientProxy(Promise.resolve(connection), logger);
    }
    static fromPromise(promise, logger) {
        return new RpcClientProxy(promise, logger);
    }
    ensureConnectionAsync() {
        return this.promise;
    }
}
exports.RpcClientProxy = RpcClientProxy;
//# sourceMappingURL=RpcClientProxy.js.map

/***/ }),

/***/ 78161:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcConnectionShutdownError = exports.RpcConnectionClosedError = void 0;
const RpcError_1 = __webpack_require__(25966);
/**
 * Error thrown from RPC requests when the connection to the agent was unexpectedly
 * closed before or during the request.
 */
class RpcConnectionClosedError extends RpcError_1.RpcError {
    constructor() {
        super('RPC connection closed.');
        this.code = RpcConnectionClosedError.code;
        Object.setPrototypeOf(this, RpcConnectionClosedError.prototype);
    }
}
exports.RpcConnectionClosedError = RpcConnectionClosedError;
/** One of the well-known Node.js error code strings. */
RpcConnectionClosedError.code = 'EPIPE';
/**
 * Error thrown from RPC connection is closed due to explicit client shut down.
 */
class RpcConnectionShutdownError extends RpcError_1.RpcError {
    constructor() {
        super('RPC connection closed due to client shut down.');
        this.code = RpcConnectionShutdownError.code;
        Object.setPrototypeOf(this, RpcConnectionShutdownError.prototype);
    }
}
exports.RpcConnectionShutdownError = RpcConnectionShutdownError;
/** One of the well-known Node.js error code strings. */
RpcConnectionShutdownError.code = 'ECONNRESET';
//# sourceMappingURL=RpcConnectionErrors.js.map

/***/ }),

/***/ 25966:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcError = void 0;
/**
 * Base RPC error class.
 */
class RpcError extends Error {
    constructor(message) {
        super(message);
        this.code = RpcError.code;
    }
}
exports.RpcError = RpcError;
RpcError.code = 'RpcError';
//# sourceMappingURL=RpcError.js.map

/***/ }),

/***/ 70735:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcLoggerAdapter = void 0;
class RpcLoggerAdapter {
    constructor(trace) {
        this.trace = trace;
    }
    error(message) {
        this.trace.error(message);
    }
    warn(message) {
        this.trace.warning(message);
    }
    info(message) {
        this.trace.info(message);
    }
    log(message) {
        this.trace.verbose(message);
    }
}
exports.RpcLoggerAdapter = RpcLoggerAdapter;
//# sourceMappingURL=RpcLoggerAdapter.js.map

/***/ }),

/***/ 6324:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(30816)["Buffer"];

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcMessageWriter = void 0;
const rpc = __importStar(__webpack_require__(83730));
const contentLengthHeaderPrefix = 'Content-Length: ';
const headersSeparator = '\r\n\r\n';
class RpcMessageWriter {
    constructor() {
        this.onErrorEmitter = new rpc.Emitter();
        this.onCloseEmitter = new rpc.Emitter();
        this.onError = this.onErrorEmitter.event;
        this.onClose = this.onCloseEmitter.event;
    }
    write(message) {
        const messageJson = JSON.stringify(message);
        const messageData = Buffer.from(messageJson);
        const headerData = Buffer.from(contentLengthHeaderPrefix + messageData.length + headersSeparator);
        const data = Buffer.alloc(headerData.length + messageData.length);
        headerData.copy(data, 0);
        messageData.copy(data, headerData.length);
        if (this.onSendCallback) {
            this.onSendCallback(data).catch((e) => {
                this.onErrorEmitter.fire([e, undefined, undefined]);
            });
        }
    }
    dispose() { }
}
exports.RpcMessageWriter = RpcMessageWriter;
//# sourceMappingURL=RpcMessageWriter.js.map

/***/ }),

/***/ 70008:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcProxy = exports.RpcErrorCodes = void 0;
const rpc = __importStar(__webpack_require__(83730));
const RpcClientProxy_1 = __webpack_require__(40952);
const vso_logging_1 = __webpack_require__(98287);
const RpcUtils_1 = __webpack_require__(89644);
/**
 * Defines error codes returned by the VSLS agent implemention of JSON-RPC,
 * which are a super-set of standard JSON-RPC error codes.
 */
var RpcErrorCodes;
(function (RpcErrorCodes) {
    RpcErrorCodes[RpcErrorCodes["ParseError"] = rpc.ErrorCodes.ParseError] = "ParseError";
    RpcErrorCodes[RpcErrorCodes["InvalidRequest"] = rpc.ErrorCodes.InvalidRequest] = "InvalidRequest";
    RpcErrorCodes[RpcErrorCodes["MethodNotFound"] = rpc.ErrorCodes.MethodNotFound] = "MethodNotFound";
    RpcErrorCodes[RpcErrorCodes["InvalidParams"] = rpc.ErrorCodes.InvalidParams] = "InvalidParams";
    RpcErrorCodes[RpcErrorCodes["InternalError"] = rpc.ErrorCodes.InternalError] = "InternalError";
    RpcErrorCodes[RpcErrorCodes["ServerNotInitialized"] = rpc.ErrorCodes.ServerNotInitialized] = "ServerNotInitialized";
    RpcErrorCodes[RpcErrorCodes["UnknownErrorCode"] = rpc.ErrorCodes.UnknownErrorCode] = "UnknownErrorCode";
    RpcErrorCodes[RpcErrorCodes["RequestCancelled"] = rpc.ErrorCodes.RequestCancelled] = "RequestCancelled";
    RpcErrorCodes[RpcErrorCodes["MessageWriteError"] = rpc.ErrorCodes.MessageWriteError] = "MessageWriteError";
    RpcErrorCodes[RpcErrorCodes["MessageReadError"] = rpc.ErrorCodes.MessageReadError] = "MessageReadError";
    // VSLS extended RPC error codes
    RpcErrorCodes[RpcErrorCodes["ServiceNotAvailable"] = -32099] = "ServiceNotAvailable";
    RpcErrorCodes[RpcErrorCodes["InvocationException"] = -32098] = "InvocationException";
    RpcErrorCodes[RpcErrorCodes["MessageTooLarge"] = -32097] = "MessageTooLarge";
})(RpcErrorCodes = exports.RpcErrorCodes || (exports.RpcErrorCodes = {}));
/**
 * Base class for RPC service proxies. Traces all messages
 * and emits events for incoming notifications.
 */
class RpcProxy {
    constructor(client, serviceName, logger) {
        this.client = client;
        this.serviceName = serviceName;
        this.logger = logger;
    }
    /**
     * Creates a proxy for an RPC service.
     *
     * @param serviceInfo Information about the service contract
     * @param client RPC client
     * @param logger logger to use
     */
    static create(serviceInfo, client, logger) {
        if (!(serviceInfo && serviceInfo.name)) {
            throw new Error('Missing RPC service name.');
        }
        const proxy = new RpcProxy(client, serviceInfo.name, logger);
        // Generate async methods for requests.
        for (const methodName of serviceInfo.methods) {
            const methodPropertyName = `${methodName}Async`;
            proxy[methodPropertyName] = function () {
                // Detect whether optional cancellation token was supplied, and if so strip from args.
                let args;
                let cancellationToken = arguments[arguments.length - 1];
                if (cancellationToken &&
                    typeof cancellationToken === 'object' &&
                    typeof cancellationToken.isCancellationRequested === 'boolean') {
                    args = Array.prototype.slice.call(arguments, 0, arguments.length - 1);
                }
                else {
                    args = Array.prototype.slice.call(arguments, 0, arguments.length);
                    cancellationToken = null;
                }
                // Detect whether optional progress was supplied, and if so strip from args.
                let progress = args[args.length - 1];
                if (progress && typeof progress === 'object' && typeof progress.report === 'function') {
                    args.splice(args.length - 1, 1);
                }
                else {
                    progress = null;
                }
                const serviceAndMethodName = proxy.serviceName + '.' + methodName;
                return proxy.client.sendRequest(this.logger, serviceAndMethodName, progress, cancellationToken, ...args);
            };
        }
        // Generate methods for method-style notifications.
        for (const methodName of serviceInfo.voidMethods || []) {
            proxy[methodName] = function () {
                const args = Array.prototype.slice.call(arguments, 0, arguments.length);
                const serviceAndMethodName = proxy.serviceName + '.' + methodName;
                proxy.client.sendNotification(this.logger, serviceAndMethodName, args).then().catch();
            };
        }
        // Generate events for event-style notifications.
        for (const eventName of serviceInfo.events) {
            const emitter = new rpc.Emitter();
            const eventPropertyName = (0, RpcUtils_1.getEventPropertyName)(eventName);
            proxy[eventPropertyName] = emitter.event;
            const serviceAndEventName = proxy.serviceName + '.' + eventName;
            proxy.client
                .ensureConnectionAsync()
                .then((connection) => {
                connection.onNotification(serviceAndEventName, (...args) => {
                    const eventArgs = args[0];
                    // Event args may contain sensitive data, so only trace when obfuscation is disabled.
                    const argsString = vso_logging_1.LoggerSettings.disableObfuscation ? JSON.stringify(eventArgs) : '';
                    proxy.logger.log(vso_logging_1.LogLevel.Debug, `> ${serviceAndEventName}: ${argsString}`);
                    emitter.fire(eventArgs);
                });
            })
                .catch((e) => {
                // Failed to get the connection. There will already be errors traced elsewhere
                // about the connection failure, so there's no need to trace anything more here.
            });
        }
        return proxy;
    }
    static createWithConnection(serviceInfo, connection, logger) {
        return RpcProxy.create(serviceInfo, RpcClientProxy_1.RpcClientProxy.fromRpcConnection(connection, logger), logger);
    }
    static createWithPromise(serviceInfo, promise, logger) {
        return RpcProxy.create(serviceInfo, RpcClientProxy_1.RpcClientProxy.fromPromise(promise, logger), logger);
    }
    /**
     * Sends a notification (event) from this client to the service.
     *
     * (This is a static method because RPC contract interfaces do not define methods
     * for reverse notifications.)
     */
    static notifyAsync(proxy, eventName, args) {
        const rpcProxy = proxy;
        const serviceAndMethodName = rpcProxy.serviceName + '.' + eventName;
        return rpcProxy.client.sendNotification(rpcProxy.logger, serviceAndMethodName, args);
    }
}
exports.RpcProxy = RpcProxy;
//# sourceMappingURL=RpcProxy.js.map

/***/ }),

/***/ 54847:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcProxyCache = void 0;
const RpcProxy_1 = __webpack_require__(70008);
class RpcProxyCache {
    constructor(clientProxy, logger) {
        this.clientProxy = clientProxy;
        this.logger = logger;
        this.proxyMap = new Map();
    }
    getOrCreate(serviceInfo, traceName) {
        let proxy = this.proxyMap.get(serviceInfo.name);
        if (!proxy) {
            this.logger.info(`Creating proxy for ${serviceInfo.name} service`);
            proxy = RpcProxy_1.RpcProxy.create(serviceInfo, this.clientProxy, traceName ? this.logger.withName(traceName) : this.logger);
            this.proxyMap.set(serviceInfo.name, proxy);
        }
        return proxy;
    }
}
exports.RpcProxyCache = RpcProxyCache;
//# sourceMappingURL=RpcProxyCache.js.map

/***/ }),

/***/ 68603:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcServer = void 0;
const vso_logging_1 = __webpack_require__(98287);
const RpcServiceHandler_1 = __webpack_require__(56647);
const sendRpcRequest_1 = __webpack_require__(30268);
const RpcUtils_1 = __webpack_require__(89644);
/**
 * define a class capable to host multiple rpc services
 */
class RpcServer extends RpcServiceHandler_1.RpcServiceHandler {
    constructor(logger, notifyEventProvider) {
        super(logger);
        this.rpcSessionNumber = 0;
        this.rpcConnections = [];
        const defaultNotifyProvider = (serviceAndMethod, e) => {
            (0, RpcUtils_1.notifyConnections)(this.rpcConnections, serviceAndMethod, e, logger);
        };
        this.notifyEventProvider = notifyEventProvider || defaultNotifyProvider;
    }
    registerRemoteRpcService(serviceName, messageConnection) {
        this.trace.info(`adding remote rpc service:${serviceName}`);
        const serviceNamePrefix = serviceName + '.';
        messageConnection.onNotification((method, ...params) => {
            if (method.startsWith(serviceNamePrefix)) {
                this.notifyEventProvider(method, params);
            }
        });
        const disposable = this.onHandleNoneRequest((rpcConnection, method, ...params) => __awaiter(this, void 0, void 0, function* () {
            if (method.startsWith(serviceNamePrefix)) {
                return yield (0, sendRpcRequest_1.sendRpcRequest)(messageConnection, method, params, this.trace);
            }
        }));
        messageConnection.onClose(() => disposable.dispose());
        messageConnection.onDispose(() => disposable.dispose());
        return disposable;
    }
    sendNotification(logger, serviceAndName, args) {
        this.notifyEventProvider(serviceAndName, args);
        return Promise.resolve();
    }
    acceptRpcMessageStream(rpcMessageStream) {
        const messageConnection = this.createRpcConnection(rpcMessageStream, this.trace);
        const rpcSessionNumber = this.attachConnection(messageConnection);
        return [messageConnection, rpcSessionNumber];
    }
    attachConnection(messageConnection) {
        this.rpcConnections.push(messageConnection);
        const rpcSessionNumber = ++this.rpcSessionNumber;
        this.trace.verbose(`Rpc #${rpcSessionNumber} created`);
        messageConnection.onRequest((method, ...params) => {
            return this.onRequest((requestHandler, ...requestParams) => __awaiter(this, void 0, void 0, function* () {
                // inject rpc request context on the last argument
                const rpcRequestContext = {
                    connection: messageConnection,
                    session: rpcSessionNumber,
                };
                requestParams.push(rpcRequestContext);
                const result = yield Promise.resolve(requestHandler(...requestParams));
                const loggerResult = vso_logging_1.LoggerSettings.disableObfuscation ? ` => ${JSON.stringify(result)}` : '';
                this.trace.verbose(`> #${rpcSessionNumber} ${method}()${loggerResult}`);
                return result;
            }), messageConnection, method, ...params);
        });
        // Add progress and generic notification support.
        messageConnection.onNotification((method, ...params) => {
            this.onNotification(messageConnection, method, ...params);
        });
        const removeRpc = (event) => {
            const index = this.rpcConnections.indexOf(messageConnection);
            if (index !== -1) {
                this.trace.verbose(`Rpc #${rpcSessionNumber} removed event:${event}`);
                this.rpcConnections.splice(index, 1);
            }
        };
        messageConnection.onClose((e) => {
            removeRpc('closed');
        });
        messageConnection.onDispose((e) => {
            removeRpc('disposed');
        });
        return rpcSessionNumber;
    }
}
exports.RpcServer = RpcServer;
//# sourceMappingURL=RpcServer.js.map

/***/ }),

/***/ 56647:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcServiceHandler = exports.RpcServiceHandlerBase = exports.methodProgress = void 0;
const rpc = __importStar(__webpack_require__(83730));
const vscs_utils_1 = __webpack_require__(19745);
const RpcUtils_1 = __webpack_require__(89644);
const RpcLoggerAdapter_1 = __webpack_require__(70735);
const RpcUtils_2 = __webpack_require__(89644);
exports.methodProgress = '$/progress';
const RESTRICTED_HANDLERS_FIELD = '$RestrictedHandlers$';
/**
 * Base class to handle common tasks related with handling rpc request and notifications.
 */
class RpcServiceHandlerBase extends vscs_utils_1.DisposableClass {
    constructor(logger) {
        super(logger);
        this.rpcRequestsWithContext = new RpcUtils_1.RpcRequestsWithContext();
        this.rpcReadFilters = [this.rpcRequestsWithContext.readFilter];
        this.rpcWriteFilters = [];
        this.progressHandlers = new Map();
        this.requests = new Map();
        this.requestsWithProgress = new Set();
        this.notifications = new Map();
        this.notificationsCookies = 0;
        this.handleNoneRequestCallbacks = new vscs_utils_1.CallbackContainer();
        this.handleNoneNotificationCallbacks = new vscs_utils_1.CallbackContainer();
        this.addProgressFilters();
    }
    get serviceNames() {
        const serviceNames = new Set();
        const addServices = (keys) => {
            for (const key of keys) {
                serviceNames.add(key.split('.')[0]);
            }
        };
        addServices(this.requests.keys());
        addServices(this.notifications.keys());
        return Array.from(serviceNames);
    }
    clear() {
        this.requests.clear();
        this.requestsWithProgress.clear();
        this.notifications.clear();
        this.handleNoneRequestCallbacks.clear();
        this.handleNoneNotificationCallbacks.clear();
    }
    onHandleNoneRequest(callback) {
        return this.handleNoneRequestCallbacks.add(callback);
    }
    onHandleNoneNotification(callback) {
        return this.handleNoneNotificationCallbacks.add(callback);
    }
    createRpcConnection(rpcMessageStream, logger) {
        const rpcConnection = rpc.createMessageConnection(this.createFilteredMessageReader(rpcMessageStream.reader), this.createFilteredMessageWriter(rpcMessageStream.writer), new RpcLoggerAdapter_1.RpcLoggerAdapter(logger));
        return rpcConnection;
    }
    addReadFilter(filter) {
        return addRpcFilter(this.rpcReadFilters, filter);
    }
    addWriteFilter(filter) {
        return addRpcFilter(this.rpcWriteFilters, filter);
    }
    addRequestMethod(method, requestHandler) {
        this.requests.set(method, requestHandler);
    }
    addRequestMethodWithContext(method, requestHandler) {
        this.addRequestMethod(method, requestHandler);
        this.rpcRequestsWithContext.add(method);
    }
    addRequestMethodWithProgress(method, requestHandler) {
        this.addRequestMethod(method, requestHandler);
        this.requestsWithProgress.add(method);
    }
    removeRequestMethod(method) {
        this.requests.delete(method);
        this.requestsWithProgress.delete(method);
    }
    addNotificationHandler(method, notificationHandler) {
        let entrys = this.notifications.get(method);
        if (!entrys) {
            entrys = [];
            this.notifications.set(method, entrys);
        }
        const entry = {
            cookie: ++this.notificationsCookies,
            notificationHandler,
        };
        entrys.push(entry);
        return entry.cookie;
    }
    removeNotificationHandler(method, cookie) {
        const entrys = this.notifications.get(method);
        if (entrys) {
            const indexEntry = entrys.findIndex((i) => i.cookie === cookie);
            if (indexEntry !== -1) {
                return entrys.splice(indexEntry, 1)[0].notificationHandler;
            }
        }
        return undefined;
    }
    onRequest(requestHandlerInvoke, rpcConnection, method, ...params) {
        const requestHandler = this.requests.get(method);
        if (!requestHandler) {
            for (const callback of this.handleNoneRequestCallbacks.items) {
                const result = callback(rpcConnection, method, ...params);
                if (result !== undefined) {
                    return result;
                }
            }
            return Promise.resolve((0, RpcUtils_2.createMethodNotFoundResponse)(method));
        }
        // The request ID was inserted into the args by the read filter. (It's not used here.)
        const [requestId] = params.splice(0, 1);
        if (this.requestsWithProgress.has(method)) {
            const progress = {
                report: (value) => {
                    rpcConnection.sendNotification(exports.methodProgress, { id: requestId, value });
                },
            };
            // Insert progress into args just before the last (cancellation) arg.
            params.splice(params.length - 1, 0, progress);
        }
        if (requestHandlerInvoke) {
            return requestHandlerInvoke(requestHandler, ...params);
        }
        return requestHandler(...params);
    }
    onNotification(rpcConnection, method, ...params) {
        if (method === exports.methodProgress && typeof params[0] === 'object') {
            // Note: the progress notification is being handled on the rpc read filter
            // and its better to no op.
            return;
        }
        else if (this.notifications.has(method)) {
            this.notifications.get(method).forEach((item) => {
                item.notificationHandler(...params);
            });
        }
        else {
            for (const callback of this.handleNoneNotificationCallbacks.items) {
                callback(rpcConnection, method, ...params);
            }
        }
    }
    createFilteredMessageReader(reader) {
        return new RpcUtils_1.WrappedMessageReader(reader, (msg) => RpcServiceHandlerBase.filterMessage(msg, this.rpcReadFilters));
    }
    createFilteredMessageWriter(writer) {
        return new RpcUtils_1.WrappedMessageWriter(writer, (msg) => RpcServiceHandlerBase.filterMessage(msg, this.rpcWriteFilters));
    }
    static filterMessage(msg, filters) {
        for (const filter of filters) {
            msg = filter(msg);
        }
        return msg;
    }
    addProgressFilters() {
        this.rpcReadFilters.push((msg) => {
            const msgObj = msg;
            const requestId = msgObj.id;
            if (typeof requestId !== 'undefined') {
                if (Array.isArray(msgObj.params)) {
                    // This is an incoming request message.
                    // Insert the request ID into the params in case it is needed for progress.
                    msgObj.params.splice(0, 0, requestId);
                }
                else if (msgObj.params !== undefined) {
                    // single parameter support
                    msgObj.params = [requestId, msgObj.params];
                }
                else {
                    msgObj.params = [requestId];
                }
                if (typeof msgObj.result !== 'undefined' || typeof msgObj.error !== 'undefined') {
                    // This is an incoming response message.
                    // Unregister any progress handler for the response's request ID.
                    this.progressHandlers.delete(requestId);
                }
            }
            else if (msgObj.method === exports.methodProgress) {
                let progressArgs = msgObj.params;
                if (progressArgs.id === undefined) {
                    progressArgs = msgObj.params[0];
                }
                const progress = this.progressHandlers.get(progressArgs.id);
                if (progress) {
                    progress.report(progressArgs.value, progressArgs.id);
                }
            }
            return msg;
        });
        this.rpcWriteFilters.push((msg) => {
            const msgObj = msg;
            const requestId = msgObj.id;
            const params = msgObj.params;
            if (typeof requestId !== 'undefined' &&
                params &&
                params.progress &&
                typeof params.progress.report === 'function') {
                // An outgoing message has a progress handler attached to the params.
                // Register the progress handler for the request ID.
                this.progressHandlers.set(msgObj.id, msgObj.params.progress);
                // Unregister the progress handler when the request is cancelled.
                const cancellation = params.progress.cancellation;
                if (cancellation) {
                    cancellation.onCancellationRequested(() => {
                        this.progressHandlers.delete(requestId);
                    });
                }
                delete params.progress;
            }
            return msg;
        });
    }
}
exports.RpcServiceHandlerBase = RpcServiceHandlerBase;
class RpcServiceHandler extends RpcServiceHandlerBase {
    /**
     * Registers an RPC service and returns a disposable registration object.
     * @param service Service instance. The class should implement the service interface.
     * @param serviceInfo Service metadata.
     * @param trace Trace source.
     * @param disposables Collection of disposable objects where the registration object will be added to.
     */
    registerRpcService(service, serviceInfo, contextMethods, strict) {
        if (!service) {
            throw new Error('service argument is missing or undefined');
        }
        if (!serviceInfo) {
            throw new Error('serviceInfo argument is missing or undefined');
        }
        if (contextMethods && contextMethods.filter((method) => serviceInfo.methods.indexOf(method) < 0).length > 0) {
            throw new Error('invalid context method');
        }
        const serviceName = serviceInfo.name;
        if (!serviceName) {
            throw new Error('serviceInfo.serviceName is empty or undefined');
        }
        let isServiceActive = true;
        const addedRequestMethods = new Set();
        const addedNotificationMethods = new Map();
        let eventDisposables = [];
        const result = {
            dispose: () => {
                isServiceActive = false;
                for (const d of eventDisposables) {
                    d.dispose();
                }
                eventDisposables = [];
                for (const handlerName of addedRequestMethods) {
                    this.removeRequestMethod(handlerName);
                }
                addedRequestMethods.clear();
                for (const [handlerName, cookie] of addedNotificationMethods) {
                    this.removeNotificationHandler(handlerName, cookie);
                }
                addedNotificationMethods.clear();
            },
        };
        const restrictedHandlers = service[RESTRICTED_HANDLERS_FIELD];
        try {
            for (const method of serviceInfo.methods) {
                const handlerName = `${serviceName}.${method}`;
                const restrictedHandler = restrictedHandlers && restrictedHandlers.get(method);
                if (restrictedHandler) {
                    this.addRequestMethodWithContext(handlerName, (...args) => restrictedHandler.apply(service, args));
                    addedRequestMethods.add(handlerName);
                    continue;
                }
                const impl = service[method] || service[method + 'Async'];
                if (typeof impl !== 'function') {
                    if (strict || strict === undefined) {
                        throw new Error(`Object ${serviceInfo.name} does not implement method '${method}' of service '${serviceName}'.`);
                    }
                    else {
                        continue;
                    }
                }
                if (contextMethods && contextMethods.indexOf(method) >= 0) {
                    this.addRequestMethodWithContext(handlerName, (...args) => impl.apply(service, args));
                }
                else {
                    this.addRequestMethod(handlerName, (...args) => impl.apply(service, args));
                }
                addedRequestMethods.add(handlerName);
            }
            if (serviceInfo.voidMethods) {
                for (const method of serviceInfo.voidMethods) {
                    const handlerName = `${serviceName}.${method}`;
                    if (restrictedHandlers && restrictedHandlers.get(method)) {
                        throw new Error(`Restricted operation check is not supported yet for notification methods. Object ${serviceInfo.name} restricts notification '${method}' of service '${serviceName}'.`);
                    }
                    const impl = this[method] || service[method];
                    if (typeof impl !== 'function') {
                        if (strict) {
                            throw new Error(`Object ${serviceInfo.name} does not implement notification '${method}' of service '${serviceName}'.`);
                        }
                        else {
                            continue;
                        }
                    }
                    const cookie = this.addNotificationHandler(handlerName, (...args) => impl.apply(service, args));
                    addedNotificationMethods.set(handlerName, cookie);
                }
            }
            if (serviceInfo.events) {
                for (const eventName of serviceInfo.events) {
                    if (!eventName) {
                        continue;
                    }
                    const propertyName = (0, RpcUtils_2.getEventPropertyName)(eventName);
                    const event = service[propertyName];
                    if (typeof event === 'function') {
                        event((e) => {
                            if (isServiceActive) {
                                this.sendNotification(this.trace, `${serviceName}.${eventName}`, e).catch((err) => this.trace.error(`Failed to send notification:${serviceName}.${eventName}`, err));
                            }
                        }, eventDisposables);
                    }
                }
            }
        }
        catch (err) {
            result.dispose();
            throw err;
        }
        return result;
    }
}
exports.RpcServiceHandler = RpcServiceHandler;
/**
 * helper function to add an rpc filter and be able to remove it.
 */
function addRpcFilter(filters, filter) {
    filters.push(filter);
    return {
        dispose: () => {
            const index = filters.indexOf(filter);
            if (index !== -1) {
                filters.splice(index, 1);
            }
        },
    };
}
//# sourceMappingURL=RpcServiceHandler.js.map

/***/ }),

/***/ 89644:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMethodNotFoundResponse = exports.RpcRequestsWithContext = exports.addContextToRpcMessage = exports.TimedRpcMessageUtils = exports.TimingFilter = exports.WrappedMessageWriter = exports.WrappedMessageReader = exports.notifyConnections = exports.onAllEvents = exports.getEventPropertyName = void 0;
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
const vscs_utils_1 = __webpack_require__(19745);
const vscode_jsonrpc_1 = __webpack_require__(83730);
function getEventPropertyName(eventName) {
    return `on${eventName.substr(0, 1).toUpperCase()}${eventName.substr(1)}`;
}
exports.getEventPropertyName = getEventPropertyName;
/**
 * Hookup all events from a service and invoke a generic listener
 * @param service The service instance
 * @param eventNames the name of the rpc events to hookup.
 * @param listener Callback to invoke when each event is fired.
 * @returns A disposable instance to un hookup
 */
function onAllEvents(service, eventNames, listener) {
    const disposables = [];
    for (const eventName of eventNames) {
        const eventPropertyName = getEventPropertyName(eventName);
        const event = service[eventPropertyName];
        disposables.push(event((e) => listener(eventName, e)));
    }
    return (0, vscs_utils_1.createDisposable)(() => {
        disposables.forEach((d) => d.dispose());
    });
}
exports.onAllEvents = onAllEvents;
/**
 * notify a set of rpc connections
 * @param rpcConnections list of rpc connections.
 * @param serviceAndMethod service and method name
 * @param e Event argument
 * @param logger optional logger instance.
 */
function notifyConnections(rpcConnections, serviceAndMethod, e, logger) {
    rpcConnections.forEach((mc) => {
        try {
            mc.sendNotification(serviceAndMethod, e);
        }
        catch (err) {
            logger === null || logger === void 0 ? void 0 : logger.error(`failed to send notification method:${serviceAndMethod} index:${rpcConnections.indexOf(mc)}`);
        }
    });
}
exports.notifyConnections = notifyConnections;
class WrappedMessageReader {
    constructor(messageReader, messageTransformer) {
        this.messageReader = messageReader;
        this.messageTransformer = messageTransformer;
        this.onError = this.messageReader.onError;
        this.onClose = this.messageReader.onClose;
        this.onPartialMessage = this.messageReader.onPartialMessage;
    }
    listen(callback) {
        const wrappedCallback = (msg) => {
            callback(this.messageTransformer(msg));
        };
        this.messageReader.listen(wrappedCallback);
    }
    dispose() {
        this.messageReader.dispose();
    }
}
exports.WrappedMessageReader = WrappedMessageReader;
class WrappedMessageWriter {
    constructor(messageWriter, messageTransformer) {
        this.messageWriter = messageWriter;
        this.messageTransformer = messageTransformer;
        this.onError = this.messageWriter.onError;
        this.onClose = this.messageWriter.onClose;
    }
    write(msg) {
        this.messageWriter.write(this.messageTransformer(msg));
    }
    dispose() {
        this.messageWriter.dispose();
    }
}
exports.WrappedMessageWriter = WrappedMessageWriter;
class TimingFilter {
    constructor() {
        // Map from message ids to when the message was received/sent
        this.times = new Map();
    }
    filter(isWrite, msg) {
        if (typeof msg.id !== 'number') {
            return msg;
        }
        if (this.times.has(msg.id)) {
            const duration = Date.now() - this.times.get(msg.id);
            this.times.delete(msg.id);
            // If one of the RPC clients doesn't include timing information (e.g. they are an older version),
            // none of them should to avoid misleading data.
            if (isWrite || typeof msg.times !== 'undefined') {
                msg.times = TimedRpcMessageUtils.addTime(msg.times, duration);
            }
        }
        else {
            this.times.set(msg.id, Date.now());
        }
        return msg;
    }
}
exports.TimingFilter = TimingFilter;
/*
The "times" property on an RPC message is an
array of times in milliseconds taken to send/receive/respond to requests
Includes times from sending requests to receiving responses and
time from receiving requests to returning responses.

E.g. a simple scenario where A makes a request to B:
A sends a request to B and begins timing.
B receives the request and begins timing.
B processes the request.
B is ready to resolve the request, so stops timing, stamps
the time it took to respond on the response message, and sends the reponse.
A receives the response, stops timing, subtracts off the time taken for B to respond (this time is
included in the response message) and adds another item to the list of handling times on the response message.
The first time in the list of handling times is the amount of time it took B to process the request,
and the second time in the list is the communication latency between A and B.

In more complicated scenarios where requests go through multiple clients,
the list of handling times can be used to find the communication latency between
each RPC client in the chain, and how long processing took at each client.

In general, the last client in the chain will only contribute one time to the list:
the amount of time it took to respond to the request. So this is always
the first item in the list. Similarly, the first client in the chain (the one that made the initial request)
only contributes one time to the list: the communication latency between itself and the
first client in the chain. So this is always the last item in the list. Intermediate clients contribute 2 times each:
the first is the communication latency between the client and the next in the chain. The second is the time
it took the client to do any intermediate processing before forwarding the request on to the next client and
returning the response to the previous client.

E.g. if times = [a, b, c, d], there were three clients involved in the request. a is the time it took
the last client to handle the request, b is the communication latency between the second and third client,
c is the time it took the second client from receiving the request from the first client to forward the request
to the third client plus the time from receiving the response from the third client to sending it to the first client,
and d is the communication latency between the first and second client. The full time from the first client
making the request to receiving the response is a + b + c + d. In general, the latency of the request is the sum of
every other item in the list, starting at index 1 (here b + d), and the processing time is the sum of every other item
in the list, starting at index 0 (here a + c).
*/
class TimedRpcMessageUtils {
    static addTime(times, time) {
        if (typeof times === 'undefined') {
            times = [];
        }
        const timeToAdd = time - TimedRpcMessageUtils.getTotalTime(times);
        times.push(timeToAdd > 0 ? timeToAdd : 0);
        return times;
    }
    // The latency is the sum of every other item in the list of times, starting at index 1.
    // See comment above this class for detailed explanation.
    static getLatency(times) {
        let latency = 0;
        if (times) {
            for (let i = 1; i < times.length; i += 2) {
                latency += times[i];
            }
        }
        return latency;
    }
    // The processing time is the sum of every other item in the list of times, starting at index 0.
    // See comment above this class for detailed explanation.
    static getProcessingTime(times) {
        let processingTime = 0;
        if (times) {
            for (let i = 0; i < times.length; i += 2) {
                processingTime += times[i];
            }
        }
        return processingTime;
    }
    static getTotalTime(times) {
        return TimedRpcMessageUtils.getLatency(times) + TimedRpcMessageUtils.getProcessingTime(times);
    }
}
exports.TimedRpcMessageUtils = TimedRpcMessageUtils;
/*
    RPC message filter that adds message context to the parameter object of RPC messages
*/
function addContextToRpcMessage(msg) {
    if (!msg) {
        return msg;
    }
    const context = msg.context;
    const params = msg.params;
    if (typeof context !== 'object' || typeof params !== 'object' || Array.isArray(params) || params.context) {
        return msg;
    }
    return Object.assign({}, msg, { params: Object.assign({ context }, params) });
}
exports.addContextToRpcMessage = addContextToRpcMessage;
class RpcRequestsWithContext {
    constructor() {
        this.methods = new Set();
        this.readFilter = this.filterMessage.bind(this);
    }
    add(method) {
        if (method) {
            this.methods.add(method);
        }
    }
    filterMessage(msg) {
        const request = msg;
        if (!request.method || !this.methods.has(request.method)) {
            return msg;
        }
        const context = msg.context || {};
        if (!request.params) {
            request.params = [context];
        }
        else if (Array.isArray(request.params)) {
            request.params.push(context);
        }
        return request;
    }
}
exports.RpcRequestsWithContext = RpcRequestsWithContext;
function createMethodNotFoundResponse(method) {
    return new vscode_jsonrpc_1.ResponseError(vscode_jsonrpc_1.ErrorCodes.MethodNotFound, `method:${method} not supported`);
}
exports.createMethodNotFoundResponse = createMethodNotFoundResponse;
//# sourceMappingURL=RpcUtils.js.map

/***/ }),

/***/ 49906:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertRpcRequestContext = exports.rpcContextNoSessionMessage = exports.rpcContextExpectedMessage = void 0;
const vscs_utils_1 = __webpack_require__(19745);
exports.rpcContextExpectedMessage = 'Rpc Request context expected';
exports.rpcContextNoSessionMessage = 'No session being defined';
function assertRpcRequestContext(rpcRequestContext) {
    (0, vscs_utils_1.assertDefined)(rpcRequestContext, exports.rpcContextExpectedMessage);
    (0, vscs_utils_1.assertDefined)(rpcRequestContext.session, exports.rpcContextNoSessionMessage);
}
exports.assertRpcRequestContext = assertRpcRequestContext;
//# sourceMappingURL=assertRpcRequestContext.js.map

/***/ }),

/***/ 61586:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDuplexRpcMessageStreams = void 0;
const rpc = __importStar(__webpack_require__(83730));
const events_1 = __webpack_require__(50343);
/**
 * Create a duplex rpc stream loopback to connect to rpc connections on the same process.
 * @returns the pair of rpc message streams.
 */
function createDuplexRpcMessageStreams() {
    const readableStream1 = new DuplexReadableStream();
    const writableStream1 = new DuplexWritableStream(readableStream1);
    const readableStream2 = new DuplexReadableStream();
    const writableStream2 = new DuplexWritableStream(readableStream2);
    const messageReader1 = new rpc.StreamMessageReader(readableStream1);
    const messageWriter1 = new rpc.StreamMessageWriter(writableStream1);
    const messageReader2 = new rpc.StreamMessageReader(readableStream2);
    const messageWriter2 = new rpc.StreamMessageWriter(writableStream2);
    return [
        {
            reader: messageReader1,
            writer: messageWriter2,
        },
        {
            reader: messageReader2,
            writer: messageWriter1,
        },
    ];
}
exports.createDuplexRpcMessageStreams = createDuplexRpcMessageStreams;
class DuplexReadableStream extends events_1.EventEmitter {
}
class DuplexWritableStream extends events_1.EventEmitter {
    constructor(readableStream) {
        super();
        this.readableStream = readableStream;
    }
    write(str, encoding, cb) {
        this.readableStream.emit('data', str);
        return true;
    }
}
//# sourceMappingURL=createDuplexRpcMessageStreams.js.map

/***/ }),

/***/ 79240:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rpcMaxMessageSize = exports.createDuplexRpcMessageStreams = exports.rpcUtils = exports.Channel = exports.RpcProxyCache = exports.dataFormat = exports.DataFormat = exports.RpcMessageWriter = exports.RpcServer = exports.RpcError = exports.RpcConnectionShutdownError = exports.RpcConnectionClosedError = exports.RpcLoggerAdapter = exports.RpcClientProxyBase = exports.RpcClientProxy = exports.RpcClient = exports.methodProgress = exports.RpcServiceHandler = exports.RpcProxy = exports.RpcErrorCodes = void 0;
var RpcProxy_1 = __webpack_require__(70008);
Object.defineProperty(exports, "RpcErrorCodes", ({ enumerable: true, get: function () { return RpcProxy_1.RpcErrorCodes; } }));
Object.defineProperty(exports, "RpcProxy", ({ enumerable: true, get: function () { return RpcProxy_1.RpcProxy; } }));
var RpcServiceHandler_1 = __webpack_require__(56647);
Object.defineProperty(exports, "RpcServiceHandler", ({ enumerable: true, get: function () { return RpcServiceHandler_1.RpcServiceHandler; } }));
Object.defineProperty(exports, "methodProgress", ({ enumerable: true, get: function () { return RpcServiceHandler_1.methodProgress; } }));
var RpcClient_1 = __webpack_require__(5954);
Object.defineProperty(exports, "RpcClient", ({ enumerable: true, get: function () { return RpcClient_1.RpcClient; } }));
var RpcClientProxy_1 = __webpack_require__(40952);
Object.defineProperty(exports, "RpcClientProxy", ({ enumerable: true, get: function () { return RpcClientProxy_1.RpcClientProxy; } }));
Object.defineProperty(exports, "RpcClientProxyBase", ({ enumerable: true, get: function () { return RpcClientProxy_1.RpcClientProxyBase; } }));
var RpcLoggerAdapter_1 = __webpack_require__(70735);
Object.defineProperty(exports, "RpcLoggerAdapter", ({ enumerable: true, get: function () { return RpcLoggerAdapter_1.RpcLoggerAdapter; } }));
var RpcConnectionErrors_1 = __webpack_require__(78161);
Object.defineProperty(exports, "RpcConnectionClosedError", ({ enumerable: true, get: function () { return RpcConnectionErrors_1.RpcConnectionClosedError; } }));
Object.defineProperty(exports, "RpcConnectionShutdownError", ({ enumerable: true, get: function () { return RpcConnectionErrors_1.RpcConnectionShutdownError; } }));
var RpcError_1 = __webpack_require__(25966);
Object.defineProperty(exports, "RpcError", ({ enumerable: true, get: function () { return RpcError_1.RpcError; } }));
var RpcServer_1 = __webpack_require__(68603);
Object.defineProperty(exports, "RpcServer", ({ enumerable: true, get: function () { return RpcServer_1.RpcServer; } }));
var RpcMessageWriter_1 = __webpack_require__(6324);
Object.defineProperty(exports, "RpcMessageWriter", ({ enumerable: true, get: function () { return RpcMessageWriter_1.RpcMessageWriter; } }));
var DataFormat_1 = __webpack_require__(15304);
Object.defineProperty(exports, "DataFormat", ({ enumerable: true, get: function () { return DataFormat_1.DataFormat; } }));
Object.defineProperty(exports, "dataFormat", ({ enumerable: true, get: function () { return DataFormat_1.dataFormat; } }));
var RpcProxyCache_1 = __webpack_require__(54847);
Object.defineProperty(exports, "RpcProxyCache", ({ enumerable: true, get: function () { return RpcProxyCache_1.RpcProxyCache; } }));
var Channel_1 = __webpack_require__(87957);
Object.defineProperty(exports, "Channel", ({ enumerable: true, get: function () { return Channel_1.Channel; } }));
const rpcUtils = __importStar(__webpack_require__(89644));
exports.rpcUtils = rpcUtils;
__exportStar(__webpack_require__(30268), exports);
var createDuplexRpcMessageStreams_1 = __webpack_require__(61586);
Object.defineProperty(exports, "createDuplexRpcMessageStreams", ({ enumerable: true, get: function () { return createDuplexRpcMessageStreams_1.createDuplexRpcMessageStreams; } }));
exports.rpcMaxMessageSize = 10 * 1024 * 1024; // 10 MB
__exportStar(__webpack_require__(49906), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 30268:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sendRpcRequest = exports.normalizeRpcParameters = exports.getRawRpcParameters = void 0;
const vso_logging_1 = __webpack_require__(98287);
/**
 * Return the 'raw' message parametes array from a previously filtered array
 * @param filteredRcpParams The filtered rpc params
 * @returns raw rpc parameters without any 'injected' parameter.
 */
function getRawRpcParameters(filteredRcpParams) {
    const rpcParams = [...filteredRcpParams];
    normalizeRpcParameters(rpcParams);
    return rpcParams;
}
exports.getRawRpcParameters = getRawRpcParameters;
function normalizeRpcParameters(rpcParams) {
    // Note: we need to remove the injected parameter 0 that is coming from RpcServiceHandler
    const requestId = rpcParams.splice(0, 1)[0];
    // Note: json-rpc lib will inject a Cancellation token also at the end. Next block
    // will attempt to remove it since we want a pure rpc message to flow.
    if (rpcParams.length > 0) {
        const cancellationTokenParam = rpcParams[rpcParams.length - 1];
        // Check if the param is a 'MutableToken'
        // cancellationTokenParam.constructor.name === 'MutableToken'
        // We cannot check the constructor name as it can be different due to minification at run-time
        if (cancellationTokenParam &&
            'isCancellationRequested' in cancellationTokenParam &&
            'onCancellationRequested' in cancellationTokenParam) {
            const token = rpcParams.splice(rpcParams.length - 1, 1)[0];
            return [requestId, token];
        }
    }
    return [requestId, null];
}
exports.normalizeRpcParameters = normalizeRpcParameters;
/**
 * send an rpc request to a message connection from an rpc service handler.
 */
function sendRpcRequest(messageConnection, method, filteredRcpParams, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const start = Date.now();
            const result = yield messageConnection.sendRequest(method, getRawRpcParameters(filteredRcpParams));
            const time = (Date.now() - start).toFixed(1);
            logger === null || logger === void 0 ? void 0 : logger.info(`remote rpc request method: "${method}" result: "${vso_logging_1.TraceFormat.stringify(result)}
            t:${time}`);
            return result;
        }
        catch (err) {
            logger === null || logger === void 0 ? void 0 : logger.error(`failed to handle request for method:${method}`, err);
            throw err;
        }
    });
}
exports.sendRpcRequest = sendRpcRequest;
//# sourceMappingURL=sendRpcRequest.js.map

/***/ }),

/***/ 93523:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FaultType = void 0;
var FaultType;
(function (FaultType) {
    FaultType[FaultType["Error"] = 0] = "Error";
    FaultType[FaultType["User"] = 1] = "User";
    FaultType[FaultType["Unknown"] = 2] = "Unknown";
    FaultType[FaultType["NonBlockingFault"] = 3] = "NonBlockingFault";
    FaultType[FaultType["UserCancelled"] = 4] = "UserCancelled";
    FaultType[FaultType["ByDesign"] = 5] = "ByDesign";
})(FaultType = exports.FaultType || (exports.FaultType = {}));
//# sourceMappingURL=FaultType.js.map

/***/ }),

/***/ 26837:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Result = void 0;
var Result;
(function (Result) {
    Result[Result["Cancel"] = 0] = "Cancel";
    Result[Result["Success"] = 1] = "Success";
    Result[Result["Failure"] = 2] = "Failure";
    Result[Result["UserFailure"] = 3] = "UserFailure";
    Result[Result["IndeterminateFailure"] = 4] = "IndeterminateFailure";
    Result[Result["NonBlockingFailure"] = 5] = "NonBlockingFailure";
    Result[Result["ByDesignFailure"] = 6] = "ByDesignFailure";
})(Result = exports.Result || (exports.Result = {}));
//# sourceMappingURL=Result.js.map

/***/ }),

/***/ 19814:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.propagateOffsetMarkTime = exports.cleanSensitiveInformation = exports.TimedEvent = exports.Fault = exports.TelemetryEvent = exports.Telemetry = exports.TelemetryClass = void 0;
const uuid = __webpack_require__(32286);
const vso_logging_1 = __webpack_require__(98287);
const FaultType_1 = __webpack_require__(93523);
const TelemetryStrings_1 = __webpack_require__(8250);
const vscode_jsonrpc_1 = __webpack_require__(83730);
const Result_1 = __webpack_require__(26837);
let sequence = 0;
function setSequence() {
    sequence += 1;
    return sequence;
}
class TelemetryClass {
    constructor() {
        this.telemetryEvents = {};
        this.filters = [];
        this.canSendSensitiveFlag = false;
    }
    get reporter() {
        return this.telemetryReporter;
    }
    get canSendSensitiveInformation() {
        return this.canSendSensitiveFlag;
    }
    init(reporter, featureName, canSendSensitiveInformation, faultSendCallbackParam) {
        this.telemetryReporter = reporter;
        this.canSendSensitiveFlag = canSendSensitiveInformation;
        TelemetryStrings_1.TelemetryPropertyNames.FEATURE_NAME = featureName || '';
        if (faultSendCallbackParam) {
            faultSendCallback = faultSendCallbackParam;
        }
        this.contextProperties = {};
        this.addContextProperty(TelemetryStrings_1.TelemetryPropertyNames.SESSION_ID, uuid.v4());
    }
    addFilter(filter) {
        this.filters.push(filter);
    }
    removeFilter(filter) {
        const idx = this.filters.indexOf(filter);
        if (idx >= 0) {
            this.filters.splice(idx, 1);
        }
    }
    addContextProperties(props, isPII = false) {
        for (const [key, value] of Object.entries(props)) {
            this.addContextProperty(key, value, isPII);
        }
        return this;
    }
    addContextProperty(property, value, isPII = false) {
        // no need to set `undefined` values
        if (value === undefined) {
            return this;
        }
        const valueString = String(value);
        if (isPII && !this.canSendSensitiveInformation) {
            this.contextProperties[property] = vso_logging_1.Privacy.getShortHash(valueString);
        }
        else {
            this.contextProperties[property] = valueString;
        }
        return this;
    }
    removeContextProperty(property) {
        delete this.contextProperties[property];
    }
    getContextProperty(property) {
        return this.contextProperties[property];
    }
    addContextPropertiesToObject(properties) {
        return Object.assign({}, this.contextProperties, properties);
    }
    filterAndSendTelemetryEvent(eventName, callback, properties, measures) {
        if (!this.reporter) {
            // init not called
            return;
        }
        const augmentedMeasures = Object.assign({}, measures);
        const augmentedProperties = this.addContextPropertiesToObject(properties);
        for (const filter of this.filters) {
            if (!filter.shouldSend(eventName, augmentedProperties, augmentedMeasures)) {
                return;
            }
        }
        augmentedMeasures[TelemetryStrings_1.TelemetryPropertyNames.SEQUENCE_NUMBER] = setSequence();
        callback(augmentedProperties, augmentedMeasures);
    }
    sendTelemetryEvent(eventName, properties, measures) {
        const cb = (augmentedProperties, augmentedMeasures) => this.reporter.sendTelemetryEvent(eventName, augmentedProperties, augmentedMeasures);
        this.filterAndSendTelemetryEvent(eventName, cb, properties, measures);
    }
    sendTelemetryErrorEvent(eventName, properties, measures, errorProps) {
        const cb = (augmentedProperties, augmentedMeasures) => this.reporter.sendTelemetryErrorEvent(eventName, augmentedProperties, augmentedMeasures, errorProps);
        this.filterAndSendTelemetryEvent(eventName, cb, properties, measures);
    }
    sendFault(eventName, type, details, exception, correlatedEvent) {
        new Fault(eventName, type, details, exception, correlatedEvent).send();
    }
    startTimedEvent(eventName, correlate = false) {
        const timedEvent = new TimedEvent(eventName, correlate);
        // save the event to telemetry events queue
        this.telemetryEvents[timedEvent.id] = timedEvent;
        return timedEvent;
    }
    setCorrelationEvent(correlationEvent) {
        this.correlationEvent = correlationEvent;
    }
    removeCorrelationEvent(correlationEvent) {
        if (this.correlationEvent === correlationEvent) {
            this.correlationEvent = undefined;
        }
    }
    correlate(telemetryEvent) {
        if (this.correlationEvent) {
            telemetryEvent.correlateWith(this.correlationEvent);
        }
    }
    endAllPendingEvents() {
        return __awaiter(this, void 0, void 0, function* () {
            for (let eventId of Object.keys(this.telemetryEvents)) {
                const event = this.telemetryEvents[eventId];
                yield event.endIfNotSent();
                delete this.telemetryEvents[eventId];
            }
        });
    }
    dispose() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reporter.dispose();
        });
    }
}
exports.TelemetryClass = TelemetryClass;
// tslint:disable-next-line: variable-name
const Telemetry = new TelemetryClass();
exports.Telemetry = Telemetry;
let faultSendCallback;
class TelemetryEvent {
    constructor(eventName, correlate = false) {
        this.isSent = false;
        this.id = uuid.v4();
        this.eventName = eventName;
        this.properties = {};
        this.measures = {};
        this.correlationId = uuid.v4();
        if (correlate) {
            Telemetry.correlate(this);
        }
    }
    static create(property, data) {
        const correlate = data ? !!data.correlate : false;
        const telemetryEvent = new TelemetryEvent(property, correlate);
        if (data.properties) {
            Object.keys(data.properties).forEach((key) => telemetryEvent.addProperty(TelemetryStrings_1.TelemetryPropertyNames.FEATURE_NAME + key, data.properties[key]));
        }
        if (data.measures) {
            Object.keys(data.measures).forEach((key) => telemetryEvent.addMeasure(TelemetryStrings_1.TelemetryPropertyNames.FEATURE_NAME + key, data.measures[key]));
        }
        return telemetryEvent;
    }
    addProperty(property, value, isPII = false, unkeyed = false) {
        // no need to set `undefined` values
        if (value === undefined) {
            return this;
        }
        const valueString = String(value);
        if (isPII && !Telemetry.canSendSensitiveInformation) {
            this.properties[property] = vso_logging_1.Privacy.getHash(valueString, unkeyed);
        }
        else {
            this.properties[property] = valueString;
        }
        return this;
    }
    addProperties(props, isPII = true) {
        for (let [key, value] of Object.entries(props)) {
            this.addProperty(key, value, isPII);
        }
        return this;
    }
    addPropertyIfNotExists(property, value, isPII = false, unkeyed = false) {
        if (!this.propertyExists(property)) {
            this.addProperty(property, value, isPII, unkeyed);
        }
        return this;
    }
    propertyExists(property) {
        return property in this.properties;
    }
    addMeasure(measure, value) {
        this.measures[measure] = value;
    }
    addMeasureIfNotExists(measure, value) {
        if (this.measures[measure] === undefined) {
            this.addMeasure(measure, value);
        }
    }
    getCorrelationId() {
        return this.correlationId;
    }
    correlateWith(otherEvent) {
        this.correlationId = otherEvent.getCorrelationId();
        return this;
    }
    correlateWithId(correlationId) {
        this.correlationId = correlationId;
        return this;
    }
    addCommonProperties() {
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_ID, this.id);
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.CORRELATION_ID, this.correlationId);
    }
    send() {
        this.addCommonProperties();
        Telemetry.sendTelemetryEvent(this.eventName, this.properties, this.measures);
        this.isSent = true;
    }
    sendAsError(errorProps) {
        this.addCommonProperties();
        Telemetry.sendTelemetryErrorEvent(this.eventName, this.properties, this.measures, errorProps);
        this.isSent = true;
    }
}
exports.TelemetryEvent = TelemetryEvent;
class Fault extends TelemetryEvent {
    constructor(eventName, type, details, exception, correlatedEvent) {
        super(eventName);
        this.exception = exception;
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.FAULT_TYPE, FaultType_1.FaultType[type]);
        if (details) {
            this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_MESSAGE, cleanSensitiveInformation(details));
        }
        let exceptionStack = '';
        if (exception && exception instanceof vscode_jsonrpc_1.ResponseError) {
            if (exception.code && typeof exception.code === 'number') {
                this.addMeasure(TelemetryStrings_1.TelemetryPropertyNames.EVENT_EXCEPTION_CODE, exception.code);
            }
            if (exception.data && typeof exception.data === 'string') {
                // RPC response errors have the remote stack trace in the data property.
                exceptionStack +=
                    cleanSensitiveInformation(exception.data) + '\n   --- End of remote exception stack trace ---\n';
            }
        }
        if (exception && exception.stack && typeof exception.stack === 'string') {
            exceptionStack += cleanSensitiveInformation((0, vso_logging_1.errorToString)(exception));
        }
        if (!exceptionStack) {
            exceptionStack = 'No Stack';
        }
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_EXCEPTION_STACK, exceptionStack);
        if (correlatedEvent) {
            this.correlateWith(correlatedEvent);
        }
    }
    send() {
        const _super = Object.create(null, {
            sendAsError: { get: () => super.sendAsError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            let errorProps = [];
            if (faultSendCallback) {
                errorProps = yield faultSendCallback(this);
            }
            return _super.sendAsError.call(this, [
                ...errorProps,
                TelemetryStrings_1.TelemetryPropertyNames.EVENT_MESSAGE,
                TelemetryStrings_1.TelemetryPropertyNames.EVENT_EXCEPTION_STACK,
            ]);
        });
    }
}
exports.Fault = Fault;
class TimedEvent extends TelemetryEvent {
    constructor(eventName, correlate = false, sendStartEvent = false) {
        super(eventName, correlate);
        this.startTime = new Date().getTime();
        this.lastMarkTime = this.startTime;
        TimedEvent.scopeStack.push(this);
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_CREATION_TIME, new Date().toISOString());
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_TYPE, TelemetryStrings_1.TelemetryPropertyValues.END);
        if (sendStartEvent) {
            const startEvent = new TelemetryEvent(eventName);
            startEvent.correlateWith(this);
            startEvent.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_TYPE, TelemetryStrings_1.TelemetryPropertyValues.START);
            startEvent.send();
        }
    }
    markTime(markName, fromStart = false) {
        let currentTime = new Date().getTime();
        let duration = fromStart ? currentTime - this.startTime : currentTime - this.lastMarkTime;
        this.lastMarkTime = currentTime;
        this.addMeasure(markName, duration);
        return duration;
    }
    end(result, message, sendNow = true) {
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_RESULT, Result_1.Result[result]);
        if (message) {
            this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_MESSAGE, cleanSensitiveInformation(message));
        }
        const duration = this.markTime(TelemetryStrings_1.TelemetryPropertyNames.EVENT_DURATION, true);
        Telemetry.removeCorrelationEvent(this);
        if (sendNow) {
            this.send();
        }
        for (let i = TimedEvent.scopeStack.length - 1; i >= 0; i--) {
            if (TimedEvent.scopeStack[i] === this) {
                TimedEvent.scopeStack.splice(i, 1);
            }
        }
        return duration;
    }
    endIfNotSent() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isSent) {
                return;
            }
            yield this.end(Result_1.Result.Cancel, 'Completing pending telemetry events.');
        });
    }
}
exports.TimedEvent = TimedEvent;
TimedEvent.scopeStack = [];
function removeEmailAddresses(str) {
    return str.replace(/[\S]+@[\S]+/gi, '[EMAIL]');
}
function cleanSensitiveInformation(str) {
    return str ? removeEmailAddresses(removePath(str, '[PATH]/')) : str;
}
exports.cleanSensitiveInformation = cleanSensitiveInformation;
function removePath(filePath, replacementString = '') {
    return filePath.replace(/([A-Za-z]:)?(\S*[\\\/])+\S*/gi, (match, drive, directory, offset, whole) => {
        if (/^\d{1,4}\/\d{1,2}\/\d{1,4}$/.test(match)) {
            // This is a date. No need to scrub.
            return match;
        }
        else {
            const driveAndDirectoryLength = (drive ? drive.length : 0) + directory.length;
            const fileName = match.substr(driveAndDirectoryLength);
            return replacementString + fileName;
        }
    });
}
const propagateOffsetMarkTime = (markName, markEvent) => {
    for (let i = 0; i < TimedEvent.scopeStack.length; i++) {
        const targetEvent = TimedEvent.scopeStack[i];
        if (targetEvent !== markEvent) {
            targetEvent.markTime(markName);
        }
    }
};
exports.propagateOffsetMarkTime = propagateOffsetMarkTime;
//# sourceMappingURL=Telemetry.js.map

/***/ }),

/***/ 38655:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SamplingFilter = exports.SendOnceFilter = void 0;
const TelemetryStrings_1 = __webpack_require__(8250);
// This filter ensures that only one telemetry event with the given
// event name and set of properties is ever sent. This is useful in
// situations where the same event can be sent many times; e.g. exceptions.
class SendOnceFilter {
    constructor(eventName, distinctProperties = []) {
        this.eventName = eventName;
        this.distinctProperties = distinctProperties;
        this.sentEventsProperties = [];
    }
    shouldSend(eventName, properties, measures) {
        if (eventName === this.eventName) {
            for (const sentProperties of this.sentEventsProperties) {
                if (this.propertySubsetsEqual(properties, sentProperties)) {
                    return false;
                }
            }
            this.sentEventsProperties.push(this.createPropertySubset(properties));
        }
        return true;
    }
    reset() {
        this.sentEventsProperties = [];
    }
    createPropertySubset(properties) {
        const propertySubset = {};
        for (const p of this.distinctProperties) {
            propertySubset[p] = properties[p];
        }
        return propertySubset;
    }
    propertySubsetsEqual(properties1, properties2) {
        for (const p of this.distinctProperties) {
            if (properties1[p] !== properties2[p]) {
                return false;
            }
        }
        return true;
    }
}
exports.SendOnceFilter = SendOnceFilter;
class SamplingFilter {
    constructor(samplingConfig) {
        this.samplingConfig = samplingConfig;
    }
    shouldSend(eventName, properties, measures) {
        if (!eventName) {
            return true;
        }
        // Check if sampling is enabled for this event
        const sampleRate = this.samplingConfig[eventName];
        if (typeof sampleRate === 'number' && !isNaN(sampleRate)) {
            if (sampleRate === 0 || Math.random() * sampleRate > 1) {
                // The event is disabled (sampleRate is 0) or sampled out
                return false;
            }
            // Include into the sample - add sample rate measure
            measures[TelemetryStrings_1.TelemetryPropertyNames.SAMPLE_RATE] = sampleRate;
        }
        return true;
    }
}
exports.SamplingFilter = SamplingFilter;
//# sourceMappingURL=TelemetryFilters.js.map

/***/ }),

/***/ 8250:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TelemetryPropertyValues = exports.TelemetryPropertyNames = void 0;
class TelemetryPropertyNames {
    static get FAULT_TYPE() {
        return TelemetryPropertyNames.FEATURE_NAME + 'FaultType';
    }
    static get EVENT_ID() {
        return TelemetryPropertyNames.FEATURE_NAME + 'EventId';
    }
    static get CORRELATION_ID() {
        return TelemetryPropertyNames.FEATURE_NAME + 'CorrelationId';
    }
    static get LOG_LINES() {
        return TelemetryPropertyNames.FEATURE_NAME + 'LogLines';
    }
    static get EVENT_MESSAGE() {
        return TelemetryPropertyNames.FEATURE_NAME + 'Message';
    }
    static get EVENT_EXCEPTION_STACK() {
        return TelemetryPropertyNames.FEATURE_NAME + 'ExceptionStack';
    }
    static get EVENT_RESULT() {
        return TelemetryPropertyNames.FEATURE_NAME + 'Result';
    }
    static get EVENT_TYPE() {
        return TelemetryPropertyNames.FEATURE_NAME + 'Type';
    }
    static get EVENT_DURATION() {
        return TelemetryPropertyNames.FEATURE_NAME + 'Duration';
    }
    static get EVENT_CREATION_TIME() {
        return TelemetryPropertyNames.FEATURE_NAME + 'CreationTime';
    }
    static get SESSION_ID() {
        return TelemetryPropertyNames.FEATURE_NAME + 'SessionId';
    }
    static get EVENT_EXCEPTION_CODE() {
        return TelemetryPropertyNames.FEATURE_NAME + 'ExceptionCode';
    }
    static get SAMPLE_RATE() {
        return TelemetryPropertyNames.FEATURE_NAME + 'SampleRate';
    }
    static get SEQUENCE_NUMBER() {
        return TelemetryPropertyNames.FEATURE_NAME + 'SequenceNumber';
    }
}
exports.TelemetryPropertyNames = TelemetryPropertyNames;
TelemetryPropertyNames.FEATURE_NAME = 'liveshare.';
class TelemetryPropertyValues {
}
exports.TelemetryPropertyValues = TelemetryPropertyValues;
TelemetryPropertyValues.START = 'start';
TelemetryPropertyValues.END = 'end';
//# sourceMappingURL=TelemetryStrings.js.map

/***/ }),

/***/ 76811:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SamplingFilter = exports.SendOnceFilter = exports.TelemetryResult = exports.FaultType = exports.TelemetryPropertyNames = exports.propagateOffsetMarkTime = exports.cleanSensitiveInformation = exports.TimedEvent = exports.Fault = exports.TelemetryEvent = exports.TelemetryClass = exports.Telemetry = void 0;
var Telemetry_1 = __webpack_require__(19814);
Object.defineProperty(exports, "Telemetry", ({ enumerable: true, get: function () { return Telemetry_1.Telemetry; } }));
Object.defineProperty(exports, "TelemetryClass", ({ enumerable: true, get: function () { return Telemetry_1.TelemetryClass; } }));
Object.defineProperty(exports, "TelemetryEvent", ({ enumerable: true, get: function () { return Telemetry_1.TelemetryEvent; } }));
Object.defineProperty(exports, "Fault", ({ enumerable: true, get: function () { return Telemetry_1.Fault; } }));
Object.defineProperty(exports, "TimedEvent", ({ enumerable: true, get: function () { return Telemetry_1.TimedEvent; } }));
Object.defineProperty(exports, "cleanSensitiveInformation", ({ enumerable: true, get: function () { return Telemetry_1.cleanSensitiveInformation; } }));
Object.defineProperty(exports, "propagateOffsetMarkTime", ({ enumerable: true, get: function () { return Telemetry_1.propagateOffsetMarkTime; } }));
var TelemetryStrings_1 = __webpack_require__(8250);
Object.defineProperty(exports, "TelemetryPropertyNames", ({ enumerable: true, get: function () { return TelemetryStrings_1.TelemetryPropertyNames; } }));
var FaultType_1 = __webpack_require__(93523);
Object.defineProperty(exports, "FaultType", ({ enumerable: true, get: function () { return FaultType_1.FaultType; } }));
var Result_1 = __webpack_require__(26837);
Object.defineProperty(exports, "TelemetryResult", ({ enumerable: true, get: function () { return Result_1.Result; } }));
var TelemetryFilters_1 = __webpack_require__(38655);
Object.defineProperty(exports, "SendOnceFilter", ({ enumerable: true, get: function () { return TelemetryFilters_1.SendOnceFilter; } }));
Object.defineProperty(exports, "SamplingFilter", ({ enumerable: true, get: function () { return TelemetryFilters_1.SamplingFilter; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 67451:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallbackContainer = void 0;
class CallbackContainer {
    constructor() {
        this.callbacks = [];
    }
    clear() {
        this.callbacks.length = 0;
    }
    get items() {
        return this.callbacks;
    }
    add(callback) {
        if (callback) {
            this.callbacks.push(callback);
        }
        return {
            dispose: () => {
                if (!callback) {
                    return;
                }
                const index = this.callbacks.indexOf(callback);
                if (index !== -1) {
                    this.callbacks.splice(index, 1);
                }
            },
        };
    }
}
exports.CallbackContainer = CallbackContainer;
//# sourceMappingURL=CallbackContainer.js.map

/***/ }),

/***/ 15786:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisposableClass = void 0;
const vscode_jsonrpc_1 = __webpack_require__(83730);
const dispose_1 = __webpack_require__(32622);
const utils_1 = __webpack_require__(73878);
/**
 * Disposable class can handle multiple child disposable that will
 * be disposed when the disposable class isntance is disposed itself.
 * It provides the `onDispose` event for your convenience and will
 * handle the disposables lifecycle, including removing the child
 * disposable object reference from the disposables list when the
 * child gets disposed, hence enable the garbage collection of the
 * object.
 * Also holds the `trace` instance so all classes that inherit from
 * this one will have the tracing available by default.
 */
class DisposableClass {
    constructor(traceReference) {
        this.traceReference = traceReference;
        this.disposablesReference = [];
        this.isDisposedReference = false;
        this.onDisposeEmitter = new vscode_jsonrpc_1.Emitter();
        this.onDisposeEvent = this.onDisposeEmitter.event;
        /**
         * Dispose a particular single disposable object.
         */
        this.disposeObject = (disposable, reason) => {
            try {
                disposable.dispose(reason);
            }
            catch (e) {
                this.trace.verbose('Error from disposable', disposable, reason, e);
            }
            finally {
                this.removeFromDisposables(disposable);
            }
        };
        /**
         * Remove a particular disposable from the child disposables list.
         */
        this.removeFromDisposables = (disposable) => {
            const index = this.disposablesReference.indexOf(disposable);
            if (index < 0) {
                return this;
            }
            this.disposablesReference.splice(index, 1);
            return this;
        };
        this.dispose = this.dispose.bind(this);
        this.onDispose = this.onDispose.bind(this);
    }
    /**
     * Trace instance used by the disposable class instance.
     */
    get disposables() {
        return [...this.disposablesReference];
    }
    /**
     * Trace instance used by the disposable class instance.
     */
    get trace() {
        return this.traceReference;
    }
    /**
     * Whether the disposable class is already disposed.
     */
    get isDisposed() {
        return this.isDisposedReference;
    }
    /**
     * Dispose all child disposables.
     */
    dispose(reason) {
        if (this.isDisposed) {
            return;
        }
        this.isDisposedReference = true;
        const reasonToLog = () => {
            var _a;
            if (reason) {
                if (typeof reason === 'function') {
                    return `${(_a = reason.constructor) === null || _a === void 0 ? void 0 : _a.name}-${JSON.stringify(reason)}`;
                }
                return String(reason);
            }
            return 'n/a';
        };
        try {
            const reason = reasonToLog();
            this.trace.verbose(`disposing reason: '${reason}', disposing ${this.disposables.length} objects`);
            /**
             * We use the public property here since it will make the disposables array clone,
             * otherwise it might be a problem since the the `disposeObject` (or rather the
             * `removeFromDisposables`) will modify the `disposablesReference` array in-place
             * which will mess up the `forEach` loop.
             */
            this.disposables.forEach((disposable, i) => {
                if (!disposable) {
                    this.trace.warning('disposable is not set in the disposables object');
                    return;
                }
                if (disposable.isDisposed) {
                    return;
                }
                return this.disposeObject(disposable, `${reason} $${i}`);
            });
            this.disposablesReference.length = 0;
        }
        catch (e) {
            this.trace.warning('error while disposing an object', e);
        }
        this.onDisposeEmitter.fire(this);
        this.onDisposeEmitter.dispose();
    }
    /**
     * Adds an `IDisposable` to the list of the child disposables, each of which will be
     * disposed when the disposable class is disposed.
     */
    addToDisposables(...disposables) {
        for (const disposable of disposables) {
            (0, utils_1.assertDefined)(disposable, 'Disposable must be defined.');
            /**
             * Subscribe to `onDispose` from child disposables and remove the disposable
             * from the `disposables` array so we don't hold the reference to the object.
             */
            if ('onDispose' in disposable) {
                const eventListener = disposable.onDispose(() => {
                    this.disposeObject(eventListener);
                    this.removeFromDisposables(disposable);
                });
            }
            if ('dispose' in disposable) {
                this.disposablesReference.push(disposable);
            }
        }
        return this;
    }
    /**
     * Event fired only once, when the disposable class is disposed.
     * If the disposable class already disposed the callback called immediatelly.
     */
    onDispose(callback, thisArgs) {
        if (this.isDisposed) {
            this.trace.verbose('already disposed, calling callback immediately');
            callback.call(thisArgs, this);
            return {
                dispose: () => { },
            };
        }
        this.trace.verbose('subscribing to onDispose event');
        const onDisposeEvent = this.onDisposeEvent(callback.bind(thisArgs !== null && thisArgs !== void 0 ? thisArgs : this, this));
        // delay the `onDispose()` event disposal, sp the `onDisposeEmitter` has a
        // chance to fire see `this.dispose()` method for more info.
        return (0, dispose_1.createDisposable)((reason) => {
            (0, utils_1.defer)(() => {
                try {
                    onDisposeEvent.dispose(reason);
                }
                catch (_a) {
                    /* noop */
                }
            }, 1);
        }, this.trace.createChild('delayed-disposable'));
    }
}
exports.DisposableClass = DisposableClass;
//# sourceMappingURL=DisposableClass.js.map

/***/ }),

/***/ 31454:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setLazyLoadMutable = exports.delayedLoadMutable = exports.lazyLoadNotImplemented = exports.lazyLoadMutable = exports.lazyLoad = void 0;
/**
 * Create a readonly lazy instance.
 * If createIfNotCreated = false, we return either the cached instance if it exists or undefined if it does not exist.
 */
function lazyLoad(loader) {
    let cache;
    return (createIfNotCreated = true) => {
        if (cache !== undefined) {
            return cache;
        }
        else if (createIfNotCreated) {
            return (cache = loader());
        }
        return undefined;
    };
}
exports.lazyLoad = lazyLoad;
/** Create a mutable lazy load wrapper.
 * @param loader - optional value loader. If not provided, value property must be set before the value function is called.
 */
function lazyLoadMutable(loader) {
    const result = () => {
        if (result.value === undefined && result.loader) {
            result.value = result.loader();
        }
        if (result.value === undefined) {
            throw new Error('No loader o value was supplied.');
        }
        return result.value;
    };
    result.loader = loader;
    return result;
}
exports.lazyLoadMutable = lazyLoadMutable;
function lazyLoadNotImplemented() {
    throw new Error('Dependencies: Instance not provided.');
}
exports.lazyLoadNotImplemented = lazyLoadNotImplemented;
function delayedLoadMutable(propertyName) {
    return lazyLoadMutable(() => {
        throw Error(`Dependencies: ${propertyName} is not yet initialized`);
    });
}
exports.delayedLoadMutable = delayedLoadMutable;
/** Set a new loader (if it's defined) on the lazy object. Return the updated lazy object. */
function setLazyLoadMutable(orignal, loader) {
    if (typeof loader === 'function') {
        orignal.loader = loader;
    }
    return orignal;
}
exports.setLazyLoadMutable = setLazyLoadMutable;
//# sourceMappingURL=Lazy.js.map

/***/ }),

/***/ 30629:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Mutex = void 0;
class Mutex {
    constructor() {
        this.mutex = Promise.resolve();
    }
    dispatch(fn) {
        return __awaiter(this, void 0, void 0, function* () {
            const unlock = yield this.lock();
            try {
                return yield Promise.resolve(fn());
            }
            finally {
                unlock();
            }
        });
    }
    lock() {
        let begin = (unlock) => { };
        this.mutex = this.mutex.then(() => {
            return new Promise(begin);
        });
        return new Promise((resolve) => {
            begin = resolve;
        });
    }
}
exports.Mutex = Mutex;
//# sourceMappingURL=Mutex.js.map

/***/ }),

/***/ 14772:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Signal = void 0;
const utils_1 = __webpack_require__(73878);
const errors_1 = __webpack_require__(77665);
/**
 * An abstraction above a promise, makes it easy to `resolve`/`reject`
 * promise afterward and keeps the promise state attributes.
 */
class Signal {
    constructor(cancellationToken) {
        this.stateReference = 'pending';
        // tslint:disable-next-line: promise-must-complete
        this.promiseReference = new Promise((resolve, reject) => {
            this.promiseResolve = resolve;
            this.promiseReject = reject;
        });
        this.resolve = this.resolve.bind(this);
        this.reject = this.reject.bind(this);
        this.cancel = this.cancel.bind(this);
        if (!cancellationToken) {
            return;
        }
        if (cancellationToken.isCancellationRequested) {
            this.cancel();
        }
        else if (cancellationToken.onCancellationRequested) {
            cancellationToken.onCancellationRequested(() => {
                if (this.isFulfilled) {
                    return;
                }
                this.cancel();
            });
        }
    }
    get isFulfilled() {
        return this.state !== 'pending';
    }
    get state() {
        return this.stateReference;
    }
    get isResolved() {
        return this.state === 'resolved';
    }
    get isRejected() {
        return this.state === 'rejected';
    }
    get isCancelled() {
        return this.state === 'cancelled';
    }
    resolve(result) {
        if (this.isFulfilled) {
            return;
        }
        this.stateReference = 'resolved';
        (0, utils_1.assertDefined)(this.promiseResolve, 'No `promiseResolve` function found.');
        this.promiseResolve(result);
    }
    reject(error) {
        if (this.isFulfilled) {
            return;
        }
        this.stateReference = 'rejected';
        (0, utils_1.assertDefined)(this.promiseReject, 'No `promiseReject` function found.');
        this.promiseReject(error);
    }
    cancel() {
        if (this.isFulfilled) {
            return;
        }
        this.stateReference = 'cancelled';
        (0, utils_1.assertDefined)(this.promiseReject, 'No `promiseReject` function found.');
        this.promiseReject(new errors_1.CancellationError());
    }
    get promise() {
        return this.promiseReference;
    }
    static from(value) {
        const signal = new Signal();
        if ((0, utils_1.isThenable)(value)) {
            value.then(signal.resolve, signal.reject);
        }
        else {
            signal.resolve(value);
        }
        return signal;
    }
    dispose() {
        if (this.isFulfilled) {
            return;
        }
        this.cancel();
    }
}
exports.Signal = Signal;
//# sourceMappingURL=Signal.js.map

/***/ }),

/***/ 68110:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallbackContainer = exports.Mutex = exports.Signal = exports.DisposableClass = void 0;
var DisposableClass_1 = __webpack_require__(15786);
Object.defineProperty(exports, "DisposableClass", ({ enumerable: true, get: function () { return DisposableClass_1.DisposableClass; } }));
var Signal_1 = __webpack_require__(14772);
Object.defineProperty(exports, "Signal", ({ enumerable: true, get: function () { return Signal_1.Signal; } }));
var Mutex_1 = __webpack_require__(30629);
Object.defineProperty(exports, "Mutex", ({ enumerable: true, get: function () { return Mutex_1.Mutex; } }));
var CallbackContainer_1 = __webpack_require__(67451);
Object.defineProperty(exports, "CallbackContainer", ({ enumerable: true, get: function () { return CallbackContainer_1.CallbackContainer; } }));
__exportStar(__webpack_require__(31454), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 13696:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.globalTrace = void 0;
const vso_logging_1 = __webpack_require__(98287);
__exportStar(__webpack_require__(54808), exports);
exports.globalTrace = new vso_logging_1.TraceSource('vscs');
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 54808:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TIME_DAY_MS = exports.TIME_HOUR_MS = exports.TIME_MINUTE_MS = exports.TIME_SECOND_MS = void 0;
exports.TIME_SECOND_MS = 1000;
exports.TIME_MINUTE_MS = 60 * exports.TIME_SECOND_MS;
exports.TIME_HOUR_MS = 60 * exports.TIME_MINUTE_MS;
exports.TIME_DAY_MS = 24 * exports.TIME_HOUR_MS;
//# sourceMappingURL=time.js.map

/***/ }),

/***/ 59:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AggregateError = void 0;
const _1 = __webpack_require__(77665);
/**
 * Aggregate error holds a list of errors.
 */
class AggregateError extends _1.BaseError {
    constructor() {
        super(...arguments);
        this.errorType = 'AggregateError';
        /**
         * The errors list as a private reference.
         */
        this.errorsReference = [];
    }
    /**
     * Get a copy aggregate error list.
     */
    get errors() {
        return [...this.errorsReference];
    }
    /**
     * Add errors to the aggregate error list.
     */
    addErrors(...errors) {
        this.errorsReference.push(...errors);
        return this;
    }
    /**
     * Creates new `AggregateError` copy from the current one and adds the errors.
     */
    cloneWithErrors(...errors) {
        const newError = new AggregateError();
        newError.addErrors(...this.errors, ...errors);
        return newError;
    }
    /**
     * Return the last error in the error sequence.s
     */
    get lastError() {
        const lastErrorIndex = this.errorsReference.length - 1;
        return this.errorsReference[lastErrorIndex];
    }
}
exports.AggregateError = AggregateError;
//# sourceMappingURL=AggregateError.js.map

/***/ }),

/***/ 89135:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AssertionError = void 0;
const BaseError_1 = __webpack_require__(94311);
/**
 * Error thrown when an assertion fails.
 */
class AssertionError extends BaseError_1.BaseError {
    constructor() {
        super(...arguments);
        this.errorType = 'AssertionError';
    }
}
exports.AssertionError = AssertionError;
//# sourceMappingURL=AssertionError.js.map

/***/ }),

/***/ 5429:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuthenticationError = void 0;
const BaseError_1 = __webpack_require__(94311);
/**
 * Error inticates authentication failure.
 */
class AuthenticationError extends BaseError_1.BaseError {
    constructor() {
        super(...arguments);
        this.errorType = 'AuthenticationError';
    }
}
exports.AuthenticationError = AuthenticationError;
//# sourceMappingURL=AuthenticationError.js.map

/***/ }),

/***/ 94311:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseError = void 0;
/**
 * Base error, all errors should extened it and specify new `errorType`.
 *
 * The error has:

 *  - `errorType` - idetifies the eror type, every eror that inherits from
 *      this one, override the `errorType` with its own value.
 * - `errorCode` - error code (number) for the specific error case.
 * - `originalErrorType` - if an error with an `errorType`/`errorCode` is
 *     "wrapped" with this error, the data is reserved in the `originalErrorType`
 *     so we don't loose the original context.
 * - `stack`[optional] - error stack trace. If an error is wrapped with this
 *     error, the stack is copied over.
 */
class BaseError extends Error {
    constructor(error, errorCode) {
        super(typeof error === 'string' ? error : error === null || error === void 0 ? void 0 : error.message);
        this.errorCode = errorCode;
        this.errorType = 'BaseError';
        if (error instanceof Error) {
            this.originalError = error;
            this.stack = error.stack;
            this.originalErrorType = this.getOriginalErrorCode(error);
            this.errorCode = errorCode !== null && errorCode !== void 0 ? errorCode : error.errorCode;
        }
    }
    getOriginalErrorCode(error) {
        const { errorType = '<no-type>', errorCode = '<no-code>' } = error;
        return `[${errorType}:${errorCode}]`;
    }
}
exports.BaseError = BaseError;
//# sourceMappingURL=BaseError.js.map

/***/ }),

/***/ 72052:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ByDesignError = void 0;
class ByDesignError extends Error {
    constructor(message, code, isSuppressUserNotification) {
        super(message);
        this.code = code;
        this.isSuppressUserNotification = isSuppressUserNotification;
    }
}
exports.ByDesignError = ByDesignError;
//# sourceMappingURL=ByDesignError.js.map

/***/ }),

/***/ 73786:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CancellationError = void 0;
const BaseError_1 = __webpack_require__(94311);
/**
 * Error thrown when something is cancelled. Used by `Signal`.
 */
class CancellationError extends BaseError_1.BaseError {
    constructor() {
        super(...arguments);
        this.errorType = 'CancellationError';
    }
}
exports.CancellationError = CancellationError;
//# sourceMappingURL=CancellationError.js.map

/***/ }),

/***/ 97299:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotImplementedError = void 0;
const BaseError_1 = __webpack_require__(94311);
/**
 * Error thrown when an some function or method is not implemented.
 */
class NotImplementedError extends BaseError_1.BaseError {
    constructor() {
        super(...arguments);
        this.errorType = 'NotImplementedError';
    }
}
exports.NotImplementedError = NotImplementedError;
//# sourceMappingURL=NotImplementedError.js.map

/***/ }),

/***/ 93163:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PromiseRaceError = void 0;
const BaseError_1 = __webpack_require__(94311);
/**
 * The promise race error is thrown when all promises have thrown.
 * In this case the error will be derrived from the last thrown
 * error and `errorList` will contain entire error list.
 */
class PromiseRaceError extends BaseError_1.BaseError {
    constructor(errorList, error, errorCode) {
        super(error, errorCode);
        this.errorList = errorList;
        this.errorType = 'PromiseRaceError';
    }
}
exports.PromiseRaceError = PromiseRaceError;
//# sourceMappingURL=PromiseRaceError.js.map

/***/ }),

/***/ 26118:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TimeoutCancellationError = void 0;
const CancellationError_1 = __webpack_require__(73786);
/**
 * Error thrown when some operation should be cancelled by a timeout.
 */
class TimeoutCancellationError extends CancellationError_1.CancellationError {
    constructor() {
        super(...arguments);
        this.errorType = 'TimeoutCancellationError';
    }
}
exports.TimeoutCancellationError = TimeoutCancellationError;
//# sourceMappingURL=TimeoutCancellationError.js.map

/***/ }),

/***/ 77665:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TimeoutCancellationError = exports.AuthenticationError = exports.NotImplementedError = exports.CancellationError = exports.PromiseRaceError = exports.AssertionError = exports.AggregateError = exports.ByDesignError = exports.BaseError = void 0;
var BaseError_1 = __webpack_require__(94311);
Object.defineProperty(exports, "BaseError", ({ enumerable: true, get: function () { return BaseError_1.BaseError; } }));
var ByDesignError_1 = __webpack_require__(72052);
Object.defineProperty(exports, "ByDesignError", ({ enumerable: true, get: function () { return ByDesignError_1.ByDesignError; } }));
var AggregateError_1 = __webpack_require__(59);
Object.defineProperty(exports, "AggregateError", ({ enumerable: true, get: function () { return AggregateError_1.AggregateError; } }));
var AssertionError_1 = __webpack_require__(89135);
Object.defineProperty(exports, "AssertionError", ({ enumerable: true, get: function () { return AssertionError_1.AssertionError; } }));
var PromiseRaceError_1 = __webpack_require__(93163);
Object.defineProperty(exports, "PromiseRaceError", ({ enumerable: true, get: function () { return PromiseRaceError_1.PromiseRaceError; } }));
var CancellationError_1 = __webpack_require__(73786);
Object.defineProperty(exports, "CancellationError", ({ enumerable: true, get: function () { return CancellationError_1.CancellationError; } }));
var NotImplementedError_1 = __webpack_require__(97299);
Object.defineProperty(exports, "NotImplementedError", ({ enumerable: true, get: function () { return NotImplementedError_1.NotImplementedError; } }));
var AuthenticationError_1 = __webpack_require__(5429);
Object.defineProperty(exports, "AuthenticationError", ({ enumerable: true, get: function () { return AuthenticationError_1.AuthenticationError; } }));
var TimeoutCancellationError_1 = __webpack_require__(26118);
Object.defineProperty(exports, "TimeoutCancellationError", ({ enumerable: true, get: function () { return TimeoutCancellationError_1.TimeoutCancellationError; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 19745:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Utilities
 */
__exportStar(__webpack_require__(73878), exports);
/**
 * Components
 */
__exportStar(__webpack_require__(68110), exports);
/**
 * Errors
 */
__exportStar(__webpack_require__(77665), exports);
/**
 * Constants
 */
__exportStar(__webpack_require__(13696), exports);
/**
 * Mocks
 */
__exportStar(__webpack_require__(33518), exports);
/**
 * Interfaces
 */
__exportStar(__webpack_require__(48290), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 48290:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5861:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisposableClassMock = void 0;
const vso_logging_1 = __webpack_require__(98287);
class DisposableClassMock {
    constructor() {
        this.trace = new vso_logging_1.TraceSource('test-logger');
        this.addToDisposables = (disposable) => {
            return this;
        };
        this.isDisposed = false;
        this.onDispose = (callback, thisArgs) => {
            return {
                dispose: () => { },
            };
        };
        this.dispose = () => {
            return this;
        };
    }
}
exports.DisposableClassMock = DisposableClassMock;
//# sourceMappingURL=DisposableClassMock.js.map

/***/ }),

/***/ 33518:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisposableClassMock = void 0;
var DisposableClassMock_1 = __webpack_require__(5861);
Object.defineProperty(exports, "DisposableClassMock", ({ enumerable: true, get: function () { return DisposableClassMock_1.DisposableClassMock; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 94539:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.arrayUnique = void 0;
/**
 * Reduce an array to one that has unique items only.
 */
const arrayUnique = (arr) => {
    const set = new Set(arr);
    return [...set];
};
exports.arrayUnique = arrayUnique;
//# sourceMappingURL=arrayUnique.js.map

/***/ }),

/***/ 97197:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assert = void 0;
const AssertionError_1 = __webpack_require__(89135);
/**
 * Assert that the expression that results in `val` holds, otherwise throw
 * an `AssertionError` with the `errorMessage`. Alternatively, if an error
 * instance is passed as the `errorMessage`, throw that instead.
 */
const assert = (val, errorMessage) => {
    if (val !== true) {
        const error = typeof errorMessage === 'string' ? new AssertionError_1.AssertionError(errorMessage) : errorMessage;
        throw error;
    }
};
exports.assert = assert;
//# sourceMappingURL=assert.js.map

/***/ }),

/***/ 58149:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertDefined = void 0;
const assert_1 = __webpack_require__(97197);
/**
 * Assert the `val` object is not `null` nor `undefined`, if it is
 * throw an `AssertionError` with the `errorMessage`. Alternatively,
 * if an error instance is passed as the `errorMessage`, throw that instead.
 */
const assertDefined = (val, errorMessage) => {
    return (0, assert_1.assert)(val != null, errorMessage);
};
exports.assertDefined = assertDefined;
//# sourceMappingURL=assertDefined.js.map

/***/ }),

/***/ 48623:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertInstance = void 0;
const assert_1 = __webpack_require__(97197);
/**
 * Assert the `val` is instance of `classObject`.
 */
const assertInstance = (val, classObject, errorMessage) => {
    return (0, assert_1.assert)(val instanceof classObject, errorMessage);
};
exports.assertInstance = assertInstance;
//# sourceMappingURL=assertInstance.js.map

/***/ }),

/***/ 35782:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertNever = void 0;
const errors_1 = __webpack_require__(77665);
/**
 * Assert to cover the cases that should never happen.
 */
// TODO legomushroom - test this
const assertNever = (value, errorMessage) => {
    const error = typeof errorMessage === 'string' ? new errors_1.AssertionError(errorMessage) : errorMessage;
    throw error;
};
exports.assertNever = assertNever;
//# sourceMappingURL=assertNever.js.map

/***/ }),

/***/ 38837:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assert = exports.assertNever = exports.assertDefined = exports.assertInstance = void 0;
var assertInstance_1 = __webpack_require__(48623);
Object.defineProperty(exports, "assertInstance", ({ enumerable: true, get: function () { return assertInstance_1.assertInstance; } }));
var assertDefined_1 = __webpack_require__(58149);
Object.defineProperty(exports, "assertDefined", ({ enumerable: true, get: function () { return assertDefined_1.assertDefined; } }));
var assertNever_1 = __webpack_require__(35782);
Object.defineProperty(exports, "assertNever", ({ enumerable: true, get: function () { return assertNever_1.assertNever; } }));
var assert_1 = __webpack_require__(97197);
Object.defineProperty(exports, "assert", ({ enumerable: true, get: function () { return assert_1.assert; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 29076:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cleanupObjectValuesPII = exports.cleanupPII = exports.obfusticateEmailAddresses = exports.obfusticatePaths = exports.obfusticateCodespaceNames = exports.CODESPACE_URL_PII_LABEL = exports.EMAIL_PII_LABEL = exports.PATH_PII_LABEL = void 0;
// regex to target filesystem paths, like /Users/olegsolomka/repos/Cascade/vscode/codespaces
const PATH_REGEX = /([A-Za-z]:)?(\S*[\\\/])+\S*/gim;
// regex to target emails, like legomushroom@gmail.com
const EMAIL_REGEX = /[\S]+@[\S]+/gim;
// regex to target codespace name URLs, like https://legomushroom-codespaces-contrib-tunnel-tun-w9wpr963969x.github.dev/
const CODESPACE_NAME_REGEX = /(https?:\/\/)?([\w|-]+)\.github\.dev((\S*[\\\/])+\S*)?/gim; // (https?://)?(www.)?(codespace-name).github.dev/path/component/
// file system paths replaced with this label
exports.PATH_PII_LABEL = '[PATH]/';
// all emails replaced with this label
exports.EMAIL_PII_LABEL = '[EMAIL]';
// all codespace names replaced with this label
exports.CODESPACE_URL_PII_LABEL = '[CODESPACE_URL]';
/**
 * Function to replace all codespace names with [CODESPACE_URL] label.
 */
const obfusticateCodespaceNames = (str, replacementString = exports.CODESPACE_URL_PII_LABEL) => {
    return str.replace(CODESPACE_NAME_REGEX, replacementString);
};
exports.obfusticateCodespaceNames = obfusticateCodespaceNames;
/**
 * Function to replace all paths with [PATH] label.
 */
const obfusticatePaths = (str, replacementString = exports.PATH_PII_LABEL) => {
    return str.replace(PATH_REGEX, (match, drive, directory, offset, whole) => {
        if (/^\d{1,4}\/\d{1,2}\/\d{1,4}$/.test(match)) {
            // This is a date. No need to scrub.
            return match;
        }
        else {
            const driveAndDirectoryLength = (drive ? drive.length : 0) + directory.length;
            const fileName = match.substr(driveAndDirectoryLength);
            return replacementString + fileName;
        }
    });
};
exports.obfusticatePaths = obfusticatePaths;
/**
 *  Function to replace all emails with `[EMAIL]` label.
 */
const obfusticateEmailAddresses = (str, replacementString = exports.EMAIL_PII_LABEL) => {
    return str.replace(EMAIL_REGEX, replacementString);
};
exports.obfusticateEmailAddresses = obfusticateEmailAddresses;
/**
 *  Function to remove PII from a string.
 */
const cleanupPII = (str) => {
    if (!str) {
        return str;
    }
    return (0, exports.obfusticateEmailAddresses)((0, exports.obfusticatePaths)((0, exports.obfusticateCodespaceNames)(str)));
};
exports.cleanupPII = cleanupPII;
/**
 * Function to remove PII data from the object values.
 */
const cleanupObjectValuesPII = (obj) => {
    for (let [key, value] of Object.entries(obj)) {
        // cleanup strings
        if (typeof value === 'string') {
            obj[key] = (0, exports.cleanupPII)(value);
        }
    }
    return obj;
};
exports.cleanupObjectValuesPII = cleanupObjectValuesPII;
//# sourceMappingURL=cleanupPII.js.map

/***/ }),

/***/ 25108:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.connectEvents = void 0;
const createDisposable_1 = __webpack_require__(3164);
/**
 * Function to connect 2 events, then the `event` fired,
 * fire the `event` also.
 */
const connectEvents = (notify, ...events) => {
    const disposables = events.map((event) => {
        return event(notify.fire.bind(notify));
    });
    return (0, createDisposable_1.createDisposable)(() => {
        for (const disposable of disposables) {
            disposable === null || disposable === void 0 ? void 0 : disposable.dispose();
        }
    });
};
exports.connectEvents = connectEvents;
//# sourceMappingURL=connectEvents.js.map

/***/ }),

/***/ 76127:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.continueWhen = void 0;
const timeoutPromise_1 = __webpack_require__(31290);
const components_1 = __webpack_require__(68110);
const asserts_1 = __webpack_require__(38837);
const utils_1 = __webpack_require__(73878);
/**
 * Function to transform and event into a promise so it can be `awaited` in-place.
 *
 * ## Example:
 *
 * ```
 *  //..
 *  [1] const result = await continueWhen(this.onResolveComplete);
 *  [2] //..
 * ```
 * [1] will wait on the `onResolveComplete` event to happen before proceeding further to [2],
 * the `result` will contain the first (and only) argument of the `onResolveComplete` event.
 *
 * ```
 * /..
 *  [1] const result = await continueWhen(this.onResolveComplete, 2000);
 *  [2] //..
 * ```
 * Same as example above, but will throw the `TimeoutCancellationError`
 * error, if the event is not fired before the timeout elapses.
 *
 * ## Throws:
 *
 *  - `TimeoutCancellationError` when the finite timeout is passed and the
 *      event is not fired before the timeout is elapsed.
 *  - `AssertionError` when passed `timeout` number is `NaN`.
 */
const continueWhen = (event, timeout = Infinity, error) => __awaiter(void 0, void 0, void 0, function* () {
    const signal = new components_1.Signal();
    try {
        // resolve the signal when even is fired
        const eventDisposable = event((arg) => __awaiter(void 0, void 0, void 0, function* () {
            try {
                eventDisposable.dispose();
            }
            catch (_a) {
                /* noop */
            }
            // give other event subscribers a chance to run
            yield (0, utils_1.wait)(1);
            // resolve the main signal
            signal.resolve(arg);
        }));
        (0, asserts_1.assert)(!Number.isNaN(timeout), 'Timeout is NaN.');
        (0, asserts_1.assert)(timeout > 0, `Timeout must be greater than zero, but "${timeout}" passed.`);
        /**
         * if we got finite timeout, throw the `TimeoutCancellationError`
         * if the event is not fired before the timeout elapses.
         */
        if (Number.isFinite(timeout)) {
            return yield (0, timeoutPromise_1.timeoutPromise)(signal.promise, timeout, error);
        }
        // no timeout - wait on the promise itself
        return yield signal.promise;
    }
    catch (e) {
        throw e;
    }
});
exports.continueWhen = continueWhen;
//# sourceMappingURL=continueWhen.js.map

/***/ }),

/***/ 4108:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.crc32 = void 0;
let crcTable;
function makeCrcTable() {
    let c;
    const table = [];
    for (let n = 0; n < 256; n++) {
        c = n;
        for (let k = 0; k < 8; k++) {
            c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;
        }
        table[n] = c;
    }
    return table;
}
function crc32(data) {
    if (!crcTable) {
        crcTable = makeCrcTable();
    }
    let crc = 0 ^ -1;
    for (let i = 0; i < data.length; i++) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ data[i]) & 0xff];
    }
    const result = (crc ^ -1) >>> 0;
    return (result + 0x100000000).toString(16).substr(-8).toUpperCase();
}
exports.crc32 = crc32;
//# sourceMappingURL=crc32.js.map

/***/ }),

/***/ 3164:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDisposable = void 0;
/**
 * Wrap some code to create a disposable.
 */
const createDisposable = (dispose) => {
    return {
        dispose,
    };
};
exports.createDisposable = createDisposable;
//# sourceMappingURL=createDisposable.js.map

/***/ }),

/***/ 93562:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.debounce = void 0;
/**
 * Interval version of a debounce util.
 */
const debounce = (fn, timeout) => {
    let interval;
    const debounced = (...args) => {
        clearInterval(interval);
        interval = setInterval(() => {
            fn(...args);
        }, timeout);
    };
    debounced.stop = () => {
        clearInterval(interval);
    };
    return debounced;
};
exports.debounce = debounce;
//# sourceMappingURL=debounce.js.map

/***/ }),

/***/ 25962:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.withHelperDecorator = exports.withRetriesDecorator = void 0;
var withRetriesDecorator_1 = __webpack_require__(21562);
Object.defineProperty(exports, "withRetriesDecorator", ({ enumerable: true, get: function () { return withRetriesDecorator_1.withRetriesDecorator; } }));
var withHelperDecorator_1 = __webpack_require__(8913);
Object.defineProperty(exports, "withHelperDecorator", ({ enumerable: true, get: function () { return withHelperDecorator_1.withHelperDecorator; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8913:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.withHelperDecorator = void 0;
const assertDefined_1 = __webpack_require__(58149);
const assert_1 = __webpack_require__(97197);
/**
 * Factory function to construct a helper with
 * specific execution context.
 */
const contextMap = new Map();
const getHelper = (method, helper, options, context) => {
    /**
     * The overriden method should be associated with both
     * class instance and the class method, hence we are
     * using 2 maps here.
     */
    const existingHelpers = contextMap.get(context);
    if (existingHelpers) {
        const existingHelper = existingHelpers.get(method);
        if (existingHelper) {
            return existingHelper;
        }
    }
    else {
        contextMap.set(context, new Map());
    }
    const newHelper = helper(method.bind(context), options);
    const helpers = contextMap.get(context);
    (0, assertDefined_1.assertDefined)(helpers, 'No helpers found.');
    helpers.set(method, newHelper);
    return newHelper;
};
/**
 * Generic decorator to wrap a method with a helper.
 */
function withHelperDecorator(helper, options) {
    return function (target, propertyName, propertyDesciptor) {
        const { value: method } = propertyDesciptor;
        (0, assert_1.assert)(method instanceof Function, 'This decorator works only on methods');
        (0, assertDefined_1.assertDefined)(method, `The method "${propertyName}" is not defined.`);
        // must be `function` to not loose `this` context
        propertyDesciptor.value = function (...args) {
            return __awaiter(this, void 0, void 0, function* () {
                const wrappedMethod = getHelper(method, helper, options, this);
                return yield wrappedMethod.call(this, ...args);
            });
        };
        return propertyDesciptor;
    };
}
exports.withHelperDecorator = withHelperDecorator;
//# sourceMappingURL=withHelperDecorator.js.map

/***/ }),

/***/ 21562:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.withRetriesDecorator = void 0;
const assertDefined_1 = __webpack_require__(58149);
const withRetries_1 = __webpack_require__(87887);
const assert_1 = __webpack_require__(97197);
/**
 * Method decorator, analog of the `withRetries` util.
 */
// TODO legomushroom - test this
const withRetriesDecorator = (options = {}) => {
    return (target, propertyName, propertyDesciptor) => {
        const { value: method } = propertyDesciptor;
        (0, assert_1.assert)(method instanceof Function, 'This decorator works only on methods');
        (0, assertDefined_1.assertDefined)(method, `The method "${propertyName}" is not defined.`);
        // must be `function` to not loose `this` context
        const result = function (...args) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield (0, withRetries_1.withRetries)((retry) => __awaiter(this, void 0, void 0, function* () {
                    return yield method.call(this, ...args, retry);
                }), options);
            });
        };
        propertyDesciptor.value = result;
        return propertyDesciptor;
    };
};
exports.withRetriesDecorator = withRetriesDecorator;
//# sourceMappingURL=withRetriesDecorator.js.map

/***/ }),

/***/ 9206:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defer = void 0;
/**
 * Defer execution by `timout` milliseconds.
 */
const defer = (fn, timeout = 1) => {
    const timer = setTimeout(fn, timeout);
    return timer;
};
exports.defer = defer;
//# sourceMappingURL=defer.js.map

/***/ }),

/***/ 32622:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDisposablesSeries = exports.createDisposablesAll = exports.createDisposable = void 0;
function createDisposable(callback, logger) {
    return {
        dispose: (reason) => {
            logger === null || logger === void 0 ? void 0 : logger.verbose(`Disposing reason:${reason}`);
            return callback(reason);
        },
    };
}
exports.createDisposable = createDisposable;
function createDisposablesAll(logger, ...disposables) {
    return {
        dispose: (reason) => {
            logger === null || logger === void 0 ? void 0 : logger.verbose(`createDisposablesAll->dispose reason:${reason}`);
            return Promise.all(disposables.map((d) => d.dispose(reason)));
        },
    };
}
exports.createDisposablesAll = createDisposablesAll;
function createDisposablesSeries(logger, ...disposables) {
    return {
        dispose: (reason) => __awaiter(this, void 0, void 0, function* () {
            logger === null || logger === void 0 ? void 0 : logger.verbose(`createDisposablesSeries->dispose reason:${reason}`);
            for (let d of disposables) {
                try {
                    yield d.dispose(reason);
                }
                catch (err) {
                    logger === null || logger === void 0 ? void 0 : logger.error(`Failed to dispose`, err);
                }
            }
        }),
    };
}
exports.createDisposablesSeries = createDisposablesSeries;
//# sourceMappingURL=dispose.js.map

/***/ }),

/***/ 50291:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.errorToObject = void 0;
const cleanupPII_1 = __webpack_require__(29076);
/**
 * Create a plain object that represents an error.
 * Can be used to send the error to telemetry or
 * log it to the console.
 */
// TODO legomushroom - test this
const errorToObject = (error, isInternal = true) => {
    const vscsError = error;
    const { errorCode = -1, errorType = 'GenericError', message = '<no message>', originalErrorType = '<no original type>', } = vscsError;
    const stack = isInternal ? vscsError.stack : (0, cleanupPII_1.cleanupPII)(vscsError.stack);
    return {
        errorMessage: message,
        originalErrorType,
        errorCode,
        errorType,
        stack,
    };
};
exports.errorToObject = errorToObject;
//# sourceMappingURL=errorToObject.js.map

/***/ }),

/***/ 17365:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.errorToString = void 0;
const errorToObject_1 = __webpack_require__(50291);
/**
 * Create a stringified object that represents an error.
 */
// TODO legomushroom - test this
const errorToString = (error, isInternal = false) => {
    return JSON.stringify((0, errorToObject_1.errorToObject)(error, isInternal), null, 2);
};
exports.errorToString = errorToString;
//# sourceMappingURL=errorToString.js.map

/***/ }),

/***/ 78547:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPromiseState = void 0;
const components_1 = __webpack_require__(68110);
const wait_1 = __webpack_require__(15838);
/**
 * Function to get promise state.
 */
const getPromiseState = (promise) => __awaiter(void 0, void 0, void 0, function* () {
    const resultSignal = new components_1.Signal();
    promise.then((data) => {
        resultSignal.resolve({
            isPending: false,
            error: null,
            data,
        });
        return data;
    }, (error) => {
        resultSignal.resolve({
            isPending: false,
            error,
        });
    });
    // make sure `then`/`catch` above had a chance to run
    yield (0, wait_1.wait)(1);
    // if `then`/`catch` didn't run, resolve as pending
    resultSignal.resolve({
        isPending: true,
        error: null,
    });
    return yield resultSignal.promise;
});
exports.getPromiseState = getPromiseState;
//# sourceMappingURL=getPromiseState.js.map

/***/ }),

/***/ 50615:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hashString = void 0;
/**
 * Generate a hash from a string.
 */
const hashString = (str) => {
    return str
        .split('')
        .reduce((a, b) => {
        a = ((a << 5) - a + b).charCodeAt(0);
        return a & a;
    }, 0)
        .toString();
};
exports.hashString = hashString;
//# sourceMappingURL=hashString.js.map

/***/ }),

/***/ 46312:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.idFunction = void 0;
/**
 * Identity function.
 */
// TODO legomushroom - test this
const idFunction = (...args) => {
    return args;
};
exports.idFunction = idFunction;
//# sourceMappingURL=idFunction.js.map

/***/ }),

/***/ 73878:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.propertiesToString = exports.propertiesToJSON = exports.crc32 = exports.toCamelCase = exports.promiseAny = exports.notImplemented = exports.errorToString = exports.errorToObject = exports.timeoutPromise = exports.createDisposable = exports.isThenable = exports.arrayUnique = exports.defer = exports.throttle = exports.debounce = exports.hashString = exports.randomBoolean = exports.randomString = exports.randomBytes = exports.randomItem = exports.randomInt = exports.CODESPACE_URL_PII_LABEL = exports.obfusticateCodespaceNames = exports.obfusticateEmailAddresses = exports.obfusticatePaths = exports.cleanupObjectValuesPII = exports.cleanupPII = exports.withMutexByArguments = exports.connectEvents = exports.withRetries = exports.idFunction = exports.getPromiseState = exports.continueWhen = exports.withCache = exports.raceAsync = exports.onlyOnce = exports.once = exports.wait = void 0;
// decorators
__exportStar(__webpack_require__(25962), exports);
// assertion utils
__exportStar(__webpack_require__(38837), exports);
// misc utils
var wait_1 = __webpack_require__(15838);
Object.defineProperty(exports, "wait", ({ enumerable: true, get: function () { return wait_1.wait; } }));
var once_1 = __webpack_require__(51403);
Object.defineProperty(exports, "once", ({ enumerable: true, get: function () { return once_1.once; } }));
var onlyOnce_1 = __webpack_require__(49707);
Object.defineProperty(exports, "onlyOnce", ({ enumerable: true, get: function () { return onlyOnce_1.onlyOnce; } }));
var raceAsync_1 = __webpack_require__(72749);
Object.defineProperty(exports, "raceAsync", ({ enumerable: true, get: function () { return raceAsync_1.raceAsync; } }));
var withCache_1 = __webpack_require__(45137);
Object.defineProperty(exports, "withCache", ({ enumerable: true, get: function () { return withCache_1.withCache; } }));
var continueWhen_1 = __webpack_require__(76127);
Object.defineProperty(exports, "continueWhen", ({ enumerable: true, get: function () { return continueWhen_1.continueWhen; } }));
var getPromiseState_1 = __webpack_require__(78547);
Object.defineProperty(exports, "getPromiseState", ({ enumerable: true, get: function () { return getPromiseState_1.getPromiseState; } }));
var idFunction_1 = __webpack_require__(46312);
Object.defineProperty(exports, "idFunction", ({ enumerable: true, get: function () { return idFunction_1.idFunction; } }));
var withRetries_1 = __webpack_require__(87887);
Object.defineProperty(exports, "withRetries", ({ enumerable: true, get: function () { return withRetries_1.withRetries; } }));
var connectEvents_1 = __webpack_require__(25108);
Object.defineProperty(exports, "connectEvents", ({ enumerable: true, get: function () { return connectEvents_1.connectEvents; } }));
var withMutexByArguments_1 = __webpack_require__(27746);
Object.defineProperty(exports, "withMutexByArguments", ({ enumerable: true, get: function () { return withMutexByArguments_1.withMutexByArguments; } }));
var cleanupPII_1 = __webpack_require__(29076);
Object.defineProperty(exports, "cleanupPII", ({ enumerable: true, get: function () { return cleanupPII_1.cleanupPII; } }));
Object.defineProperty(exports, "cleanupObjectValuesPII", ({ enumerable: true, get: function () { return cleanupPII_1.cleanupObjectValuesPII; } }));
Object.defineProperty(exports, "obfusticatePaths", ({ enumerable: true, get: function () { return cleanupPII_1.obfusticatePaths; } }));
Object.defineProperty(exports, "obfusticateEmailAddresses", ({ enumerable: true, get: function () { return cleanupPII_1.obfusticateEmailAddresses; } }));
Object.defineProperty(exports, "obfusticateCodespaceNames", ({ enumerable: true, get: function () { return cleanupPII_1.obfusticateCodespaceNames; } }));
Object.defineProperty(exports, "CODESPACE_URL_PII_LABEL", ({ enumerable: true, get: function () { return cleanupPII_1.CODESPACE_URL_PII_LABEL; } }));
var randomInt_1 = __webpack_require__(33063);
Object.defineProperty(exports, "randomInt", ({ enumerable: true, get: function () { return randomInt_1.randomInt; } }));
var randomItem_1 = __webpack_require__(33699);
Object.defineProperty(exports, "randomItem", ({ enumerable: true, get: function () { return randomItem_1.randomItem; } }));
var randomBytes_1 = __webpack_require__(3698);
Object.defineProperty(exports, "randomBytes", ({ enumerable: true, get: function () { return randomBytes_1.randomBytes; } }));
var randomString_1 = __webpack_require__(99632);
Object.defineProperty(exports, "randomString", ({ enumerable: true, get: function () { return randomString_1.randomString; } }));
var randomBoolean_1 = __webpack_require__(90312);
Object.defineProperty(exports, "randomBoolean", ({ enumerable: true, get: function () { return randomBoolean_1.randomBoolean; } }));
var hashString_1 = __webpack_require__(50615);
Object.defineProperty(exports, "hashString", ({ enumerable: true, get: function () { return hashString_1.hashString; } }));
var debounce_1 = __webpack_require__(93562);
Object.defineProperty(exports, "debounce", ({ enumerable: true, get: function () { return debounce_1.debounce; } }));
var throttle_1 = __webpack_require__(32518);
Object.defineProperty(exports, "throttle", ({ enumerable: true, get: function () { return throttle_1.throttle; } }));
var defer_1 = __webpack_require__(9206);
Object.defineProperty(exports, "defer", ({ enumerable: true, get: function () { return defer_1.defer; } }));
var arrayUnique_1 = __webpack_require__(94539);
Object.defineProperty(exports, "arrayUnique", ({ enumerable: true, get: function () { return arrayUnique_1.arrayUnique; } }));
var isThenable_1 = __webpack_require__(85397);
Object.defineProperty(exports, "isThenable", ({ enumerable: true, get: function () { return isThenable_1.isThenable; } }));
var createDisposable_1 = __webpack_require__(3164);
Object.defineProperty(exports, "createDisposable", ({ enumerable: true, get: function () { return createDisposable_1.createDisposable; } }));
var timeoutPromise_1 = __webpack_require__(31290);
Object.defineProperty(exports, "timeoutPromise", ({ enumerable: true, get: function () { return timeoutPromise_1.timeoutPromise; } }));
var errorToObject_1 = __webpack_require__(50291);
Object.defineProperty(exports, "errorToObject", ({ enumerable: true, get: function () { return errorToObject_1.errorToObject; } }));
var errorToString_1 = __webpack_require__(17365);
Object.defineProperty(exports, "errorToString", ({ enumerable: true, get: function () { return errorToString_1.errorToString; } }));
var notImplemented_1 = __webpack_require__(19383);
Object.defineProperty(exports, "notImplemented", ({ enumerable: true, get: function () { return notImplemented_1.notImplemented; } }));
var promiseAny_1 = __webpack_require__(46904);
Object.defineProperty(exports, "promiseAny", ({ enumerable: true, get: function () { return promiseAny_1.promiseAny; } }));
var toCamelCase_1 = __webpack_require__(78840);
Object.defineProperty(exports, "toCamelCase", ({ enumerable: true, get: function () { return toCamelCase_1.toCamelCase; } }));
var crc32_1 = __webpack_require__(4108);
Object.defineProperty(exports, "crc32", ({ enumerable: true, get: function () { return crc32_1.crc32; } }));
__exportStar(__webpack_require__(32622), exports);
// TODO legomushroom - cleanup?
function propertiesToJSON(o) {
    if (o) {
        return JSON.stringify(o, Object.getOwnPropertyNames(o));
    }
}
exports.propertiesToJSON = propertiesToJSON;
function propertiesToString(o) {
    var _a;
    return `type:${(_a = o === null || o === void 0 ? void 0 : o.constructor) === null || _a === void 0 ? void 0 : _a.name} props:${propertiesToJSON(o)}`;
}
exports.propertiesToString = propertiesToString;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 85397:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isThenable = void 0;
/**
 * Check if `val` is thenable or promiseLike.
 */
const isThenable = (val) => {
    if (val == null) {
        return false;
    }
    if (typeof val.then !== 'function') {
        return false;
    }
    return true;
};
exports.isThenable = isThenable;
//# sourceMappingURL=isThenable.js.map

/***/ }),

/***/ 19383:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.notImplemented = void 0;
function notImplemented() {
    throw new Error('Method not implemented.');
}
exports.notImplemented = notImplemented;
//# sourceMappingURL=notImplemented.js.map

/***/ }),

/***/ 51403:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.once = void 0;
/**
 * Function to wrap any function (let say `fun`) with the wrapper that will
 * ensure that the `fun` will be called only once. The wrapper will cache
 * the first return value of the `fun` and return it immediately on any
 * subsequent calls.
 */
const once = (fun, thisArg) => {
    const invocationSymbol = Symbol();
    let result;
    function onceFunction(...args) {
        if (fun[invocationSymbol]) {
            return result;
        }
        fun[invocationSymbol] = true;
        result = fun.call(thisArg !== null && thisArg !== void 0 ? thisArg : this, ...args);
        return result;
    }
    return onceFunction;
};
exports.once = once;
//# sourceMappingURL=once.js.map

/***/ }),

/***/ 49707:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.onlyOnce = void 0;
function onlyOnce(fun, ...defaultParams) {
    const invocationSymbol = Symbol();
    let recursionCount = 0;
    let firstParams;
    let firstResult;
    return function (...params) {
        if (params.length === 0) {
            params = defaultParams;
        }
        if (!fun[invocationSymbol]) {
            recursionCount++;
            let result;
            try {
                result = fun(...params);
                if (recursionCount > 1) {
                    return result;
                }
            }
            finally {
                recursionCount--;
            }
            // Set the flag after we have called the function and got the result to allow recursion for the first invocation
            fun[invocationSymbol] = true;
            firstParams = params;
            firstResult = result;
        }
        else if (!parametersEqual(firstParams, params)) {
            throw new Error(`Parameters must be the same as in the first call of ${onlyOnce.name}(${fun.name}).`);
        }
        return firstResult;
    };
}
exports.onlyOnce = onlyOnce;
/** Check if two parameter arrays match.
 *
 * This check only uses === to compare the elements, so they must be of primitive type only.
 * If one array is larger than the other, the extra elements must be all undefined.
 */
function parametersEqual(a1, a2) {
    if (!Array.isArray(a1) || !Array.isArray(a2)) {
        return false;
    }
    if (a1 === a2) {
        return true;
    }
    const l = Math.min(a1.length, a2.length);
    for (var i = 0; i < l; i++) {
        if (a1[i] !== a2[i]) {
            return false;
        }
    }
    const a = a1.length > l ? a1 : a2;
    for (var i = l; i < a.length; i++) {
        if (a[i] !== undefined) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=onlyOnce.js.map

/***/ }),

/***/ 46904:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.promiseAny = void 0;
const promiseAny = (iterable) => __awaiter(void 0, void 0, void 0, function* () {
    return Promise.all([...iterable].map((promise) => {
        return new Promise((resolve, reject) => Promise.resolve(promise).then(reject, resolve));
    })).then((errors) => Promise.reject(errors), (value) => Promise.resolve(value));
});
exports.promiseAny = promiseAny;
//# sourceMappingURL=promiseAny.js.map

/***/ }),

/***/ 72749:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.raceAsync = void 0;
const components_1 = __webpack_require__(68110);
const PromiseRaceError_1 = __webpack_require__(93163);
/**
 * Method to wait on first promise resolve or all promises rejected.
 * If a single promise resolves, the function with resolve with its result.
 * If all promises have rejected, then the function rejects with the last
 * rejection error and the `PromiseRaceError` will have all the rejected
 * errors in the order of rejection.
 */
const raceAsync = (promises) => {
    const signal = new components_1.Signal();
    const errors = [];
    let cnt = promises.length;
    promises.forEach((promise) => {
        promise
            .then((value) => {
            signal.resolve(value);
        })
            .catch((error) => {
            cnt--;
            errors.push(error);
            if (cnt === 0) {
                signal.reject(new PromiseRaceError_1.PromiseRaceError(errors, error));
            }
        });
    });
    return signal.promise;
};
exports.raceAsync = raceAsync;
//# sourceMappingURL=raceAsync.js.map

/***/ }),

/***/ 90312:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.randomBoolean = void 0;
const randomInt_1 = __webpack_require__(33063);
/**
 * Return a random boolean.
 */
const randomBoolean = () => {
    return (0, randomInt_1.randomInt)(1) === 1;
};
exports.randomBoolean = randomBoolean;
//# sourceMappingURL=randomBoolean.js.map

/***/ }),

/***/ 3698:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.randomBytes = void 0;
const randombytes_1 = __importDefault(__webpack_require__(52830));
/**
 * Safe random bytes utility, depends on crypto API which
 * should be polyfilled for NodeJS.
 */
const randomBytes = (length) => {
    return (0, randombytes_1.default)(length);
};
exports.randomBytes = randomBytes;
//# sourceMappingURL=randomBytes.js.map

/***/ }),

/***/ 33063:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.randomInt = void 0;
const assert_1 = __webpack_require__(97197);
/**
 * Function to get a random integer from a defined range.
 */
const randomInt = (max, min = 0) => {
    (0, assert_1.assert)(!isNaN(min), '"min" param is not a number.');
    (0, assert_1.assert)(!isNaN(max), '"max" param is not a number.');
    (0, assert_1.assert)(isFinite(max), '"max" param is not finite.');
    (0, assert_1.assert)(isFinite(min), '"min" param is not finite.');
    (0, assert_1.assert)(max > min, `"max"(${max}) param should be greater than "min"(${min}).`);
    const delta = max - min;
    const randomFloat = delta * Math.random();
    return Math.round(min + randomFloat);
};
exports.randomInt = randomInt;
//# sourceMappingURL=randomInt.js.map

/***/ }),

/***/ 33699:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.randomItem = void 0;
const randomInt_1 = __webpack_require__(33063);
/**
 * Function to return a random item from an array.
 */
const randomItem = (items) => {
    const max = items.length;
    const randomIndex = (0, randomInt_1.randomInt)(max - 1);
    return items[randomIndex];
};
exports.randomItem = randomItem;
//# sourceMappingURL=randomItem.js.map

/***/ }),

/***/ 99632:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.randomString = void 0;
const randomBytes_1 = __webpack_require__(3698);
/**
 * Generate random string (`hex` by default) using `length` bytes.
 */
const randomString = (length = 16, encoding = 'hex') => {
    const randomBuffer = (0, randomBytes_1.randomBytes)(length);
    return randomBuffer.toString(encoding);
};
exports.randomString = randomString;
//# sourceMappingURL=randomString.js.map

/***/ }),

/***/ 32518:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.throttle = void 0;
/**
 * Function that throttles a function invocation to
 * at most one per every `interval` milliseconds.
 */
function throttle(fn, options) {
    let lockInterval;
    // wrap the original function
    return function throttledFunction(...args) {
        /**
         * If still locked, return immediatelly.
         */
        if (lockInterval) {
            return;
        }
        /**
         * If not locked, invoke the original function and
         * lock so no invocation
         */
        const { interval } = options;
        lockInterval = setTimeout(() => {
            if (lockInterval) {
                clearInterval(lockInterval);
                lockInterval = undefined;
            }
        }, interval);
        /**
         * Run the original function and return the result.
         */
        return fn.call(this, ...args);
    };
}
exports.throttle = throttle;
//# sourceMappingURL=throttle.js.map

/***/ }),

/***/ 31290:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.timeoutPromise = void 0;
const CancellationError_1 = __webpack_require__(73786);
const errors_1 = __webpack_require__(77665);
const getRejectionError = (timeout, error) => {
    if (error === undefined) {
        return new errors_1.TimeoutCancellationError(`Promise rejected after ${timeout}ms`);
    }
    if (typeof error === 'string') {
        return new errors_1.TimeoutCancellationError(error);
    }
    if (error instanceof Error) {
        return error;
    }
};
const timeoutPromise = (promise, timeout, error, promiseCancellationSource) => __awaiter(void 0, void 0, void 0, function* () {
    let timeoutReference;
    let ctsDisposable;
    const dispose = () => {
        ctsDisposable === null || ctsDisposable === void 0 ? void 0 : ctsDisposable.dispose();
        clearTimeout(timeoutReference);
    };
    const result = yield Promise.race([
        /**
         * Original promise.
         */
        // promise,
        promise.finally(() => {
            dispose();
        }),
        /**
         * Timeout promise.
         */
        new Promise((_, reject) => {
            ctsDisposable = promiseCancellationSource === null || promiseCancellationSource === void 0 ? void 0 : promiseCancellationSource.token.onCancellationRequested(() => {
                dispose();
                reject(new CancellationError_1.CancellationError());
            });
            timeoutReference = setTimeout(() => {
                dispose();
                reject(getRejectionError(timeout, error));
            }, timeout);
        }),
    ]);
    return result;
});
exports.timeoutPromise = timeoutPromise;
//# sourceMappingURL=timeoutPromise.js.map

/***/ }),

/***/ 78840:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCamelCase = void 0;
function toCamelCase(str) {
    if (str && str.length > 0) {
        return str.substring(0, 1).toLowerCase() + str.substring(1);
    }
    return str;
}
exports.toCamelCase = toCamelCase;
//# sourceMappingURL=toCamelCase.js.map

/***/ }),

/***/ 15838:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wait = void 0;
/**
 * Wait on `delay` milliseconds asynronously before proceeding.
 */
const wait = (delay) => {
    return new Promise((resolve) => {
        setTimeout(resolve, delay);
    });
};
exports.wait = wait;
//# sourceMappingURL=wait.js.map

/***/ }),

/***/ 45137:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.withCache = void 0;
const assertDefined_1 = __webpack_require__(58149);
const Signal_1 = __webpack_require__(14772);
const defer_1 = __webpack_require__(9206);
/**
 * Utility to run an asynchronous function and reuse
 * the currently running version of it, if present.
 */
const withCache = (fn) => {
    let runningSignal;
    const res = (...args) => __awaiter(void 0, void 0, void 0, function* () {
        if (runningSignal && !runningSignal.isFulfilled) {
            return yield runningSignal.promise;
        }
        runningSignal = new Signal_1.Signal();
        /**
         * Defer function execution so we can return the signal promise
         * that will resolve to the result of the original function.
         */
        (0, defer_1.defer)(() => __awaiter(void 0, void 0, void 0, function* () {
            (0, assertDefined_1.assertDefined)(runningSignal, 'No running signal is defined.');
            try {
                const result = yield fn(...args);
                runningSignal.resolve(result);
            }
            catch (e) {
                runningSignal.reject(e);
            }
        }), 1);
        return yield runningSignal.promise;
    });
    return res;
};
exports.withCache = withCache;
//# sourceMappingURL=withCache.js.map

/***/ }),

/***/ 27746:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.withMutexByArguments = void 0;
const Signal_1 = __webpack_require__(14772);
const hashString_1 = __webpack_require__(50615);
const defer_1 = __webpack_require__(9206);
/**
 * Given a list of arguments, return a serialized
 * string (id) for the arguments list.
 */
const serializeArgs = (...args) => {
    const hashedArgs = args.map((str) => {
        return (0, hashString_1.hashString)(`${str}`);
    });
    return hashedArgs.join('::');
};
/**
 * Default arguments for the `withMutexByArguments` helper.
 */
const DEFAULT_OPTIONS = {
    serializeArguments: serializeArgs,
};
/**
 * Utility to run an asynchronous function and reuse the currently
 * running instance of it, based on the arguments list. To work
 * correctly all the arguments should be serializable to string,
 * as they will be used as an `id` for each invocation instance.
 *
 * Any prior invocation result is ignored, e.g. we reuse only currently
 * running function instances, ignoring any previously finished ones.
 */
const withMutexByArguments = (fn, options = DEFAULT_OPTIONS) => {
    // the map that holds current running signals for the function invocations.
    const mutextMap = new Map();
    // result function
    const result = (...args) => __awaiter(void 0, void 0, void 0, function* () {
        const { serializeArguments = serializeArgs } = options;
        const id = serializeArguments(...args);
        const runningSignal = mutextMap.get(id);
        if (runningSignal && !runningSignal.isFulfilled) {
            return yield runningSignal.promise;
        }
        const newRunningSignal = new Signal_1.Signal();
        mutextMap.set(id, newRunningSignal);
        /**
         * Defer function execution so we can return the signal promise
         * that will resolve to the result of the original function.
         */
        (0, defer_1.defer)(() => __awaiter(void 0, void 0, void 0, function* () {
            try {
                const result = yield fn(...args);
                newRunningSignal.resolve(result);
            }
            catch (e) {
                newRunningSignal.reject(e);
            }
            finally {
                mutextMap.delete(id);
            }
        }), 1);
        return yield newRunningSignal.promise;
    });
    return result;
};
exports.withMutexByArguments = withMutexByArguments;
//# sourceMappingURL=withMutexByArguments.js.map

/***/ }),

/***/ 87887:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.withRetries = void 0;
const errors_1 = __webpack_require__(77665);
const assert_1 = __webpack_require__(97197);
const wait_1 = __webpack_require__(15838);
/**
 * Function to throw either the `AggregateError`, or,
 * if the `isThrowLastError` is `true`, the last error
 * in the aggregate error list.
 */
const throwAggregateError = (error, isThrowLastError) => {
    if (isThrowLastError) {
        throw error.lastError;
    }
    throw error;
};
/**
 * Defaults.
 */
const WITH_RETRIES_DEFAULTS = {
    // 1 call + 2 retries = 3 calls total
    retries: 2,
    // no delay by default
    retryDelay: 0,
    // no-op `shouldStopRetries` callback
    shouldStopRetries: () => {
        return false;
    },
    // should throw the last error instead of `AggregateError`
    isAggregateError: true,
};
/**
 * Utility to run an asynchronous function with a number of retries.
 * Can be used as a polling helper if the `retryDelay` is specified.
 *
 * Throws `AggregateError` with all the thrown `errors` that we risen
 * during the retry attempts. The `last` property of the `AggregateError`
 * is the last throw error in the sequence.
 *
 * - Returns the return value of the last `fn` call. If the last `fn` call
 *   throws, the `AggregateError` is thrown.
 *
 * - Throw `CancellationError` inside the `fn` callback to cancel the retries.
 *
 * - If the `CancellationToken` is passed and cancellation is requested,
 *   the `AggregateError` is thrown, with the `CancellationError` error
 *   as the last in the list.
 *
 * - `shouldStopRetries`, optional callback meant for implementing an early bail-out
 *   from the retry loop. It receives an `error` from the last failed retry attempt
 *   and should return a `boolean` indicating if we should stop the retry loop.
 *   Helpful for the cases when the error thrown is known to be fatal, so doesn't
 *   make sense to continue the remaining retries.
 */
const withRetries = (fn, opts = {}, aggregateError = new errors_1.AggregateError()) => __awaiter(void 0, void 0, void 0, function* () {
    /**
     * Extend the options with defaults.
     */
    const options = Object.assign(Object.assign({}, WITH_RETRIES_DEFAULTS), opts);
    const { retries, retryDelay, shouldStopRetries, cancellationToken, isAggregateError } = options;
    /**
     * Make sure a number of retries left. In theory should never
     * go in this case, unless wrong `retries` option was passed.
     *
     * Throwing the `AggregateError` with a single `AssertionError`
     * for consistency.
     */
    const assertionError = new errors_1.AssertionError('Retries should have at least zero retries.');
    /**
     * If `isAggregateError` option set, throw the error itself,
     * to be consistent with the logic inside the catch block.
     */
    (0, assert_1.assert)(retries > -1, !isAggregateError ? assertionError : aggregateError.cloneWithErrors(assertionError));
    try {
        /**
         * Check that the cancellation is not requested yet on the `CancellationToken`.
         */
        (0, assert_1.assert)(!(cancellationToken === null || cancellationToken === void 0 ? void 0 : cancellationToken.isCancellationRequested), new errors_1.CancellationError('CancellationToken is cancelled.'));
        /**
         * Invoke the main procedure callback.
         */
        return (yield fn(retries));
    }
    catch (e) {
        /**
         * If the invocation fails, add the error to the aggregate
         * error list.
         */
        const isError = e instanceof Error;
        if (isError) {
            aggregateError.addErrors(e);
        }
        /**
         * Check if we should stop retrying prematurely.
         * Helpful in the cases hwen the error throw is indicative of a
         * fatal failure, hence does not make sence to retry anymore.
         *
         * The `shouldStopRetries` is awaited, to enable optional delays
         * in the callback, e.g. if the error is of known type, a delay
         * can be applied for that specific error kind.
         */
        const isStop = !isError || (yield shouldStopRetries(e));
        if (isStop) {
            return throwAggregateError(aggregateError, !isAggregateError);
        }
        /**
         * If cancelled inside the callback, stop retrying.
         */
        if (e instanceof errors_1.CancellationError) {
            return throwAggregateError(aggregateError, !isAggregateError);
        }
        /**
         * Check that the cancellation is not requested yet on the `CancellationToken`.
         */
        const cancellationError = new errors_1.CancellationError('CancellationToken is cancelled after retry.');
        (0, assert_1.assert)(!(cancellationToken === null || cancellationToken === void 0 ? void 0 : cancellationToken.isCancellationRequested), 
        /**
         * Throw either `AggregateError` with the `CancellationError` at the end,
         * or the `CancellationError` itself (if the `isAggregateError` is set).
         */
        !isAggregateError ? cancellationError : aggregateError.cloneWithErrors(cancellationError));
        /**
         * If retries left, call the same function recursively.
         */
        if (retries > 0) {
            /**
             * Wait for `retryDelay`ms before making another retry.
             */
            yield (0, wait_1.wait)(retryDelay);
            /**
             * Retry, decrementing the retries count.
             */
            return yield (0, exports.withRetries)(fn, Object.assign(Object.assign({}, options), { retries: retries - 1 }), aggregateError);
        }
        /**
         * No retries, throw the result error.
         * - by default, throw the  aggregate error that contains
         *   the list of all errors thrown during the retries.
         * - if `isAggregateError` set to `false`, throw the last
         *  error in the list.
         */
        return throwAggregateError(aggregateError, !isAggregateError);
    }
});
exports.withRetries = withRetries;
//# sourceMappingURL=withRetries.js.map

/***/ }),

/***/ 85118:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ABTester = void 0;
const vso_telemetry_1 = __webpack_require__(76811);
const telemetryStrings_1 = __webpack_require__(22705);
const abTestDefaults = {
    shouldAllowConcurrentExperiments: false,
};
const AB_TESTS_SETTING_KEY = 'vscode-vsls-commands-ab-tests';
class ABTester {
    constructor(storage, isFirstInitialization) {
        this.settingsStorage = storage;
        this.isFirstInitialization = isFirstInitialization;
    }
    /**
     * Method to initialize the singleton.
     */
    initialize(options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.options = options;
            const { settingsStorage, abTests, isFirstInitialization } = options;
            // update settings storage  object if was passed
            this.settingsStorage = settingsStorage || this.settingsStorage;
            this.isFirstInitialization =
                isFirstInitialization != null ? isFirstInitialization : this.isFirstInitialization;
            // make sure there is the AB test config record on construction
            const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
            if (!currentConfig) {
                const initConfig = {
                    currentTests: {},
                    evaluatedTests: {},
                };
                yield this.settingsStorage.update(AB_TESTS_SETTING_KEY, initConfig);
            }
            for (let i = 0; i < abTests.length; i++) {
                // add defaults
                abTests[i] = Object.assign(Object.assign({}, abTestDefaults), abTests[i]);
            }
            yield this.initializeTests();
            yield this.addTelemetry();
        });
    }
    addTelemetry() {
        return __awaiter(this, void 0, void 0, function* () {
            // Adds AB test related properties to every telemetry event
            const abExperiment = yield this.isPartOfAnyExperiment();
            vso_telemetry_1.Telemetry.addContextProperty(telemetryStrings_1.TelemetryPropertyNames.CURRENT_AB_EXPERIMENT, abExperiment);
            vso_telemetry_1.Telemetry.addContextProperty(telemetryStrings_1.TelemetryPropertyNames.COUNT_OF_CONCURRENT_AB_EXPERIMENTS, yield this.getCountOfCurrentExperiments());
            vso_telemetry_1.Telemetry.addContextProperty(telemetryStrings_1.TelemetryPropertyNames.CURRENT_AB_EXPERIMENT_GROUP, yield this.isPartOfExperiment(abExperiment));
        });
    }
    initializeTests() {
        return __awaiter(this, void 0, void 0, function* () {
            for (let abTest of this.options.abTests) {
                if ((yield this.isPartOfAnyExperiment()) && !abTest.shouldAllowConcurrentExperiments) {
                    continue;
                }
                yield this.initializeTest(abTest);
            }
        });
    }
    cleanUpOldTest(abTest) {
        const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
        // if remote setting for the test is not set,
        // and we have the test record, delete it
        if (currentConfig.evaluatedTests[abTest.name]) {
            delete currentConfig.evaluatedTests[abTest.name];
        }
        if (currentConfig.currentTests[abTest.name]) {
            delete currentConfig.currentTests[abTest.name];
        }
        this.settingsStorage.update(AB_TESTS_SETTING_KEY, currentConfig);
    }
    initializeTest(abTest) {
        return __awaiter(this, void 0, void 0, function* () {
            const { enabledTests } = this.options;
            const remoteEnableTestSetting = enabledTests[abTest.name];
            if (!remoteEnableTestSetting) {
                this.cleanUpOldTest(abTest);
            }
            // if the test should be run
            if (abTest.shouldStartOnFirstRunOnly && !this.isFirstInitialization) {
                return;
            }
            const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
            const isPartOfAnyExperiment = !(yield this.isPartOfAnyExperiment());
            const isEvaluatedAlready = !currentConfig.evaluatedTests[abTest.name];
            if (isPartOfAnyExperiment && isEvaluatedAlready && remoteEnableTestSetting) {
                const currentGroup = this.initializeGroupForTest(abTest, currentConfig);
                // if selected for any of the experimental groups
                if (currentGroup) {
                    currentConfig.currentTests[abTest.name] = { currentGroup };
                }
                this.settingsStorage.update(AB_TESTS_SETTING_KEY, currentConfig);
            }
        });
    }
    initializeGroupForTest(abTest, currentConfig) {
        const randomNumber = Math.random();
        let currentLowerBound = 0;
        for (let group of abTest.groups) {
            let currentUpperBound = currentLowerBound + group.probability;
            if (randomNumber > currentLowerBound && randomNumber <= currentUpperBound) {
                return;
            }
            currentLowerBound = currentUpperBound;
        }
        currentConfig.evaluatedTests[abTest.name] = true;
    }
    /**
     * Method to check if the current client if part of a particular experiment.
     */
    isPartOfExperiment(name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!name) {
                return null;
            }
            const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
            const experimentRecord = currentConfig.currentTests[name];
            return experimentRecord ? experimentRecord.currentGroup : null;
        });
    }
    /**
     * Method to check if the current client is part of any experiment.
     */
    isPartOfAnyExperiment() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
            const currentTests = Object.keys(currentConfig.currentTests);
            return currentTests[0] || null;
        });
    }
    /**
     * Method to get how many concurrent experiemnts the client is a part of.
     */
    getCountOfCurrentExperiments() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
            const currentTests = Object.keys(currentConfig.currentTests);
            return currentTests.length;
        });
    }
}
exports.ABTester = ABTester;
//# sourceMappingURL=abTester.js.map

/***/ }),

/***/ 23894:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * @author Microsoft
 */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Disposable = exports.Inittable = exports.Activatable = void 0;
/**
 * Extends the base class by adding a method to control active state.
 */
// tslint:disable-next-line:variable-name
function Activatable(BaseType) {
    return class extends BaseType {
        /**
         * Activates the instance. The operation is idempotent.
         */
        activate() {
            this.isActivated = true;
            return Promise.resolve(this.isActivated);
        }
        /**
         * Deactivates the instance. The operation is idempotent.
         */
        deactivate() {
            this.isActivated = false;
            return Promise.resolve();
        }
    };
}
exports.Activatable = Activatable;
/**
 * Extends the base class by adding a method to initialize the instance.
 */
// tslint:disable-next-line:variable-name
function Inittable(BaseType) {
    return class extends BaseType {
        /**
         * Initializes the instance. The operation is idempotent.
         */
        init() {
            this.isInitialized = true;
            return Promise.resolve();
        }
    };
}
exports.Inittable = Inittable;
/**
 * Extends the base type by adding a method allowing to dispose an instance.
 */
// tslint:disable-next-line:variable-name
function Disposable(BaseType) {
    return class extends BaseType {
        /**
         * Disposes the instance. The operation is idempotent.
         */
        dispose() {
            this.isDisposed = true;
            return Promise.resolve();
        }
    };
}
exports.Disposable = Disposable;
//# sourceMappingURL=Mixins.js.map

/***/ }),

/***/ 34330:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.vslsCommands = exports.abTester = void 0;
const os = __webpack_require__(54167);
const path = __webpack_require__(67425);
const ExtentionContext_1 = __webpack_require__(67860);
const CommandRegistryProvider_1 = __webpack_require__(99709);
const loggingUtil_1 = __webpack_require__(37566);
const abTester_1 = __webpack_require__(85118);
const isFirstInitialization_1 = __webpack_require__(25943);
const getPackageJSON_1 = __webpack_require__(9939);
const throwIfNotInitialized_1 = __webpack_require__(99403);
const fileUtils_1 = __webpack_require__(28421);
const vso_telemetry_1 = __webpack_require__(76811);
const telemetryReporterFactory_1 = __webpack_require__(41666);
const logFile_1 = __webpack_require__(32960);
class VSLSCommandsAPI {
    constructor(options) {
        // save extension context for further imports
        (0, ExtentionContext_1.setExtensionContext)(options.extensionContext);
        if (options.telemetry) {
            vso_telemetry_1.Telemetry.init(telemetryReporterFactory_1.telemetryReporterFactory.create(options.extensionPackage), options.telemetry.featureName || 'vscode-vsls-command.', options.telemetry.canSendSensistiveInformation, options.telemetry.faultSendCallbackParam);
        }
    }
    initLogging(extensionPackage, loggingOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            // initialize tracing
            if (loggingOptions.logFileEnabled) {
                (0, logFile_1.setLogLocation)(loggingOptions.logFilePath ||
                    path.join(os.tmpdir(), `${extensionPackage.name}_logs`));
            }
            this.loggingUtil = new loggingUtil_1.LoggingUtil(extensionPackage.displayName, loggingOptions);
            yield this.loggingUtil.initLogging();
        });
    }
    // tslint:disable-next-line: variable-name
    registerCommand(commandText, CommandClass, commandOptions = {}) {
        CommandRegistryProvider_1.commandRegistry.register(commandText, CommandClass, commandOptions);
        return this;
    }
    get clientLogsLocation() {
        return (0, logFile_1.getLogLocation)();
    }
    getLastClientLogs(quantity) {
        return __awaiter(this, void 0, void 0, function* () {
            if ((0, logFile_1.getLogLocation)() != null) {
                const folderPath = (0, logFile_1.getLogLocation)();
                return yield (0, fileUtils_1.getLastFiles)(folderPath, quantity);
            }
            return [];
        });
    }
    getLogs(logLevel) {
        return this.loggingUtil.getLogs(logLevel);
    }
    setDiagnosticLogging(enableDiagnosticsLogging, focus) {
        this.loggingUtil.setDiagnosticLogging(enableDiagnosticsLogging, focus);
    }
}
let vslsCommandsAPIInternal;
exports.vslsCommands = {
    isFirstActivation: isFirstInitialization_1.isFirstActivation,
    isExtensionBeingUpdated: isFirstInitialization_1.isExtensionBeingUpdated,
    get API() {
        return (0, throwIfNotInitialized_1.throwNotInitialized)(vslsCommandsAPIInternal);
    },
    get abTester() {
        return (0, throwIfNotInitialized_1.throwNotInitialized)(exports.abTester);
    },
    get packageJSON() {
        return (0, getPackageJSON_1.getPackageJSON)();
    },
    initialize(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (vslsCommandsAPIInternal) {
                return vslsCommandsAPIInternal;
            }
            vslsCommandsAPIInternal = new VSLSCommandsAPI(options);
            // async initialize now.
            if (options.logging) {
                yield vslsCommandsAPIInternal.initLogging(options.extensionPackage, options.logging);
            }
            exports.abTester = new abTester_1.ABTester(options.extensionContext.globalState, (yield (0, isFirstInitialization_1.isFirstActivation)(options.extensionPackage)) &&
                !(yield (0, isFirstInitialization_1.isExtensionBeingUpdated)()));
        });
    },
};
//# sourceMappingURL=api.js.map

/***/ }),

/***/ 62595:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandBase = void 0;
class CommandBase {
}
exports.CommandBase = CommandBase;
//# sourceMappingURL=CommandBase.js.map

/***/ }),

/***/ 1930:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandContextBuilder = exports.CommandContextBuilderClass = void 0;
const traceSource_1 = __webpack_require__(49937);
class CommandContextBuilderClass {
    constructor() { }
    build(command, commandText) {
        return {
            trace: traceSource_1.traceSource.withName(this.buildTrace(command)),
            commandText,
            commandName: '',
        };
    }
    buildTrace(command) {
        let name = '';
        if (command && command.constructor && command.constructor.name) {
            name = command.constructor.name;
            name = name.replace('CommandDecorator', '');
        }
        return `Command:${name}`;
    }
}
exports.CommandContextBuilderClass = CommandContextBuilderClass;
// tslint:disable-next-line: variable-name
exports.CommandContextBuilder = new CommandContextBuilderClass();
//# sourceMappingURL=CommandContextBuilder.js.map

/***/ }),

/***/ 99709:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.commandRegistry = exports.CommandRegistryProvider = void 0;
const traceSource_1 = __webpack_require__(49937);
const CommandContextBuilder_1 = __webpack_require__(1930);
const telemetryStrings_1 = __webpack_require__(22705);
const vso_telemetry_1 = __webpack_require__(76811);
/**
 * Provider that ensures we register and execute commands safely
 * within VS Code.
 */
class CommandRegistryProvider {
    constructor() {
        this.disposables = {};
        this.trace = traceSource_1.traceSource.withName('CommandRegistry');
    }
    // tslint:disable-next-line: variable-name
    register(commandText, CommandClass, commandOptions = {}) {
        const commandInstance = new CommandClass();
        // Defer import of 'vscode' package.
        const registerCommand = (__webpack_require__(89496).commands.registerCommand);
        this.disposables[commandText] = registerCommand(commandText, (options = {}) => __awaiter(this, void 0, void 0, function* () {
            try {
                const context = CommandContextBuilder_1.CommandContextBuilder.build(commandInstance, commandText);
                const invocationOptions = Object.assign(Object.assign({}, commandOptions), options);
                return yield commandInstance.invoke(invocationOptions, context);
            }
            catch (error) {
                if (error && !error.hasRecorded) {
                    const errorMessage = `Unhandled exception (command): ${error.message}`;
                    this.trace.error(errorMessage);
                    vso_telemetry_1.Telemetry.sendFault(telemetryStrings_1.TelemetryEventNames.UNHANDLED_COMMAND_ERROR_FAULT, vso_telemetry_1.FaultType.Error, errorMessage, error);
                }
            }
        }));
    }
    dispose(commandString) {
        const disposable = this.disposables[commandString];
        if (disposable && disposable.dispose) {
            disposable.dispose();
        }
    }
    disposeAll() {
        for (const key in this.disposables) {
            if (key) {
                this.dispose(key);
            }
        }
    }
}
exports.CommandRegistryProvider = CommandRegistryProvider;
exports.commandRegistry = new CommandRegistryProvider();
//# sourceMappingURL=CommandRegistryProvider.js.map

/***/ }),

/***/ 51054:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * @author Microsoft
 */

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dataScrapingManagerInstance = exports.DataScrapingManager = void 0;
const Mixins_1 = __webpack_require__(23894);
const traceSource_1 = __webpack_require__(49937);
/**
 * Manages registered terminal output data scrapers.
 * Utilizes registered builders to instantiate one instance of each data scraper kind per terminal window.
 */
class DataScrapingManager extends (0, Mixins_1.Inittable)((0, Mixins_1.Disposable)(Object)) {
    constructor() {
        super();
        this.disposables = [];
        this.deferredWork = Promise.resolve(true);
        this.builders = new Map();
        this.jobs = [];
        this.trace = traceSource_1.traceSource.withName('DataScrapingManager');
        this.deferredWork = this.deferredWork
            .then(() => this.init())
            .catch((reason) => {
            this.trace.error(reason.message);
        });
    }
    // Defer import of `vscode` package.
    static get vscode() {
        return __webpack_require__(89496);
    }
    static get Instance() {
        if (!DataScrapingManager.singleton) {
            DataScrapingManager.singleton = new DataScrapingManager();
        }
        return DataScrapingManager.singleton;
    }
    /**
     * Event triggered when a [[DataScrapingJob]] is created for a [[vscode.Terminal]]
     * @returns the corresponding [[vscode.Terminal]] instance
     */
    get onScrappingStarted() {
        if (!this.eventEmitter) {
            this.eventEmitter = new DataScrapingManager.vscode.EventEmitter();
        }
        return this.eventEmitter.event;
    }
    dispose() {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deferredWork;
            this.disposables.splice(0).forEach((d) => d.dispose());
            this.jobs.splice(0).forEach((d) => d.dispose());
            yield _super.dispose.call(this);
        });
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isInitialized || !DataScrapingManager.vscode.window.onDidOpenTerminal) {
                return;
            }
            DataScrapingManager.vscode.window.onDidOpenTerminal(this.handleTerminalCreated, this, this.disposables);
            DataScrapingManager.vscode.window.onDidCloseTerminal(this.handleTerminalClosed, this, this.disposables);
            DataScrapingManager.vscode.window.terminals.forEach(this.handleTerminalCreated, this);
            yield _super.init.call(this);
        });
    }
    registerDataScraper(kind, builder) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deferredWork;
            this.builders.set(kind, builder);
            if (this.isInitialized) {
                const promises = DataScrapingManager.vscode.window.terminals.map((terminal) => __awaiter(this, void 0, void 0, function* () {
                    const dataScraper = builder(terminal);
                    if (dataScraper) {
                        yield dataScraper.init();
                        this.createJob(terminal, dataScraper, kind);
                    }
                }));
                yield Promise.all(promises);
            }
            return new DataScrapingManager.vscode.Disposable(() => this.unregisterDataScraper(kind));
        });
    }
    unregisterDataScraper(kind) {
        this.builders.delete(kind);
        const activeJobs = this.jobs.splice(0);
        activeJobs.filter((x) => x.kind === kind).forEach((job) => job.dispose());
        this.jobs.push(...activeJobs.filter((x) => x.kind !== kind));
    }
    handleTerminalCreated(terminal) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [...this.builders.entries()].map((entry) => __awaiter(this, void 0, void 0, function* () {
                const [kind, builder] = entry;
                const dataScraper = builder(terminal);
                if (dataScraper) {
                    yield dataScraper.init();
                    this.createJob(terminal, dataScraper, kind);
                }
            }));
            this.deferredWork = this.deferredWork
                .then(() => Promise.all(promises))
                .catch((reason) => {
                this.trace.error(reason.message);
            });
        });
    }
    createJob(terminal, dataScraper, kind) {
        let registration;
        if (typeof DataScrapingManager.vscode.window.onDidWriteTerminalData === 'function') {
            registration = DataScrapingManager.vscode.window.onDidWriteTerminalData((e) => {
                if (e.terminal === terminal) {
                    dataScraper.processData(e.data);
                }
            });
        }
        else {
            registration = terminal.creationOptions.pty.onDidWrite(dataScraper.processData, dataScraper);
        }
        const job = {
            kind,
            dataScraper,
            terminal,
            registration,
            dispose: () => {
                registration.dispose();
                return dataScraper.dispose();
            },
        };
        this.jobs.push(job);
        if (!this.eventEmitter) {
            this.eventEmitter = new DataScrapingManager.vscode.EventEmitter();
        }
        this.eventEmitter.fire(job.terminal);
        return job;
    }
    handleTerminalClosed(terminal) {
        const activeJobs = this.jobs.splice(0);
        activeJobs.filter((x) => x.terminal === terminal).forEach((job) => job.dispose());
        this.jobs.push(...activeJobs.filter((x) => x.terminal !== terminal));
    }
}
exports.DataScrapingManager = DataScrapingManager;
const dataScrapingManagerInstance = DataScrapingManager.Instance;
exports.dataScrapingManagerInstance = dataScrapingManagerInstance;
//# sourceMappingURL=dataScrapingManager.js.map

/***/ }),

/***/ 27725:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * @author Microsoft
 */

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.launchUrlScraper = void 0;
const url = __webpack_require__(84760);
const Mixins_1 = __webpack_require__(23894);
const dataScrapingManager_1 = __webpack_require__(51054);
/**
 * Local server url pattern matching following urls:
 * http://localhost:3000/ - commonly used across multiple frameworks
 * https://127.0.0.1:5001/ - ASP.NET
 * http://:8080 - Beego Golang
 * http://0.0.0.0:4000 - Elixir Phoenix
 */
const LOCAL_URL_REGEX = /\b\w{2,20}:\/\/(?:localhost|127\.0\.0\.1|0\.0\.0\.0|:\d{2,5})[\w\-\.\~:\/\?\#[\]\@!\$&\(\)\*\+\,\;\=]*/gim;
/**
 * Observes terminal output data while trying to match a localhost url
 * pointing to a local server port a host user might want to share.
 */
class UrlScraper extends (0, Mixins_1.Inittable)((0, Mixins_1.Disposable)(Object)) {
    constructor() {
        super(...arguments);
        // Defer import of 'vscode' package.
        this.eventEmitter = new ((__webpack_require__(89496).EventEmitter))();
    }
    get onDidMatchLocalUrl() {
        return this.eventEmitter.event;
    }
    processData(data) {
        // strip ANSI terminal codes
        data = data.replace(UrlScraper.terminalCodesRegex, '');
        const urlMatches = data.match(LOCAL_URL_REGEX) || [];
        urlMatches.forEach((match) => {
            // check if valid url
            const serverUrl = url.parse(match);
            if (serverUrl) {
                // check if the port is a valid integer value
                const port = parseFloat(serverUrl.port);
                if (!isNaN(port) && Number.isInteger(port) && port > 0 && port <= 65535) {
                    // normalize the host name
                    serverUrl.hostname = 'localhost';
                    serverUrl.host = `${serverUrl.hostname}:${port}`;
                    this.eventEmitter.fire({ port, serverUrl });
                }
            }
        });
    }
}
UrlScraper.terminalCodesRegex = /(?:\u001B|\u009B)[\[\]()#;?]*(?:(?:(?:[a-zA-Z0-9]*(?:;[a-zA-Z0-9]*)*)?\u0007)|(?:(?:\d{1,4}(?:;\d{0,4})*)?[0-9A-PR-TZcf-ntqry=><~]))/g;
/**
 * Register a new url scrapper
 * @param callback function to call back when a url is detected
 */
function launchUrlScraper(callback) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataScraper = yield dataScrapingManager_1.DataScrapingManager.Instance.registerDataScraper('local-url-scraper', () => {
            const urlScraper = new UrlScraper();
            urlScraper.onDidMatchLocalUrl((event) => {
                const { port, serverUrl } = event;
                const serverModel = {
                    port,
                    browseUrl: url.format(serverUrl),
                    displayName: serverUrl.host,
                };
                callback(serverModel);
            });
            return urlScraper;
        });
        return dataScraper;
    });
}
exports.launchUrlScraper = launchUrlScraper;
//# sourceMappingURL=urlScraper.js.map

/***/ }),

/***/ 47187:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandDecoratorBase = void 0;
/**
 * Base class for command decorators. Handles setting up decorator chaining (when multiple
 * decorators are applied to a command) and can optionally measuring timing of the decorator
 * invocation.
 */
class CommandDecoratorBase {
    /**
     * Initializes the command ecorator base.
     * @param enableProfiling `true` to enable measuring and tracing of the time taken
     * by the decorator (not including invocation of other decorators or the actual command).
     */
    constructor(enableProfiling = true) {
        this.enableProfiling = enableProfiling;
    }
    /**
     * Constructs the decorator function. The returned function can be applied to
     * a command class using the @ decorator syntax.
     */
    setup() {
        const decorator = this;
        const decoratorName = decorator.constructor.name.replace('CommandDecorator', '');
        if (!this.enableProfiling) {
            return function (original) {
                // Generate a new class that extends the original (decorated) command class and
                // overrides the invoke() method to call the decorator's decorate() method instead.
                // That method should then call back into the super (original) class's invoke().
                const decoratorClass = class extends original {
                    constructor(...args) {
                        super(...args);
                        if (decorator.decorate)
                            decorator.decorate(this);
                    }
                    invoke(options, context) {
                        const originalInvoke = super.invoke.bind(this);
                        return decorator.invoke(originalInvoke, options, context);
                    }
                };
                // Copy the name of the original class to the decorator-generated class.
                Object.defineProperty(decoratorClass, 'name', {
                    writable: false,
                    value: original.name,
                });
                return decoratorClass;
            };
        }
        else {
            return function (original) {
                // Equivalent to the above, with added time measurement and tracing.
                const decoratorClass = class extends original {
                    constructor(...args) {
                        super(...args);
                        if (decorator.decorate)
                            decorator.decorate(this);
                    }
                    invoke(options, context) {
                        const _super = Object.create(null, {
                            invoke: { get: () => super.invoke }
                        });
                        return __awaiter(this, void 0, void 0, function* () {
                            let preEnd;
                            let postStart;
                            context.trace.info(`Decorator starting: ${decoratorName}`);
                            const originalInvoke = _super.invoke.bind(this);
                            const innerInvoke = (innerOtions, innerContext) => __awaiter(this, void 0, void 0, function* () {
                                preEnd = Date.now();
                                try {
                                    return yield originalInvoke(innerOtions, innerContext);
                                }
                                finally {
                                    postStart = Date.now();
                                }
                            });
                            const preStart = Date.now();
                            try {
                                const outerResult = yield decorator.invoke(innerInvoke, options, context);
                                return outerResult;
                            }
                            finally {
                                const postEnd = Date.now();
                                const preTime = (preEnd || postEnd) - preStart;
                                const postTime = postEnd - (postStart || postEnd);
                                const totalTime = preTime + postTime;
                                context.trace.info(`Decorator finishing: ${decoratorName}. ` +
                                    `Duration: ${totalTime}ms (${preTime} + ${postTime})`);
                            }
                        });
                    }
                };
                Object.defineProperty(decoratorClass, 'name', {
                    writable: false,
                    value: original.name,
                });
                return decoratorClass;
            };
        }
    }
}
exports.CommandDecoratorBase = CommandDecoratorBase;
//# sourceMappingURL=CommandDecoratorBase.js.map

/***/ }),

/***/ 36599:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorNotificationCommandDecorator = exports.errorNotificationCommandDecorator = void 0;
const CommandDecoratorBase_1 = __webpack_require__(47187);
const NotificationUtil_1 = __webpack_require__(86035);
const ByDesignErrors_1 = __webpack_require__(80448);
const UserError_1 = __webpack_require__(98834);
const CancellationError_1 = __webpack_require__(38979);
const NonBlockingError_1 = __webpack_require__(70890);
const vso_telemetry_1 = __webpack_require__(76811);
function errorNotificationCommandDecorator(title, telemetryFaultEventName, isModalError = false, onError) {
    return new ErrorNotificationCommandDecorator(NotificationUtil_1.NotificationUtil, vso_telemetry_1.Telemetry, telemetryFaultEventName, title, isModalError, onError).setup();
}
exports.errorNotificationCommandDecorator = errorNotificationCommandDecorator;
/**
 * Error Notification `commandHandler` that converts exceptions into the correct
 * notification toast in the client.
 */
class ErrorNotificationCommandDecorator extends CommandDecoratorBase_1.CommandDecoratorBase {
    constructor(notificationUtil, telemetry, telemetryFaultEventName, title, isModalError, onError) {
        super();
        this.notificationUtil = notificationUtil;
        this.telemetry = telemetry;
        this.telemetryFaultEventName = telemetryFaultEventName;
        this.title = title;
        this.isModalError = isModalError;
        this.onError = onError;
    }
    invoke(commandInvoke, options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const { cancellationTokenSource } = context;
            let result;
            // save the command name
            context.commandName = this.title;
            try {
                result = yield commandInvoke(options, context);
            }
            catch (error) {
                try {
                    const userMessage = error.userMessage || error.message;
                    const fullMessage = userMessage ? `${this.title}: ${userMessage}` : this.title;
                    // if `CancellationError` was throw, invalidate the cancellation token
                    if (error instanceof CancellationError_1.CancellationError) {
                        // cancel the command cancellation token if not cancelled yet
                        if (cancellationTokenSource &&
                            !cancellationTokenSource.token.isCancellationRequested) {
                            cancellationTokenSource.cancel();
                        }
                    }
                    const isCancellationOrUserError = error instanceof UserError_1.UserError || error instanceof CancellationError_1.CancellationError;
                    // Supress the notification if the error has the appropriate property
                    // or if it's a cancellation error with no message.
                    const suppressNotification = error.isSuppressUserNotification ||
                        (error instanceof CancellationError_1.CancellationError && !userMessage);
                    if (!suppressNotification) {
                        if (isCancellationOrUserError) {
                            this.notificationUtil.showInformationMessage(fullMessage, false);
                        }
                        else if (error instanceof ByDesignErrors_1.ByDesignError) {
                            yield this.notificationUtil.showErrorMessage(fullMessage, {
                                modal: this.isModalError,
                            });
                        }
                        else if (!(error instanceof NonBlockingError_1.NonBlockingError)) {
                            yield this.notificationUtil.showErrorMessage(fullMessage, {
                                modal: this.isModalError,
                            });
                        }
                    }
                }
                catch (e) {
                    // if the above block triggered an error we want to know
                    error = e;
                }
                // at this this point we will know about any errors that hasn't been
                // recorded - anything thats happened up stream of `TelemetryCommandMiddleware`
                if (error && !error.hasRecorded) {
                    const errorMessage = `${this.title}: [unhandled exception (decorator)] ${error.message}`;
                    context.trace.error(errorMessage);
                    this.telemetry.sendFault(this.telemetryFaultEventName, vso_telemetry_1.FaultType.Error, errorMessage, error);
                }
                if (error && this.onError) {
                    yield this.onError(error, context, options);
                }
            }
            return result;
        });
    }
}
exports.ErrorNotificationCommandDecorator = ErrorNotificationCommandDecorator;
//# sourceMappingURL=ErrorNotificationCommandDecorator.js.map

/***/ }),

/***/ 96695:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TelemetryCommandDecorator = exports.telemetryCommandDecorator = void 0;
const vso_telemetry_1 = __webpack_require__(76811);
const TelemetryUtil_1 = __webpack_require__(25526);
const telemetryStrings_1 = __webpack_require__(22705);
const CommandDecoratorBase_1 = __webpack_require__(47187);
function telemetryCommandDecorator(telemetryEventName, telemetryFaultEventName, commandTitle, telemetryEventVersion = 1, onError) {
    return new TelemetryCommandDecorator(vso_telemetry_1.Telemetry, telemetryEventName, telemetryFaultEventName, commandTitle, telemetryEventVersion, onError).setup();
}
exports.telemetryCommandDecorator = telemetryCommandDecorator;
/**
 * Instrumentation `commandHandler` that automatically sets up any
 * default telemetry and tracing for a given command.
 */
class TelemetryCommandDecorator extends CommandDecoratorBase_1.CommandDecoratorBase {
    constructor(telemetry, telemetryEventName, telemetryFaultEventName, commandTitle, telemetryEventVersion, onError) {
        super();
        this.telemetry = telemetry;
        this.telemetryEventName = telemetryEventName;
        this.telemetryFaultEventName = telemetryFaultEventName;
        this.commandTitle = commandTitle;
        this.telemetryEventVersion = telemetryEventVersion;
        this.onError = onError;
    }
    invoke(commandInvoke, options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            let error = undefined;
            let telemetryEvent = this.telemetry.startTimedEvent(this.telemetryEventName);
            let telemetryResult = vso_telemetry_1.TelemetryResult.Success;
            let telemetryMessage = '';
            context.telemetryEvent = telemetryEvent;
            this.telemetry.setCorrelationEvent(telemetryEvent);
            telemetryEvent.addProperty(telemetryStrings_1.TelemetryPropertyNames.COMMAND_TEXT, context.commandText);
            telemetryEvent.addMeasure(telemetryStrings_1.TelemetryPropertyNames.TELEMETRY_EVENT_VERSION, this.telemetryEventVersion);
            this.addInvocationTelemetryProperties(telemetryEvent, options.telemetryProperties);
            try {
                result = yield commandInvoke(options, context);
                telemetryEvent.addProperty(vso_telemetry_1.TelemetryPropertyNames.EVENT_RESULT, vso_telemetry_1.TelemetryResult.Success);
            }
            catch (e) {
                telemetryResult = TelemetryUtil_1.TelemetryUtil.DeriveTelemetryResult(e);
                telemetryMessage = TelemetryUtil_1.TelemetryUtil.BuildTelemetryMessage(this.commandTitle, telemetryResult, e.message);
                telemetryEvent.addProperty(vso_telemetry_1.TelemetryPropertyNames.EVENT_RESULT, telemetryResult);
                if (this.onError) {
                    this.onError(e, context, options);
                }
                this.telemetry.sendFault(this.telemetryFaultEventName, TelemetryUtil_1.TelemetryUtil.MapTelemetryResultToFaultType(telemetryResult), telemetryMessage, e);
                error = e;
                throw e;
            }
            finally {
                telemetryMessage =
                    telemetryMessage ||
                        TelemetryUtil_1.TelemetryUtil.BuildTelemetryMessage(this.commandTitle, vso_telemetry_1.TelemetryResult.Success);
                const duration = telemetryEvent.end(telemetryResult, telemetryMessage);
                context.trace.traceEvent(TelemetryUtil_1.TelemetryUtil.MapTelemetryResultToTraceEventType(telemetryResult), 0, `Command [${context.commandName}]: ${telemetryMessage} (${duration}ms)`);
                // noting that we have logged the error. We will check this up stream
                if (error) {
                    error.hasRecorded = true;
                }
            }
            return result;
        });
    }
    addInvocationTelemetryProperties(telemetryEvent, properties = {}) {
        for (let propertyName of Object.keys(properties)) {
            telemetryEvent.addProperty(propertyName, properties[propertyName]);
        }
    }
}
exports.TelemetryCommandDecorator = TelemetryCommandDecorator;
//# sourceMappingURL=TelemetryCommandDecorator.js.map

/***/ }),

/***/ 96379:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fileAccessInstance = void 0;
const fileAccess_1 = __webpack_require__(91984);
exports.fileAccessInstance = fileAccess_1.fileAccess;
//# sourceMappingURL=fileAccessInstance.js.map

/***/ }),

/***/ 89813:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadJSON = exports.VscodeActivityType = exports.VscodeActivityProvider = exports.VscodeSessionStatus = exports.VscodeSessionStatusProvider = exports.fileAccess = exports.createTerminalRenderer = exports.dataScrapingManagerInstance = exports.launchUrlScraper = exports.getExtensionUri = exports.getExtensionContext = exports.NotificationUtil = exports.traceSource = exports.LogZipExporter = exports.OptOutTelemetryFilter = exports.UserError = exports.NonBlockingError = exports.ByDesignError = exports.CancellationError = exports.CommandErrorCode = exports.CommandError = exports.CommandBase = exports.errorNotificationCommandDecorator = exports.telemetryCommandDecorator = exports.vslsCommands = void 0;
var api_1 = __webpack_require__(34330);
Object.defineProperty(exports, "vslsCommands", ({ enumerable: true, get: function () { return api_1.vslsCommands; } }));
// decorators
var TelemetryCommandDecorator_1 = __webpack_require__(96695);
Object.defineProperty(exports, "telemetryCommandDecorator", ({ enumerable: true, get: function () { return TelemetryCommandDecorator_1.telemetryCommandDecorator; } }));
var ErrorNotificationCommandDecorator_1 = __webpack_require__(36599);
Object.defineProperty(exports, "errorNotificationCommandDecorator", ({ enumerable: true, get: function () { return ErrorNotificationCommandDecorator_1.errorNotificationCommandDecorator; } }));
// misc
var CommandBase_1 = __webpack_require__(62595);
Object.defineProperty(exports, "CommandBase", ({ enumerable: true, get: function () { return CommandBase_1.CommandBase; } }));
var CommandError_1 = __webpack_require__(47241);
Object.defineProperty(exports, "CommandError", ({ enumerable: true, get: function () { return CommandError_1.CommandError; } }));
var CommandErrorCode_1 = __webpack_require__(67341);
Object.defineProperty(exports, "CommandErrorCode", ({ enumerable: true, get: function () { return CommandErrorCode_1.CommandErrorCode; } }));
var CancellationError_1 = __webpack_require__(38979);
Object.defineProperty(exports, "CancellationError", ({ enumerable: true, get: function () { return CancellationError_1.CancellationError; } }));
var ByDesignErrors_1 = __webpack_require__(80448);
Object.defineProperty(exports, "ByDesignError", ({ enumerable: true, get: function () { return ByDesignErrors_1.ByDesignError; } }));
var NonBlockingError_1 = __webpack_require__(70890);
Object.defineProperty(exports, "NonBlockingError", ({ enumerable: true, get: function () { return NonBlockingError_1.NonBlockingError; } }));
var UserError_1 = __webpack_require__(98834);
Object.defineProperty(exports, "UserError", ({ enumerable: true, get: function () { return UserError_1.UserError; } }));
// telemetry
var OptOutTelemetryFilter_1 = __webpack_require__(38687);
Object.defineProperty(exports, "OptOutTelemetryFilter", ({ enumerable: true, get: function () { return OptOutTelemetryFilter_1.OptOutTelemetryFilter; } }));
// tracing
var logZipExporter_1 = __webpack_require__(21857);
Object.defineProperty(exports, "LogZipExporter", ({ enumerable: true, get: function () { return logZipExporter_1.LogZipExporter; } }));
var traceSource_1 = __webpack_require__(49937);
Object.defineProperty(exports, "traceSource", ({ enumerable: true, get: function () { return traceSource_1.traceSource; } }));
// utils
var NotificationUtil_1 = __webpack_require__(86035);
Object.defineProperty(exports, "NotificationUtil", ({ enumerable: true, get: function () { return NotificationUtil_1.NotificationUtil; } }));
var ExtentionContext_1 = __webpack_require__(67860);
Object.defineProperty(exports, "getExtensionContext", ({ enumerable: true, get: function () { return ExtentionContext_1.getExtensionContext; } }));
var getExtensionUri_1 = __webpack_require__(54829);
Object.defineProperty(exports, "getExtensionUri", ({ enumerable: true, get: function () { return getExtensionUri_1.getExtensionUri; } }));
// data-scraper
var urlScraper_1 = __webpack_require__(27725);
Object.defineProperty(exports, "launchUrlScraper", ({ enumerable: true, get: function () { return urlScraper_1.launchUrlScraper; } }));
var dataScrapingManager_1 = __webpack_require__(51054);
Object.defineProperty(exports, "dataScrapingManagerInstance", ({ enumerable: true, get: function () { return dataScrapingManager_1.dataScrapingManagerInstance; } }));
// Mixins
__exportStar(__webpack_require__(23894), exports);
//terminal
var terminalRenderer_1 = __webpack_require__(15457);
Object.defineProperty(exports, "createTerminalRenderer", ({ enumerable: true, get: function () { return terminalRenderer_1.createTerminalRenderer; } }));
var fileAccessInstance_1 = __webpack_require__(96379);
Object.defineProperty(exports, "fileAccess", ({ enumerable: true, get: function () { return fileAccessInstance_1.fileAccessInstance; } }));
// Vscode idle status
var VscodeSessionStatusProvider_1 = __webpack_require__(76353);
Object.defineProperty(exports, "VscodeSessionStatusProvider", ({ enumerable: true, get: function () { return VscodeSessionStatusProvider_1.VscodeSessionStatusProvider; } }));
var VscodeSessionStatus_1 = __webpack_require__(75191);
Object.defineProperty(exports, "VscodeSessionStatus", ({ enumerable: true, get: function () { return VscodeSessionStatus_1.VscodeSessionStatus; } }));
var VscodeActivityProvider_1 = __webpack_require__(62287);
Object.defineProperty(exports, "VscodeActivityProvider", ({ enumerable: true, get: function () { return VscodeActivityProvider_1.VscodeActivityProvider; } }));
var VscodeActivityType_1 = __webpack_require__(51036);
Object.defineProperty(exports, "VscodeActivityType", ({ enumerable: true, get: function () { return VscodeActivityType_1.VscodeActivityType; } }));
var loadJSON_1 = __webpack_require__(59570);
Object.defineProperty(exports, "loadJSON", ({ enumerable: true, get: function () { return loadJSON_1.loadJSON; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 38687:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OptOutTelemetryFilter = void 0;
class OptOutTelemetryFilter {
    constructor() {
        this.enableTelemetry = true;
        this.updateUserOptIn();
        this.configListener = OptOutTelemetryFilter.vscode.workspace.onDidChangeConfiguration(() => this.updateUserOptIn());
    }
    shouldSend(eventName, properties, measures) {
        return this.enableTelemetry;
    }
    updateUserOptIn() {
        const config = OptOutTelemetryFilter.vscode.workspace.getConfiguration('telemetry');
        this.enableTelemetry = config.get('enableTelemetry', true);
    }
    dispose() {
        return this.configListener.dispose();
    }
    // Defer import of `vscode` package.
    static get vscode() {
        return __webpack_require__(89496);
    }
}
exports.OptOutTelemetryFilter = OptOutTelemetryFilter;
//# sourceMappingURL=OptOutTelemetryFilter.js.map

/***/ }),

/***/ 25526:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TelemetryUtil = void 0;
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
const vso_logging_1 = __webpack_require__(98287);
const CommandError_1 = __webpack_require__(47241);
const vso_telemetry_1 = __webpack_require__(76811);
/**
 * Helper functions for sending telemetry events.
 */
class TelemetryUtil {
    static DeriveTelemetryResult(error) {
        if (error instanceof CommandError_1.CommandError) {
            return error.telemetryResult;
        }
        return vso_telemetry_1.TelemetryResult.Failure;
    }
    static DeriveTelemetryTitle(command, result) {
        // TODO: Could auto convert enum to friendly string.
        let category = 'Success';
        if (result === vso_telemetry_1.TelemetryResult.UserFailure) {
            category = 'User Failure';
        }
        else if (result === vso_telemetry_1.TelemetryResult.Cancel) {
            category = 'Cancelled';
        }
        else if (result === vso_telemetry_1.TelemetryResult.IndeterminateFailure) {
            category = 'Indeterminate Failure';
        }
        else if (result === vso_telemetry_1.TelemetryResult.Failure) {
            category = 'Failure';
        }
        else if (result === vso_telemetry_1.TelemetryResult.NonBlockingFailure) {
            category = 'Non Blocking Failure';
        }
        else if (result === vso_telemetry_1.TelemetryResult.ByDesignFailure) {
            category = 'By Design Failure';
        }
        return `${command} ${category}`;
    }
    static BuildTelemetryMessage(command, result, error) {
        let errorPostfix = '';
        if (error !== undefined) {
            errorPostfix = `: ${error}`;
        }
        return `${this.DeriveTelemetryTitle(command, result)}${errorPostfix}`;
    }
    static MapTelemetryResultToFaultType(result) {
        // TODO: Can we unify on one enum type.
        switch (result) {
            case vso_telemetry_1.TelemetryResult.UserFailure:
                return vso_telemetry_1.FaultType.User;
            case vso_telemetry_1.TelemetryResult.Cancel:
                return vso_telemetry_1.FaultType.UserCancelled;
            case vso_telemetry_1.TelemetryResult.Failure:
                return vso_telemetry_1.FaultType.Error;
            case vso_telemetry_1.TelemetryResult.NonBlockingFailure:
                return vso_telemetry_1.FaultType.NonBlockingFault;
            case vso_telemetry_1.TelemetryResult.ByDesignFailure:
                return vso_telemetry_1.FaultType.ByDesign;
            case vso_telemetry_1.TelemetryResult.IndeterminateFailure:
            default:
                return vso_telemetry_1.FaultType.Unknown;
        }
    }
    static MapTelemetryResultToTraceEventType(result) {
        return result === vso_telemetry_1.TelemetryResult.Success ? vso_logging_1.LogLevel.Info : vso_logging_1.LogLevel.Error;
    }
}
exports.TelemetryUtil = TelemetryUtil;
//# sourceMappingURL=TelemetryUtil.js.map

/***/ }),

/***/ 22705:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TelemetryPropertyNames = exports.TelemetryEventNames = void 0;
class TelemetryEventNames {
}
exports.TelemetryEventNames = TelemetryEventNames;
TelemetryEventNames.FAULT_PREFIX = 'Fault/';
TelemetryEventNames.NAME_LOGS_FILE_FAILED = TelemetryEventNames.FAULT_PREFIX + 'name-logfile-failed';
TelemetryEventNames.OPEN_LOGS_FAILED = TelemetryEventNames.FAULT_PREFIX + 'open-logs-failed';
TelemetryEventNames.WRITE_LOGS_FAILED = TelemetryEventNames.FAULT_PREFIX + 'write-logs-failed';
TelemetryEventNames.UNHANDLED_COMMAND_ERROR_FAULT = TelemetryEventNames.FAULT_PREFIX + 'unhandled-commanderror-fault';
class TelemetryPropertyNames {
}
exports.TelemetryPropertyNames = TelemetryPropertyNames;
TelemetryPropertyNames.FEATURE_NAME = 'vscode-vsls-command.';
TelemetryPropertyNames.FEATURE_NAME_V2 = TelemetryPropertyNames.FEATURE_NAME + 'v2.';
TelemetryPropertyNames.COMMAND_TEXT = TelemetryPropertyNames.FEATURE_NAME + 'CommandText';
TelemetryPropertyNames.TELEMETRY_EVENT_VERSION = TelemetryPropertyNames.FEATURE_NAME + 'TelemetryEventVersion';
TelemetryPropertyNames.CURRENT_AB_EXPERIMENT = TelemetryPropertyNames.FEATURE_NAME + 'CurrentAbExperiment';
TelemetryPropertyNames.CURRENT_AB_EXPERIMENT_GROUP = TelemetryPropertyNames.FEATURE_NAME + 'CurrentAbExperimentGroup';
TelemetryPropertyNames.COUNT_OF_CONCURRENT_AB_EXPERIMENTS = TelemetryPropertyNames.FEATURE_NAME + 'CountOfConcurrentAbExperiments';
TelemetryPropertyNames.IS_FIRST_ACTIVATION = TelemetryPropertyNames.FEATURE_NAME + 'IsFirstActivation';
//# sourceMappingURL=telemetryStrings.js.map

/***/ }),

/***/ 15457:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * @author Microsoft
 */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createTerminalRenderer = void 0;
function createTerminalRenderer(name) {
    // Defer import of 'vscode' package.
    return new TerminalVirtualProcessAdaptor(name);
}
exports.createTerminalRenderer = createTerminalRenderer;
class TerminalVirtualProcessAdaptor {
    constructor(name) {
        this.name = name;
        // Defer import of 'vscode' package.
        const vscodeModule = __webpack_require__(89496);
        this.acceptInputEmitter = new vscodeModule.EventEmitter();
        this.changeMaximumDimensionsEmitter =
            new vscodeModule.EventEmitter();
        this.writeEmitter = new vscodeModule.EventEmitter();
        this.overrideDimensionsEmitter = new vscodeModule.EventEmitter();
        this.terminal = vscodeModule.window.createTerminal({
            name,
            pty: {
                onDidWrite: this.writeEmitter.event,
                onDidOverrideDimensions: this.overrideDimensionsEmitter.event,
                handleInput: (data) => this.acceptInputEmitter.fire(data),
                setDimensions: (dimensions) => this.setPtyDimensions(dimensions),
                open: (initialDimensions) => this.openPty(initialDimensions),
                close: () => { },
            },
        });
    }
    //#region vscode.TerminalRenderer
    show() {
        this.terminal.show();
    }
    sendText(text, addNewLine) {
        this.terminal.sendText(text, addNewLine);
    }
    hide() {
        this.terminal.hide();
    }
    dispose() {
        this.terminal.dispose();
    }
    get dimensions() {
        return this.terminalDimensions;
    }
    set dimensions(value) {
        if (!value) {
            return;
        }
        if (!this.terminalDimensions ||
            this.terminalDimensions.columns !== value.columns ||
            this.terminalDimensions.rows !== value.rows) {
            this.terminalDimensions = value;
            if (this.isStarted) {
                this.isOverrideDimensionsFired = true;
                this.overrideDimensionsEmitter.fire(value);
            }
        }
    }
    get maximumDimensions() {
        return this.terminalMaximumDimensions;
    }
    write(text) {
        if (this.isStarted) {
            this.writeEmitter.fire(text);
        }
        else {
            this.writeBuffer = (this.writeBuffer || '') + text;
        }
    }
    get onDidAcceptInput() {
        return this.acceptInputEmitter.event;
    }
    get onDidChangeMaximumDimensions() {
        return this.changeMaximumDimensionsEmitter.event;
    }
    //#endregion
    setPtyDimensions(dimensions) {
        if (!dimensions) {
            return;
        }
        if (this.terminalDimensions) {
            this.terminalDimensions = {
                columns: Math.min(this.terminalDimensions.columns, dimensions.columns),
                rows: Math.min(this.terminalDimensions.rows, dimensions.rows),
            };
        }
        else {
            this.terminalDimensions = dimensions;
        }
        this.terminalMaximumDimensions = dimensions;
        this.changeMaximumDimensionsEmitter.fire(dimensions);
        if (this.terminalDimensions.columns !== dimensions.columns ||
            this.terminalDimensions.rows !== dimensions.rows) {
            if (!this.isOverrideDimensionsFired) {
                this.isOverrideDimensionsFired = true;
                this.overrideDimensionsEmitter.fire(this.terminalDimensions);
            }
        }
    }
    openPty(initialDimensions) {
        this.isStarted = true;
        this.setPtyDimensions(initialDimensions);
        if (this.writeBuffer) {
            this.writeEmitter.fire(this.writeBuffer);
            this.writeBuffer = undefined;
        }
    }
}
//# sourceMappingURL=terminalRenderer.js.map

/***/ }),

/***/ 21857:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogZipExporter = void 0;
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
const path = __webpack_require__(67425);
const fileAccess_1 = __webpack_require__(91984);
const findFilesAsync_1 = __webpack_require__(73649);
const zip = __webpack_require__(30953);
const logFileExtensions = [
    '.log',
    '.blog', // Binary log files generated by the calling extension
];
class LogZipExporter {
    static createLogZipFileAsync(zipFilePath, directoryPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const logFiles = (yield (0, findFilesAsync_1.findFilesAsync)(directoryPath, directoryPath, (file) => logFileExtensions.indexOf(path.extname(file)) >= 0)).sort();
            const zipFile = new zip.ZipFile();
            zipFile.outputStream.pipe(fileAccess_1.fileAccess.createWriteStream(zipFilePath));
            logFiles.forEach((logFile) => {
                zipFile.addFile(path.join(directoryPath, logFile), logFile);
            });
            zipFile.end();
        });
    }
}
exports.LogZipExporter = LogZipExporter;
//# sourceMappingURL=logZipExporter.js.map

/***/ }),

/***/ 37566:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoggingUtil = void 0;
const vso_logging_1 = __webpack_require__(98287);
const traceSource_1 = __webpack_require__(49937);
const logFile_1 = __webpack_require__(32960);
class LoggingUtil {
    constructor(displayName, loggingOptions = {}) {
        this.displayName = displayName;
        this.loggingOptions = loggingOptions;
        const outputChannelName = this.loggingOptions.outputChannelName || this.displayName;
        this.outputTraceListener = new vso_logging_1.OutputTraceListener(outputChannelName, this.loggingOptions.outputChannelTimestamp);
        this.memoryTraceListener = new vso_logging_1.MemoryTraceListener(loggingOptions.logMaxSize);
    }
    getLogs(logLevel) {
        return this.memoryTraceListener.getLogs(logLevel);
    }
    initLogging() {
        return __awaiter(this, void 0, void 0, function* () {
            traceSource_1.traceSource.addTraceListener(this.memoryTraceListener);
            traceSource_1.traceSource.addTraceListener(this.outputTraceListener);
            if (this.loggingOptions.diagnosticsLogging) {
                this.setDiagnosticLogging(this.loggingOptions.diagnosticsLogging.enable, this.loggingOptions.diagnosticsLogging.focus);
            }
            if (this.loggingOptions.logFileEnabled) {
                this.logFileTraceListener = yield (0, logFile_1.createLogFileListener)();
                if (this.logFileTraceListener) {
                    traceSource_1.traceSource.addTraceListener(this.logFileTraceListener);
                }
            }
            this.setLoggingFilters(this.loggingOptions.logLevel, this.loggingOptions.filters, this.loggingOptions.traceFilter);
            if (this.loggingOptions.obfuscateProperties) {
                // copy obfuscation properties
                Object.entries(this.loggingOptions.obfuscateProperties).forEach((kvp) => {
                    vso_logging_1.LoggerSettings.obfuscateProperties[kvp[0]] = kvp[1];
                });
            }
        });
    }
    setLoggingFilters(logLevel, filters = {}, traceFilter) {
        const traceFilters = new vso_logging_1.TraceFilters([
            new vso_logging_1.VerbosityTraceFilter(logLevel ? vso_logging_1.LogLevel[logLevel] : undefined),
            new vso_logging_1.GlobPatternTraceFilter(filters),
        ]);
        if (traceFilter) {
            traceFilters.filters.push(traceFilter);
        }
        this.outputTraceListener.filter = traceFilters;
        if (this.logFileTraceListener) {
            this.logFileTraceListener.filter = traceFilters;
        }
    }
    setDiagnosticLogging(enableDiagnosticsLogging = true, focus = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (enableDiagnosticsLogging) {
                this.outputTraceListener.addOutputChannel(focus);
            }
            else {
                this.outputTraceListener.removeOutputChannel();
            }
        });
    }
}
exports.LoggingUtil = LoggingUtil;
//# sourceMappingURL=loggingUtil.js.map

/***/ }),

/***/ 49937:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.traceSource = void 0;
const vso_logging_1 = __webpack_require__(98287);
exports.traceSource = new vso_logging_1.TraceSource('Client');
//# sourceMappingURL=traceSource.js.map

/***/ }),

/***/ 80448:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ByDesignError = void 0;
const CommandError_1 = __webpack_require__(47241);
const vso_telemetry_1 = __webpack_require__(76811);
class ByDesignError extends CommandError_1.CommandError {
    constructor(message, code) {
        super({ message, code, telemetryResult: vso_telemetry_1.TelemetryResult.ByDesignFailure });
    }
}
exports.ByDesignError = ByDesignError;
//# sourceMappingURL=ByDesignErrors.js.map

/***/ }),

/***/ 38979:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CancellationError = void 0;
const CommandError_1 = __webpack_require__(47241);
const vso_telemetry_1 = __webpack_require__(76811);
class CancellationError extends CommandError_1.CommandError {
    constructor(message, code) {
        super({ message, code, telemetryResult: vso_telemetry_1.TelemetryResult.Cancel });
    }
}
exports.CancellationError = CancellationError;
//# sourceMappingURL=CancellationError.js.map

/***/ }),

/***/ 47241:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandError = void 0;
const vso_telemetry_1 = __webpack_require__(76811);
class CommandError extends Error {
    constructor(parameters = {}) {
        super(parameters.message);
        this.isSuppressUserNotification = false;
        this.code = parameters.code;
        this.userMessage = parameters.userMessage;
        this.telemetryResult = parameters.telemetryResult || vso_telemetry_1.TelemetryResult.Failure;
    }
    withUserMessage(userMessage) {
        this.userMessage = userMessage;
        return this;
    }
    withSuppressUserNotification(suppress) {
        this.isSuppressUserNotification = suppress;
        return this;
    }
}
exports.CommandError = CommandError;
//# sourceMappingURL=CommandError.js.map

/***/ }),

/***/ 67341:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandErrorCode = void 0;
var CommandErrorCode;
(function (CommandErrorCode) {
    CommandErrorCode["LOCAL_DEPENDENCY"] = "ERR_LOCAL_DEPENDENCY";
    CommandErrorCode["NOT_SUPPORTED"] = "ERR_NOT_SUPPORTED";
    CommandErrorCode["REMOTE_DEPENDENCY"] = "ERR_REMOTE_DEPENDENCY";
    CommandErrorCode["UNAUTHORIZED"] = "ERR_UNAUTHORIZED";
    CommandErrorCode["FORBIDDEN_ANONYMOUS"] = "ERR_FORBIDDEN_ANONYMOUS";
    CommandErrorCode["NETWORK_ERROR"] = "ERR_NETWORK";
    CommandErrorCode["BAD_REQUEST"] = "ERR_BAD_REQUEST";
    CommandErrorCode["REQUESTING_PERMISSIONS"] = "ERR_REQUESTING_PERMISSIONS";
})(CommandErrorCode = exports.CommandErrorCode || (exports.CommandErrorCode = {}));
//# sourceMappingURL=CommandErrorCode.js.map

/***/ }),

/***/ 70890:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NonBlockingError = void 0;
const CommandError_1 = __webpack_require__(47241);
const vso_telemetry_1 = __webpack_require__(76811);
class NonBlockingError extends CommandError_1.CommandError {
    constructor(message, code) {
        super({ message, code, telemetryResult: vso_telemetry_1.TelemetryResult.NonBlockingFailure });
    }
}
exports.NonBlockingError = NonBlockingError;
//# sourceMappingURL=NonBlockingError.js.map

/***/ }),

/***/ 98834:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserError = void 0;
const CommandError_1 = __webpack_require__(47241);
const vso_telemetry_1 = __webpack_require__(76811);
class UserError extends CommandError_1.CommandError {
    constructor(message, code) {
        super({ message, code, telemetryResult: vso_telemetry_1.TelemetryResult.UserFailure });
    }
}
exports.UserError = UserError;
//# sourceMappingURL=UserError.js.map

/***/ }),

/***/ 67860:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getExtensionContext = exports.setExtensionContext = exports.extensionContext = void 0;
const throwIfNotInitialized_1 = __webpack_require__(99403);
const setExtensionContext = (context) => {
    exports.extensionContext = context;
};
exports.setExtensionContext = setExtensionContext;
const getExtensionContext = () => {
    (0, throwIfNotInitialized_1.throwNotInitialized)(exports.extensionContext);
    return exports.extensionContext;
};
exports.getExtensionContext = getExtensionContext;
//# sourceMappingURL=ExtentionContext.js.map

/***/ }),

/***/ 86035:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotificationUtil = exports.NotificationUtilClass = void 0;
/**
 * Helper functions for working with VS Code Notifications/toasts.
 */
class NotificationUtilClass {
    static get Instance() {
        if (!NotificationUtilClass.singleton) {
            NotificationUtilClass.singleton = new NotificationUtilClass();
        }
        return NotificationUtilClass.singleton;
    }
    get notificationProgressLocation() {
        return (__webpack_require__(89496).ProgressLocation.Notification);
    }
    showInformationMessage(message, isVerbose, ...items) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!isVerbose) {
                return (yield Promise.resolve().then(() => __webpack_require__(89496))).window.showInformationMessage(message, ...items);
            }
        });
    }
    showErrorMessage(message, ...items) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield Promise.resolve().then(() => __webpack_require__(89496))).window.showErrorMessage(message, ...items);
        });
    }
    showWarningMessage(message, options, ...items) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options)
                return (yield Promise.resolve().then(() => __webpack_require__(89496))).window.showWarningMessage(message, options, ...items);
            else
                return (yield Promise.resolve().then(() => __webpack_require__(89496))).window.showWarningMessage(message, ...items);
        });
    }
    showInputBox(options, token) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield Promise.resolve().then(() => __webpack_require__(89496))).window.showInputBox(options, token);
        });
    }
    showQuickPick(items, options, token, initialValue, callbacks = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            // Adapt to the newer QuickPick API, which supports setting "active" (preselected) items.
            let adaptStrings = false;
            if (!Array.isArray(items)) {
                items = yield items;
            }
            else if (Array.isArray(items) && typeof items[0] === 'string') {
                adaptStrings = true;
                items = items.map((item) => ({ label: item }));
            }
            let result = yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const quickPick = (yield Promise.resolve().then(() => __webpack_require__(89496))).window.createQuickPick();
                quickPick.items = items;
                quickPick.activeItems = items.filter((item) => item.picked);
                quickPick.canSelectMany = (options === null || options === void 0 ? void 0 : options.canPickMany) || false;
                quickPick.placeholder = (options === null || options === void 0 ? void 0 : options.placeHolder) || '';
                quickPick.ignoreFocusOut = (options === null || options === void 0 ? void 0 : options.ignoreFocusOut) || false;
                quickPick.matchOnDetail = (options === null || options === void 0 ? void 0 : options.matchOnDetail) || false;
                quickPick.matchOnDescription = (options === null || options === void 0 ? void 0 : options.matchOnDescription) || false;
                quickPick.value = initialValue;
                if (callbacks.onDidChangeValue) {
                    quickPick.onDidChangeValue((value) => {
                        const overrides = callbacks.onDidChangeValue(value);
                        if (overrides.activeItems) {
                            quickPick.activeItems = overrides.activeItems;
                        }
                        if (overrides.selectedItems) {
                            quickPick.selectedItems = overrides.selectedItems;
                        }
                    });
                }
                quickPick.onDidAccept(() => __awaiter(this, void 0, void 0, function* () {
                    if (callbacks.onDidAccept) {
                        const shouldAccept = yield callbacks.onDidAccept(quickPick.selectedItems, quickPick.value);
                        if (shouldAccept === false) {
                            return;
                        }
                    }
                    quickPick.hide();
                    resolve(quickPick.canSelectMany ? quickPick.selectedItems : quickPick.selectedItems[0]);
                }));
                quickPick.onDidHide(() => {
                    if (callbacks.onDidHide) {
                        callbacks.onDidHide();
                    }
                    resolve(null);
                });
                quickPick.show();
            }));
            if (adaptStrings && result) {
                result = Array.isArray(result) ? result.map((item) => item.label) : result.label;
            }
            return result;
        });
    }
    withProgress(options, task, token) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: playing with the signatures here due to version difference
            return (yield Promise.resolve().then(() => __webpack_require__(89496))).window.withProgress(options, task);
        });
    }
    showOpenDialog(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield Promise.resolve().then(() => __webpack_require__(89496))).window.showOpenDialog(options);
        });
    }
    createQuickPick(message, options, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionsAsPickItems = options.map((title) => ({
                label: title,
            }));
            return new Promise((accept, reject) => {
                const list = (__webpack_require__(89496).window.createQuickPick)();
                list.placeholder = message;
                list.items = optionsAsPickItems;
                list.activeItems = list.items.filter((item) => {
                    return item.label === defaultValue;
                });
                list.onDidChangeValue((searchString) => {
                    list.items = searchString
                        ? [{ label: searchString }, ...optionsAsPickItems]
                        : optionsAsPickItems;
                });
                list.onDidAccept(() => {
                    list.hide();
                    accept(list.selectedItems[0].label);
                });
                list.show();
            });
        });
    }
    createQuickPickWithRefresh(loadingMessage, message, onUpdatedInput, acceptNonMatchingInput) {
        const quickPick = (__webpack_require__(89496).window.createQuickPick)();
        const setItems = (items) => {
            quickPick.placeholder = message;
            quickPick.items = items;
            quickPick.busy = false;
        };
        const cancel = () => {
            quickPick.dispose();
        };
        return {
            setItems,
            cancel,
            valuePromise: new Promise((resolve) => {
                quickPick.placeholder = loadingMessage;
                quickPick.items = [];
                quickPick.ignoreFocusOut = true;
                quickPick.busy = true;
                let userInput = '';
                quickPick.onDidChangeValue((input) => {
                    userInput = input;
                    if (onUpdatedInput) {
                        quickPick.busy = true;
                        onUpdatedInput(input).then((updatedItems) => {
                            quickPick.items = updatedItems;
                            quickPick.busy = false;
                        });
                    }
                });
                quickPick.onDidAccept(() => __awaiter(this, void 0, void 0, function* () {
                    quickPick.enabled = false;
                    if (quickPick.selectedItems.length < 1) {
                        const submittedInput = userInput;
                        if (acceptNonMatchingInput &&
                            (yield acceptNonMatchingInput(submittedInput))) {
                            resolve(submittedInput);
                            quickPick.dispose();
                        }
                        else {
                            quickPick.enabled = true;
                            return;
                        }
                    }
                    else {
                        resolve(quickPick.selectedItems[0]);
                        quickPick.dispose();
                    }
                }));
                quickPick.show();
            }),
        };
    }
    showSaveDialog(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield Promise.resolve().then(() => __webpack_require__(89496))).window.showSaveDialog(options);
        });
    }
}
exports.NotificationUtilClass = NotificationUtilClass;
// tslint:disable-next-line: variable-name
const NotificationUtil = NotificationUtilClass.Instance;
exports.NotificationUtil = NotificationUtil;
//# sourceMappingURL=NotificationUtil.js.map

/***/ }),

/***/ 73649:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findFilesAsync = exports.statAsync = exports.readdirAsync = void 0;
const path = __webpack_require__(67425);
const fileAccess_1 = __webpack_require__(91984);
/**
 * Async function to get the immediate children of a directory.
 */
const readdirAsync = (dir) => {
    return new Promise((resolve, reject) => {
        fileAccess_1.fileAccess.readdir(dir, (err, children) => (err ? reject(err) : resolve(children)));
    });
};
exports.readdirAsync = readdirAsync;
/**
 * Async function to get file or directory stats.
 *
 * @param fileOrDir File or directory path to get stats for.
 * @returns File or directory stats.
 */
const statAsync = (fileOrDir) => {
    return new Promise((resolve, reject) => {
        fileAccess_1.fileAccess.stat(fileOrDir, (err, stats) => (err ? reject(err) : resolve(stats)));
    });
};
exports.statAsync = statAsync;
/**
 * Searches for files in a directory that pass a given filter.
 *
 * @param root Returned results are paths relative to this root.
 * @param dir Starting directory for the search.
 * @param filter Optional callback to filter the files.
 */
const findFilesAsync = (root, dir, filter) => __awaiter(void 0, void 0, void 0, function* () {
    let results = [];
    let children = [];
    try {
        children = yield (0, exports.readdirAsync)(dir);
    }
    catch (e) {
        // Skip a directory if it couldn't be read.
    }
    for (let child of children) {
        const childPath = path.join(dir, child);
        let childStat;
        try {
            childStat = yield (0, exports.statAsync)(childPath);
        }
        catch (e) {
            // Skip a child if it couldn't be read.
            continue;
        }
        if (childStat.isDirectory()) {
            const childResults = yield (0, exports.findFilesAsync)(root, childPath, filter);
            results = results.concat(childResults);
        }
        else {
            const childRelativePath = path.relative(root, childPath);
            if (!filter || filter(childRelativePath)) {
                results.push(childRelativePath);
            }
        }
    }
    return results;
});
exports.findFilesAsync = findFilesAsync;
//# sourceMappingURL=findFilesAsync.js.map

/***/ }),

/***/ 54829:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getExtensionUri = void 0;
const ExtentionContext_1 = __webpack_require__(67860);
function getExtensionUri(relativePath, extensionContext) {
    const vscodeModule = __webpack_require__(89496);
    extensionContext = extensionContext || (0, ExtentionContext_1.getExtensionContext)();
    return vscodeModule.Uri.joinPath(extensionContext.extensionUri, relativePath);
}
exports.getExtensionUri = getExtensionUri;
//# sourceMappingURL=getExtensionUri.js.map

/***/ }),

/***/ 9939:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPackageJSON = void 0;
const path = __webpack_require__(67425);
const loadJSON_1 = __webpack_require__(59570);
const ExtentionContext_1 = __webpack_require__(67860);
let packageJSON;
const getPackageJSON = () => {
    if (packageJSON) {
        return packageJSON;
    }
    const packageJSONPath = path.join(ExtentionContext_1.extensionContext.extensionPath, './package.json');
    packageJSON = (0, loadJSON_1.loadJSON)(packageJSONPath);
    return packageJSON;
};
exports.getPackageJSON = getPackageJSON;
//# sourceMappingURL=getPackageJSON.js.map

/***/ }),

/***/ 25943:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isFirstActivation = exports.isExtensionBeingUpdated = void 0;
const path = __webpack_require__(67425);
const fileAccess_1 = __webpack_require__(91984);
const loadJSON_1 = __webpack_require__(59570);
const telemetryStrings_1 = __webpack_require__(22705);
const ExtentionContext_1 = __webpack_require__(67860);
const throwIfNotInitialized_1 = __webpack_require__(99403);
const vso_telemetry_1 = __webpack_require__(76811);
/**
 * Function to check if the folder is LiveShare extension directory.
 * @param pathComponents
 *      - @source - the path to the folder.
 *      - @name - folder name.
 * @returns Whether the folder is the LiveShare extension directory.
 */
const isCurrentExtensionDirectory = (extensionRoot, pathComponents) => {
    const { source, name } = pathComponents;
    const folderPath = path.join(source, name);
    const packageInfo = (0, loadJSON_1.loadJSON)(path.resolve(extensionRoot, './package.json'));
    const isDirectory = fileAccess_1.fileAccess.lstatSync(folderPath).isDirectory();
    if (isDirectory) {
        return new RegExp(`^${packageInfo.publisher}\\.${packageInfo.name}-[0-9]`).test(name);
    }
    return false;
};
/**
 * Function to get all liveshare directory names form the VSCode extensions directory.
 * @param source Path to the extensions directory.
 */
const getCurrentExtensionDirectories = () => __awaiter(void 0, void 0, void 0, function* () {
    (0, throwIfNotInitialized_1.throwNotInitialized)(ExtentionContext_1.extensionContext);
    const source = ExtentionContext_1.extensionContext.extensionPath;
    return (yield fileAccess_1.fileAccess.readdirAsync(source))
        .map((name) => {
        return { source, name };
    })
        .filter(isCurrentExtensionDirectory.bind(null, source));
});
/**
 * Function to check whether the current extension is the only LiveShare extension in the VSCode extensions folder.
 * @returns Whether the current extension is the only LiveShare extension in the VSCode extensions folder.
 */
const isExtensionBeingUpdated = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const directories = yield getCurrentExtensionDirectories();
        return directories.length > 1;
    }
    catch (e) {
        return false;
    }
});
exports.isExtensionBeingUpdated = isExtensionBeingUpdated;
const isFirstActivation = (packageJSON) => __awaiter(void 0, void 0, void 0, function* () {
    (0, throwIfNotInitialized_1.throwNotInitialized)(ExtentionContext_1.extensionContext);
    const { globalState } = ExtentionContext_1.extensionContext;
    const EXT_FIRST_ACTIVATION_VERSION_KEY = `${packageJSON.name}-first-activation-flag`;
    let wasActivatedBefore = false;
    if (!globalState.get(EXT_FIRST_ACTIVATION_VERSION_KEY)) {
        yield globalState.update(EXT_FIRST_ACTIVATION_VERSION_KEY, packageJSON.version);
        wasActivatedBefore = true;
    }
    vso_telemetry_1.Telemetry.addContextProperty(telemetryStrings_1.TelemetryPropertyNames.IS_FIRST_ACTIVATION, wasActivatedBefore);
    return wasActivatedBefore;
});
exports.isFirstActivation = isFirstActivation;
//# sourceMappingURL=isFirstInitialization.js.map

/***/ }),

/***/ 59570:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadJSON = void 0;
const fileAccess_1 = __webpack_require__(91984);
const stripJsonComments = __webpack_require__(2606);
const cache = new Map();
const loadJSON = (filePath, isCache = false) => {
    if (isCache) {
        const data = cache.get(filePath);
        if (data !== undefined) {
            return data;
        }
    }
    const jsonWithComments = fileAccess_1.fileAccess.readFileSync(filePath, 'utf8');
    const json = stripJsonComments(jsonWithComments);
    const result = JSON.parse(json);
    if (isCache) {
        cache.set(filePath, result);
    }
    return result;
};
exports.loadJSON = loadJSON;
//# sourceMappingURL=loadJSON.js.map

/***/ }),

/***/ 99403:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.throwNotInitialized = void 0;
const throwNotInitialized = (object) => {
    if (!object) {
        throw new Error('The API was not initialized, please call `initialize` method first.');
    }
    return object;
};
exports.throwNotInitialized = throwNotInitialized;
//# sourceMappingURL=throwIfNotInitialized.js.map

/***/ }),

/***/ 62287:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VscodeActivityProvider = void 0;
const vscs_utils_1 = __webpack_require__(19745);
const dataScrapingManager_1 = __webpack_require__(51054);
const VscodeActivityType_1 = __webpack_require__(51036);
class VscodeActivityProvider extends vscs_utils_1.DisposableClass {
    constructor(trace) {
        super(trace.createChild('vscode-activity-provider'));
        // Workspace events
        this.addToDisposables(VscodeActivityProvider.vscode.workspace.onDidChangeTextDocument((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.changeTextDocument);
        }), VscodeActivityProvider.vscode.workspace.onDidOpenTextDocument((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.openTextDocument);
        }), VscodeActivityProvider.vscode.workspace.onDidCloseTextDocument((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.closeTextDocument);
        }), VscodeActivityProvider.vscode.workspace.onDidSaveTextDocument((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.saveTextDocument);
        }), VscodeActivityProvider.vscode.workspace.onDidOpenNotebookDocument((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.openNotebookDocument);
        }), VscodeActivityProvider.vscode.workspace.onDidCloseNotebookDocument((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.closeNotebookDocument);
        }), 
        // Debug events
        VscodeActivityProvider.vscode.debug.onDidStartDebugSession((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.startDebugSession);
        }), VscodeActivityProvider.vscode.debug.onDidTerminateDebugSession((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.terminateDebugSession);
        }), VscodeActivityProvider.vscode.debug.onDidChangeBreakpoints((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.changeBreakpoints);
        }), 
        // Task events
        VscodeActivityProvider.vscode.tasks.onDidStartTask((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.startTask);
        }), VscodeActivityProvider.vscode.tasks.onDidEndTask((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.endTask);
        }), VscodeActivityProvider.vscode.tasks.onDidStartTaskProcess((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.startTaskProcess);
        }), VscodeActivityProvider.vscode.tasks.onDidEndTaskProcess((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.endTaskProcess);
        }), 
        // Window events
        VscodeActivityProvider.vscode.window.onDidChangeActiveTextEditor((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.changeActiveTextEditor);
        }), VscodeActivityProvider.vscode.window.onDidOpenTerminal((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.openTerminal);
        }), VscodeActivityProvider.vscode.window.onDidCloseTerminal((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.closeTerminal);
        }));
        // Terminal activity
        dataScrapingManager_1.dataScrapingManagerInstance
            .registerDataScraper('vscodeEventsRegistration', () => {
            /**
             * It is important that we don't just send self(`this`) as the
             * terminal because the whole monitor will be disposed when
             * the terminal data scraping worker is disposed.
             */
            return {
                init: this.onActivity.bind(this),
                processData: this.onActivity.bind(this),
                dispose() { },
            };
        })
            .then((disposable) => {
            this.addToDisposables(disposable);
        });
        // Notebook events (still in proposed API right now)
        // Cast to any to avoid compile errors until the minimum VS Code version
        // is updated to a version where the Notebooks events are guaranteed to exist
        const notebook = VscodeActivityProvider.vscode.notebooks;
        if (notebook) {
            try {
                if (typeof notebook.onDidSaveNotebookDocument === 'function') {
                    this.addToDisposables(notebook.onDidSaveNotebookDocument(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.saveNotebookDocument);
                    }));
                }
                if (typeof notebook.onDidChangeVisibleNotebookEditors === 'function') {
                    this.addToDisposables(notebook.onDidChangeVisibleNotebookEditors(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeVisibleNotebookEditors);
                    }));
                }
                if (typeof notebook.onDidChangeNotebookEditorSelection === 'function') {
                    this.addToDisposables(notebook.onDidChangeNotebookEditorSelection(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeNotebookEditorSelection);
                    }));
                }
                if (typeof notebook.onDidChangeNotebookCells === 'function') {
                    this.addToDisposables(notebook.onDidChangeNotebookCells(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeNotebookCells);
                    }));
                }
                if (typeof notebook.onDidChangeCellOutputs === 'function') {
                    this.addToDisposables(notebook.onDidChangeCellOutputs(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeCellOutputs);
                    }));
                }
                if (typeof notebook.onDidChangeActiveNotebookEditor === 'function') {
                    this.addToDisposables(notebook.onDidChangeActiveNotebookEditor(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeActiveNotebookEditor);
                    }));
                }
                if (typeof notebook.onDidChangeActiveNotebookKernel === 'function') {
                    this.addToDisposables(notebook.onDidChangeActiveNotebookKernel(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeActiveNotebookKernel);
                    }));
                }
            }
            catch (err) {
                // Note: remove this later. Temporary allow debugging when proposed API is not possible.
                if (!(err instanceof Error && err.message.includes('Proposed API'))) {
                    throw err;
                }
            }
        }
        // languages events
        this.addToDisposables(VscodeActivityProvider.vscode.languages.registerHoverProvider('*', {
            provideHover: () => {
                this.onActivity(VscodeActivityType_1.VscodeActivityType.registerHoverProvider);
                return null;
            },
        }));
    }
    // Defer import of `vscode` package.
    static get vscode() {
        return __webpack_require__(89496);
    }
}
exports.VscodeActivityProvider = VscodeActivityProvider;
//# sourceMappingURL=VscodeActivityProvider.js.map

/***/ }),

/***/ 51036:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VscodeActivityType = void 0;
var VscodeActivityType;
(function (VscodeActivityType) {
    VscodeActivityType[VscodeActivityType["changeTextDocument"] = 0] = "changeTextDocument";
    VscodeActivityType[VscodeActivityType["openTextDocument"] = 1] = "openTextDocument";
    VscodeActivityType[VscodeActivityType["closeTextDocument"] = 2] = "closeTextDocument";
    VscodeActivityType[VscodeActivityType["saveTextDocument"] = 3] = "saveTextDocument";
    VscodeActivityType[VscodeActivityType["startDebugSession"] = 4] = "startDebugSession";
    VscodeActivityType[VscodeActivityType["terminateDebugSession"] = 5] = "terminateDebugSession";
    VscodeActivityType[VscodeActivityType["changeBreakpoints"] = 6] = "changeBreakpoints";
    VscodeActivityType[VscodeActivityType["startTask"] = 7] = "startTask";
    VscodeActivityType[VscodeActivityType["endTask"] = 8] = "endTask";
    VscodeActivityType[VscodeActivityType["startTaskProcess"] = 9] = "startTaskProcess";
    VscodeActivityType[VscodeActivityType["endTaskProcess"] = 10] = "endTaskProcess";
    VscodeActivityType[VscodeActivityType["changeActiveTextEditor"] = 11] = "changeActiveTextEditor";
    VscodeActivityType[VscodeActivityType["openTerminal"] = 12] = "openTerminal";
    VscodeActivityType[VscodeActivityType["closeTerminal"] = 13] = "closeTerminal";
    VscodeActivityType[VscodeActivityType["openNotebookDocument"] = 14] = "openNotebookDocument";
    VscodeActivityType[VscodeActivityType["closeNotebookDocument"] = 15] = "closeNotebookDocument";
    VscodeActivityType[VscodeActivityType["saveNotebookDocument"] = 16] = "saveNotebookDocument";
    VscodeActivityType[VscodeActivityType["changeVisibleNotebookEditors"] = 17] = "changeVisibleNotebookEditors";
    VscodeActivityType[VscodeActivityType["changeNotebookEditorSelection"] = 18] = "changeNotebookEditorSelection";
    VscodeActivityType[VscodeActivityType["changeNotebookCells"] = 19] = "changeNotebookCells";
    VscodeActivityType[VscodeActivityType["changeCellOutputs"] = 20] = "changeCellOutputs";
    VscodeActivityType[VscodeActivityType["changeActiveNotebookEditor"] = 21] = "changeActiveNotebookEditor";
    VscodeActivityType[VscodeActivityType["changeActiveNotebookKernel"] = 22] = "changeActiveNotebookKernel";
    VscodeActivityType[VscodeActivityType["registerHoverProvider"] = 23] = "registerHoverProvider";
    VscodeActivityType[VscodeActivityType["initialActivitySignal"] = 24] = "initialActivitySignal";
    VscodeActivityType[VscodeActivityType["typeInTerminal"] = 25] = "typeInTerminal";
    VscodeActivityType[VscodeActivityType["clickedDialog"] = 26] = "clickedDialog";
})(VscodeActivityType = exports.VscodeActivityType || (exports.VscodeActivityType = {}));
//# sourceMappingURL=VscodeActivityType.js.map

/***/ }),

/***/ 75191:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VscodeSessionStatus = void 0;
var VscodeSessionStatus;
(function (VscodeSessionStatus) {
    VscodeSessionStatus[VscodeSessionStatus["Active"] = 0] = "Active";
    VscodeSessionStatus[VscodeSessionStatus["Idle"] = 1] = "Idle";
})(VscodeSessionStatus = exports.VscodeSessionStatus || (exports.VscodeSessionStatus = {}));
//# sourceMappingURL=VscodeSessionStatus.js.map

/***/ }),

/***/ 76353:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VscodeSessionStatusProvider = void 0;
const rpc = __webpack_require__(83730);
const VscodeActivityProvider_1 = __webpack_require__(62287);
const VscodeSessionStatus_1 = __webpack_require__(75191);
/**
 * This class will expose a mechanism to see if the liveshare extension
 * has had any activity work giving a timeout value.
 */
class VscodeSessionStatusProvider extends VscodeActivityProvider_1.VscodeActivityProvider {
    constructor(trace, activityTimeout) {
        super(trace.createChild('session-status-provider'));
        this.activityTimeout = activityTimeout;
        this.statusChangedEvent = new rpc.Emitter();
        this.currentActivityStatus = false;
        this.resetStatusTimerId = null;
        this.onActivity();
    }
    get sessionStatus() {
        return this.currentActivityStatus ? VscodeSessionStatus_1.VscodeSessionStatus.Active : VscodeSessionStatus_1.VscodeSessionStatus.Idle;
    }
    get onSessionStatusChanged() {
        return this.statusChangedEvent.event;
    }
    /**
     * Reset the activity status causing to report a 'true' activity status
     */
    reset() {
        if (!this.currentActivityStatus) {
            this.currentActivityStatus = true;
            this.statusChangedEvent.fire(VscodeSessionStatus_1.VscodeSessionStatus.Active);
        }
        if (this.resetStatusTimerId) {
            clearTimeout(this.resetStatusTimerId);
            this.resetStatusTimerId = null;
        }
        this.resetStatusTimerId = setTimeout(() => {
            this.currentActivityStatus = false;
            this.statusChangedEvent.fire(VscodeSessionStatus_1.VscodeSessionStatus.Idle);
        }, this.activityTimeout);
    }
    onActivity() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.statusChangedEvent) {
                this.reset();
            }
        });
    }
}
exports.VscodeSessionStatusProvider = VscodeSessionStatusProvider;
//# sourceMappingURL=VscodeSessionStatusProvider.js.map

/***/ }),

/***/ 36222:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.10.19.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContactServiceProvider = exports.Methods = exports.AuthenticationRequiredNotification = exports.SignedStateChangedNotification = exports.SignInRequest = exports.MessageReceivedNotification = exports.SendMessageRequest = exports.MessagePayload = exports.SearchContactsResponse = exports.SearchContactsRequest = exports.SearchContactProperty = exports.ContactPresenceDisposeRequest = exports.ContactPresenceResponse = exports.ContactResponse = exports.ContactPresenceRequest = exports.SuggestedContactsNotification = exports.ContactsNotification = exports.SelfContactNotification = exports.InviteReceivedNotification = exports.InviteRequest = exports.ContactPropertiesChangedNotification = exports.ContactChangedNotification = exports.ContactPropertyValueChanged = exports.PresenceChangedNotification = exports.ContactPresenceUpdate = exports.SignedStatus = exports.InitializeResponse = exports.Capabilities = exports.WorkspaceUri = exports.WorkspaceFolder = exports.InitializeRequest = exports.PublishPresenceRequest = exports.EmptyResponse = exports.EmptyRequest = exports.Contact = exports.ContactProperty = exports.PresenceStatus = exports.NotifyContactServiceEventArgs = exports.EventArgs = void 0;
/** Describes the kind of data to be formatted. */
const vso_rpc_1 = __webpack_require__(79240);
class EventArgs {
}
exports.EventArgs = EventArgs;
/** Notification class for contact service */
class NotifyContactServiceEventArgs extends EventArgs {
}
exports.NotifyContactServiceEventArgs = NotifyContactServiceEventArgs;
/** The presence status default options */
var PresenceStatus;
(function (PresenceStatus) {
    PresenceStatus[PresenceStatus["Unknown"] = 'unknown'] = "Unknown";
    PresenceStatus[PresenceStatus["Available"] = 'available'] = "Available";
    PresenceStatus[PresenceStatus["Busy"] = 'busy'] = "Busy";
    PresenceStatus[PresenceStatus["DoNotDisturb"] = 'doNotDisturb'] = "DoNotDisturb";
    PresenceStatus[PresenceStatus["Away"] = 'away'] = "Away";
    PresenceStatus[PresenceStatus["Invisible"] = 'invisible'] = "Invisible";
    PresenceStatus[PresenceStatus["Offline"] = 'offline'] = "Offline";
})(PresenceStatus = exports.PresenceStatus || (exports.PresenceStatus = {}));
/** Contact property types */
var ContactProperty;
(function (ContactProperty) {
    ContactProperty[ContactProperty["DisplayName"] = 'displayName'] = "DisplayName";
    ContactProperty[ContactProperty["Email"] = 'email'] = "Email";
    ContactProperty[ContactProperty["AvatarUri"] = 'avatarUri'] = "AvatarUri";
    ContactProperty[ContactProperty["Status"] = 'status'] = "Status";
})(ContactProperty = exports.ContactProperty || (exports.ContactProperty = {}));
/** Contact entity */
class Contact {
}
exports.Contact = Contact;
/** Empty parameters */
class EmptyRequest {
}
exports.EmptyRequest = EmptyRequest;
/** Empty result */
class EmptyResponse {
}
exports.EmptyResponse = EmptyResponse;
class PublishPresenceRequest {
}
exports.PublishPresenceRequest = PublishPresenceRequest;
/** Parameters passed during Initialize method */
class InitializeRequest {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(PublishPresenceRequest),
    __metadata("design:type", PublishPresenceRequest)
], InitializeRequest.prototype, "publishPresence", void 0);
exports.InitializeRequest = InitializeRequest;
/** Definition of a workspace folder */
class WorkspaceFolder {
}
exports.WorkspaceFolder = WorkspaceFolder;
/** A workspace Uri from vscode */
class WorkspaceUri {
}
exports.WorkspaceUri = WorkspaceUri;
/** Capabilities that a service would offer */
class Capabilities {
}
exports.Capabilities = Capabilities;
/** Returned on the Initialized method */
class InitializeResponse {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(Capabilities),
    __metadata("design:type", Capabilities)
], InitializeResponse.prototype, "capabilities", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(Contact),
    __metadata("design:type", Contact)
], InitializeResponse.prototype, "selfContact", void 0);
exports.InitializeResponse = InitializeResponse;
/** The signed state option */
var SignedStatus;
(function (SignedStatus) {
    SignedStatus[SignedStatus["None"] = 'none'] = "None";
    SignedStatus[SignedStatus["SignedOut"] = 'signedOut'] = "SignedOut";
    SignedStatus[SignedStatus["SigningIn"] = 'signingIn'] = "SigningIn";
    SignedStatus[SignedStatus["SignedIn"] = 'signedIn'] = "SignedIn";
})(SignedStatus = exports.SignedStatus || (exports.SignedStatus = {}));
/** A presence status changed for a contact entity */
class ContactPresenceUpdate {
}
exports.ContactPresenceUpdate = ContactPresenceUpdate;
/** Batch of presence changed for multiple contacts */
class PresenceChangedNotification {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(ContactPresenceUpdate),
    __metadata("design:type", Array)
], PresenceChangedNotification.prototype, "changes", void 0);
exports.PresenceChangedNotification = PresenceChangedNotification;
class ContactPropertyValueChanged {
}
exports.ContactPropertyValueChanged = ContactPropertyValueChanged;
class ContactChangedNotification {
}
exports.ContactChangedNotification = ContactChangedNotification;
class ContactPropertiesChangedNotification {
}
exports.ContactPropertiesChangedNotification = ContactPropertiesChangedNotification;
class InviteRequest {
}
exports.InviteRequest = InviteRequest;
class InviteReceivedNotification {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(Contact),
    __metadata("design:type", Contact)
], InviteReceivedNotification.prototype, "fromContact", void 0);
exports.InviteReceivedNotification = InviteReceivedNotification;
class SelfContactNotification {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(Contact),
    __metadata("design:type", Contact)
], SelfContactNotification.prototype, "contact", void 0);
exports.SelfContactNotification = SelfContactNotification;
class ContactsNotification {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(Contact),
    __metadata("design:type", Array)
], ContactsNotification.prototype, "contacts", void 0);
exports.ContactsNotification = ContactsNotification;
class SuggestedContactsNotification extends ContactsNotification {
}
exports.SuggestedContactsNotification = SuggestedContactsNotification;
class ContactPresenceRequest {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(Contact),
    __metadata("design:type", Array)
], ContactPresenceRequest.prototype, "contacts", void 0);
exports.ContactPresenceRequest = ContactPresenceRequest;
class ContactResponse {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(Contact),
    __metadata("design:type", Contact)
], ContactResponse.prototype, "contact", void 0);
exports.ContactResponse = ContactResponse;
class ContactPresenceResponse {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(ContactResponse),
    __metadata("design:type", Array)
], ContactPresenceResponse.prototype, "contacts", void 0);
exports.ContactPresenceResponse = ContactPresenceResponse;
class ContactPresenceDisposeRequest {
}
exports.ContactPresenceDisposeRequest = ContactPresenceDisposeRequest;
class SearchContactProperty {
}
exports.SearchContactProperty = SearchContactProperty;
class SearchContactsRequest {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SearchContactProperty),
    __metadata("design:type", Array)
], SearchContactsRequest.prototype, "queryOptions", void 0);
exports.SearchContactsRequest = SearchContactsRequest;
class SearchContactsResponse {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(Contact),
    __metadata("design:type", Array)
], SearchContactsResponse.prototype, "results", void 0);
exports.SearchContactsResponse = SearchContactsResponse;
class MessagePayload {
}
exports.MessagePayload = MessagePayload;
class SendMessageRequest extends MessagePayload {
}
exports.SendMessageRequest = SendMessageRequest;
class MessageReceivedNotification extends MessagePayload {
}
exports.MessageReceivedNotification = MessageReceivedNotification;
class SignInRequest {
}
exports.SignInRequest = SignInRequest;
class SignedStateChangedNotification {
}
exports.SignedStateChangedNotification = SignedStateChangedNotification;
class AuthenticationRequiredNotification {
}
exports.AuthenticationRequiredNotification = AuthenticationRequiredNotification;
var Methods;
(function (Methods) {
    Methods["RequestInitializeName"] = "initialize";
    Methods["RequestDisposeName"] = "dispose";
    Methods["RequestInviteName"] = "inviteLink";
    Methods["RequestPublishPresenceName"] = "publishPresence";
    Methods["RequestContactPresenceName"] = "contactPresenceRequest";
    Methods["RequestContactPresenceDisposeName"] = "contactPresenceDispose";
    Methods["RequestSearchContactsName"] = "searchContacts";
    Methods["RequestSendMessageName"] = "sendMessageRequest";
    Methods["RequestSignInName"] = "signIn";
    Methods["RequestSignOutName"] = "signOut";
    Methods["NotifyPresenceChangedName"] = "presenceChanged";
    Methods["NotifySelfContactName"] = "selfContact";
    Methods["NotifyAvailableUsersName"] = "availableUsers";
    Methods["NotifyAvailableUsersAddedName"] = "availableUsersAdded";
    Methods["NotifyAvailableUsersRemovedName"] = "availableUsersRemoved";
    Methods["NotifyInviteReceivedName"] = "inviteLinkReceived";
    Methods["NotifyContactChangedName"] = "contactChanged";
    Methods["NotifyContactPropertiesChangedName"] = "contactPropertiesChanged";
    Methods["NotifySuggestedUsersName"] = "suggestedUsers";
    Methods["NotifyCapabilitiesUpdateName"] = "capabilitiesUpdate";
    Methods["NotifyMessageReceivedName"] = "messageReceived";
    Methods["NotifySignedStateChangedName"] = "signedStateChanged";
    Methods["NotifyAuthenticationRequiredName"] = "authenticationRequired";
})(Methods = exports.Methods || (exports.Methods = {}));
exports.ContactServiceProvider = {
    methods: ['request'],
    events: ['notified'],
};
//# sourceMappingURL=ContactProtocol.js.map

/***/ }),

/***/ 75301:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.10.19.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerSharingStoppedEventArgs = exports.PipeSharingStartedEventArgs = exports.ServerSharingStartedEventArgs = exports.SharedPipe = exports.SharedServer = exports.PrivacyEnum = exports.LiveShareSessionState = exports.InviteStatusNotify = exports.InviteContactStatus = exports.HubConnectionStateEventArgs = exports.HubMethodNotifyEventArgs = exports.FirewallStatus = exports.ClientVersionInfo = exports.AgentVersionInfo = exports.AddressAndMask = exports.CommentThreadLocation = exports.CommentThreadChangedEventArgs = exports.CommentThread = exports.Comment = exports.CommentThreadContext = exports.CommentThreadStatus = exports.Position = exports.MessageReceivedEventArgs = exports.ChatMessage = exports.ChatMessageBody = exports.ChatParticipant = exports.ChatMessageType = exports.BrokerEventArgs = exports.BrokerManifest = exports.AuthenticatedUserInfo = exports.AuthenticationChangedEventArgs = exports.AuthenticationOptions = exports.RecentCollaborator = exports.UserAccountStatus = exports.UserInfo = exports.UserAccountInfo = exports.AuthenticationToken = exports.AgentSessionResponse = exports.AgentSessionRequest = exports.AgentTraceEventArgs = exports.HubConnectionError = exports.AttemptHubConnectionEventArgs = exports.EventArgs = exports.FeatureFlagStore = exports.SeekOrigin = exports.AccessControl = exports.MaybeImmutableOfAccessControl = exports.FileServiceRootConfiguration = exports.FileServiceRootDirectoryConfiguration = exports.RemoteStreamMoniker = void 0;
exports.WorkspaceProgressEventArgs = exports.WorkspaceProgress = exports.WorkspaceReadyForConnectionEventArgs = exports.WorkspaceConnectionStatusChangedEventArgs = exports.WorkspaceDisconnectedReason = exports.WorkspaceConnectionStatus = exports.WorkspaceInfo = exports.InvitationLinkInfo = exports.DiagnosticDataChangedEventArgs = exports.DiagnosticEntry = exports.ErrorSeverity = exports.RestrictedOperationAccessRequestedEventArgs = exports.WorkspaceAccessControlEventArgs = exports.WorkspaceAccessControl = exports.MaybeImmutableOfWorkspaceAccessControl = exports.SharedTerminalRestrictedOperation = exports.RestrictedOperation = exports.TerminalEventArgs = exports.TerminalInfo = exports.TerminalOptions = exports.FaultTelemetryEventArgs = exports.TelemetryResult = exports.GenericOperationEventArgs = exports.TelemetrySettings = exports.TaskOutputEventArgs = exports.TaskOutputInfo = exports.TaskOutputOptions = exports.TaskOutputFeedInfo = exports.TaskOutputContentType = exports.SyncStatus = exports.SourceControlResourceChangedEventArgs = exports.SourceControlChangedEventArgs = exports.SourceControlChange = exports.SourceControlResourceDiff = exports.SourceControlInstance = exports.SourceControlResourceGroup = exports.SourceControlResourceIdentifier = exports.SourceControlResourceState = exports.SourceControlResource = exports.SourceControlChangeType = exports.SourceControlResourceType = exports.SourceControlVersion = exports.SourceControlIdentifier = exports.SessionUpdateEventArgs = exports.ServerSharingFailedEventArgs = exports.ServerSharingSucceededEventArgs = exports.TunnelType = exports.ChangeKind = exports.ServerSharingChangedEventArgs = exports.PipeSharingStoppedEventArgs = void 0;
exports.PingMessage = exports.SummonMessage = exports.FileOpenAcknowledgeMessage = exports.ServerVersionSnapshot = exports.ProjectFileClosedMessage = exports.ProjectFileOpenedMessage = exports.ReadOnlyChangeMessage = exports.TextChangeMessage = exports.AnonymousAcccessLevelChangedMessage = exports.FileReleaseMessage = exports.SaveNotebookMessage = exports.SaveFileMessage = exports.HandshakeMessage = exports.DiffViewClosedMessage = exports.DiffViewOpenMessage = exports.DiffViewMessage = exports.UntitledFileClosedMessage = exports.UntitledFileOpenedMessage = exports.UntitledFileSavedMessage = exports.ResetFileClientMessage = exports.FileOpenRequestMessage = exports.VisibleRangesChangeMessage = exports.EditorVisibleRanges = exports.NotebookScrollMessage = exports.LayoutScrollMessage = exports.Range = exports.NotebookSelectionChangeMessage = exports.SelectionChangeMessage = exports.FollowChangeMessage = exports.PresenterUpdateMessage = exports.JoinAcknowledgeMessage = exports.JoinRequestMessage = exports.FileMessageBase = exports.MessageType = exports.MessageBase = exports.TextChange = exports.VSOnlineSettings = exports.UserSettings = exports.WorkspaceSessionChangedEventArgs = exports.WorkspaceSessionChangeType = exports.GuestAcceptance = exports.CollectionChangeType = exports.WorkspaceServicesChangedEventArgs = exports.WorkspaceUserProfile = exports.WorkspaceSessionInfo = exports.WorkspaceListOptions = exports.WorkspaceJoinInfo = exports.ClientCapabilities = exports.ConnectionMode = exports.WorkspaceShareInfo = void 0;
exports.RunTaskStatus = exports.TaskExecutionStatusEventArgs = exports.TaskExecutionStatusChange = exports.TaskExecutionMoniker = exports.WorkspaceTask = exports.TaskScope = exports.StreamTraits = exports.SourceEventArgs = exports.SolutionChangeType = exports.WorkspaceMode = exports.WorkspaceRootChangedEventArgs = exports.SolutionChangedEventArgs = exports.SolutionWorkspaceNode = exports.NodeType = exports.TextSearchOptions = exports.ReadTextResult = exports.TextSearchResult = exports.TextSearchResultRange = exports.ExternalFileMapResult = exports.DiffBaseInfo = exports.RootsChangedEventArgs = exports.ExternalFilesChangedEventArgs = exports.FilesChangedEventArgs = exports.FileChangeType = exports.FileChange = exports.FileWatchOptions = exports.FileDeleteOptions = exports.FileMoveOptions = exports.FileWriteOptions = exports.FileReadOptions = exports.FileTextInfo = exports.FileRootInfo = exports.FileInfo = exports.FileAttributes = exports.FileRecurseMode = exports.FileListOptions = exports.RestrictedOperationAccessEventArgs = exports.RestrictedOperationAccess = exports.AccessControlEventArgs = exports.ContinueReason = exports.LaunchConfigurationChangedEventArgs = exports.DebugSessionChangedEventArgs = exports.DebugSessionChangeType = exports.DebugSession = exports.LspMessage = exports.NotificationEventArgs = exports.LanguageServerProviderMetadata = exports.DocumentFilter = exports.CoeditingInformation = exports.DocumentChangesNotificationFlags = void 0;
exports.WorkspaceTaskService = exports.StreamService = exports.StreamManagerService = exports.SourceEventService = exports.SolutionViewService = exports.FileService = exports.AccessControlService = exports.DebuggerHostService = exports.LanguageServerProvider = exports.WorkspaceUserService = exports.WorkspaceService = exports.WorkspaceDiagnosticsService = exports.WorkspaceAccessControlService = exports.TextSearchService = exports.TerminalService = exports.TerminalEndpoint = exports.TelemetryService = exports.TaskOutputService = exports.SyncService = exports.SourceControlService = exports.SessionContextService = exports.ServerSharingService = exports.PortForwardingService = exports.OnlineEnvironmentSessionService = exports.HubConnectionService = exports.FirewallService = exports.ConfigurationService = exports.CommentService = exports.ChatService = exports.BrokerManagerService = exports.BrokerAuthorizationService = exports.AuthenticationService = exports.AuthenticationCoreService = exports.AgentSessionService = exports.TraceSources = exports.TraceEventIds = exports.ErrorCodes = exports.WorkspaceTaskRestrictedOperation = exports.RunTaskResult = void 0;
/** Describes the kind of data to be formatted. */
const vso_rpc_1 = __webpack_require__(79240);
/** Represents a data object containing attributes needed to access a remote stream. */
class RemoteStreamMoniker {
}
exports.RemoteStreamMoniker = RemoteStreamMoniker;
/** File service root directory configuration. */
class FileServiceRootDirectoryConfiguration {
}
exports.FileServiceRootDirectoryConfiguration = FileServiceRootDirectoryConfiguration;
/** File service root configuration. */
class FileServiceRootConfiguration {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(FileServiceRootDirectoryConfiguration),
    __metadata("design:type", Array)
], FileServiceRootConfiguration.prototype, "directories", void 0);
exports.FileServiceRootConfiguration = FileServiceRootConfiguration;
class MaybeImmutableOfAccessControl {
}
exports.MaybeImmutableOfAccessControl = MaybeImmutableOfAccessControl;
/** Access control */
class AccessControl extends MaybeImmutableOfAccessControl {
}
exports.AccessControl = AccessControl;
var SeekOrigin;
(function (SeekOrigin) {
    SeekOrigin[SeekOrigin["Begin"] = 'begin'] = "Begin";
    SeekOrigin[SeekOrigin["Current"] = 'current'] = "Current";
    SeekOrigin[SeekOrigin["End"] = 'end'] = "End";
})(SeekOrigin = exports.SeekOrigin || (exports.SeekOrigin = {}));
class FeatureFlagStore {
}
exports.FeatureFlagStore = FeatureFlagStore;
class EventArgs {
}
exports.EventArgs = EventArgs;
class AttemptHubConnectionEventArgs extends EventArgs {
}
exports.AttemptHubConnectionEventArgs = AttemptHubConnectionEventArgs;
var HubConnectionError;
(function (HubConnectionError) {
    HubConnectionError[HubConnectionError["None"] = 'none'] = "None";
    HubConnectionError[HubConnectionError["TokenExpired"] = 'tokenExpired'] = "TokenExpired";
    HubConnectionError[HubConnectionError["ServiceUnavailable"] = 'serviceUnavailable'] = "ServiceUnavailable";
})(HubConnectionError = exports.HubConnectionError || (exports.HubConnectionError = {}));
class AgentTraceEventArgs extends EventArgs {
}
exports.AgentTraceEventArgs = AgentTraceEventArgs;
class AgentSessionRequest {
}
exports.AgentSessionRequest = AgentSessionRequest;
class AgentSessionResponse {
}
exports.AgentSessionResponse = AgentSessionResponse;
class AuthenticationToken {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], AuthenticationToken.prototype, "token", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], AuthenticationToken.prototype, "code", void 0);
exports.AuthenticationToken = AuthenticationToken;
/** UserAccountInfo represents the minimum information we require in order to retrieve cached credentials in a machine. It purposefully doesn't include the User's Id, as that is unknown at the time of retrieval. */
class UserAccountInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], UserAccountInfo.prototype, "accountId", void 0);
exports.UserAccountInfo = UserAccountInfo;
class UserInfo extends UserAccountInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], UserInfo.prototype, "id", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], UserInfo.prototype, "displayName", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Email),
    __metadata("design:type", String)
], UserInfo.prototype, "emailAddress", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], UserInfo.prototype, "userName", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Uri),
    __metadata("design:type", String)
], UserInfo.prototype, "avatarUri", void 0);
exports.UserInfo = UserInfo;
var UserAccountStatus;
(function (UserAccountStatus) {
    UserAccountStatus[UserAccountStatus["Unknown"] = 'unknown'] = "Unknown";
    UserAccountStatus[UserAccountStatus["Transient"] = 'transient'] = "Transient";
    UserAccountStatus[UserAccountStatus["Pending"] = 'pending'] = "Pending";
    UserAccountStatus[UserAccountStatus["Accepted"] = 'accepted'] = "Accepted";
    UserAccountStatus[UserAccountStatus["Deleted"] = 'deleted'] = "Deleted";
})(UserAccountStatus = exports.UserAccountStatus || (exports.UserAccountStatus = {}));
class RecentCollaborator {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Email),
    __metadata("design:type", String)
], RecentCollaborator.prototype, "email", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], RecentCollaborator.prototype, "name", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Uri),
    __metadata("design:type", String)
], RecentCollaborator.prototype, "avatarUri", void 0);
exports.RecentCollaborator = RecentCollaborator;
class AuthenticationOptions {
}
exports.AuthenticationOptions = AuthenticationOptions;
class AuthenticationChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(UserInfo),
    __metadata("design:type", UserInfo)
], AuthenticationChangedEventArgs.prototype, "account", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], AuthenticationChangedEventArgs.prototype, "accessToken", void 0);
exports.AuthenticationChangedEventArgs = AuthenticationChangedEventArgs;
class AuthenticatedUserInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(UserInfo),
    __metadata("design:type", UserInfo)
], AuthenticatedUserInfo.prototype, "userInfo", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], AuthenticatedUserInfo.prototype, "accessToken", void 0);
exports.AuthenticatedUserInfo = AuthenticatedUserInfo;
/** A data object containing charasteristics necessary to establish and configure a broker RPC session. */
class BrokerManifest {
}
exports.BrokerManifest = BrokerManifest;
/** Represents event data associated with certain broker events. */
class BrokerEventArgs extends EventArgs {
}
exports.BrokerEventArgs = BrokerEventArgs;
var ChatMessageType;
(function (ChatMessageType) {
    ChatMessageType[ChatMessageType["Text"] = 'text'] = "Text";
    ChatMessageType[ChatMessageType["Typing"] = 'typing'] = "Typing";
})(ChatMessageType = exports.ChatMessageType || (exports.ChatMessageType = {}));
class ChatParticipant {
}
exports.ChatParticipant = ChatParticipant;
class ChatMessageBody {
}
exports.ChatMessageBody = ChatMessageBody;
class ChatMessage {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(ChatMessageBody),
    __metadata("design:type", ChatMessageBody)
], ChatMessage.prototype, "body", void 0);
exports.ChatMessage = ChatMessage;
class MessageReceivedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(ChatMessage),
    __metadata("design:type", ChatMessage)
], MessageReceivedEventArgs.prototype, "message", void 0);
exports.MessageReceivedEventArgs = MessageReceivedEventArgs;
class Position {
    constructor() {
        /** The zero-based index of the character in the buffer. */
        this.startOffset = -1;
    }
}
exports.Position = Position;
var CommentThreadStatus;
(function (CommentThreadStatus) {
    CommentThreadStatus[CommentThreadStatus["Active"] = 'active'] = "Active";
    CommentThreadStatus[CommentThreadStatus["Closed"] = 'closed'] = "Closed";
})(CommentThreadStatus = exports.CommentThreadStatus || (exports.CommentThreadStatus = {}));
class CommentThreadContext {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], CommentThreadContext.prototype, "filePath", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(Position),
    __metadata("design:type", Position)
], CommentThreadContext.prototype, "leftFileStart", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(Position),
    __metadata("design:type", Position)
], CommentThreadContext.prototype, "leftFileEnd", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(Position),
    __metadata("design:type", Position)
], CommentThreadContext.prototype, "rightFileStart", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(Position),
    __metadata("design:type", Position)
], CommentThreadContext.prototype, "rightFileEnd", void 0);
exports.CommentThreadContext = CommentThreadContext;
class Comment {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], Comment.prototype, "participantId", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], Comment.prototype, "participantLabel", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], Comment.prototype, "text", void 0);
exports.Comment = Comment;
class CommentThread {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(Comment),
    __metadata("design:type", Array)
], CommentThread.prototype, "comments", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(CommentThreadContext),
    __metadata("design:type", CommentThreadContext)
], CommentThread.prototype, "threadContext", void 0);
exports.CommentThread = CommentThread;
class CommentThreadChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(CommentThread),
    __metadata("design:type", CommentThread)
], CommentThreadChangedEventArgs.prototype, "newThread", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(Comment),
    __metadata("design:type", Comment)
], CommentThreadChangedEventArgs.prototype, "changedComment", void 0);
exports.CommentThreadChangedEventArgs = CommentThreadChangedEventArgs;
class CommentThreadLocation {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(CommentThreadContext),
    (0, vso_rpc_1.dataFormat)(CommentThreadContext),
    __metadata("design:type", CommentThreadContext)
], CommentThreadLocation.prototype, "threadContext", void 0);
exports.CommentThreadLocation = CommentThreadLocation;
class AddressAndMask {
}
exports.AddressAndMask = AddressAndMask;
class AgentVersionInfo {
}
exports.AgentVersionInfo = AgentVersionInfo;
class ClientVersionInfo {
}
exports.ClientVersionInfo = ClientVersionInfo;
var FirewallStatus;
(function (FirewallStatus) {
    FirewallStatus[FirewallStatus["None"] = 'none'] = "None";
    FirewallStatus[FirewallStatus["Allow"] = 'allow'] = "Allow";
    FirewallStatus[FirewallStatus["Block"] = 'block'] = "Block";
})(FirewallStatus = exports.FirewallStatus || (exports.FirewallStatus = {}));
class HubMethodNotifyEventArgs extends EventArgs {
}
exports.HubMethodNotifyEventArgs = HubMethodNotifyEventArgs;
class HubConnectionStateEventArgs extends EventArgs {
}
exports.HubConnectionStateEventArgs = HubConnectionStateEventArgs;
/** Possible states on an Invited Contact status */
var InviteContactStatus;
(function (InviteContactStatus) {
    InviteContactStatus[InviteContactStatus["None"] = 'none'] = "None";
    InviteContactStatus[InviteContactStatus["Invited"] = 'invited'] = "Invited";
    InviteContactStatus[InviteContactStatus["Dismissed"] = 'dismissed'] = "Dismissed";
    InviteContactStatus[InviteContactStatus["Joining"] = 'joining'] = "Joining";
    InviteContactStatus[InviteContactStatus["Joined"] = 'joined'] = "Joined";
})(InviteContactStatus = exports.InviteContactStatus || (exports.InviteContactStatus = {}));
/** Define a notification entity when an invite status changed for an Invite contact */
class InviteStatusNotify {
}
exports.InviteStatusNotify = InviteStatusNotify;
/** Represents state of Live Share session at online environment client. */
var LiveShareSessionState;
(function (LiveShareSessionState) {
    LiveShareSessionState[LiveShareSessionState["Idle"] = 'idle'] = "Idle";
    LiveShareSessionState[LiveShareSessionState["Shared"] = 'shared'] = "Shared";
})(LiveShareSessionState = exports.LiveShareSessionState || (exports.LiveShareSessionState = {}));
var PrivacyEnum;
(function (PrivacyEnum) {
    PrivacyEnum[PrivacyEnum["Private"] = 'private'] = "Private";
    PrivacyEnum[PrivacyEnum["Public"] = 'public'] = "Public";
    PrivacyEnum[PrivacyEnum["Org"] = 'org'] = "Org";
})(PrivacyEnum = exports.PrivacyEnum || (exports.PrivacyEnum = {}));
/** Shared server info. StreamName and Condition can be used to get the streams from CancellationToken). */
class SharedServer {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Uri),
    __metadata("design:type", String)
], SharedServer.prototype, "browseUrl", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(PrivacyEnum),
    __metadata("design:type", Number)
], SharedServer.prototype, "privacy", void 0);
exports.SharedServer = SharedServer;
/** Shared pipe info. StreamName and Condition can be used to get the streams from CancellationToken). */
class SharedPipe {
}
exports.SharedPipe = SharedPipe;
/** Event args for an event when a new server is shared. */
class ServerSharingStartedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SharedServer),
    __metadata("design:type", SharedServer)
], ServerSharingStartedEventArgs.prototype, "server", void 0);
exports.ServerSharingStartedEventArgs = ServerSharingStartedEventArgs;
/** Event args for an event when a new pipe is shared. */
class PipeSharingStartedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SharedPipe),
    __metadata("design:type", SharedPipe)
], PipeSharingStartedEventArgs.prototype, "pipe", void 0);
exports.PipeSharingStartedEventArgs = PipeSharingStartedEventArgs;
/** Event args for an event when a server is no longer shared. */
class ServerSharingStoppedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SharedServer),
    __metadata("design:type", SharedServer)
], ServerSharingStoppedEventArgs.prototype, "server", void 0);
exports.ServerSharingStoppedEventArgs = ServerSharingStoppedEventArgs;
/** Event args for an event when a pipe is no longer shared. */
class PipeSharingStoppedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SharedPipe),
    __metadata("design:type", SharedPipe)
], PipeSharingStoppedEventArgs.prototype, "pipe", void 0);
exports.PipeSharingStoppedEventArgs = PipeSharingStoppedEventArgs;
/** Event args for an event when a server is updated. */
class ServerSharingChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SharedServer),
    __metadata("design:type", SharedServer)
], ServerSharingChangedEventArgs.prototype, "server", void 0);
exports.ServerSharingChangedEventArgs = ServerSharingChangedEventArgs;
var ChangeKind;
(function (ChangeKind) {
    ChangeKind[ChangeKind["Start"] = 'start'] = "Start";
    ChangeKind[ChangeKind["Update"] = 'update'] = "Update";
    ChangeKind[ChangeKind["Stop"] = 'stop'] = "Stop";
})(ChangeKind = exports.ChangeKind || (exports.ChangeKind = {}));
var TunnelType;
(function (TunnelType) {
    TunnelType[TunnelType["Basis"] = 'basis'] = "Basis";
    TunnelType[TunnelType["Liveshare"] = 'liveshare'] = "Liveshare";
})(TunnelType = exports.TunnelType || (exports.TunnelType = {}));
/** Event args for an event when a server change succeeds. */
class ServerSharingSucceededEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(ChangeKind),
    __metadata("design:type", Number)
], ServerSharingSucceededEventArgs.prototype, "changeKind", void 0);
exports.ServerSharingSucceededEventArgs = ServerSharingSucceededEventArgs;
/** Event args for an event when a server change fails. */
class ServerSharingFailedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(ChangeKind),
    __metadata("design:type", Number)
], ServerSharingFailedEventArgs.prototype, "changeKind", void 0);
exports.ServerSharingFailedEventArgs = ServerSharingFailedEventArgs;
class SessionUpdateEventArgs extends EventArgs {
}
exports.SessionUpdateEventArgs = SessionUpdateEventArgs;
/** Source control identity. */
class SourceControlIdentifier {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlIdentifier.prototype, "instanceId", void 0);
exports.SourceControlIdentifier = SourceControlIdentifier;
/** Version within source control. */
class SourceControlVersion {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlVersion.prototype, "version", void 0);
exports.SourceControlVersion = SourceControlVersion;
/** Type of source control resource. */
var SourceControlResourceType;
(function (SourceControlResourceType) {
    SourceControlResourceType[SourceControlResourceType["Workspace"] = 'workspace'] = "Workspace";
    SourceControlResourceType[SourceControlResourceType["External"] = 'external'] = "External";
    SourceControlResourceType[SourceControlResourceType["SpecificVerision"] = 'specificVerision'] = "SpecificVerision";
    SourceControlResourceType[SourceControlResourceType["WorkspaceWithSpecificVersion"] = 'workspaceWithSpecificVersion'] = "WorkspaceWithSpecificVersion";
})(SourceControlResourceType = exports.SourceControlResourceType || (exports.SourceControlResourceType = {}));
/** Type of source control resource change or diff. */
var SourceControlChangeType;
(function (SourceControlChangeType) {
    SourceControlChangeType[SourceControlChangeType["None"] = 'none'] = "None";
    SourceControlChangeType[SourceControlChangeType["Add"] = 'add'] = "Add";
    SourceControlChangeType[SourceControlChangeType["Edit"] = 'edit'] = "Edit";
    SourceControlChangeType[SourceControlChangeType["Delete"] = 'delete'] = "Delete";
    SourceControlChangeType[SourceControlChangeType["Rename"] = 'rename'] = "Rename";
    SourceControlChangeType[SourceControlChangeType["Conflict"] = 'conflict'] = "Conflict";
    SourceControlChangeType[SourceControlChangeType["IndexEdit"] = 'indexEdit'] = "IndexEdit";
    SourceControlChangeType[SourceControlChangeType["IndexDelete"] = 'indexDelete'] = "IndexDelete";
    SourceControlChangeType[SourceControlChangeType["IndexCopy"] = 'indexCopy'] = "IndexCopy";
    SourceControlChangeType[SourceControlChangeType["Untracked"] = 'untracked'] = "Untracked";
    SourceControlChangeType[SourceControlChangeType["Ignored"] = 'ignored'] = "Ignored";
    SourceControlChangeType[SourceControlChangeType["AddByUs"] = 'addByUs'] = "AddByUs";
    SourceControlChangeType[SourceControlChangeType["AddByThem"] = 'addByThem'] = "AddByThem";
    SourceControlChangeType[SourceControlChangeType["DeleteByUs"] = 'deleteByUs'] = "DeleteByUs";
    SourceControlChangeType[SourceControlChangeType["DeleteByThem"] = 'deleteByThem'] = "DeleteByThem";
    SourceControlChangeType[SourceControlChangeType["AddBoth"] = 'addBoth'] = "AddBoth";
    SourceControlChangeType[SourceControlChangeType["DeleteBoth"] = 'deleteBoth'] = "DeleteBoth";
})(SourceControlChangeType = exports.SourceControlChangeType || (exports.SourceControlChangeType = {}));
/** Resource under source control. */
class SourceControlResource {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlResource.prototype, "path", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlResource.prototype, "version", void 0);
exports.SourceControlResource = SourceControlResource;
/** Individual file state under source control. */
class SourceControlResourceState {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SourceControlResource),
    __metadata("design:type", SourceControlResource)
], SourceControlResourceState.prototype, "current", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(SourceControlResource),
    __metadata("design:type", SourceControlResource)
], SourceControlResourceState.prototype, "original", void 0);
exports.SourceControlResourceState = SourceControlResourceState;
/** Identifier of the source control resource. */
class SourceControlResourceIdentifier extends SourceControlResource {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Uri),
    __metadata("design:type", String)
], SourceControlResourceIdentifier.prototype, "instanceId", void 0);
exports.SourceControlResourceIdentifier = SourceControlResourceIdentifier;
/** Group of source-controlled states, e.g. 'Changes', 'Index', or 'Merge' in git. */
class SourceControlResourceGroup {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SourceControlResourceState),
    __metadata("design:type", Array)
], SourceControlResourceGroup.prototype, "resourceStates", void 0);
exports.SourceControlResourceGroup = SourceControlResourceGroup;
/** Source control data. */
class SourceControlInstance extends SourceControlIdentifier {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlInstance.prototype, "name", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(SourceControlResourceGroup),
    __metadata("design:type", Array)
], SourceControlInstance.prototype, "resourceGroups", void 0);
exports.SourceControlInstance = SourceControlInstance;
/** Source control resource diff info. */
class SourceControlResourceDiff {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SourceControlResource),
    __metadata("design:type", SourceControlResource)
], SourceControlResourceDiff.prototype, "right", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(SourceControlResource),
    __metadata("design:type", SourceControlResource)
], SourceControlResourceDiff.prototype, "left", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlResourceDiff.prototype, "title", void 0);
exports.SourceControlResourceDiff = SourceControlResourceDiff;
/** Source control change type. */
var SourceControlChange;
(function (SourceControlChange) {
    SourceControlChange[SourceControlChange["Updated"] = 'updated'] = "Updated";
    SourceControlChange[SourceControlChange["Added"] = 'added'] = "Added";
    SourceControlChange[SourceControlChange["Removed"] = 'removed'] = "Removed";
})(SourceControlChange = exports.SourceControlChange || (exports.SourceControlChange = {}));
/** Event args for event when source control changed on the host. */
class SourceControlChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SourceControlIdentifier),
    __metadata("design:type", SourceControlIdentifier)
], SourceControlChangedEventArgs.prototype, "sourceControl", void 0);
exports.SourceControlChangedEventArgs = SourceControlChangedEventArgs;
/** Event args for event when source control resources changed on the host. */
class SourceControlResourceChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(SourceControlIdentifier),
    __metadata("design:type", SourceControlIdentifier)
], SourceControlResourceChangedEventArgs.prototype, "sourceControl", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(SourceControlResource),
    __metadata("design:type", Array)
], SourceControlResourceChangedEventArgs.prototype, "resources", void 0);
exports.SourceControlResourceChangedEventArgs = SourceControlResourceChangedEventArgs;
class SyncStatus {
}
exports.SyncStatus = SyncStatus;
/** A content type of a task output or feed. */
var TaskOutputContentType;
(function (TaskOutputContentType) {
    TaskOutputContentType[TaskOutputContentType["PlainText"] = 'plainText'] = "PlainText";
    TaskOutputContentType[TaskOutputContentType["TextWithAnsiEscapeCodes"] = 'textWithAnsiEscapeCodes'] = "TextWithAnsiEscapeCodes";
})(TaskOutputContentType = exports.TaskOutputContentType || (exports.TaskOutputContentType = {}));
/** Single task execution feed */
class TaskOutputFeedInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(RemoteStreamMoniker),
    __metadata("design:type", RemoteStreamMoniker)
], TaskOutputFeedInfo.prototype, "streamMoniker", void 0);
exports.TaskOutputFeedInfo = TaskOutputFeedInfo;
/** Options pertaining to a task output */
class TaskOutputOptions {
}
exports.TaskOutputOptions = TaskOutputOptions;
/** Represents a task output, typically associated with a output or terminal window in IDE. It can be used to send ouput from task execution feeds. Only one feed can be active. */
class TaskOutputInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(TaskOutputFeedInfo),
    __metadata("design:type", TaskOutputFeedInfo)
], TaskOutputInfo.prototype, "feed", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(TaskOutputOptions),
    __metadata("design:type", TaskOutputOptions)
], TaskOutputInfo.prototype, "options", void 0);
exports.TaskOutputInfo = TaskOutputInfo;
/** Represents an event data sent with a task output event. */
class TaskOutputEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(TaskOutputInfo),
    __metadata("design:type", TaskOutputInfo)
], TaskOutputEventArgs.prototype, "taskOutput", void 0);
exports.TaskOutputEventArgs = TaskOutputEventArgs;
class TelemetrySettings {
}
exports.TelemetrySettings = TelemetrySettings;
class GenericOperationEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", Object)
], GenericOperationEventArgs.prototype, "payload", void 0);
exports.GenericOperationEventArgs = GenericOperationEventArgs;
var TelemetryResult;
(function (TelemetryResult) {
    TelemetryResult[TelemetryResult["None"] = 'none'] = "None";
    TelemetryResult[TelemetryResult["Success"] = 'success'] = "Success";
    TelemetryResult[TelemetryResult["Failure"] = 'failure'] = "Failure";
    TelemetryResult[TelemetryResult["UserFault"] = 'userFault'] = "UserFault";
    TelemetryResult[TelemetryResult["UserCancel"] = 'userCancel'] = "UserCancel";
})(TelemetryResult = exports.TelemetryResult || (exports.TelemetryResult = {}));
class FaultTelemetryEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", Object)
], FaultTelemetryEventArgs.prototype, "payload", void 0);
exports.FaultTelemetryEventArgs = FaultTelemetryEventArgs;
/** Options that control how terminal is started */
class TerminalOptions {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], TerminalOptions.prototype, "cwd", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], TerminalOptions.prototype, "app", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", Array)
], TerminalOptions.prototype, "commandLine", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", Boolean)
], TerminalOptions.prototype, "verbatimCommandLine", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", Object)
], TerminalOptions.prototype, "environment", void 0);
exports.TerminalOptions = TerminalOptions;
/** Info on running terminal */
class TerminalInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(TerminalOptions),
    __metadata("design:type", TerminalOptions)
], TerminalInfo.prototype, "options", void 0);
exports.TerminalInfo = TerminalInfo;
/** Event args for notification for a terminal */
class TerminalEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(TerminalInfo),
    __metadata("design:type", TerminalInfo)
], TerminalEventArgs.prototype, "terminal", void 0);
exports.TerminalEventArgs = TerminalEventArgs;
/** A class that describes a restricted operation which is controlled by access control. By default, the operation is disabled in read-only session. */
class RestrictedOperation {
}
exports.RestrictedOperation = RestrictedOperation;
/** Restricted operation for a specific terminal */
class SharedTerminalRestrictedOperation extends RestrictedOperation {
}
exports.SharedTerminalRestrictedOperation = SharedTerminalRestrictedOperation;
class MaybeImmutableOfWorkspaceAccessControl {
}
exports.MaybeImmutableOfWorkspaceAccessControl = MaybeImmutableOfWorkspaceAccessControl;
/** Event args for an event when user access control changes. */
class WorkspaceAccessControl extends MaybeImmutableOfWorkspaceAccessControl {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(AccessControl),
    __metadata("design:type", AccessControl)
], WorkspaceAccessControl.prototype, "defaultAccessControl", void 0);
exports.WorkspaceAccessControl = WorkspaceAccessControl;
/** Event args for an event when user access control changes. */
class WorkspaceAccessControlEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(WorkspaceAccessControl),
    __metadata("design:type", WorkspaceAccessControl)
], WorkspaceAccessControlEventArgs.prototype, "accessControl", void 0);
exports.WorkspaceAccessControlEventArgs = WorkspaceAccessControlEventArgs;
/** Event args for an event when a guest requests access to a restricted operation. */
class RestrictedOperationAccessRequestedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(RestrictedOperation),
    __metadata("design:type", RestrictedOperation)
], RestrictedOperationAccessRequestedEventArgs.prototype, "operation", void 0);
exports.RestrictedOperationAccessRequestedEventArgs = RestrictedOperationAccessRequestedEventArgs;
/** Represents severity of an error reported by a workspace task. */
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity[ErrorSeverity["Error"] = 'error'] = "Error";
    ErrorSeverity[ErrorSeverity["Warning"] = 'warning'] = "Warning";
    ErrorSeverity[ErrorSeverity["Message"] = 'message'] = "Message";
})(ErrorSeverity = exports.ErrorSeverity || (exports.ErrorSeverity = {}));
/** An entry representing error, warning or message generated by a workspace task */
class DiagnosticEntry {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], DiagnosticEntry.prototype, "fileId", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], DiagnosticEntry.prototype, "message", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", Object)
], DiagnosticEntry.prototype, "properties", void 0);
exports.DiagnosticEntry = DiagnosticEntry;
/** Describes a diagnostic data event containing a collection of diagnostic entries emitted by a workspace task. */
class DiagnosticDataChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(DiagnosticEntry),
    __metadata("design:type", Array)
], DiagnosticDataChangedEventArgs.prototype, "entries", void 0);
exports.DiagnosticDataChangedEventArgs = DiagnosticDataChangedEventArgs;
/** Invitation link info provided to the agent to create an access control link */
class InvitationLinkInfo {
}
exports.InvitationLinkInfo = InvitationLinkInfo;
class WorkspaceInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], WorkspaceInfo.prototype, "conversationId", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceInfo.prototype, "name", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], WorkspaceInfo.prototype, "joinUri", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], WorkspaceInfo.prototype, "ownerId", void 0);
exports.WorkspaceInfo = WorkspaceInfo;
var WorkspaceConnectionStatus;
(function (WorkspaceConnectionStatus) {
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Unknown"] = 'unknown'] = "Unknown";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Available"] = 'available'] = "Available";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Unavailable"] = 'unavailable'] = "Unavailable";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Connected"] = 'connected'] = "Connected";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Disconnected"] = 'disconnected'] = "Disconnected";
})(WorkspaceConnectionStatus = exports.WorkspaceConnectionStatus || (exports.WorkspaceConnectionStatus = {}));
var WorkspaceDisconnectedReason;
(function (WorkspaceDisconnectedReason) {
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["None"] = 'none'] = "None";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["Requested"] = 'requested'] = "Requested";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["UserRemoved"] = 'userRemoved'] = "UserRemoved";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["UserBlocked"] = 'userBlocked'] = "UserBlocked";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["SessionEnded"] = 'sessionEnded'] = "SessionEnded";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["ConnectionLost"] = 'connectionLost'] = "ConnectionLost";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["InternalError"] = 'internalError'] = "InternalError";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["SessionExpired"] = 'sessionExpired'] = "SessionExpired";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["NetworkDisconnected"] = 'networkDisconnected'] = "NetworkDisconnected";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["ListenerWentOffline"] = 'listenerWentOffline'] = "ListenerWentOffline";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["CollaborationServiceFactoryCriticalFailure"] = 'collaborationServiceFactoryCriticalFailure'] = "CollaborationServiceFactoryCriticalFailure";
})(WorkspaceDisconnectedReason = exports.WorkspaceDisconnectedReason || (exports.WorkspaceDisconnectedReason = {}));
class WorkspaceConnectionStatusChangedEventArgs extends EventArgs {
}
exports.WorkspaceConnectionStatusChangedEventArgs = WorkspaceConnectionStatusChangedEventArgs;
/** Event that is fired by IWorkspaceService when shared workspace become ready for connections */
class WorkspaceReadyForConnectionEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(WorkspaceInfo),
    __metadata("design:type", WorkspaceInfo)
], WorkspaceReadyForConnectionEventArgs.prototype, "workspace", void 0);
exports.WorkspaceReadyForConnectionEventArgs = WorkspaceReadyForConnectionEventArgs;
var WorkspaceProgress;
(function (WorkspaceProgress) {
    WorkspaceProgress[WorkspaceProgress["None"] = 'none'] = "None";
    WorkspaceProgress[WorkspaceProgress["CreatedWorkspace"] = 'createdWorkspace'] = "CreatedWorkspace";
    WorkspaceProgress[WorkspaceProgress["InitializedAgentServices"] = 'initializedAgentServices'] = "InitializedAgentServices";
    WorkspaceProgress[WorkspaceProgress["InitializedRelayAndTCP"] = 'initializedRelayAndTCP'] = "InitializedRelayAndTCP";
    WorkspaceProgress[WorkspaceProgress["AddedUserToWorkspace"] = 'addedUserToWorkspace'] = "AddedUserToWorkspace";
    WorkspaceProgress[WorkspaceProgress["JoinedLocalWorkspace"] = 'joinedLocalWorkspace'] = "JoinedLocalWorkspace";
    WorkspaceProgress[WorkspaceProgress["ReadWorkspaceInfo"] = 'readWorkspaceInfo'] = "ReadWorkspaceInfo";
    WorkspaceProgress[WorkspaceProgress["OpeningRemoteSession"] = 'openingRemoteSession'] = "OpeningRemoteSession";
    WorkspaceProgress[WorkspaceProgress["OpenedRemoteSession"] = 'openedRemoteSession'] = "OpenedRemoteSession";
    WorkspaceProgress[WorkspaceProgress["JoiningRemoteSession"] = 'joiningRemoteSession'] = "JoiningRemoteSession";
    WorkspaceProgress[WorkspaceProgress["JoinedRemoteSession"] = 'joinedRemoteSession'] = "JoinedRemoteSession";
    WorkspaceProgress[WorkspaceProgress["WaitingForHost"] = 'waitingForHost'] = "WaitingForHost";
    WorkspaceProgress[WorkspaceProgress["DoneWaitingForHost"] = 'doneWaitingForHost'] = "DoneWaitingForHost";
    WorkspaceProgress[WorkspaceProgress["ReconnectingToHost"] = 'reconnectingToHost'] = "ReconnectingToHost";
    WorkspaceProgress[WorkspaceProgress["ReconnectedToHost"] = 'reconnectedToHost'] = "ReconnectedToHost";
    WorkspaceProgress[WorkspaceProgress["ReconnectionFailed"] = 'reconnectionFailed'] = "ReconnectionFailed";
    WorkspaceProgress[WorkspaceProgress["UpdatedWorkspace"] = 'updatedWorkspace'] = "UpdatedWorkspace";
})(WorkspaceProgress = exports.WorkspaceProgress || (exports.WorkspaceProgress = {}));
class WorkspaceProgressEventArgs extends EventArgs {
}
exports.WorkspaceProgressEventArgs = WorkspaceProgressEventArgs;
class WorkspaceShareInfo extends WorkspaceInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", Array)
], WorkspaceShareInfo.prototype, "rootDirectories", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(FileServiceRootConfiguration),
    __metadata("design:type", FileServiceRootConfiguration)
], WorkspaceShareInfo.prototype, "persistentRootConfiguration", void 0);
exports.WorkspaceShareInfo = WorkspaceShareInfo;
/** Defines the ways that an RPC caller can connect to a workspace when joining. */
var ConnectionMode;
(function (ConnectionMode) {
    ConnectionMode[ConnectionMode["Auto"] = 'auto'] = "Auto";
    ConnectionMode[ConnectionMode["Direct"] = 'direct'] = "Direct";
    ConnectionMode[ConnectionMode["Relay"] = 'relay'] = "Relay";
    ConnectionMode[ConnectionMode["Local"] = 'local'] = "Local";
    ConnectionMode[ConnectionMode["SignalR"] = 'signalR'] = "SignalR";
})(ConnectionMode = exports.ConnectionMode || (exports.ConnectionMode = {}));
class ClientCapabilities {
}
exports.ClientCapabilities = ClientCapabilities;
class WorkspaceJoinInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "directAddress", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "relayAddress", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Token),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "relaySharedAccessSignature", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Token),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "joiningUserSessionToken", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(ClientCapabilities),
    __metadata("design:type", ClientCapabilities)
], WorkspaceJoinInfo.prototype, "clientCapabilities", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Token),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "userIdentity", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Token),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "initialViewName", void 0);
exports.WorkspaceJoinInfo = WorkspaceJoinInfo;
class WorkspaceListOptions {
    constructor() {
        /** Optionally include remote workspaces. */
        this.includeRemoteWorkspaces = true;
        /** Get only the managed workspaces. */
        this.onlyManagedWorkspaces = false;
    }
}
exports.WorkspaceListOptions = WorkspaceListOptions;
class WorkspaceSessionInfo extends WorkspaceInfo {
}
exports.WorkspaceSessionInfo = WorkspaceSessionInfo;
class WorkspaceUserProfile {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceUserProfile.prototype, "name", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Email),
    __metadata("design:type", String)
], WorkspaceUserProfile.prototype, "email", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceUserProfile.prototype, "userName", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceUserProfile.prototype, "provider", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Uri),
    __metadata("design:type", String)
], WorkspaceUserProfile.prototype, "avatarUri", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(ClientCapabilities),
    __metadata("design:type", ClientCapabilities)
], WorkspaceUserProfile.prototype, "clientCapabilities", void 0);
exports.WorkspaceUserProfile = WorkspaceUserProfile;
class WorkspaceServicesChangedEventArgs extends EventArgs {
}
exports.WorkspaceServicesChangedEventArgs = WorkspaceServicesChangedEventArgs;
var CollectionChangeType;
(function (CollectionChangeType) {
    CollectionChangeType[CollectionChangeType["None"] = 'none'] = "None";
    CollectionChangeType[CollectionChangeType["Add"] = 'add'] = "Add";
    CollectionChangeType[CollectionChangeType["Remove"] = 'remove'] = "Remove";
    CollectionChangeType[CollectionChangeType["Replace"] = 'replace'] = "Replace";
})(CollectionChangeType = exports.CollectionChangeType || (exports.CollectionChangeType = {}));
class GuestAcceptance {
}
exports.GuestAcceptance = GuestAcceptance;
var WorkspaceSessionChangeType;
(function (WorkspaceSessionChangeType) {
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["None"] = 'none'] = "None";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Joined"] = 'joined'] = "Joined";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Unjoined"] = 'unjoined'] = "Unjoined";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Canceled"] = 'canceled'] = "Canceled";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Requested"] = 'requested'] = "Requested";
})(WorkspaceSessionChangeType = exports.WorkspaceSessionChangeType || (exports.WorkspaceSessionChangeType = {}));
class WorkspaceSessionChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(WorkspaceUserProfile),
    __metadata("design:type", WorkspaceUserProfile)
], WorkspaceSessionChangedEventArgs.prototype, "userProfile", void 0);
exports.WorkspaceSessionChangedEventArgs = WorkspaceSessionChangedEventArgs;
class UserSettings {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(FeatureFlagStore),
    __metadata("design:type", FeatureFlagStore)
], UserSettings.prototype, "experimentalFeatures", void 0);
exports.UserSettings = UserSettings;
class VSOnlineSettings {
}
exports.VSOnlineSettings = VSOnlineSettings;
class TextChange {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], TextChange.prototype, "newText", void 0);
exports.TextChange = TextChange;
class MessageBase {
    constructor() {
        this.messageType = MessageType.Unknown;
    }
}
exports.MessageBase = MessageBase;
var MessageType;
(function (MessageType) {
    MessageType[MessageType["SelectionChange"] = 'selectionChange'] = "SelectionChange";
    MessageType[MessageType["NotebookSelectionChange"] = 'notebookSelectionChange'] = "NotebookSelectionChange";
    MessageType[MessageType["VisibleRangesChange"] = 'visibleRangesChange'] = "VisibleRangesChange";
    MessageType[MessageType["TextChange"] = 'textChange'] = "TextChange";
    MessageType[MessageType["FileOpenRequest"] = 'fileOpenRequest'] = "FileOpenRequest";
    MessageType[MessageType["ResetFileClient"] = 'resetFileClient'] = "ResetFileClient";
    MessageType[MessageType["UntitledFileSaved"] = 'untitledFileSaved'] = "UntitledFileSaved";
    MessageType[MessageType["UntitledFileOpened"] = 'untitledFileOpened'] = "UntitledFileOpened";
    MessageType[MessageType["UntitledFileClosed"] = 'untitledFileClosed'] = "UntitledFileClosed";
    MessageType[MessageType["DiffViewOpen"] = 'diffViewOpen'] = "DiffViewOpen";
    MessageType[MessageType["DiffViewClosed"] = 'diffViewClosed'] = "DiffViewClosed";
    MessageType[MessageType["FileOpenAcknowledge"] = 'fileOpenAcknowledge'] = "FileOpenAcknowledge";
    MessageType[MessageType["FileRelease"] = 'fileRelease'] = "FileRelease";
    MessageType[MessageType["SaveFile"] = 'saveFile'] = "SaveFile";
    MessageType[MessageType["SaveNotebook"] = 'saveNotebook'] = "SaveNotebook";
    MessageType[MessageType["JoinRequest"] = 'joinRequest'] = "JoinRequest";
    MessageType[MessageType["JoinAcknowledge"] = 'joinAcknowledge'] = "JoinAcknowledge";
    MessageType[MessageType["ReadOnlyChange"] = 'readOnlyChange'] = "ReadOnlyChange";
    MessageType[MessageType["Handshake"] = 'handshake'] = "Handshake";
    MessageType[MessageType["Summon"] = 'summon'] = "Summon";
    MessageType[MessageType["LayoutScroll"] = 'layoutScroll'] = "LayoutScroll";
    MessageType[MessageType["NotebookScroll"] = 'notebookScroll'] = "NotebookScroll";
    MessageType[MessageType["ProjectFileOpened"] = 'projectFileOpened'] = "ProjectFileOpened";
    MessageType[MessageType["ProjectFileClosed"] = 'projectFileClosed'] = "ProjectFileClosed";
    MessageType[MessageType["PresenterUpdate"] = 'presenterUpdate'] = "PresenterUpdate";
    MessageType[MessageType["FollowChange"] = 'followChange'] = "FollowChange";
    MessageType[MessageType["AnonymousAccessLevelChange"] = 'anonymousAccessLevelChange'] = "AnonymousAccessLevelChange";
    MessageType[MessageType["Ping"] = 'ping'] = "Ping";
    MessageType[MessageType["Unknown"] = 'unknown'] = "Unknown";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
class FileMessageBase extends MessageBase {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], FileMessageBase.prototype, "fileName", void 0);
exports.FileMessageBase = FileMessageBase;
class JoinRequestMessage extends MessageBase {
}
exports.JoinRequestMessage = JoinRequestMessage;
class JoinAcknowledgeMessage extends MessageBase {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", Array)
], JoinAcknowledgeMessage.prototype, "files", void 0);
exports.JoinAcknowledgeMessage = JoinAcknowledgeMessage;
class PresenterUpdateMessage extends MessageBase {
}
exports.PresenterUpdateMessage = PresenterUpdateMessage;
class FollowChangeMessage extends MessageBase {
}
exports.FollowChangeMessage = FollowChangeMessage;
class SelectionChangeMessage extends FileMessageBase {
}
exports.SelectionChangeMessage = SelectionChangeMessage;
class NotebookSelectionChangeMessage extends FileMessageBase {
}
exports.NotebookSelectionChangeMessage = NotebookSelectionChangeMessage;
class Range {
}
exports.Range = Range;
class LayoutScrollMessage extends FileMessageBase {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(Range),
    __metadata("design:type", Array)
], LayoutScrollMessage.prototype, "visibleRanges", void 0);
exports.LayoutScrollMessage = LayoutScrollMessage;
class NotebookScrollMessage extends FileMessageBase {
}
exports.NotebookScrollMessage = NotebookScrollMessage;
class EditorVisibleRanges {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], EditorVisibleRanges.prototype, "fileName", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(Range),
    __metadata("design:type", Array)
], EditorVisibleRanges.prototype, "visibleRanges", void 0);
exports.EditorVisibleRanges = EditorVisibleRanges;
class VisibleRangesChangeMessage extends MessageBase {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(EditorVisibleRanges),
    __metadata("design:type", Array)
], VisibleRangesChangeMessage.prototype, "clientVisibleRanges", void 0);
exports.VisibleRangesChangeMessage = VisibleRangesChangeMessage;
class FileOpenRequestMessage extends FileMessageBase {
}
exports.FileOpenRequestMessage = FileOpenRequestMessage;
class ResetFileClientMessage extends FileMessageBase {
}
exports.ResetFileClientMessage = ResetFileClientMessage;
class UntitledFileSavedMessage extends FileMessageBase {
}
exports.UntitledFileSavedMessage = UntitledFileSavedMessage;
class UntitledFileOpenedMessage extends FileMessageBase {
}
exports.UntitledFileOpenedMessage = UntitledFileOpenedMessage;
class UntitledFileClosedMessage extends FileMessageBase {
}
exports.UntitledFileClosedMessage = UntitledFileClosedMessage;
class DiffViewMessage extends MessageBase {
}
exports.DiffViewMessage = DiffViewMessage;
class DiffViewOpenMessage extends DiffViewMessage {
}
exports.DiffViewOpenMessage = DiffViewOpenMessage;
class DiffViewClosedMessage extends DiffViewMessage {
}
exports.DiffViewClosedMessage = DiffViewClosedMessage;
class HandshakeMessage extends FileMessageBase {
}
exports.HandshakeMessage = HandshakeMessage;
class SaveFileMessage extends FileMessageBase {
}
exports.SaveFileMessage = SaveFileMessage;
class SaveNotebookMessage extends FileMessageBase {
}
exports.SaveNotebookMessage = SaveNotebookMessage;
class FileReleaseMessage extends FileMessageBase {
}
exports.FileReleaseMessage = FileReleaseMessage;
class AnonymousAcccessLevelChangedMessage extends FileMessageBase {
}
exports.AnonymousAcccessLevelChangedMessage = AnonymousAcccessLevelChangedMessage;
class TextChangeMessage extends FileMessageBase {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(TextChange),
    __metadata("design:type", Array)
], TextChangeMessage.prototype, "changes", void 0);
exports.TextChangeMessage = TextChangeMessage;
class ReadOnlyChangeMessage extends FileMessageBase {
}
exports.ReadOnlyChangeMessage = ReadOnlyChangeMessage;
/** Message sent by a guest or Nexus client when he or she opens the first editor window for a project file. */
class ProjectFileOpenedMessage extends FileMessageBase {
}
exports.ProjectFileOpenedMessage = ProjectFileOpenedMessage;
/** Message sent by a guest or Nexus client when he or she closes the last editor window for a project file. */
class ProjectFileClosedMessage extends FileMessageBase {
}
exports.ProjectFileClosedMessage = ProjectFileClosedMessage;
class ServerVersionSnapshot {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(TextChangeMessage),
    __metadata("design:type", TextChangeMessage)
], ServerVersionSnapshot.prototype, "message", void 0);
exports.ServerVersionSnapshot = ServerVersionSnapshot;
class FileOpenAcknowledgeMessage extends FileMessageBase {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(ServerVersionSnapshot),
    __metadata("design:type", Array)
], FileOpenAcknowledgeMessage.prototype, "history", void 0);
exports.FileOpenAcknowledgeMessage = FileOpenAcknowledgeMessage;
class SummonMessage extends MessageBase {
}
exports.SummonMessage = SummonMessage;
class PingMessage extends MessageBase {
}
exports.PingMessage = PingMessage;
var DocumentChangesNotificationFlags;
(function (DocumentChangesNotificationFlags) {
    DocumentChangesNotificationFlags[DocumentChangesNotificationFlags["NotifyDidOpenClose"] = 'notifyDidOpenClose'] = "NotifyDidOpenClose";
    DocumentChangesNotificationFlags[DocumentChangesNotificationFlags["NotifyDidChange"] = 'notifyDidChange'] = "NotifyDidChange";
    DocumentChangesNotificationFlags[DocumentChangesNotificationFlags["NotifyDidSave"] = 'notifyDidSave'] = "NotifyDidSave";
    DocumentChangesNotificationFlags[DocumentChangesNotificationFlags["NotifyAll"] = 'notifyAll'] = "NotifyAll";
})(DocumentChangesNotificationFlags = exports.DocumentChangesNotificationFlags || (exports.DocumentChangesNotificationFlags = {}));
class CoeditingInformation {
}
exports.CoeditingInformation = CoeditingInformation;
class DocumentFilter {
}
exports.DocumentFilter = DocumentFilter;
class LanguageServerProviderMetadata {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(DocumentFilter),
    __metadata("design:type", Array)
], LanguageServerProviderMetadata.prototype, "documentFilters", void 0);
exports.LanguageServerProviderMetadata = LanguageServerProviderMetadata;
class NotificationEventArgs extends EventArgs {
}
exports.NotificationEventArgs = NotificationEventArgs;
class LspMessage {
}
exports.LspMessage = LspMessage;
class DebugSession {
}
exports.DebugSession = DebugSession;
var DebugSessionChangeType;
(function (DebugSessionChangeType) {
    DebugSessionChangeType[DebugSessionChangeType["None"] = 'none'] = "None";
    DebugSessionChangeType[DebugSessionChangeType["Add"] = 'add'] = "Add";
    DebugSessionChangeType[DebugSessionChangeType["Remove"] = 'remove'] = "Remove";
})(DebugSessionChangeType = exports.DebugSessionChangeType || (exports.DebugSessionChangeType = {}));
class DebugSessionChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(DebugSession),
    __metadata("design:type", DebugSession)
], DebugSessionChangedEventArgs.prototype, "debugSession", void 0);
exports.DebugSessionChangedEventArgs = DebugSessionChangedEventArgs;
class LaunchConfigurationChangedEventArgs extends EventArgs {
}
exports.LaunchConfigurationChangedEventArgs = LaunchConfigurationChangedEventArgs;
var ContinueReason;
(function (ContinueReason) {
    ContinueReason[ContinueReason["Go"] = 'go'] = "Go";
    ContinueReason[ContinueReason["StepIn"] = 'stepIn'] = "StepIn";
    ContinueReason[ContinueReason["StepOut"] = 'stepOut'] = "StepOut";
    ContinueReason[ContinueReason["StepOver"] = 'stepOver'] = "StepOver";
})(ContinueReason = exports.ContinueReason || (exports.ContinueReason = {}));
/** Event args for an event when access control changes. */
class AccessControlEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(AccessControl),
    __metadata("design:type", AccessControl)
], AccessControlEventArgs.prototype, "accessControl", void 0);
exports.AccessControlEventArgs = AccessControlEventArgs;
/** Access for a restricted operation. */
var RestrictedOperationAccess;
(function (RestrictedOperationAccess) {
    RestrictedOperationAccess[RestrictedOperationAccess["Allowed"] = 'allowed'] = "Allowed";
    RestrictedOperationAccess[RestrictedOperationAccess["RejectedInReadOnlySession"] = 'rejectedInReadOnlySession'] = "RejectedInReadOnlySession";
    RestrictedOperationAccess[RestrictedOperationAccess["RejectedForNotOwner"] = 'rejectedForNotOwner'] = "RejectedForNotOwner";
    RestrictedOperationAccess[RestrictedOperationAccess["DisabledByHostConfiguration"] = 'disabledByHostConfiguration'] = "DisabledByHostConfiguration";
    RestrictedOperationAccess[RestrictedOperationAccess["ExplicitlyRejectedByHost"] = 'explicitlyRejectedByHost'] = "ExplicitlyRejectedByHost";
    RestrictedOperationAccess[RestrictedOperationAccess["RejectedPersistentRootNotSupported"] = 'rejectedPersistentRootNotSupported'] = "RejectedPersistentRootNotSupported";
})(RestrictedOperationAccess = exports.RestrictedOperationAccess || (exports.RestrictedOperationAccess = {}));
/** Event args for an event when a restricted operation has failed. */
class RestrictedOperationAccessEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(RestrictedOperation),
    __metadata("design:type", RestrictedOperation)
], RestrictedOperationAccessEventArgs.prototype, "operation", void 0);
exports.RestrictedOperationAccessEventArgs = RestrictedOperationAccessEventArgs;
class FileListOptions {
}
exports.FileListOptions = FileListOptions;
/** Specifies what descendents should be included when listing or watching a path. */
var FileRecurseMode;
(function (FileRecurseMode) {
    FileRecurseMode[FileRecurseMode["None"] = 'none'] = "None";
    FileRecurseMode[FileRecurseMode["Children"] = 'children'] = "Children";
    FileRecurseMode[FileRecurseMode["SingleChildDescendants"] = 'singleChildDescendants'] = "SingleChildDescendants";
    FileRecurseMode[FileRecurseMode["AllDescendants"] = 'allDescendants'] = "AllDescendants";
})(FileRecurseMode = exports.FileRecurseMode || (exports.FileRecurseMode = {}));
var FileAttributes;
(function (FileAttributes) {
    FileAttributes[FileAttributes["None"] = 'none'] = "None";
    FileAttributes[FileAttributes["Hidden"] = 'hidden'] = "Hidden";
    FileAttributes[FileAttributes["ReadOnly"] = 'readOnly'] = "ReadOnly";
    FileAttributes[FileAttributes["Excluded"] = 'excluded'] = "Excluded";
    FileAttributes[FileAttributes["External"] = 'external'] = "External";
})(FileAttributes = exports.FileAttributes || (exports.FileAttributes = {}));
class FileInfo {
    constructor() {
        this.exists = true;
    }
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], FileInfo.prototype, "path", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(FileInfo),
    __metadata("design:type", Array)
], FileInfo.prototype, "children", void 0);
exports.FileInfo = FileInfo;
class FileRootInfo extends FileInfo {
}
exports.FileRootInfo = FileRootInfo;
class FileTextInfo extends FileInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], FileTextInfo.prototype, "text", void 0);
exports.FileTextInfo = FileTextInfo;
class FileReadOptions {
}
exports.FileReadOptions = FileReadOptions;
class FileWriteOptions {
}
exports.FileWriteOptions = FileWriteOptions;
class FileMoveOptions {
}
exports.FileMoveOptions = FileMoveOptions;
class FileDeleteOptions {
}
exports.FileDeleteOptions = FileDeleteOptions;
class FileWatchOptions {
}
exports.FileWatchOptions = FileWatchOptions;
class FileChange {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], FileChange.prototype, "path", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], FileChange.prototype, "fullPath", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], FileChange.prototype, "localFullPath", void 0);
exports.FileChange = FileChange;
var FileChangeType;
(function (FileChangeType) {
    FileChangeType[FileChangeType["None"] = 'none'] = "None";
    FileChangeType[FileChangeType["Updated"] = 'updated'] = "Updated";
    FileChangeType[FileChangeType["Added"] = 'added'] = "Added";
    FileChangeType[FileChangeType["Deleted"] = 'deleted'] = "Deleted";
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
class FilesChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(FileChange),
    __metadata("design:type", Array)
], FilesChangedEventArgs.prototype, "changes", void 0);
exports.FilesChangedEventArgs = FilesChangedEventArgs;
class ExternalFilesChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", Array)
], ExternalFilesChangedEventArgs.prototype, "localPaths", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", Array)
], ExternalFilesChangedEventArgs.prototype, "vslsPaths", void 0);
exports.ExternalFilesChangedEventArgs = ExternalFilesChangedEventArgs;
/** File service root changed event args. */
class RootsChangedEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], RootsChangedEventArgs.prototype, "root", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], RootsChangedEventArgs.prototype, "fullPath", void 0);
exports.RootsChangedEventArgs = RootsChangedEventArgs;
class DiffBaseInfo {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], DiffBaseInfo.prototype, "description", void 0);
exports.DiffBaseInfo = DiffBaseInfo;
class ExternalFileMapResult {
}
exports.ExternalFileMapResult = ExternalFileMapResult;
class TextSearchResultRange {
}
exports.TextSearchResultRange = TextSearchResultRange;
class TextSearchResult {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], TextSearchResult.prototype, "path", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], TextSearchResult.prototype, "text", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(TextSearchResultRange),
    __metadata("design:type", Array)
], TextSearchResult.prototype, "ranges", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(TextSearchResultRange),
    __metadata("design:type", Array)
], TextSearchResult.prototype, "previewRanges", void 0);
exports.TextSearchResult = TextSearchResult;
class ReadTextResult {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(FileTextInfo),
    __metadata("design:type", Array)
], ReadTextResult.prototype, "results", void 0);
exports.ReadTextResult = ReadTextResult;
class TextSearchOptions {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", Array)
], TextSearchOptions.prototype, "fileIncludes", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", Array)
], TextSearchOptions.prototype, "fileExcludes", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], TextSearchOptions.prototype, "pattern", void 0);
exports.TextSearchOptions = TextSearchOptions;
/** Types of nodes present in a solution view */
class NodeType {
}
exports.NodeType = NodeType;
/** Represents a node in solution view */
class SolutionWorkspaceNode {
}
exports.SolutionWorkspaceNode = SolutionWorkspaceNode;
/** Hierarchy change event data */
class SolutionChangedEventArgs extends EventArgs {
}
exports.SolutionChangedEventArgs = SolutionChangedEventArgs;
/** Workspace root changed!: solution || folder opened || closed */
class WorkspaceRootChangedEventArgs extends EventArgs {
}
exports.WorkspaceRootChangedEventArgs = WorkspaceRootChangedEventArgs;
/** The type of workspace being shared */
var WorkspaceMode;
(function (WorkspaceMode) {
    WorkspaceMode[WorkspaceMode["Empty"] = 'empty'] = "Empty";
    WorkspaceMode[WorkspaceMode["Folder"] = 'folder'] = "Folder";
    WorkspaceMode[WorkspaceMode["Solution"] = 'solution'] = "Solution";
})(WorkspaceMode = exports.WorkspaceMode || (exports.WorkspaceMode = {}));
/** Types of hierarchy node operations */
class SolutionChangeType {
}
exports.SolutionChangeType = SolutionChangeType;
class SourceEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], SourceEventArgs.prototype, "jsonContent", void 0);
exports.SourceEventArgs = SourceEventArgs;
var StreamTraits;
(function (StreamTraits) {
    StreamTraits[StreamTraits["None"] = 'none'] = "None";
    StreamTraits[StreamTraits["CanRead"] = 'canRead'] = "CanRead";
    StreamTraits[StreamTraits["CanWrite"] = 'canWrite'] = "CanWrite";
    StreamTraits[StreamTraits["CanSeek"] = 'canSeek'] = "CanSeek";
})(StreamTraits = exports.StreamTraits || (exports.StreamTraits = {}));
/** The scope a task is associated with */
var TaskScope;
(function (TaskScope) {
    TaskScope[TaskScope["Global"] = 'global'] = "Global";
    TaskScope[TaskScope["Workspace"] = 'workspace'] = "Workspace";
    TaskScope[TaskScope["WorkspaceFolder"] = 'workspaceFolder'] = "WorkspaceFolder";
})(TaskScope = exports.TaskScope || (exports.TaskScope = {}));
/** Represents a task declared in a collaboration workspace. Examples!: build, publish, pack, lint, etc. */
class WorkspaceTask {
}
exports.WorkspaceTask = WorkspaceTask;
/** Represents a task execution. Any single task may be executed multiple times. Each execution will receive a new moniker with unique ID. */
class TaskExecutionMoniker {
}
exports.TaskExecutionMoniker = TaskExecutionMoniker;
/** Event occured to a task that may lead to a task state change. */
var TaskExecutionStatusChange;
(function (TaskExecutionStatusChange) {
    TaskExecutionStatusChange[TaskExecutionStatusChange["Started"] = 'started'] = "Started";
    TaskExecutionStatusChange[TaskExecutionStatusChange["Terminated"] = 'terminated'] = "Terminated";
})(TaskExecutionStatusChange = exports.TaskExecutionStatusChange || (exports.TaskExecutionStatusChange = {}));
/** Message sent by a remote task to signal change in the status. */
class TaskExecutionStatusEventArgs extends EventArgs {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(TaskExecutionMoniker),
    __metadata("design:type", TaskExecutionMoniker)
], TaskExecutionStatusEventArgs.prototype, "taskExecution", void 0);
__decorate([
    (0, vso_rpc_1.dataFormat)(WorkspaceTask),
    __metadata("design:type", WorkspaceTask)
], TaskExecutionStatusEventArgs.prototype, "task", void 0);
exports.TaskExecutionStatusEventArgs = TaskExecutionStatusEventArgs;
/** List of statuses produced by IWorkspaceTaskService in response to start a task execution. */
var RunTaskStatus;
(function (RunTaskStatus) {
    RunTaskStatus[RunTaskStatus["Started"] = 'started'] = "Started";
    RunTaskStatus[RunTaskStatus["AlreadyRunning"] = 'alreadyRunning'] = "AlreadyRunning";
    RunTaskStatus[RunTaskStatus["RetryLater"] = 'retryLater'] = "RetryLater";
    RunTaskStatus[RunTaskStatus["TaskNotFound"] = 'taskNotFound'] = "TaskNotFound";
    RunTaskStatus[RunTaskStatus["RejectedByHost"] = 'rejectedByHost'] = "RejectedByHost";
})(RunTaskStatus = exports.RunTaskStatus || (exports.RunTaskStatus = {}));
/** Represents a result of a run task operation. */
class RunTaskResult {
}
__decorate([
    (0, vso_rpc_1.dataFormat)(TaskExecutionMoniker),
    __metadata("design:type", TaskExecutionMoniker)
], RunTaskResult.prototype, "taskExecution", void 0);
exports.RunTaskResult = RunTaskResult;
/** Restricted operation for a control action performed for a specific task, including run and terminate actions. */
class WorkspaceTaskRestrictedOperation extends RestrictedOperation {
}
exports.WorkspaceTaskRestrictedOperation = WorkspaceTaskRestrictedOperation;
var ErrorCodes;
(function (ErrorCodes) {
    ErrorCodes[ErrorCodes["CouldNotConnectToServer"] = -32000] = "CouldNotConnectToServer";
    ErrorCodes[ErrorCodes["OlderThanServer"] = -32001] = "OlderThanServer";
    ErrorCodes[ErrorCodes["NewerThanServer"] = -32002] = "NewerThanServer";
    ErrorCodes[ErrorCodes["OlderThanPeer"] = -32003] = "OlderThanPeer";
    ErrorCodes[ErrorCodes["NewerThanPeer"] = -32004] = "NewerThanPeer";
    ErrorCodes[ErrorCodes["OlderThanAgent"] = -32005] = "OlderThanAgent";
    ErrorCodes[ErrorCodes["NewerThanAgent"] = -32006] = "NewerThanAgent";
    ErrorCodes[ErrorCodes["NoIPAddressesDetected"] = -32010] = "NoIPAddressesDetected";
    ErrorCodes[ErrorCodes["NoConnectionAddresses"] = -32011] = "NoConnectionAddresses";
    ErrorCodes[ErrorCodes["AutoConnectionFailed"] = -32012] = "AutoConnectionFailed";
    ErrorCodes[ErrorCodes["RelayConnectionFailed"] = -32013] = "RelayConnectionFailed";
    ErrorCodes[ErrorCodes["DirectConnectionFailed"] = -32014] = "DirectConnectionFailed";
    ErrorCodes[ErrorCodes["SessionProtocolError"] = -32015] = "SessionProtocolError";
    ErrorCodes[ErrorCodes["SessionAuthenticationFailed"] = -32016] = "SessionAuthenticationFailed";
    ErrorCodes[ErrorCodes["ReconnectFailed"] = -32017] = "ReconnectFailed";
    ErrorCodes[ErrorCodes["DirectConnectionNotEnabled"] = -32020] = "DirectConnectionNotEnabled";
    ErrorCodes[ErrorCodes["RelayConnectionNotEnabled"] = -32021] = "RelayConnectionNotEnabled";
    ErrorCodes[ErrorCodes["CollaborationSessionUsersLimitReached"] = -32022] = "CollaborationSessionUsersLimitReached";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestRejected"] = -32023] = "CollaborationSessionGuestRejected";
    ErrorCodes[ErrorCodes["CollaborationSessionRequestTimedOut"] = -32024] = "CollaborationSessionRequestTimedOut";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestCanceled"] = -32025] = "CollaborationSessionGuestCanceled";
    ErrorCodes[ErrorCodes["CollaborationSessionNotFound"] = -32026] = "CollaborationSessionNotFound";
    ErrorCodes[ErrorCodes["CollaborationSessionEnded"] = -32027] = "CollaborationSessionEnded";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestBlocked"] = -32028] = "CollaborationSessionGuestBlocked";
    ErrorCodes[ErrorCodes["NonSuccessHttpStatusCodeReceived"] = -32030] = "NonSuccessHttpStatusCodeReceived";
    ErrorCodes[ErrorCodes["KeychainAccessFailed"] = -32031] = "KeychainAccessFailed";
    ErrorCodes[ErrorCodes["UnauthorizedHttpStatusCode"] = -32032] = "UnauthorizedHttpStatusCode";
    ErrorCodes[ErrorCodes["ForbiddenHttpStatusCode"] = -32033] = "ForbiddenHttpStatusCode";
    ErrorCodes[ErrorCodes["RelayConnectionHostFailure"] = -32040] = "RelayConnectionHostFailure";
    ErrorCodes[ErrorCodes["RelayConnectionGuestFailure"] = -32041] = "RelayConnectionGuestFailure";
    ErrorCodes[ErrorCodes["RelayHubNotFoundFailure"] = -32045] = "RelayHubNotFoundFailure";
    ErrorCodes[ErrorCodes["RelayHubNoHostFailure"] = -32046] = "RelayHubNoHostFailure";
    ErrorCodes[ErrorCodes["RelayHubNotConnectedFailure"] = -32047] = "RelayHubNotConnectedFailure";
    ErrorCodes[ErrorCodes["BrokerNotAuthorized"] = -32050] = "BrokerNotAuthorized";
    ErrorCodes[ErrorCodes["CouldNotConnectToServerAuthFailed"] = -32060] = "CouldNotConnectToServerAuthFailed";
    ErrorCodes[ErrorCodes["RemoteLaunchNotEnabled"] = -32200] = "RemoteLaunchNotEnabled";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestRejectedWithSpecificReason"] = -32300] = "CollaborationSessionGuestRejectedWithSpecificReason";
    ErrorCodes[ErrorCodes["OperationRejected"] = -32400] = "OperationRejected";
    ErrorCodes[ErrorCodes["OperationRejectedInReadOnlySession"] = -32401] = "OperationRejectedInReadOnlySession";
    ErrorCodes[ErrorCodes["OperationRejectedForNotOwner"] = -32402] = "OperationRejectedForNotOwner";
    ErrorCodes[ErrorCodes["OperationRejectedAsPersistentRootNotSupported"] = -32403] = "OperationRejectedAsPersistentRootNotSupported";
    ErrorCodes[ErrorCodes["FileOperationNotSupported"] = -32500] = "FileOperationNotSupported";
    ErrorCodes[ErrorCodes["ErrorFileAdditionFailed"] = -32501] = "ErrorFileAdditionFailed";
    ErrorCodes[ErrorCodes["ErrorFileDeleteFailed"] = -32502] = "ErrorFileDeleteFailed";
    ErrorCodes[ErrorCodes["ErrorFileRenameFailed"] = -32503] = "ErrorFileRenameFailed";
    ErrorCodes[ErrorCodes["FileAlreadyExists"] = -32504] = "FileAlreadyExists";
    ErrorCodes[ErrorCodes["ErrorFolderAdditionFailed"] = -32505] = "ErrorFolderAdditionFailed";
    ErrorCodes[ErrorCodes["ErrorFolderRenameFailed"] = -32506] = "ErrorFolderRenameFailed";
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
var TraceEventIds;
(function (TraceEventIds) {
    TraceEventIds[TraceEventIds["None"] = 0] = "None";
    TraceEventIds[TraceEventIds["AgentLogCreated"] = 1002] = "AgentLogCreated";
    TraceEventIds[TraceEventIds["AgentOutput"] = 2001] = "AgentOutput";
    TraceEventIds[TraceEventIds["CallingOutput"] = 10001] = "CallingOutput";
    TraceEventIds[TraceEventIds["RpcListeningOnPipe"] = 1001] = "RpcListeningOnPipe";
})(TraceEventIds = exports.TraceEventIds || (exports.TraceEventIds = {}));
var TraceSources;
(function (TraceSources) {
    TraceSources["Agent"] = "Agent";
    TraceSources["AgentAuth"] = "Agent.Auth";
    TraceSources["AgentCSharpLS"] = "Agent.CSharpLS";
    TraceSources["AgentFile"] = "Agent.File";
    TraceSources["AgentFirewall"] = "Agent.Firewall";
    TraceSources["AgentHttp"] = "Agent.Http";
    TraceSources["AgentProxy"] = "Agent.Proxy";
    TraceSources["AgentPortForwarding"] = "Agent.PortFowrading";
    TraceSources["AgentTcpListenersObserver"] = "Agent.TcpListeners";
    TraceSources["AgentRpc"] = "Agent.Rpc";
    TraceSources["AgentRpcAuth"] = "Agent.Rpc.Auth";
    TraceSources["AgentRpcChat"] = "Agent.Rpc.Chat";
    TraceSources["AgentRpcFile"] = "Agent.Rpc.File";
    TraceSources["AgentRpcFirewall"] = "Agent.Rpc.Firewall";
    TraceSources["AgentRpcServerSharing"] = "Agent.Rpc.ServerSharing";
    TraceSources["AgentRpcSourceEvent"] = "Agent.Rpc.SourceEvent";
    TraceSources["AgentRpcStream"] = "Agent.Rpc.Stream";
    TraceSources["AgentRpcStreamManager"] = "Agent.Rpc.StreamManager";
    TraceSources["AgentRpcStreamTransport"] = "Agent.Rpc.StreamTransport";
    TraceSources["AgentRpcTerminal"] = "Agent.Rpc.Terminal";
    TraceSources["AgentTerminalConnection"] = "Agent.Terminal.Connection";
    TraceSources["AgentRpcWorkspace"] = "Agent.Rpc.Workspace";
    TraceSources["AgentRpcWorkspaceUser"] = "Agent.Rpc.WorkspaceUser";
    TraceSources["AgentRpcTaskOutput"] = "Agent.Rpc.TaskOutput";
    TraceSources["AgentSsh"] = "Agent.Ssh";
    TraceSources["AgentTSLS"] = "Agent.TSLS";
    TraceSources["AgentWorkspace"] = "Agent.Workspace";
    TraceSources["AgentWorkspaceSessionAccessControl"] = "Agent.WorkspaceSession.AccessControl";
    TraceSources["ClientAgent"] = "Client.Agent";
    TraceSources["ClientCoEditing"] = "Client.CoEditing";
    TraceSources["ClientCoEditingBufferManager"] = "Client.CoEditing.BufferManager";
    TraceSources["ClientCoEditingVSCodeEvent"] = "Client.CoEditing.VSCodeEvent";
    TraceSources["ClientFileProvider"] = "Client.FileProvider";
    TraceSources["ClientLauncher"] = "Client.Launcher";
    TraceSources["ClientRpc"] = "Client.Rpc";
    TraceSources["ClientRpcAgentSession"] = "Client.Rpc.AgentSession";
    TraceSources["ClientRpcAuth"] = "Client.Rpc.Auth";
    TraceSources["ClientRpcFile"] = "Client.Rpc.File";
    TraceSources["ClientRpcPortForwarding"] = "Client.Rpc.PortForwarding";
    TraceSources["ClientRpcServerSharing"] = "Client.Rpc.ServerSharing";
    TraceSources["ClientRpcSourceEvent"] = "Client.Rpc.SourceEvent";
    TraceSources["ClientRpcStream"] = "Client.Rpc.Stream";
    TraceSources["ClientRpcStreamManager"] = "Client.Rpc.StreamManager";
    TraceSources["ClientRpcTerminal"] = "Client.Rpc.Terminal";
    TraceSources["ClientRpcChat"] = "Client.Rpc.Chat";
    TraceSources["ClientRpcTerminalEndpoint"] = "Client.Rpc.TerminalEndpoint";
    TraceSources["ClientRpcWorkspace"] = "Client.Rpc.Workspace";
    TraceSources["ClientRpcWorkspaceUser"] = "Client.Rpc.WorkspaceUser";
    TraceSources["ClientRpcSessionContext"] = "Client.Rpc.SessionContext";
    TraceSources["ClientRpcContact"] = "Client.Rpc.Contact";
    TraceSources["ClientWorkspace"] = "Client.Workspace";
    TraceSources["ClientRemoteBuild"] = "Client.RemoteBuild";
    TraceSources["ClientCSharpLS"] = "Client.CSharpLS";
    TraceSources["ClientSharedTerminal"] = "Client.SharedTerminal";
    TraceSources["ClientWorkspaceAccessControl"] = "Client.Workspace.AccessControl";
    TraceSources["ClientAccessControl"] = "Client.AccessControl";
    TraceSources["ClientSearch"] = "Client.Search";
    TraceSources["ClientSourceControl"] = "Client.SourceControl";
    TraceSources["ClientSyncService"] = "Client.SyncService";
    TraceSources["ClientCommentService"] = "Client.CommentService";
    TraceSources["ClientGettingStartedPageContentProvider"] = "Client.GettingStartedPageContentProvider";
    TraceSources["ClientPortForwardingBrowser"] = "Client.PortForwardingBrowser";
    TraceSources["ClientOnlineEnvironmentSessionService"] = "Client.OnlineEnvironmentSessionService";
    TraceSources["Calling"] = "Calling";
    TraceSources["DebugHostAdapter"] = "Debug.HostAdapter";
    TraceSources["DebugRpcHostAdapter"] = "Debug.Rpc.HostAdapter";
    TraceSources["DebugAdapterHost"] = "Debug.AdapterHost";
    TraceSources["ForwardingTcpServer"] = "ForwardingTcpServer";
    TraceSources["ForwardingPipeServer"] = "ForwardingPipeServer";
    TraceSources["Telemetry"] = "Telemetry";
    TraceSources["ClientAccessCheck"] = "ClientAccessCheck";
    TraceSources["LSPCoauthoringManager"] = "LSP.CoauthoringManager";
    TraceSources["RemoteServiceBroker"] = "RemoteServiceBroker";
    TraceSources["ReviewsDiffs"] = "Reviews.Diffs";
    TraceSources["Cli"] = "CLI";
    TraceSources["CliRestore"] = "CLI.restore";
    TraceSources["CliStart"] = "CLI.start";
    TraceSources["CliStop"] = "CLI.stop";
    TraceSources["TTY"] = "TTY";
    TraceSources["Settings"] = "Settings";
    TraceSources["API"] = "API";
    TraceSources["VmAgent"] = "VmAgent";
    TraceSources["SelfHostedAgent"] = "SelfHostedAgent";
    TraceSources["EnvironmentConfig"] = "EnvConfig";
    TraceSources["VMConfig"] = "VMCFG";
    TraceSources["LinuxContainerUpdate"] = "LinuxContainerUpdate";
    TraceSources["ShutDownEnvironmentHandler"] = "ShutdownEnvironment";
    TraceSources["StartEnvironmentHandler"] = "StartEnvironment";
    TraceSources["VmAgentRpcService"] = "VmAgentRpcService";
    TraceSources["RebuildEnvironmentHandler"] = "RebuildEnvironment";
    TraceSources["WarmupEnvironmentHandler"] = "WarmupEnvironment";
    TraceSources["ResizeStorageHandler"] = "ResizeStorage";
    TraceSources["StartLiveShareHandler"] = "StartLiveShare";
    TraceSources["StartPortForwardingHandler"] = "StartPortForwardingHandler";
    TraceSources["ContainerEnvironmentMonitor"] = "ContainerMonitor";
    TraceSources["SSHServerMonitor"] = "SSHServerMonitor";
    TraceSources["ContainerTunnel"] = "ContainerTunnel";
    TraceSources["RunningContainerInfoProvider"] = "RunningContainerInfo";
    TraceSources["DevContainerChangesWatcher"] = "DevContainerChangesWatcher";
    TraceSources["VSCodeServerHostService"] = "VSCodeServerHostService";
    TraceSources["SshServerHostService"] = "SSHServerHostService";
    TraceSources["CodespaceHostService"] = "CodespaceHostService";
    TraceSources["ClientAutoSuspendMonitor"] = "ClientAutoSuspendMonitor";
    TraceSources["DockerImagePrune"] = "DockerImagePrune";
    TraceSources["PrebuildPoolUpdateHandler"] = "PrebuildPoolUpdate";
    TraceSources["StandAloneAgent"] = "StandAloneAgent";
    TraceSources["StopCodespacePolicyMonitor"] = "StopCodespacePolicy";
    TraceSources["Viewlet"] = "Viewlet";
    TraceSources["VSIX"] = "VSIX";
    TraceSources["ClientPrefix"] = "Client.";
    TraceSources["ClientLSP"] = "Client.LSP";
    TraceSources["LSPHost"] = "LSP.Host";
    TraceSources["BreakpointManager"] = "BreakpointManager";
    TraceSources["DebugAdapter"] = "Debug.Adapter";
    TraceSources["DebugRemote"] = "Debug.Remote";
    TraceSources["DebugSessionHost"] = "Debug.SessionHost";
    TraceSources["DebugHost"] = "Debug.Host";
    TraceSources["DebugRpcHost"] = "Debug.Rpc.Host";
    TraceSources["DebugTargetHostProcess"] = "Debug.TargetHostProcess";
    TraceSources["DebugRpcSessionHost"] = "Debug.Rpc.SessionHost";
})(TraceSources = exports.TraceSources || (exports.TraceSources = {}));
exports.AgentSessionService = {
    name: 'agentSessionService',
    methods: ['initializeSession', 'enableReconnect', 'keepAlive', 'forceKill'],
    events: [],
};
exports.AuthenticationCoreService = {
    methods: [
        'getCurrentAuthenticatedUser',
        'getCurrentUser',
        'removeRecentCollaborator',
        'removeAllRecentCollaborators',
    ],
    events: ['authenticationChanged'],
};
exports.AuthenticationService = {
    name: 'auth',
    methods: [
        'getLoginUri',
        'findLoginCode',
        'login',
        'loginAsAnonymous',
        'loginWithCachedToken',
        'loginWithExternalToken',
        'logout',
        'getCachedToken',
        'getCurrentAuthenticatedUser',
        'getCurrentUser',
        'removeRecentCollaborator',
        'removeAllRecentCollaborators',
    ],
    events: ['authenticationChanged'],
};
exports.BrokerAuthorizationService = {
    name: 'brokerAuthorization',
    methods: ['authorize'],
    events: [],
};
exports.BrokerManagerService = {
    name: 'brokerManager',
    methods: ['register', 'tryRevoke'],
    events: [],
};
exports.ChatService = {
    name: 'chat',
    methods: ['getMessageHistory', 'getParticipants', 'sendMessage', 'dispose'],
    events: ['messageReceived'],
};
exports.CommentService = {
    name: 'commentService',
    methods: [
        'createCommentThread',
        'createComment',
        'updateComment',
        'deleteComment',
        'getAllCommentThreads',
        'getCommentThreadPositions',
        'updateLike',
    ],
    events: ['commentThreadChanged'],
};
exports.ConfigurationService = {
    name: 'version',
    methods: ['exchangeVersions', 'exchangeSettings', 'getSubnetMasks'],
    events: [],
};
exports.FirewallService = {
    name: 'firewall',
    methods: ['getFirewallStatus'],
    events: [],
};
exports.HubConnectionService = {
    name: 'hubConnection',
    methods: [
        'getIsConnected',
        'getIsAttempting',
        'getEnabled',
        'setEnabled',
        'registerHubMethodNotify',
        'unregisterHubMethodNotify',
        'invokeHubMethod',
        'sendHubMethod',
    ],
    events: ['hubConnectionStateChanged', 'hubConnectionAttempted', 'hubMethodNotified'],
};
exports.OnlineEnvironmentSessionService = {
    name: 'onlineEnvironmentLiveShareSessionService',
    methods: ['getSessionState', 'updateSessionState'],
    events: [],
};
exports.PortForwardingService = {
    name: 'portForwarding',
    methods: ['getSharedServers', 'getSharedPipes', 'getLastAccessTime', 'setDestinationPort'],
    events: [
        'sharingStarted',
        'pipeSharingStarted',
        'browseSharingStarted',
        'sharingStopped',
        'pipeSharingStopped',
        'sharingChanged',
    ],
};
exports.ServerSharingService = {
    name: 'serverSharing',
    methods: [
        'startSharing',
        'startSharingPipe',
        'stopSharing',
        'stopSharingPipe',
        'stopSharingBrowseSessions',
        'getSharedServers',
        'getSharedPipes',
        'updateSessionName',
        'updateSharedServerVisibility',
        'updateSharedServerProtocol',
        'updateSharedServerPrivacy',
    ],
    voidMethods: ['invokeSharingSucceeded', 'invokeSharingFailed'],
    events: [
        'sharingStarted',
        'pipeSharingStarted',
        'browseSharingStarted',
        'sharingStopped',
        'pipeSharingStopped',
        'sharingChanged',
        'sharingSucceeded',
        'sharingFailed',
    ],
};
exports.SessionContextService = {
    name: 'sessionContext',
    methods: ['getServiceNames'],
    voidMethods: ['sendSessionStateUpdateToClient', 'sendSessionStatusUpdateToClient'],
    events: ['sessionStateUpdate', 'sessionStatusUpdate'],
};
exports.SourceControlService = {
    name: 'sourceControl',
    methods: [
        'getAllSourceControls',
        'getSourceControls',
        'getSourceControl',
        'getRecentVersions',
        'getRecentVersionsTillMergeVersion',
        'getDiffsForVersion',
        'getDiffForResource',
        'getResource',
        'cleanResources',
        'getMergeVersion',
        'getRemoteVersionsNames',
        'getCurrentVersionName',
    ],
    events: ['sourceControlChanged', 'resourceChanged'],
};
exports.SyncService = {
    name: 'syncService',
    methods: ['checkSync', 'checkSyncForVersion', 'checkSyncForVersion2'],
    events: [],
};
exports.TaskOutputService = {
    name: 'taskOutput',
    methods: ['getTaskOutputs', 'shareTaskOutput', 'updateTaskOutputFeed', 'closeTaskOutput'],
    events: ['taskOutputShared', 'taskOutputFeedUpdated', 'taskOutputClosed'],
};
exports.TelemetryService = {
    name: 'telemetry',
    methods: ['initialize', 'getServiceUri'],
    events: ['genericOperation', 'fault'],
};
exports.TerminalEndpoint = {
    name: 'terminalEndpoint',
    methods: ['readBytes', 'writeBytes', 'readString', 'writeString'],
    events: [],
};
exports.TerminalService = {
    name: 'terminal',
    methods: [
        'startTerminal',
        'getRunningTerminals',
        'resizeTerminal',
        'stopTerminal',
        'clearTerminalBuffer',
        'setTerminalReadOnlyForGuests',
    ],
    events: ['terminalStarted', 'terminalResized', 'terminalStopped', 'terminalReadOnlyChanged'],
};
exports.TextSearchService = {
    name: 'textSearch',
    methods: ['getTextSearchResults', 'getTextSearchResultsWithProgress'],
    events: [],
};
exports.WorkspaceAccessControlService = {
    name: 'workspaceAccessControl',
    methods: [
        'getAccessControl',
        'setAccessControl',
        'requestOperationAccess',
        'setOperationAccess',
        'rejectOperation',
    ],
    events: ['accessControlChanged', 'operationRejected', 'operationAccessChanged', 'opeationAccessRequested'],
};
exports.WorkspaceDiagnosticsService = {
    name: 'workspaceDiagnostics',
    methods: ['getDiagnostics'],
    events: ['diagnosticDataChanged'],
};
exports.WorkspaceService = {
    name: 'workspace',
    methods: [
        'getWorkspace',
        'listWorkspaces',
        'createPersistentWorkspace',
        'deleteWorkspace',
        'renameWorkspace',
        'shareWorkspace',
        'createInvitationLink',
        'getInvitationLinks',
        'unshareWorkspace',
        'beginJoinWorkspace',
        'joinWorkspace',
        'unjoinWorkspace',
        'registerServices',
        'canUserShareWorkspace',
        'canUserHostWorkspace',
        'createPublicInviteLink',
        'disconnectGuest',
        'unjoinOnlineEnvironmentsGuests',
        'setWorkspaceReadyForConnection',
        'updateWorkspaceOwner',
    ],
    events: [
        'servicesChanged',
        'connectionStatusChanged',
        'progressUpdated',
        'userRemoved',
        'userBlocked',
        'workspaceReadyForConnection',
    ],
};
exports.WorkspaceUserService = {
    name: 'workspaceuser',
    methods: [
        'acceptOrRejectGuest',
        'autoAcceptGuests',
        'removeUser',
        'removeAllInteractiveUsers',
        'fireProgressUpdatedToGuest',
        'getCountOfGuestsWithSameAccount',
        'createGuestDisplayName',
        'getCachedGuestDisplayName',
        'getGuestUserProfile',
        'getCountOfInteractiveGuests',
    ],
    events: ['workspaceSessionChanged'],
};
exports.LanguageServerProvider = {
    methods: ['getMetadata', 'request'],
    voidMethods: ['notify'],
    events: ['notified'],
};
exports.DebuggerHostService = {
    name: 'DebuggerHostService',
    methods: ['getCurrentDebugSessions', 'launchDebugSession', 'getLaunchConfigurations'],
    events: ['debugSessionChanged', 'launchConfigurationsChanged'],
};
exports.AccessControlService = {
    name: 'accessControl',
    methods: ['getAccessControl'],
    events: ['accessControlChanged'],
};
exports.FileService = {
    name: 'file',
    methods: [
        'registerExternalFiles',
        'registerNamedExternalFiles',
        'listRoots',
        'list',
        'readText',
        'readTextWithProgress',
        'writeText',
        'createDirectory',
        'delete',
        'copy',
        'move',
        'getFiles',
        'isExcluded',
        'findFiles',
        'getTextSearchResults',
        'getTextSearchResultsWithProgress',
        'clearRoots',
        'addRoot',
        'removeRoot',
        'replaceRoot',
    ],
    events: ['filesChanged', 'rootsChanged', 'externalFilesChanged'],
};
exports.SolutionViewService = {
    name: 'solutionView',
    methods: [
        'getSolutionMode',
        'getSolutionCaption',
        'getChildrenNodes',
        'getRootNodes',
        'addNewItem',
        'renameItem',
        'deleteItem',
    ],
    events: ['solutionChanged', 'workspaceRootChanged'],
};
exports.SourceEventService = {
    name: 'sourceEvent',
    methods: ['fireEvent', 'setSourceData', 'getSourceData'],
    events: ['event'],
};
exports.StreamManagerService = {
    name: 'streamManager',
    methods: ['getStream'],
    events: [],
};
exports.StreamService = {
    name: 'stream',
    methods: ['getStreamTraits', 'getLength', 'setLength', 'seek', 'readBytes', 'writeBytes', 'disposeStream'],
    events: [],
};
exports.WorkspaceTaskService = {
    name: 'workspaceTask',
    methods: [
        'getSupportedTasks',
        'getTaskExecutions',
        'runTask',
        'runProjectTask',
        'runDefaultBuildTask',
        'terminateTask',
    ],
    events: ['taskStarted', 'taskTerminated'],
};
//# sourceMappingURL=VSLS.js.map

/***/ }),

/***/ 29711:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.contactProtocol = exports.vsls = void 0;
// export auto generated VSLS
exports.vsls = __webpack_require__(75301);
// export auto generated ContactProtocol
exports.contactProtocol = __webpack_require__(36222);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 20560:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectedState = void 0;
var ConnectedState;
(function (ConnectedState) {
    ConnectedState[ConnectedState["Reconnecting"] = 1] = "Reconnecting";
    ConnectedState[ConnectedState["Reconnected"] = 2] = "Reconnected";
    ConnectedState[ConnectedState["Closed"] = 3] = "Closed";
})(ConnectedState = exports.ConnectedState || (exports.ConnectedState = {}));
//# sourceMappingURL=ConnectedState.js.map

/***/ }),

/***/ 76072:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RelayConnectionError = exports.RelayErrorType = exports.NoHostConnectedError = void 0;
/**
 * Error when a workspace has no host connected, hence no join could happen.
 */
class NoHostConnectedError extends Error {
    constructor(workspaceId) {
        super(`Host not connected to workspace:${workspaceId}`);
        this.workspaceId = workspaceId;
    }
}
exports.NoHostConnectedError = NoHostConnectedError;
/**
 * Type of relay connection error types.
 */
var RelayErrorType;
(function (RelayErrorType) {
    RelayErrorType[RelayErrorType["ConnectionError"] = 1] = "ConnectionError";
    RelayErrorType[RelayErrorType["SasInvalid"] = 2] = "SasInvalid";
    RelayErrorType[RelayErrorType["EndpointNotFound"] = 3] = "EndpointNotFound";
    RelayErrorType[RelayErrorType["ListenerOffline"] = 4] = "ListenerOffline";
    RelayErrorType[RelayErrorType["ServerError"] = 5] = "ServerError";
})(RelayErrorType = exports.RelayErrorType || (exports.RelayErrorType = {}));
/**
 * Error used when a connection to an Azure relay failed.
 */
class RelayConnectionError extends Error {
    constructor(message, errorContext) {
        super(message);
        this.errorContext = errorContext;
    }
}
exports.RelayConnectionError = RelayConnectionError;
//# sourceMappingURL=Errors.js.map

/***/ }),

/***/ 98890:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=IWorkspaceClient.js.map

/***/ }),

/***/ 34769:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LatencyMetrics = void 0;
class LatencyMetrics {
    constructor(latencyCurrent, latencyAvg, latencyMin, latencyMax) {
        this.current = latencyCurrent;
        this.average = latencyAvg;
        this.min = latencyMin;
        this.max = latencyMax;
    }
}
exports.LatencyMetrics = LatencyMetrics;
//# sourceMappingURL=IWorkspaceConnection.js.map

/***/ }),

/***/ 85094:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectionMode = void 0;
/**
 * Workspace connection mode. Must match vsls.ConnectionMode
 */
var ConnectionMode;
(function (ConnectionMode) {
    ConnectionMode["Auto"] = "auto";
    ConnectionMode["Direct"] = "direct";
    ConnectionMode["Relay"] = "relay";
    ConnectionMode["Local"] = "local";
    ConnectionMode["SignalR"] = "signalR";
})(ConnectionMode = exports.ConnectionMode || (exports.ConnectionMode = {}));
//# sourceMappingURL=IWorkspaceSessionInfo.js.map

/***/ }),

/***/ 63722:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RPC_ERR_RELAY_CONNECTIONY_SSH = exports.RPC_ERR_NO_HOST_NOT_CONNECTED = void 0;
exports.RPC_ERR_NO_HOST_NOT_CONNECTED = 270;
exports.RPC_ERR_RELAY_CONNECTIONY_SSH = 271;
//# sourceMappingURL=RpcErrorCodes.js.map

/***/ }),

/***/ 5034:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceApi = void 0;
const vso_logging_1 = __webpack_require__(98287);
const vso_http_client_1 = __webpack_require__(35416);
const vscs_utils_1 = __webpack_require__(19745);
const ssh = __importStar(__webpack_require__(92126));
const vsls_contracts_1 = __webpack_require__(29711);
/**
 * Class to interact with our liveshare workspace API.
 */
class WorkspaceApi {
    constructor(serviceUri, tokenProvider, logger) {
        this.serviceUri = serviceUri;
        this.tokenProvider = tokenProvider;
        this.logger = logger;
        this.getRequestHeaders = () => __awaiter(this, void 0, void 0, function* () {
            return {
                Authorization: `Bearer ${yield this.tokenProvider()}`,
                'Cache-Control': 'no-cache',
                'Content-Type': 'application/json',
            };
        });
        (0, vscs_utils_1.assertDefined)(serviceUri, 'service uri needs to be defined');
        let baseUri = serviceUri;
        if (!baseUri.endsWith('/')) {
            baseUri = baseUri + '/';
        }
        if (!baseUri.includes('api/v1.2')) {
            baseUri = baseUri + 'api/v1.2';
        }
        // We need to remove the trailing slash in the case it was directly
        // taken from an environment record
        this.baseUri = this.removeTrailingSlash(baseUri);
        this.httpClient = new vso_http_client_1.HttpClient(logger);
    }
    static getWorkspaceSessionInfo(workspaceId, options, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.info(`getWorkspaceSessionInfo -> workspaceId:${workspaceId}`);
            const workspaceApi = new WorkspaceApi(options.liveShareEndpoint, () => options.token, logger);
            const [workspaceAccess, workspaceInfo] = yield Promise.all([
                workspaceApi.getWorkspaceAccess(workspaceId),
                workspaceApi.getWorkspaceInfo(workspaceId),
            ]);
            const workspaceSessionInfo = Object.assign(Object.assign({}, workspaceAccess), workspaceInfo);
            (0, vscs_utils_1.assertDefined)(workspaceInfo, 'Cannot get LiveShare workspace info.');
            (0, vscs_utils_1.assertDefined)(workspaceAccess, 'Cannot get LiveShare workspace access.');
            (0, vscs_utils_1.assertDefined)(workspaceInfo.relaySas, 'No RelaySas token found.');
            return workspaceSessionInfo;
        });
    }
    deleteWorkspace(workspaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, vscs_utils_1.assertDefined)(workspaceId, 'Cannot get Live Share workspaceId');
            workspaceId = workspaceId.toUpperCase();
            const url = `${this.baseUri}/workspace/${workspaceId}`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `delete workspace -> ${url}`);
            const response = yield this.httpClient.delete(url, {
                headers: yield this.getRequestHeaders(),
            });
            return response.ok;
        });
    }
    getManagedWorkspaces() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseUri}/workspace/managed`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `get managed workspaces -> ${url}`);
            const workspaces = yield this.httpClient
                .get(url, {
                headers: yield this.getRequestHeaders(),
            })
                .value();
            return workspaces;
        });
    }
    deleteLink(workspaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, vscs_utils_1.assertDefined)(workspaceId, 'Cannot get Live Share workspaceId');
            workspaceId = workspaceId.toUpperCase();
            const url = `${this.baseUri}/workspace/link/${workspaceId}`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `delete link -> ${url}`);
            const response = yield this.httpClient.delete(url, {
                headers: yield this.getRequestHeaders(),
            });
            return response.ok;
        });
    }
    rename(workspaceId, label) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseUri}/workspace/${workspaceId.toUpperCase()}`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `rename workspace -> ${url}`);
            return yield this.httpClient
                .post(url, {
                headers: yield this.getRequestHeaders(),
                body: JSON.stringify(label),
            })
                .value();
        });
    }
    getWorkspaceInfo(workspaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, vscs_utils_1.assertDefined)(workspaceId, 'Cannot get Live Share workspaceId');
            workspaceId = workspaceId.toUpperCase();
            const url = `${this.baseUri}/workspace/${workspaceId}`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `get workspace info -> ${url}`);
            return yield this.httpClient
                .get(url, {
                headers: yield this.getRequestHeaders(),
            })
                .value();
        });
    }
    getWorkspaceAccess(workspaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, vscs_utils_1.assertDefined)(workspaceId, 'Cannot get Live Share workspaceId');
            workspaceId = workspaceId.toUpperCase();
            const url = `${this.baseUri}/workspace/${workspaceId}/user`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `get workspace access -> ${url}`);
            return yield this.httpClient
                .put(url, {
                headers: yield this.getRequestHeaders(),
            })
                .value();
        });
    }
    postWorkspaceInfo(workspaceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseUri}/workspace`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `post workspace info -> ${url}`);
            return yield this.httpClient
                .post(url, {
                headers: yield this.getRequestHeaders(),
                body: JSON.stringify(workspaceInfo),
            })
                .value();
        });
    }
    createInvitationLink(invitationLinkInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseUri}/workspace/${invitationLinkInfo.workspaceId}/link`;
            const response = yield this.httpClient
                .put(url, {
                headers: yield this.getRequestHeaders(),
                body: JSON.stringify(invitationLinkInfo),
            })
                .value();
            return response;
        });
    }
    getWorkspaceUserProfile(workspaceId, userToken) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, vscs_utils_1.assertDefined)(workspaceId, 'Cannot get Live Share workspaceId');
            workspaceId = workspaceId.toUpperCase();
            const url = `${this.baseUri}/workspace/${workspaceId}/user`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `get workspace user profile -> ${url}`);
            const workspaceUserProfile = yield this.httpClient
                .get(url, {
                headers: Object.assign(Object.assign({}, (yield this.getRequestHeaders())), { 'User-Session-Token': userToken }),
            })
                .value();
            // The collaboration service's WorkspaceGetProfileResponse returns 'username'
            // vsls.WorkspaceUserProfile property has a different casing 'userName'
            if (workspaceUserProfile === null || workspaceUserProfile === void 0 ? void 0 : workspaceUserProfile.username) {
                workspaceUserProfile.userName = workspaceUserProfile.username;
            }
            return workspaceUserProfile;
        });
    }
    static createSshKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            const rsa = ssh.SshAlgorithms.publicKey.rsaWithSha512;
            const hostPrivateKey = yield rsa.generateKeyPair();
            const hostPublicKey = (yield hostPrivateKey.getPublicKeyBytes(hostPrivateKey.keyAlgorithmName)).toString('base64');
            return [hostPrivateKey, hostPublicKey];
        });
    }
    createSharedWorkspace(workspaceShareInfo) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const sshKeys = yield WorkspaceApi.createSshKeys();
            const workspacePayload = {
                name: workspaceShareInfo.name,
                connectionMode: (_a = workspaceShareInfo.connectionMode) !== null && _a !== void 0 ? _a : vsls_contracts_1.vsls.ConnectionMode.Relay,
                areAnonymousGuestsAllowed: workspaceShareInfo.areAnonymousGuestsAllowed,
                hostPublicKeys: [sshKeys[1]],
                connectLinks: workspaceShareInfo.connectLinks,
            };
            const workspaceInfo = yield this.postWorkspaceInfo(workspacePayload);
            return {
                workspaceInfo,
                hostPrivateKeys: [sshKeys[0]],
                getWorkspaceUserProfile: (userToken) => this.getWorkspaceUserProfile(workspaceInfo.id, userToken),
            };
        });
    }
    removeTrailingSlash(baseUri) {
        return baseUri.endsWith('/') ? baseUri.substr(0, baseUri.length - 1) : baseUri;
    }
}
exports.WorkspaceApi = WorkspaceApi;
//# sourceMappingURL=WorkspaceApi.js.map

/***/ }),

/***/ 70242:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceClientBase = void 0;
const rpc = __importStar(__webpack_require__(83730));
const vscs_utils_1 = __webpack_require__(19745);
const checkWorkspaceClient_1 = __webpack_require__(69829);
const vso_rpc_1 = __webpack_require__(79240);
/**
 * A base class to implement the IWorkspaceClient interface contract.
 */
class WorkspaceClientBase extends vscs_utils_1.DisposableClass {
    constructor(rcpClientInstance, logger) {
        super(logger);
        this.rcpClientInstance = rcpClientInstance;
        this.onHostConnectionChangedEmitter = new rpc.Emitter();
        this.onHostConnectionChanged = this.onHostConnectionChangedEmitter.event;
        this.onWorkspaceMetricsUpdatedEmitter = new rpc.Emitter();
        this.onWorkspaceMetricsUpdated = this.onWorkspaceMetricsUpdatedEmitter.event;
        this.rpcProxyCache = new vso_rpc_1.RpcProxyCache(this.rcpClientInstance, logger);
        this.addToDisposables((0, vscs_utils_1.createDisposable)(() => {
            this.stopCheckConnection('disposed');
        }));
    }
    get rpcClient() {
        return this.rcpClientInstance;
    }
    getServiceProxy(serviceInfo, traceName) {
        return this.rpcProxyCache.getOrCreate(serviceInfo, traceName);
    }
    setCheckConnectionOptions(options) {
        if (options.enabled && this.checkConnectionDisposable === undefined && !this.isDisposed) {
            this.ensureIsJoined();
            this.checkConnectionDisposable = (0, checkWorkspaceClient_1.checkWorkspaceClient)(this, this.trace, options.metricsTimeout, options.checkConnectionTimeout, () => this.canCheckConnection());
        }
        else if (!options.enabled) {
            this.stopCheckConnection('connection options');
        }
        return Promise.resolve();
    }
    ensureIsJoined() { }
    canCheckConnection() {
        return true;
    }
    stopCheckConnection(reason) {
        this.trace.info(`stopCheckConnection reason:'${reason}'`);
        if (this.checkConnectionDisposable !== undefined) {
            this.checkConnectionDisposable.dispose();
            this.checkConnectionDisposable = undefined;
        }
    }
}
exports.WorkspaceClientBase = WorkspaceClientBase;
//# sourceMappingURL=WorkspaceClientBase.js.map

/***/ }),

/***/ 11293:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.workspaceServiceClient = void 0;
exports.workspaceServiceClient = {
    name: 'workspaceServiceClient',
    methods: [
        'getSessionInfo',
        'join',
        'disconnect',
        'openStreamingChannel',
        'keepAlive',
        'checkConnection',
        'setCheckConnectionOptions',
    ],
    events: ['hostConnectionChanged', 'workspaceMetricsUpdated'],
};
//# sourceMappingURL=WorkspaceServiceClient.js.map

/***/ }),

/***/ 86526:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkConnectionWithTimeout = exports.failedtoCheckConnectionMessage = void 0;
const vscs_utils_1 = __webpack_require__(19745);
// timeout to wait to check to check the health of a connection
const defaultCheckConnectionTimeout = 10 * vscs_utils_1.TIME_SECOND_MS;
// message to log and throw if timeout is reached
exports.failedtoCheckConnectionMessage = 'failed to check connection';
const checkConnectionWithTimeoutMessage = 'checkConnectionWithTimeout';
/**
 * Check a workspace client by invoking the checkConnection method with a timeout
 * @returns false if the connection check failed or timeout.
 */
const checkConnectionWithTimeout = (workspaceClient, logger, checkConnectionTimeout, cancellationTokenSource) => __awaiter(void 0, void 0, void 0, function* () {
    const start = Date.now();
    const totalTime = () => {
        return (Date.now() - start).toFixed(1);
    };
    try {
        logger === null || logger === void 0 ? void 0 : logger.verbose(`${checkConnectionWithTimeoutMessage} -> 'started'`);
        yield (0, vscs_utils_1.timeoutPromise)(workspaceClient.checkConnection(), checkConnectionTimeout !== null && checkConnectionTimeout !== void 0 ? checkConnectionTimeout : defaultCheckConnectionTimeout, undefined, cancellationTokenSource);
        logger === null || logger === void 0 ? void 0 : logger.verbose(`${checkConnectionWithTimeoutMessage} -> 'succeeded' t:${totalTime()}`);
        return true;
    }
    catch (err) {
        if (err instanceof vscs_utils_1.CancellationError) {
            logger === null || logger === void 0 ? void 0 : logger.verbose(`${checkConnectionWithTimeoutMessage} -> 'cancelled' t:${totalTime()}`);
            return true;
        }
        logger === null || logger === void 0 ? void 0 : logger.error(`${checkConnectionWithTimeoutMessage} -> 'failed' t:${totalTime()}`, err);
        return false;
    }
});
exports.checkConnectionWithTimeout = checkConnectionWithTimeout;
//# sourceMappingURL=checkConnectionWithTimeout.js.map

/***/ }),

/***/ 69829:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkWorkspaceClient = void 0;
const vscs_utils_1 = __webpack_require__(19745);
const checkConnectionWithTimeout_1 = __webpack_require__(86526);
const vscode_jsonrpc_1 = __webpack_require__(83730);
// timeout to wait on workspace metrics
const defaultTimeout = 5 * vscs_utils_1.TIME_SECOND_MS;
let session = 0;
/**
 * Check if a liveshare connection is healthy by checking the connection when
 * the metrics event is not received in a period of time.
 * @returns A disposable instance if we want to stop the health check.
 */
function checkWorkspaceClient(workspaceClient, logger, metricsTimeout, checkConnectionTimeout, isCheckConnectionEnabled) {
    metricsTimeout = metricsTimeout !== null && metricsTimeout !== void 0 ? metricsTimeout : defaultTimeout;
    logger = logger.createChild(`${++session}`);
    logger.info(`Start checking connection timeout:${metricsTimeout}`);
    let timeoutReference;
    const setTimeoutMetrics = () => {
        timeoutReference = setTimeout(onWorkspaceMetricsTimeout, metricsTimeout);
    };
    const clearTimeoutMetrics = () => {
        clearTimeout(timeoutReference);
    };
    let isChecking = false;
    const cts = new vscode_jsonrpc_1.CancellationTokenSource();
    const isDisposed = () => {
        return cts.token.isCancellationRequested;
    };
    const onWorkspaceMetricsTimeout = () => __awaiter(this, void 0, void 0, function* () {
        if (isDisposed()) {
            return;
        }
        isChecking = true;
        if ((!isCheckConnectionEnabled || isCheckConnectionEnabled()) &&
            !(yield (0, checkConnectionWithTimeout_1.checkConnectionWithTimeout)(workspaceClient, logger, checkConnectionTimeout, cts))) {
            logger.info(`Failed check -> isDisposed:${isDisposed()}`);
            onMetricsDisposable === null || onMetricsDisposable === void 0 ? void 0 : onMetricsDisposable.dispose();
            if (!isDisposed()) {
                workspaceClient.dispose(checkConnectionWithTimeout_1.failedtoCheckConnectionMessage);
            }
        }
        else {
            setTimeoutMetrics();
        }
        isChecking = false;
    });
    workspaceClient.rpcClient.onDispose(() => {
        clearTimeoutMetrics();
    });
    const onMetricsDisposable = workspaceClient.onWorkspaceMetricsUpdated((e) => {
        clearTimeoutMetrics();
        if (!isChecking) {
            setTimeoutMetrics();
        }
    });
    // kick first metrics timeout
    setTimeoutMetrics();
    return {
        dispose: () => {
            logger.info(`Stop checking connection`);
            cts.cancel();
            onMetricsDisposable === null || onMetricsDisposable === void 0 ? void 0 : onMetricsDisposable.dispose();
        },
    };
}
exports.checkWorkspaceClient = checkWorkspaceClient;
//# sourceMappingURL=checkWorkspaceClient.js.map

/***/ }),

/***/ 91714:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceClientBase = exports.ConnectedState = void 0;
var ConnectedState_1 = __webpack_require__(20560);
Object.defineProperty(exports, "ConnectedState", ({ enumerable: true, get: function () { return ConnectedState_1.ConnectedState; } }));
__exportStar(__webpack_require__(85094), exports);
__exportStar(__webpack_require__(34769), exports);
__exportStar(__webpack_require__(98890), exports);
__exportStar(__webpack_require__(5034), exports);
__exportStar(__webpack_require__(11293), exports);
__exportStar(__webpack_require__(76072), exports);
__exportStar(__webpack_require__(63722), exports);
__exportStar(__webpack_require__(14835), exports);
__exportStar(__webpack_require__(86526), exports);
__exportStar(__webpack_require__(69829), exports);
var WorkspaceClientBase_1 = __webpack_require__(70242);
Object.defineProperty(exports, "WorkspaceClientBase", ({ enumerable: true, get: function () { return WorkspaceClientBase_1.WorkspaceClientBase; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 14835:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TelemetryPropertyNames = exports.TelemetryEventNames = void 0;
class TelemetryEventNames {
}
exports.TelemetryEventNames = TelemetryEventNames;
TelemetryEventNames.WORKSPACE_RECONNECT = 'workspace-reconnect';
class TelemetryPropertyNames {
}
exports.TelemetryPropertyNames = TelemetryPropertyNames;
TelemetryPropertyNames.RECONNECT_SUCCEEDED = 'reconnect-succeeded';
TelemetryPropertyNames.RECONNECT_ELAPSED = 'reconnect-elapsed';
TelemetryPropertyNames.RECONNECT_RETRY_COUNT = 'reconnect-retry-count';
TelemetryPropertyNames.RECONNECT_ERROR_MESSAGE = 'reconnect-error-message';
TelemetryPropertyNames.RECONNECT_ERROR_REASON = 'reconnect-error-reason';
//# sourceMappingURL=telemetryStrings.js.map

/***/ }),

/***/ 89496:
/***/ ((module) => {

"use strict";
module.exports = require("vscode");

/***/ }),

/***/ 99110:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 12646:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 87556:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 83040:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 48738:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 45545:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 46047:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 54079:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 516:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 6286:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 18288:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 59358:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 75952:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 29552:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 42782:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 73927:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 77702:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 9392:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 77135:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 69088:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 7819:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 40973:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};


/***/ }),

/***/ 24386:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;


var _interopRequireDefault = __webpack_require__(7914);

__webpack_unused_export__ = ({
  value: true
});
__webpack_unused_export__ = isNetworkError;
__webpack_unused_export__ = isRetryableError;
__webpack_unused_export__ = isSafeRequestError;
__webpack_unused_export__ = isIdempotentRequestError;
__webpack_unused_export__ = isNetworkOrIdempotentRequestError;
__webpack_unused_export__ = exponentialDelay;
exports.ZP = axiosRetry;

var _regenerator = _interopRequireDefault(__webpack_require__(57135));

var _typeof2 = _interopRequireDefault(__webpack_require__(11873));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(11504));

var _defineProperty2 = _interopRequireDefault(__webpack_require__(65526));

var _isRetryAllowed = _interopRequireDefault(__webpack_require__(23329));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var namespace = 'axios-retry';
/**
 * @param  {Error}  error
 * @return {boolean}
 */

function isNetworkError(error) {
  return !error.response && Boolean(error.code) && // Prevents retrying cancelled requests
  error.code !== 'ECONNABORTED' && // Prevents retrying timed out requests
  (0, _isRetryAllowed.default)(error); // Prevents retrying unsafe errors
}

var SAFE_HTTP_METHODS = ['get', 'head', 'options'];
var IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);
/**
 * @param  {Error}  error
 * @return {boolean}
 */

function isRetryableError(error) {
  return error.code !== 'ECONNABORTED' && (!error.response || error.response.status >= 500 && error.response.status <= 599);
}
/**
 * @param  {Error}  error
 * @return {boolean}
 */


function isSafeRequestError(error) {
  if (!error.config) {
    // Cannot determine if the request can be retried
    return false;
  }

  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;
}
/**
 * @param  {Error}  error
 * @return {boolean}
 */


function isIdempotentRequestError(error) {
  if (!error.config) {
    // Cannot determine if the request can be retried
    return false;
  }

  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;
}
/**
 * @param  {Error}  error
 * @return {boolean}
 */


function isNetworkOrIdempotentRequestError(error) {
  return isNetworkError(error) || isIdempotentRequestError(error);
}
/**
 * @return {number} - delay in milliseconds, always 0
 */


function noDelay() {
  return 0;
}
/**
 * @param  {number} [retryNumber=0]
 * @return {number} - delay in milliseconds
 */


function exponentialDelay() {
  var retryNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var delay = Math.pow(2, retryNumber) * 100;
  var randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay

  return delay + randomSum;
}
/**
 * Initializes and returns the retry state for the given request/config
 * @param  {AxiosRequestConfig} config
 * @return {Object}
 */


function getCurrentState(config) {
  var currentState = config[namespace] || {};
  currentState.retryCount = currentState.retryCount || 0;
  config[namespace] = currentState;
  return currentState;
}
/**
 * Returns the axios-retry options for the current request
 * @param  {AxiosRequestConfig} config
 * @param  {AxiosRetryConfig} defaultOptions
 * @return {AxiosRetryConfig}
 */


function getRequestOptions(config, defaultOptions) {
  return _objectSpread(_objectSpread({}, defaultOptions), config[namespace]);
}
/**
 * @param  {Axios} axios
 * @param  {AxiosRequestConfig} config
 */


function fixConfig(axios, config) {
  if (axios.defaults.agent === config.agent) {
    delete config.agent;
  }

  if (axios.defaults.httpAgent === config.httpAgent) {
    delete config.httpAgent;
  }

  if (axios.defaults.httpsAgent === config.httpsAgent) {
    delete config.httpsAgent;
  }
}
/**
 * Checks retryCondition if request can be retried. Handles it's retruning value or Promise.
 * @param  {number} retries
 * @param  {Function} retryCondition
 * @param  {Object} currentState
 * @param  {Error} error
 * @return {boolean}
 */


function shouldRetry(_x, _x2, _x3, _x4) {
  return _shouldRetry.apply(this, arguments);
}
/**
 * Adds response interceptors to an axios instance to retry requests failed due to network issues
 *
 * @example
 *
 * import axios from 'axios';
 *
 * axiosRetry(axios, { retries: 3 });
 *
 * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'
 *   .then(result => {
 *     result.data; // 'ok'
 *   });
 *
 * // Exponential back-off retry delay between requests
 * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});
 *
 * // Custom retry delay
 * axiosRetry(axios, { retryDelay : (retryCount) => {
 *   return retryCount * 1000;
 * }});
 *
 * // Also works with custom axios instances
 * const client = axios.create({ baseURL: 'http://example.com' });
 * axiosRetry(client, { retries: 3 });
 *
 * client.get('/test') // The first request fails and the second returns 'ok'
 *   .then(result => {
 *     result.data; // 'ok'
 *   });
 *
 * // Allows request-specific configuration
 * client
 *   .get('/test', {
 *     'axios-retry': {
 *       retries: 0
 *     }
 *   })
 *   .catch(error => { // The first request fails
 *     error !== undefined
 *   });
 *
 * @param {Axios} axios An axios instance (the axios object or one created from axios.create)
 * @param {Object} [defaultOptions]
 * @param {number} [defaultOptions.retries=3] Number of retries
 * @param {boolean} [defaultOptions.shouldResetTimeout=false]
 *        Defines if the timeout should be reset between retries
 * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]
 *        A function to determine if the error can be retried
 * @param {Function} [defaultOptions.retryDelay=noDelay]
 *        A function to determine the delay between retry requests
 */


function _shouldRetry() {
  _shouldRetry = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(retries, retryCondition, currentState, error) {
    var shouldRetryOrPromise, shouldRetryPromiseResult;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error); // This could be a promise

            if (!((0, _typeof2.default)(shouldRetryOrPromise) === 'object')) {
              _context2.next = 12;
              break;
            }

            _context2.prev = 2;
            _context2.next = 5;
            return shouldRetryOrPromise;

          case 5:
            shouldRetryPromiseResult = _context2.sent;
            return _context2.abrupt("return", shouldRetryPromiseResult !== false);

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2["catch"](2);
            return _context2.abrupt("return", false);

          case 12:
            return _context2.abrupt("return", shouldRetryOrPromise);

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[2, 9]]);
  }));
  return _shouldRetry.apply(this, arguments);
}

function axiosRetry(axios, defaultOptions) {
  axios.interceptors.request.use(function (config) {
    var currentState = getCurrentState(config);
    currentState.lastRequestTime = Date.now();
    return config;
  });
  axios.interceptors.response.use(null, /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(error) {
      var config, _getRequestOptions, _getRequestOptions$re, retries, _getRequestOptions$re2, retryCondition, _getRequestOptions$re3, retryDelay, _getRequestOptions$sh, shouldResetTimeout, currentState, delay, lastRequestDuration;

      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              config = error.config; // If we have no information to retry the request

              if (config) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return", Promise.reject(error));

            case 3:
              _getRequestOptions = getRequestOptions(config, defaultOptions), _getRequestOptions$re = _getRequestOptions.retries, retries = _getRequestOptions$re === void 0 ? 3 : _getRequestOptions$re, _getRequestOptions$re2 = _getRequestOptions.retryCondition, retryCondition = _getRequestOptions$re2 === void 0 ? isNetworkOrIdempotentRequestError : _getRequestOptions$re2, _getRequestOptions$re3 = _getRequestOptions.retryDelay, retryDelay = _getRequestOptions$re3 === void 0 ? noDelay : _getRequestOptions$re3, _getRequestOptions$sh = _getRequestOptions.shouldResetTimeout, shouldResetTimeout = _getRequestOptions$sh === void 0 ? false : _getRequestOptions$sh;
              currentState = getCurrentState(config);
              _context.next = 7;
              return shouldRetry(retries, retryCondition, currentState, error);

            case 7:
              if (!_context.sent) {
                _context.next = 14;
                break;
              }

              currentState.retryCount += 1;
              delay = retryDelay(currentState.retryCount, error); // Axios fails merging this configuration to the default configuration because it has an issue
              // with circular structures: https://github.com/mzabriskie/axios/issues/370

              fixConfig(axios, config);

              if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {
                lastRequestDuration = Date.now() - currentState.lastRequestTime; // Minimum 1ms timeout (passing 0 or less to XHR means no timeout)

                config.timeout = Math.max(config.timeout - lastRequestDuration - delay, 1);
              }

              config.transformRequest = [function (data) {
                return data;
              }];
              return _context.abrupt("return", new Promise(function (resolve) {
                return setTimeout(function () {
                  return resolve(axios(config));
                }, delay);
              }));

            case 14:
              return _context.abrupt("return", Promise.reject(error));

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x5) {
      return _ref.apply(this, arguments);
    };
  }());
} // Compatibility with CommonJS


axiosRetry.isNetworkError = isNetworkError;
axiosRetry.isSafeRequestError = isSafeRequestError;
axiosRetry.isIdempotentRequestError = isIdempotentRequestError;
axiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
axiosRetry.exponentialDelay = exponentialDelay;
axiosRetry.isRetryableError = isRetryableError;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 48828:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(68750);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ 96620:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"addNewEnvironment":"Create New Codespace","cancelOryxBuild":"Cancel Oryx Build","changeMachineType":"Change Machine Type","connectEnvironment":"Connect to Codespace","createDevContainer":"Add Development Container Configuration Files...","deleteEnvironment":"Delete Codespace","disconnect":"Disconnect","documentationLink":"Documentation Link","exportLogs":"Export Logs","feedbackLink":"Feedback Link","sendFeedback":"Send Feedback","forkRepository":"Fork Repository","getStartedLink":"Get Started Link","goHome":"Go Home","issuesLink":"Issues Link","manageUserSecrets":"Manage User Secrets","reportIssue":"Report Issue","openInInsiders":"Open in VS Code Insiders","openInBrowser":"Open in Browser","openInNewWindow":"Open Codespace in New Window","openInStable":"Open in VS Code","portForwarder":"Forward Port","rebuildEnvironment":"Rebuild Container","shutdownEnvironment":"Stop Codespace","signIn":"Sign In","signOut":"Sign Out","openExtension":"Open Extension","unshare":"Stop Forwarding Port","viewCreationLog":"View Creation Log","exportEnvironment":"Export codespace"}');

/***/ }),

/***/ 33121:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"@vs/vs-ssh","version":"3.6.4","description":"SSH library for Visual Studio tools","keywords":["SSH"],"dependencies":{"buffer":"^5.2.1","debug":"^4.1.1","diffie-hellman":"^5.0.3","vscode-jsonrpc":"^4.0.0"},"author":"Microsoft","main":"./index.js"}');

/***/ }),

/***/ 87064:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');

/***/ }),

/***/ 35232:
/***/ ((module) => {

"use strict";
module.exports = {"version":"1.0.34"};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/* provided dependency */ var process = __webpack_require__(27061);

// DO NOT REMOVE OR CHANGE THIS LINE - inject-module-alias in gulpfile.js replaces it by contents of moduleAliasInject.js in local debugging
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deactivate = exports.activate = void 0;
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(52730);
__webpack_require__(86763);
const vscode_command_framework_1 = __webpack_require__(89813);
const vso_telemetry_1 = __webpack_require__(76811);
const Commands_1 = __webpack_require__(74315);
const resolver_1 = __webpack_require__(2448);
const telemetryLogging_1 = __webpack_require__(99387);
const utils_1 = __webpack_require__(89983);
const vso_logging_1 = __webpack_require__(98287);
const vscs_utils_1 = __webpack_require__(19745);
const OpenTelemetryProvider_1 = __webpack_require__(34396);
const ActivationTasks_1 = __webpack_require__(98750);
const configuration_1 = __webpack_require__(25828);
const commandConstants_1 = __webpack_require__(94218);
const dependencies_1 = __webpack_require__(35477);
const commandContext_1 = __webpack_require__(15071);
const CodespaceDetailsProvider_1 = __webpack_require__(36713);
const protocolHandler_1 = __webpack_require__(84292);
const telemetryString_1 = __webpack_require__(91257);
const CloudEnvViews_1 = __webpack_require__(44214);
const EnvironmentDetailsExplorer_1 = __webpack_require__(47665);
const EnvironmentExplorer_1 = __webpack_require__(16577);
const EnvironmentPolling_1 = __webpack_require__(7821);
const commandEnablement_1 = __webpack_require__(7752);
const getLiveShareRelayTunnelClient_1 = __webpack_require__(53404);
const EnvironmentPerformanceExplorer_1 = __webpack_require__(53388);
const IConfigurationManager_1 = __webpack_require__(51850);
const telemetryContext_1 = __webpack_require__(51517);
const performance_1 = __webpack_require__(87329);
const ExperimentationService_1 = __webpack_require__(92710);
const ChaosMonkey_1 = __webpack_require__(26016);
const extensionEventListeners_1 = __webpack_require__(77337);
const IExtensionSupportManager_1 = __webpack_require__(43443);
nls.config({
    locale: vscode.env.language,
    messageFormat: nls.MessageFormat.both,
    bundleFormat: nls.BundleFormat.standalone,
});
const localize = nls.loadMessageBundle();
let codespaceConnected = false;
const extensionName = 'GitHub.codespaces';
async function activate(context) {
    const extension = vscode.extensions.getExtension(extensionName);
    (0, vscs_utils_1.assertDefined)(extension, 'No reference to extension package.json found.');
    const { packageJSON } = extension;
    await vscode_command_framework_1.vslsCommands.initialize({
        extensionPackage: packageJSON,
        extensionContext: context,
        telemetry: {
            featureName: 'codespaces.',
            canSendSensistiveInformation: false,
        },
        logging: {
            logFileEnabled: true,
            outputChannelName: 'GitHub Codespaces',
            diagnosticsLogging: {
                enable: true,
                focus: false,
            },
            logMaxSize: 1024,
            obfuscateProperties: {
                owner: vso_logging_1.LogValueType.Text,
                owner_login: vso_logging_1.LogValueType.Text,
                owner_display_name: vso_logging_1.LogValueType.Text,
                userName: vso_logging_1.LogValueType.Text,
                userEmail: vso_logging_1.LogValueType.Email,
                billable_owner_login: vso_logging_1.LogValueType.Text,
                billable_owner_display_name: vso_logging_1.LogValueType.Text,
                repository_owner: vso_logging_1.LogValueType.Text,
                relaySas: vso_logging_1.LogValueType.Text,
                branch: vso_logging_1.LogValueType.Text,
                repository_name: vso_logging_1.LogValueType.Text,
                friendlyName: vso_logging_1.LogValueType.Text,
            },
        },
    });
    dependencies_1.dependencies.extensionsUtil.setExtensionContext(context);
    await (0, ExperimentationService_1.initAsync)(extensionName, packageJSON.version, context, dependencies_1.dependencies);
    const { configurationManager } = dependencies_1.dependencies;
    const { isRunningInWeb } = configurationManager;
    vscode_command_framework_1.traceSource.info(`isRunningInWeb: "${isRunningInWeb}"`);
    // Execute the portal command to measure the time it took to render the workbench.
    // Not currently implemented for serverless.
    if (isRunningInWeb && !utils_1.isRunningInWebWorker) {
        vscode.commands.executeCommand("_codespaces.timeToInteractive" /* codespacesTimeToInteractive */).then(() => { }, (reason) => {
            vscode_command_framework_1.traceSource.warning('Web command time-to-interactive is not registered');
        });
    }
    const codespaceName = (0, configuration_1.getInternalConfig)('codespaceName');
    vscode_command_framework_1.traceSource.verbose('Initializing authentication');
    await dependencies_1.dependencies.getApiProvider().init();
    const extensionSupportStatus = dependencies_1.dependencies.extensionSupportManager
        .getExtensionSupportStatus()
        .then(async (result) => {
        await (0, commandContext_1.setCommandContext)(`${"codespaces:views-welcome:" /* ViewsWelcome */}${'version-notification'}`, result);
        return result;
    });
    CodespaceDetailsProvider_1.CodespaceDetailsProvider.init(dependencies_1.dependencies);
    EnvironmentPolling_1.EnvironmentPolling.Instance.init(dependencies_1.dependencies);
    // initialize telemetry context
    await (0, telemetryLogging_1.setupTelemetryLogging)();
    telemetryContext_1.TelemetryContext.initialize(dependencies_1.dependencies, context, packageJSON);
    const resolver = (0, resolver_1.registerResolver)(context, packageJSON);
    ActivationTasks_1.ActivationTasks.init(context.globalStoragePath, dependencies_1.dependencies);
    // whether the current user considered internal or not
    const isInternalUser = dependencies_1.dependencies.extensionsUtil.getIsInternalUser();
    // whether extension was build locally or inside a CI pipeline, see https://github.com/github/codespaces/issues/5756
    const isLocalBuild = process.env.CODESPACES_IS_LOCAL_BUILD === 'true';
    // depends on the webpack `mode` config value(e.g. "production", "development" or "none")
    const nodeEnv = "production";
    vso_telemetry_1.Telemetry.addContextProperties({
        [telemetryString_1.TelemetryCommonPropertyNames.IS_INTERNAL]: isInternalUser,
        [telemetryString_1.TelemetryCommonPropertyNames.IS_LOCAL_BUILD]: isLocalBuild,
        [telemetryString_1.TelemetryCommonPropertyNames.NODE_ENVIRONMENT]: nodeEnv,
    });
    await (0, ChaosMonkey_1.initChaosMonkey)(vscode_command_framework_1.traceSource, isInternalUser);
    // External users should not see the "isInternal" log line or other internal-only diagnostic info
    if (isInternalUser) {
        vscode_command_framework_1.traceSource.info(`Extension activating ${JSON.stringify({
            nodeEnv,
            isLocalBuild,
            isRunningInWeb,
            isInternal: isInternalUser,
            codespace: codespaceName,
        })}`);
    }
    let environmentsTreeView;
    if (!((0, commandContext_1.getCommandContext)("codespaces:connectionState" /* ConnectionState */) === commandConstants_1.ConnectionState.Connected) &&
        (await extensionSupportStatus) !== IExtensionSupportManager_1.ExtensionSupportStatus.Unsupported) {
        const environmentsExplorer = new EnvironmentExplorer_1.EnvironmentExplorer(dependencies_1.dependencies);
        environmentsTreeView = vscode.window.createTreeView(CloudEnvViews_1.View.Environments, {
            treeDataProvider: environmentsExplorer,
        });
        environmentsTreeView.onDidChangeVisibility(async (event) => {
            if (event.visible) {
                // The tree view just became visible. Refresh the codespaces list in case it was stale.
                // TODO: Refresh in the background on some interval even if the visibility doesn't change.
                await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.updateCodespacesDetails();
            }
        });
        context.subscriptions.push(environmentsTreeView);
    }
    CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.onCodespacesChanged(async () => {
        if (CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace() &&
            codespaceConnected === false) {
            await environmentsTreeView.dispose();
            const environmentsDetailsExplorer = new EnvironmentDetailsExplorer_1.EnvironmentDetailsExplorer();
            environmentsTreeView = vscode.window.createTreeView(CloudEnvViews_1.View.Environments, {
                treeDataProvider: environmentsDetailsExplorer,
            });
            context.subscriptions.push(environmentsTreeView);
            codespaceConnected = true;
        }
    });
    const perfExplorer = EnvironmentPerformanceExplorer_1.EnvironmentPerformanceExplorer.Instance;
    perfExplorer.setContext(context);
    const perfExplorerTreeView = vscode.window.createTreeView(CloudEnvViews_1.View.EnvironmentPerformance, {
        treeDataProvider: perfExplorer,
    });
    perfExplorer.setTreeView(perfExplorerTreeView);
    const performanceExplorerEnabled = configurationManager.getConfigValue(IConfigurationManager_1.ConfigurationKey.showPerformanceExplorer);
    // open performance treeview if user had it open before last extension deactivation
    await (0, commandContext_1.setCommandContext)("codespaces:performance-explorer-enabled" /* IsPerformanceExplorerEnabled */, performanceExplorerEnabled);
    // set listener for changes to the configuration for showing the performance window
    configurationManager.onDidChangeConfigValue(IConfigurationManager_1.ConfigurationKey.showPerformanceExplorer)(async (value) => {
        await (0, commandContext_1.setCommandContext)("codespaces:performance-explorer-enabled" /* IsPerformanceExplorerEnabled */, value);
    });
    // set listener for changes to teleetry flag
    configurationManager.onDidChangeConfigValue(IConfigurationManager_1.ConfigurationKey.telemetryLevel, IConfigurationManager_1.ConfigurationKey.telemetry)(async (newTelemetryLevel) => {
        return await (0, extensionEventListeners_1.updateTelemetryFlag)(dependencies_1.dependencies.getApiProvider().environments, newTelemetryLevel);
    });
    // set listener for changes to the vscode context for showing the performance window
    (0, commandContext_1.onCommandContextChanged)(({ key }) => {
        if (key.startsWith("codespaces:performance-explorer-enabled" /* IsPerformanceExplorerEnabled */)) {
            const perfTreeItem = perfExplorer.getFirstTreeItem();
            // Open remote explorer if it isn't open
            if (!perfExplorerTreeView.visible) {
                perfExplorerTreeView.reveal(perfTreeItem, { select: false, focus: false });
            }
        }
    });
    await (0, Commands_1.registerCommands)(context);
    context.subscriptions.push(vscode.window.registerUriHandler(new protocolHandler_1.CodespacesProtocolHandler(dependencies_1.dependencies)));
    await (0, commandContext_1.setCommandContext)("codespaces:running-in-web" /* IsRunningInWeb */, isRunningInWeb);
    // If we are not running in the webworker, we are inside a codespace - so connect to it.
    if (isRunningInWeb && !utils_1.isRunningInWebWorker) {
        vscode_command_framework_1.traceSource.info(`Connecting to current codespace: ${codespaceName}`);
        vscode.commands.executeCommand("github.codespaces.connect" /* connect */, {
            name: codespaceName,
            initialConnectionToCurrentEnvironment: true,
            resolver,
        });
    }
    await (0, commandEnablement_1.setupCommandEnablement)(dependencies_1.dependencies);
    // Executing the long running tasks in the background
    ActivationTasks_1.ActivationTasks.Instance.runTasks().catch((e) => {
        vscode_command_framework_1.traceSource.error(e);
    });
    // What's New toast
    await showWhatsNewInfo(context);
    // Verbose logs for perf events
    const perfLogger = vscode_command_framework_1.traceSource.withName('perf');
    performance_1.performance.onAnyEvent((e) => {
        if (e.type === 'end') {
            perfLogger.verbose(`name:${e.name} duration:${e.measure.duration}`);
        }
    });
    /* Activation event */
    const telemetryEvent = new vso_telemetry_1.TelemetryEvent(telemetryString_1.TelemetryEventNames.EXTENSION_ACTIVATION);
    telemetryEvent.addProperty(telemetryString_1.TelemetryPropertyNames.PERFORMANCE_EXPLORER_ENABLED, performanceExplorerEnabled);
    OpenTelemetryProvider_1.OpenTelemetryProvider.init(context);
    telemetryEvent.send();
    context.subscriptions.push((0, getLiveShareRelayTunnelClient_1.getLiveShareRelayTunnelClient)());
}
exports.activate = activate;
async function showWhatsNewInfo(context) {
    const mementoKey = 'whats-new-url';
    const previousUrl = context.globalState.get(mementoKey);
    const currentUrl = '';
    if (currentUrl && currentUrl !== previousUrl) {
        await context.globalState.update(mementoKey, currentUrl);
        let clicked = await vscode.window.showInformationMessage(localize('message.whatsNew.text', 'GitHub Codespaces updated!'), localize('message.whatsNew.action', 'More info'));
        const whatsNewTelemetryEvent = new vso_telemetry_1.TelemetryEvent(telemetryString_1.TelemetryEventNames.SHOW_WHATS_NEW_INFO);
        whatsNewTelemetryEvent.addProperty(telemetryString_1.TelemetryPropertyNames.MORE_INFO_CLICKED, clicked ? true : false);
        if (clicked) {
            const uri = vscode.Uri.parse(currentUrl);
            const opened = await vscode.env.openExternal(uri);
            whatsNewTelemetryEvent.addProperty(telemetryString_1.TelemetryPropertyNames.BROWSER_OPENED_SUCCESS, opened);
        }
        whatsNewTelemetryEvent.send();
    }
}
async function deactivate() {
    await vso_telemetry_1.Telemetry.dispose();
}
exports.deactivate = deactivate;

})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=extension-web.js.map